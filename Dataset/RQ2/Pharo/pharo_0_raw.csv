stratum,class,comment,Intent,Responsibilities,Collaborators,Keymessages,Keyimplementationpoints,Instancevariables,ReferenceToOtherResources,SubclassesExplanation,Classreferences,Example,Todocomments,Codingguidlines,Warnings,Discourse,Links,Extensions,Recommendations,Observations,Preconditions,Dependencies,License/copyright,Other
1,BlAnchorRelativeToElement,Relative anchor takes an arbitrary element as a reference an compute its position based on properties of that element.,,Relative anchor takes an arbitrary element as a reference an compute its position based on properties of that element.,,,,,,,,,,,,,,,,,,,,
1,BlArrowheadExamples,I contain examples of different types of ==BlArrowheadElement==,,I contain examples of different types of ==BlArrowheadElement==,,,,,,,BlArrowheadElement,,,,,,,,,,,,,
1,BlArrowheadSimpleArrow,"I am a simple arrow-like arrowhead.
Both my size and arrow length depend on the curve width.

It is possible hovewer to customize a length fraction - how long should be the outer ""arrow"" compared to the length of the side of a nose triangle.

Users can also customise nose angle that tells how wide should the arrow lines be spread.
The with of the outer arrows can be specified by changing border width of a simple arrow arrowhead.

I support both background and border paint and can have hollow inner triangle.","I am a simple arrow-like arrowhead.
Both my size and arrow length depend on the curve width.","I support both background and border paint and can have hollow inner triangle. 
The with of the outer arrows can be specified by changing border width of a simple arrow arrowhead.",,"It is possible hovewer to customize a length fraction - how long should be the outer ""arrow"" compared to the length of the side of a nose triangle.",,,,,,Users can also customise nose angle that tells how wide should the arrow lines be spread.,,,,,,,,,,,,
1,BlArrowheadTriangle,"I am a triangular arrow head.
My size depends on the width of a curve and hence can not be manually specified.

It is possible to have a border around triangle by specifying a border width of a triangle arrowhead.

I support background and border paints.
 - For hollow arrowhead let background be transparent.
 - For solid arrowhead make background paint be the same as border paint.
         (it is possible to specify different paints for border and background)",I am a triangular arrow head.,"My size depends on the width of a curve and hence can not be manually specified.
 I support background and border paints.
 - For hollow arrowhead let background be transparent.
 - For solid arrowhead make background paint be the same as border paint.
         (it is possible to specify different paints for border and background)",,,It is possible to have a border around triangle by specifying a border width of a triangle arrowhead.,,,,,,,,,,,,,,,,,
1,BlChicken,"How to run:


==BlChicken open==",,,,,,,,,,"How to run:


==BlChicken open==",,,,,,,,,,,,
1,BlChickenLeg,I am a single red chicken leg with two toes,I am a single red chicken leg with two toes,,,,,,,,,,,,,,,,,,,,,
1,BlChildrenCollection,"I am an abstract collection of bloc elements that can be mutated. I am used by a ${class:BlElement}$ to store its children.

I provide a data structure independent API for adding and removing children. I assume an index-based way of working with children. My subclasses wrap concrete data structures for storing the actual children. Bloc elements work with children only in terms of the API that I provide. Hence, I only provide a minimum API needed to work with children, instead of the full collection API.

I allow elements to optimize working with children for different scenarious. For example, an array for storing children optimises for accessing fast accesses at any position. A linked list optimize for fast adding and removing. A rope uses a balanced binary tree to support fast adding, removing and accessing, with the disadvantage of taking more memory.

!!API

The following subclasses can be used to store children: 
- ${class:BlChildrenArray}$: stores children using an ${class:Array}$ 
- ${class:BlChildrenLinkedList}$: stores children using a ${class:LinkedList}$  
- ${class:BlChildrenOrderedCollection}$: stores children using a ${class:OrderedCollection}$
- ${class:BlChildrenRope}$: stores children using a ${class:BlCollectionRope}$

Subclasses need to provide the implementation for methods adding and removing children.","""I am an abstract collection of bloc elements that can be mutated.","I provide a data structure independent API for adding and removing children. I assume an index-based way of working with children. 

I allow elements to optimize working with children for different scenarious. For example, an array for storing children optimises for accessing fast accesses at any position. A linked list optimize for fast adding and removing. A rope uses a balanced binary tree to support fast adding, removing and accessing, with the disadvantage of taking more memory.",I am used by a ${class:BlElement}$ to store its children.,,,,,"My subclasses wrap concrete data structures for storing the actual children. Bloc elements work with children only in terms of the API that I provide. Hence, I only provide a minimum API needed to work with children, instead of the full collection API.

Subclasses need to provide the implementation for methods adding and removing children."" 
!!API

The following subclasses can be used to store children: 
- ${class:BlChildrenArray}$: stores children using an ${class:Array}$ 
- ${class:BlChildrenLinkedList}$: stores children using a ${class:LinkedList}$  
- ${class:BlChildrenOrderedCollection}$: stores children using a ${class:OrderedCollection}$
- ${class:BlChildrenRope}$: stores children using a ${class:BlCollectionRope}$","${class:BlElement}$
${class:BlChildrenArray}$
${class:Array}$ 
${class:BlChildrenLinkedList}$
${class:LinkedList}$
${class:BlChildrenOrderedCollection}$
${class:OrderedCollection}$
${class:BlChildrenRope}$
${class:BlCollectionRope}$",,,,,,,,,,,,,
1,BlChildrenOrderedCollectionExamples,"I define examples for the class ${class:BlChildrenOrderedCollection}$.

Instances of ${class:BlChildrenOrderedCollection}$ are created by directly instatiating the class.
${example:BlChildrenOrderedCollectionExamples>>#emptyChildrenExplicitCreation}$

Bloc elements can then be added and removed from the collection.
${example:BlChildrenOrderedCollectionExamples>>#add}$

${example:BlChildrenOrderedCollectionExamples>>#remove}$",,I define examples for the class ${class:BlChildrenOrderedCollection}$.,,,,"Instances of ${class:BlChildrenOrderedCollection}$ are created by directly instatiating the class.
${example:BlChildrenOrderedCollectionExamples>>#emptyChildrenExplicitCreation}$",,,,"Bloc elements can then be added and removed from the collection
Bloc elements can then be added and removed from the collection.
${example:BlChildrenOrderedCollectionExamples>>#add}$

${example:BlChildrenOrderedCollectionExamples>>#remove}$",,,,,,,,,,,,
1,BlChildrenSubset,"I capture a subset of children from a ${class:BlElement}$ instance.

I am an abstract class. My subclasses define the actual order and criteria for filtering children and iterating over the set of children.
I exist to explicitly capture and combine various ways of filtering and iterating over children. For example, ${class:BlChildrenReversed}$ indicates that the user wants to explicitly iterate over elements in reverse order; ${class:BlChildrenAccountedByLayout}$ indicates that only should children taken into account by layout should be included. 
The example below shows a scenario of combining multiple ways to iterate over children. By having an explicit object for each operation, the composition of operations can be inspected.
${example:BlChildrenSubsetExamples>>#childrenWithMultipleCombinedSubsets}$

I do not enforce a lazy API. Subclasses can perform the filtering immediately or when iteration over children is required. I aim to maintain the composition of subsets while optimizing for speed whenever possible.

!!API
Instances of me are created by calling the factory method ${method:BlChildrenSubset class>>#on:}$ on a subclass with an instance of ${class:BlChildren}$ as parameter.

Subclasses need to override the method ${method:BlChildrenSubset>>#subsetFrom:}$ to filter the elements from the given ${class:BlChildren}$ instance. This can perform no filtering, filter elements, or also change the order of elements.

!! Implementation details
Internally the result of ${method:BlChildrenSubset>>#subsetFrom:}$ is stored into an instance variable. This result is then used when accessing or iterating over elements. This decision was taken to allow iterators to perform work when the iterator is created and ensure a faster iteration.

To preserve the composition of iterators I hold a reference to the initial ${class:BlChildren}$ instance.",I am an abstract class.,"""I capture a subset of children from a ${class:BlElement}$ instance. 
I exist to explicitly capture and combine various ways of filtering and iterating over children.",,"!!API
Instances of me are created by calling the factory method ${method:BlChildrenSubset class>>#on:}$ on a subclass with an instance of ${class:BlChildren}$ as parameter.","!! Implementation details
Internally the result of ${method:BlChildrenSubset>>#subsetFrom:}$ is stored into an instance variable. This result is then used when accessing or iterating over elements. This decision was taken to allow iterators to perform work when the iterator is created and ensure a faster iteration.","!!API
Instances of me are created by calling the factory method ${method:BlChildrenSubset class>>#on:}$ on a subclass with an instance of ${class:BlChildren}$ as parameter.

To preserve the composition of iterators I hold a reference to the initial ${class:BlChildren}$ instance.""",,"My subclasses define the actual order and criteria for filtering children and iterating over the set of children.  
I do not enforce a lazy API. Subclasses can perform the filtering immediately or when iteration over children is required. I aim to maintain the composition of subsets while optimizing for speed whenever possible.


Subclasses need to override the method ${method:BlChildrenSubset>>#subsetFrom:}$ to filter the elements from the given ${class:BlChildren}$ instance. This can perform no filtering, filter elements, or also change the order of elements.",,"For example, ${class:BlChildrenReversed}$ indicates that the user wants to explicitly iterate over elements in reverse order; ${class:BlChildrenAccountedByLayout}$ indicates that only should children taken into account by layout should be included. 
The example below shows a scenario of combining multiple ways to iterate over children. By having an explicit object for each operation, the composition of operations can be inspected.
${example:BlChildrenSubsetExamples>>#childrenWithMultipleCombinedSubsets}$",,,,,,,,,,,,
1,BlClickEvent,"The click event is fired when a pointing device button (a mouse's primary button) is pressed and released on a single element.

The order of fired events:

 - Mouse Down
 - Mouse Up
 - Click",,The click event is fired when a pointing device button (a mouse's primary button) is pressed and released on a single element.,,,"The order of fired events:

 - Mouse Down
 - Mouse Up
 - Click",,,,,,,,,,,,,,,,,
1,BlCompulsoryCombinationTest,This class contains tests,,This class contains tests,,,,,,,,,,,,,,,,,,,,
1,BlConcatenationRopeIterator,I am a special iterator used to iterate over concatenation rope,I am a special iterator used to iterate over concatenation rope,I am a special iterator used to iterate over concatenation rope,I am a special iterator used to iterate over concatenation rope,,,,,,,,,,,,,,,,,,,
1,BlDecelerateInterpolator,"I am an interpolator where the rate of change starts out quickly and and then decelerates.

I am configurable using ""factor"" - a degree to which the animation should be eased. Setting factor to 1.0f produces an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the ease-out effect (i.e., it starts even faster and ends evens slower).

My formula is:
	f(x) = 1 - (1 - x)^n, where n = 2* factor

I meant to be immutable, therefore factor can be only set using factory method #factor: on my class side","""I am an interpolator where the rate of change starts out quickly and and then decelerates.

I am configurable using """"factor"""" - a degree to which the animation should be eased.","""I am an interpolator where the rate of change starts out quickly and and then decelerates.",,,"Setting factor to 1.0f produces an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the ease-out effect (i.e., it starts even faster and ends evens slower).

My formula is:
        f(x) = 1 - (1 - x)^n, where n = 2* factor

I meant to be immutable, therefore factor can be only set using factory method #factor: on my class side""",,,,,,,,,,,,,,,,,
1,BlDevScripterCheckFiredEventsStep,"I check whether particular ${class:BlEvent}$ events were fired on a ${class:BlElement}$ target.

!! Example

Here you can see how to configure a fire and check a click event on a child element:
${example:BlDevScripterExamples>>#clickCheck|previewExpanded=true|previewHeight=400}$",,I check whether particular ${class:BlEvent}$ events were fired on a ${class:BlElement}$ target.,,,,,,,,"!! Example

Here you can see how to configure a fire and check a click event on a child element:
${example:BlDevScripterExamples>>#clickCheck|previewExpanded=true|previewHeight=400}$",,,,,,,,,,,,
1,BlDevScripterClickStep,"I fire a ${class:BlMouseDownEvent}$, ${class:BlMouseUpEvent}$, and ${class:BlClickEvent}$.

!! Example

Here you can see how to configure a fire and check a click event on a child element:
${example:BlDevScripterExamples>>#clickCheck|previewExpanded=true|previewHeight=400}$",,"I fire a ${class:BlMouseDownEvent}$, ${class:BlMouseUpEvent}$, and ${class:BlClickEvent}$.",,,,,,,"${class:BlMouseDownEvent}$
${class:BlMouseUpEvent}$
 ${class:BlClickEvent}$","!! Example

Here you can see how to configure a fire and check a click event on a child element:
${example:BlDevScripterExamples>>#clickCheck|previewExpanded=true|previewHeight=400}$",,,,,,,,,,,,
1,BlDragDelegate,"Drag delegate provides drag items when a visual element lifts.
Drag gesture fails if there are no drag items",,"Drag delegate provides drag items when a visual element lifts.
Drag gesture fails if there are no drag items",,,,,,,,,,,,,,,,,,,,
1,BlElementBoundsExamples,I contain examples of element bounds api,,I contain examples of element bounds api,,,,,,,,,,,,,,,,,,,,
1,BlElementCenterLeftAnchor,My position is equal to the left center of a reference element,,My position is equal to the left center of a reference element,My position is equal to the left center of a reference element,,,,,,,,,,,,,,,,,,,
1,BlElementDynamicTransformation,"I am dynamic element transformation in the sense that my transformation matrix may actually depend on some element properties such as #extent or #position.

It means that matrix computation is performed only when requested taking owner element into account.
This also means that the matrix dimension (2D or 3D) should be determined dynamically based on inner transformations",I am dynamic element transformation in the sense that my transformation matrix may actually depend on some element properties such as #extent or #position.,I am dynamic element transformation in the sense that my transformation matrix may actually depend on some element properties such as #extent or #position.,,,It means that matrix computation is performed only when requested taking owner element into account.,,,,,,,,,,,,This also means that the matrix dimension (2D or 3D) should be determined dynamically based on inner transformations,,,,,
1,BlElementEffect,"I am the abstract root class for effects.
I define the default drawing strategy (before & after).
My subclasses can be composed as a chain of effects.
I can influence the bounds of my owner (used to clip my owner).",I am the abstract root class for effects.,"I define the default drawing strategy (before & after).
I can influence the bounds of my owner (used to clip my owner).",,,,,,My subclasses can be composed as a chain of effects.,,,,,,,,,,,,,,
1,BlElementPositionChangedEvent,"Is sent when element's position within its parent changes.

Note: position may change even if an element has no parent",,,Is sent when element's position within its parent changes.,,,,,,,,,,Note: position may change even if an element has no parent,,,,,,Is sent when element's position within its parent changes,,,
1,BlElementPositionChangeTest,I contain examples of position change logging functionality,,I contain examples of position change logging functionality,,,,,,,,,,,,,,,,,,,,
1,BlElementRemovedEvent,"Is sent by an element after it is removed from the parent.

Note: I am not sent when element is detached!

Example:

[[[
| child parent |

child := BlElement new.
child when: BlElementRemovedEvent do: [ self inform: 'Removed from parent' ].

parent := BlElement new.
parent addChild: child.
parent removeChild: child
]]]",,,Is sent by an element after it is removed from the parent.,,,,,,,"Example:

[[[
| child parent |

child := BlElement new.
child when: BlElementRemovedEvent do: [ self inform: 'Removed from parent' ].

parent := BlElement new.
parent addChild: child.
parent removeChild: child
]]]",,,Note: I am not sent when element is detached!,,,,,,,,,
1,BlElementSelectionAcquiredEvent,"Is sent when element gets inside of mouse selection rectangle or when the overlapping rectangle formed by element's bounds and selection rectangle changes.

Text containing elements should react on this event and select a corresponding portion of text within selection rectangle",,,Is sent when element gets inside of mouse selection rectangle or when the overlapping rectangle formed by element's bounds and selection rectangle changes.,,,,,,,,,,Text containing elements should react on this event and select a corresponding portion of text within selection rectangle,,,,,,Is sent when element gets inside of mouse selection rectangle or when the overlapping rectangle formed by element's bounds and selection rectangle changes.,,,
1,BlExampleCustomEventTarget,I am an example of a custom non-element event target that can be nicely integrated in bloc infrastructure,I am an example of a custom non-element event target,that can be nicely integrated in bloc infrastructure,,,,,,,,,,,,,,,,,,,,
1,BlExampleElementWithBrokenOnLayout,I am an element with a broken onLayout method that throws Error (SubscriptOutOfBounds),I am an element with a broken onLayout method,that throws Error (SubscriptOutOfBounds),,,,,,,,,,,,,,,,,,,,
1,BlExperimentalExamples,"I contain experimental examples that only work in manually prepared laboratory environments.

Trying to run these examples may result in undefined bahaviour such as: crash, infinite debugger windows spawning, unresponsive image, universe collapse or suddenly created black hole that will probably destroy our solar system.

Take care. Be conscious at all times.",,I contain experimental examples that only work in manually prepared laboratory environments.,,,,,,,,,,,"Trying to run these examples may result in undefined bahaviour such as: crash, infinite debugger windows spawning, unresponsive image, universe collapse or suddenly created black hole that will probably destroy our solar system.

Take care. Be conscious at all times.",,,,"Trying to run these examples may result in undefined bahaviour such as: crash, infinite debugger windows spawning, unresponsive image, universe collapse or suddenly created black hole that will probably destroy our solar system. 
Take care. Be conscious at all times.",,I contain experimental examples that only work in manually prepared laboratory environments.,,,
1,BlFocusExamples,"How to:

        1) Inspect / run example
        2) Click one any cell to give it a focus (blue border should appear)
        3) Navigate with keyboard arrows (arrow up/down left/right)",,,,,,,,,,"How to:

        1) Inspect / run example
        2) Click one any cell to give it a focus (blue border should appear)
        3) Navigate with keyboard arrows (arrow up/down left/right)",,,,,,,,,,,,
1,BlGeometry,The geometry is used to define the geometry to be drawn and the interaction area.,,The geometry is used to define the geometry to be drawn and the interaction area.,The geometry is used to define the geometry to be drawn and the interaction area.,,,,,,,,,,,,,,,,,,,
1,BlGeometryAnchorListener,I am an event listener that listens Anchor Moved event send by Anchor,I am an event listener that listens Anchor Moved event send by Anchor,I am an event listener that listens Anchor Moved event send by Anchor,I am an event listener that listens Anchor Moved event send by Anchor,,,,,,,,,,,,,,,,,,,
1,BlGeometryAnchorMoved,I am sent when anchor's position changed,,I am sent when anchor's position changed,,,,,,,,,,,,,,,,,,,,
1,BlGeometryElement,I am a root class of geometry elements - elements driven by geometry anchors.,I am a root class of geometry elements,I am a root class of geometry elements - elements driven by geometry anchors.,,,,,,,,,,,,,,,,,,,,
1,BlGridLayout,"I layout elements in a rectangular grid.

All children of an element with GridLayout must use GridConstraints that allows users to configure how children are located within grid independently. 

A grid consists of cells that are separated by invisible lines. Each line is assigned to an index, meaning that a grid with N columns would have N+1 line. Indices lie in closed interval [ 1, N + 1 ]. 

Grid Layout supports fitContent, matchParent and exact resizing mode of the owner. Children are allowed to have fitContent and exact resizing modes. Because child's matchParent does not make sense in case of grid users should use #fill to declare that child should take all available cell's space.

By default grid layout does not specify how many columns and rows exist, instead it tries to compute necessary amount of columns or rows depending on amount of children. User can specify amount of columns or rows by sending columnCount: or rowCount: to an instance of grid layout.

Grid Layout supports spacing between cells which can be set sending cellSpacing: message.

Public API and Key Messages

- columnCount: aNumber to specify amount of columns
- rowCount: aNumber to specify amount of rows
- cellSpacing: aNumber to specify spacing between cells
- alignMargins  bounds of each element are extended outwards, according to their margins, before the edges of the resulting rectangle are aligned.
- alignBounds  alignment is made between the edges of each component's raw bounds

   BlGridLayout new
        columnCount: 2;
        rowCount: 3;
        cellSpacing: 10;
        alignMargins
 
Internal Representation and Key Implementation Points.

    Instance Variables
        alignmentMode:                <BlGridAlignmentMode>
        cellSpacing:                <Number>
        horizontalAxis:                <BlGridLayoutAxis>
        lastLayoutParamsHashCode:                <Number>
        orientation:                <BlGridOrientation>
        verticalAxis:                <BlGridLayoutAxis>


    Implementation Points",,I layout elements in a rectangular grid.,,"Public API and Key Messages

- columnCount: aNumber to specify amount of columns
- rowCount: aNumber to specify amount of rows
- cellSpacing: aNumber to specify spacing between cells
- alignMargins  bounds of each element are extended outwards, according to their margins, before the edges of the resulting rectangle are aligned.
- alignBounds  alignment is made between the edges of each component's raw bounds","All children of an element with GridLayout must use GridConstraints that allows users to configure how children are located within grid independently. 

A grid consists of cells that are separated by invisible lines. Each line is assigned to an index, meaning that a grid with N columns would have N+1 line. Indices lie in closed interval [ 1, N + 1 ]. 

Grid Layout supports fitContent, matchParent and exact resizing mode of the owner. Children are allowed to have fitContent and exact resizing modes. Because child's matchParent does not make sense in case of grid users should use #fill to declare that child should take all available cell's space.

By default grid layout does not specify how many columns and rows exist, instead it tries to compute necessary amount of columns or rows depending on amount of children. User can specify amount of columns or rows by sending columnCount: or rowCount: to an instance of grid layout.

Grid Layout supports spacing between cells which can be set sending cellSpacing: message.

Internal Representation and Key Implementation Points.

    Implementation Points","Instance Variables
        alignmentMode:                <BlGridAlignmentMode>
        cellSpacing:                <Number>
        horizontalAxis:                <BlGridLayoutAxis>
        lastLayoutParamsHashCode:                <Number>
        orientation:                <BlGridOrientation>
        verticalAxis:                <BlGridLayoutAxis>",,,GridConstraints,,,,,,,All children of an element with GridLayout must use GridConstraints that allows users to configure how children are located within grid independently.,,,,,,
1,BlGridLayoutArc,"I represent an association of span interval, associated value and validity flag.

I am used by grid layout instead of Dictionary of span <-> value key-value pair for performance reasons. 

Internal Representation and Key Implementation Points.

Instance Variables
        span:                <BlGridLayoutInterval>
        valid:                <Boolean>
        value:                <BlGridMutableInteger>","""I represent an association of span interval, associated value and validity flag.",I am used by grid layout instead of Dictionary of span <-> value key-value pair for performance reasons.,,,,"Instance Variables
        span:                <BlGridLayoutInterval>
        valid:                <Boolean>
        value:                <BlGridMutableInteger>""",,,,,,,,,,,,,,,,
1,BlGridLayoutUsageExamples,"I contain examples of a grid layout

I show how different resizing strategies work and how to build advanced layouts with the help of a grid",,"I contain examples of a grid layout

I show how different resizing strategies work and how to build advanced layouts with the help of a grid",,,,,,,,,,,,,,,,,,,,
1,BlHandlerRegistry,"I am an event handler registry used by dispatchers in order to manage event handlers.

Example:
[[[
| registry |
""one can use announcer based registry""
registry := BlHandlerAnnouncerRegistry new.
""or registry based on plain array""
registry := BlHandlerArrayRegistry new.
registry add: (BlEventHandler on: BlClickEvent do: [ self inform: 'Click' ] ).
registry add: (BlEventHandler on: BlMouseDownEvent do: [ self inform: 'Mouse down' ] ).
registry add: (BlEventHandler on: BlMouseUpEvent do: [ self inform: 'Mouse up' ] ).
registry dispatchEvent: BlClickEvent new.
registry dispatchEvent: BlMouseDownEvent new.
registry dispatchEvent: BlMouseUpEvent new.
]]]","""I am an event handler registry used by dispatchers in order to manage event handlers.","""I am an event handler registry used by dispatchers in order to manage event handlers.",,,,,,,,"Example:
[[[
| registry |
""""one can use announcer based registry""""
registry := BlHandlerAnnouncerRegistry new.
""""or registry based on plain array""""
registry := BlHandlerArrayRegistry new.
registry add: (BlEventHandler on: BlClickEvent do: [ self inform: 'Click' ] ).
registry add: (BlEventHandler on: BlMouseDownEvent do: [ self inform: 'Mouse down' ] ).
registry add: (BlEventHandler on: BlMouseUpEvent do: [ self inform: 'Mouse up' ] ).
registry dispatchEvent: BlClickEvent new.
registry dispatchEvent: BlMouseDownEvent new.
registry dispatchEvent: BlMouseUpEvent new.
]]]""",,,,,,,,,,,,
1,BlHeadlessHost,I am a fallback host that is chosen if there are no other available and supported hosts.,I am a fallback host that is chosen if there are no other available and supported hosts.,I am a fallback host that is chosen if there are no other available and supported hosts.,,,,,,,,,,,,,,,,,I am a fallback host that is chosen if there are no other available and supported hosts.,,,
1,BlHostPulseLoop,"I am the Bloc main loop.
I indicate to the Universe that is time to synchronize the state of the elements. 

A pulse is fired every 16ms (if possible) to obtain 60 frames per second (fps) maximum.  This may be delayed if there are background processes wanting to run (to ensure that background calculation of UI elements can complete).  See ${method:name=BlPulseLoop>>#wait} for details of how the loop time is regulated.

The opened spaces listen the pulse to be synchronized and to update their state when it is needed.",I am the Bloc main loop.,I indicate to the Universe that is time to synchronize the state of the elements.,,,A pulse is fired every 16ms (if possible) to obtain 60 frames per second (fps) maximum.  This may be delayed if there are background processes wanting to run (to ensure that background calculation of UI elements can complete). The opened spaces listen the pulse to be synchronized and to update their state when it is needed.,,See ${method:name=BlPulseLoop>>#wait} for details of how the loop time is regulated.,,,,,,,,,,,,,,,
1,BlInfiniteDataSourceCommandType,"I am a type of data source update command.
I suppose to be stateless and therefore immutable.
For performance and memory reasons I provide a unique instance of me to be shared among my users",I am a type of data source update command.,,,,"I suppose to be stateless and therefore immutable.
For performance and memory reasons I provide a unique instance of me to be shared among my users",,,,,,,,,,,,,,,,,
1,BlInfiniteDataSourceItemRangeMoved,"Sent when an item reflected at ===from=== position has been moved to ===to=== position.
This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.

Sent by:
        - BlInfiniteDataSource
        
Example:

infiniteElement dataSource
        addEventHandlerOn: BlInfiniteDataSourceItemRangeMoved
        do: [ :event | self inform: 'Item was moved from: ', event from asString, ' to: ', event to asString ]",,"This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.","Sent by:
        - BlInfiniteDataSource",,,,,,BlInfiniteDataSource,"Example:

infiniteElement dataSource
        addEventHandlerOn: BlInfiniteDataSourceItemRangeMoved
        do: [ :event | self inform: 'Item was moved from: ', event from asString, ' to: ', event to asString ]",,,,,,,,,Sent when an item reflected at ===from=== position has been moved to ===to=== position.,,,
1,BlInfiniteExampleClassesDataSource,I am a data source of the collection of all classes in the image,I am a data source of the collection of all classes in the image,,I am a data source of the collection of all classes in the image,,,,,,,,,,,,,,,,,,,
1,BlInfiniteItemAnimationsFinished,"I am sent when all pending or running animations in an ItemAnimator are finished.
I can be used, for example, to delay an action in a data set until currently-running animations are complete.",,"I can be used, for example, to delay an action in a data set until currently-running animations are complete.",,,,,,,,,,,,,,,,,I am sent when all pending or running animations in an ItemAnimator are finished.,,,
1,BlInfiniteSmoothScrollerAction,I hold information about a smooth scroll request by a SmoothScroller.,,I hold information about a smooth scroll request by a SmoothScroller.,I hold information about a smooth scroll request by a SmoothScroller.,,,,,,SmoothScroller,,,,,,,,,,,,,
1,BlKeyCombination,"I represent an abstract key combination which is the most important part of ===BlShortcut===.
I define an event matching API that allows ===BlShortcutHandler=== to find the most appropriate shortcut for currently pressed keys.

I have support of Visitor pattern. See ===BlKeyCombinationVisitor===

See ===BlKeyCombinationExamples=== for related examples.",I represent an abstract key combination which is the most important part of ===BlShortcut===.,I define an event matching API that allows ===BlShortcutHandler=== to find the most appropriate shortcut for currently pressed keys.I have support of Visitor pattern,,,,,"See ===BlKeyCombinationVisitor===

See ===BlKeyCombinationExamples=== for related examples.",,"BlKeyCombinationVisitor
BlKeyCombinationExamples
BlShortcutHandler",,,,,,,,,,,,,
1,BlKeyCombinationConverterCNF,I transform composite key combination formula into a CNF (https://en.wikipedia.org/wiki/Conjunctive_normal_form),,I transform composite key combination formula into a CNF (https://en.wikipedia.org/wiki/Conjunctive_normal_form),,I transform composite key combination formula into a CNF (https://en.wikipedia.org/wiki/Conjunctive_normal_form),,,I transform composite key combination formula into a CNF (https://en.wikipedia.org/wiki/Conjunctive_normal_form),,,,,,,,(https://en.wikipedia.org/wiki/Conjunctive_normal_form),,,,,,,
1,BlLayout,"!Bloc layout
I am the superclass for layouts in Bloc and I define the API that a concrete layout needs to implement.

I am attached to a bloc element and define the visual structure of that bloc element. Tipically this includes the position of child elements within the parent, or the size of the parent element. 

!!Layout constraints
I support a set of attributes (refered to as constraints in Bloc) which define the visual properties of the layout. A small set of constraints, like padding, margin or minimal and maximum dimensions, are common among all the layouts. Each layout has a dedicated constraint objects, instance of ${class:BlLayoutCommonConstraints}$, that contain these common constraints. Each type of layout can further define its own specific constraints by creating a subclass of ${class:BlLayoutConstraints}$. 

TODO: constraints API

!!Layout phase in a frame
Layouting of elements is a phase executed by a space during every frame. 

Every frame, the space goes through several phases (${method:BlSpaceFrame>>#initializePhases}$). Phases are modeled as subclasses of ${class:BlSpaceFramePhase}$ and are executed once per frame. One of them, ${class:BlSpaceFrameLayoutPhase}$, consists in layouting the elements contained in the space. This is done after events and tasks have been executed, but before the drawing phase.

Layouting should to be executed during a frame when various properties like, width, height or position change in any element contained by the space. However, an important aspect in Bloc, is that when one of these properties changes, layouting is not performed immediately. Instead, a layout request is issued by the element whose property changed using the message ${method:BlElement>>#requestLayout:}$. This has the advantage that if no element request layout, this phase can be skipped. Also it does not matter if layout is requeste one or 1000 time; only one layout phase is performed improving performance. 

Hence, in Bloc layout is not executed immediately after a property like the width of an element changes. Instead layout is requested and perfomed, if needed, during every frame. When needing to test layouts, however, it is necessary to apply a layout immediately, instead of waiting for a frame to end. That can be done using the messafe ${method:BlElement>>#forceLayout}$; this should not be used outside of tests, as it bypasses the normal layouting system from Bloc.

In a space where all elements have no event handlers for layout events, elements are going to be layouted exactly once during the layouting phase. However, often elements need to reach and perform actions, when for example their position or extent changes. They can react by requesting another layout. A tipical example is deadling with edges. An edge can be layouted only after the position of the elements that it connects is known. Hence, often the layout needs to be applied twice, or more, during the layouting phase. The space only allows layout requests during the layouting phase a limited number of times (${method:BlSpace>>#computeLayout}$) to avoid blocking rendering due to infinite recursions caused by layout requests, or void spending too much time on layouts in a frame. More technical details can be found in the method ${method:BlSpace>>#doLayout}$, the main entry point for executing the layout phase in a space.

!!Performing a layout
The space starts the layouting process on the root element of that space. Performing the layout on an element consists in executing three main steps:
        - measuring bounds: determine the bounds of the element according to its layout;
        - applying the layout: determine the position of children within the element;
        - commiting changes: raise layout events like position or extent changed.

TODO: why three separate steps?

!!!Measuring bounds
This is the first step when performing a layout on an element and consists in determening the measured bounds of that element. 

Each element can decide how it wants to be measured (${method:BlElement>>#onMeasure:}$). By default ${class:BlElement}$ delegates the measuring to its layout. Layouts should override ${method:BlLayout>>#measure:with:}$ to implement the actual measuring. Normally layouts follow a top to bottom approach: they measure the current element and then asks its children to do the measuring.

Each element has real bounds (${BlElement>>#bounds}$) and measured bounds (${BlElement>>#measuredBounds}$). The real bounds contain the actual position and extent of an element that users of that element should rely on. The measured bounds are used during layouting to hold the new extent of an element. The measuring phase changes only the extent in the measured bounds. After the entire layout phase is completed the real bounds and measured bounds will have the same value. The measured bounds act like a temporary cache for the new bounds of an element. They were introduced to avoid changing the real extent of element while layouting of children is still being performed. 

(TODO: explain why position is sometime changed in the measured bounds)

!!!Applying the layout

!!!Commiting changes

TODO
        - Space starts the measurement process from the root element; after measurement it tell children to measure themselves, etc
        - measurement; top to bottom though all the composition of elements.
                - this step find the size of an element and sets measuredExtent (or position sometimes)
        - space starts the layout step
                - as we know the size of each child we compute the actual position for each child
                - changes the real extent to measured extent and the real position to the computed layout position
        - Elements announce events for position and extent changed
        
        Without event handlers the layout process is going to happen only once.
        For example when nodes change the position edges should be updated.
        
!!Layout events

TODO

!!Layout API
I define an api of a layout. Concrete implementations should focus on measure:with: and layout:in:","!Bloc layout
I am the superclass for layouts in Bloc and I define the API that a concrete layout needs to implement.","I am attached to a bloc element and define the visual structure of that bloc element. Tipically this includes the position of child elements within the parent, or the size of the parent element.I support a set of attributes (refered to as constraints in Bloc) which define the visual properties of the layout","I am attached to a bloc element and define the visual structure of that bloc element. Tipically this includes the position of child elements within the parent, or the size of the parent element.",I define an api of a layout. Concrete implementations should focus on measure:with: and layout:in:,"!!Layout constraints
I support a set of attributes (refered to as constraints in Bloc) which define the visual properties of the layout. A small set of constraints, like padding, margin or minimal and maximum dimensions, are common among all the layouts. Each layout has a dedicated constraint objects, instance of ${class:BlLayoutCommonConstraints}$, that contain these common constraints. Each type of layout can further define its own specific constraints by creating a subclass of ${class:BlLayoutConstraints}$. 

TODO: constraints API

!!Layout phase in a frame
Layouting of elements is a phase executed by a space during every frame. 

Every frame, the space goes through several phases (${method:BlSpaceFrame>>#initializePhases}$). Phases are modeled as subclasses of ${class:BlSpaceFramePhase}$ and are executed once per frame. One of them, ${class:BlSpaceFrameLayoutPhase}$, consists in layouting the elements contained in the space. This is done after events and tasks have been executed, but before the drawing phase.

Layouting should to be executed during a frame when various properties like, width, height or position change in any element contained by the space. However, an important aspect in Bloc, is that when one of these properties changes, layouting is not performed immediately. Instead, a layout request is issued by the element whose property changed using the message ${method:BlElement>>#requestLayout:}$. This has the advantage that if no element request layout, this phase can be skipped. Also it does not matter if layout is requeste one or 1000 time; only one layout phase is performed improving performance. 

Hence, in Bloc layout is not executed immediately after a property like the width of an element changes. Instead layout is requested and perfomed, if needed, during every frame. When needing to test layouts, however, it is necessary to apply a layout immediately, instead of waiting for a frame to end. That can be done using the messafe ${method:BlElement>>#forceLayout}$; this should not be used outside of tests, as it bypasses the normal layouting system from Bloc.

In a space where all elements have no event handlers for layout events, elements are going to be layouted exactly once during the layouting phase. However, often elements need to reach and perform actions, when for example their position or extent changes. They can react by requesting another layout. A tipical example is deadling with edges. An edge can be layouted only after the position of the elements that it connects is known. Hence, often the layout needs to be applied twice, or more, during the layouting phase. The space only allows layout requests during the layouting phase a limited number of times (${method:BlSpace>>#computeLayout}$) to avoid blocking rendering due to infinite recursions caused by layout requests, or void spending too much time on layouts in a frame. More technical details can be found in the method ${method:BlSpace>>#doLayout}$, the main entry point for executing the layout phase in a space.

!!Performing a layout
The space starts the layouting process on the root element of that space. Performing the layout on an element consists in executing three main steps:
        - measuring bounds: determine the bounds of the element according to its layout;
        - applying the layout: determine the position of children within the element;
        - commiting changes: raise layout events like position or extent changed.

TODO: why three separate steps?

!!!Measuring bounds
This is the first step when performing a layout on an element and consists in determening the measured bounds of that element. 

Each element can decide how it wants to be measured (${method:BlElement>>#onMeasure:}$). By default ${class:BlElement}$ delegates the measuring to its layout. Layouts should override ${method:BlLayout>>#measure:with:}$ to implement the actual measuring. Normally layouts follow a top to bottom approach: they measure the current element and then asks its children to do the measuring.

Each element has real bounds (${BlElement>>#bounds}$) and measured bounds (${BlElement>>#measuredBounds}$). The real bounds contain the actual position and extent of an element that users of that element should rely on. The measured bounds are used during layouting to hold the new extent of an element. The measuring phase changes only the extent in the measured bounds. After the entire layout phase is completed the real bounds and measured bounds will have the same value. The measured bounds act like a temporary cache for the new bounds of an element. They were introduced to avoid changing the real extent of element while layouting of children is still being performed. 

(TODO: explain why position is sometime changed in the measured bounds)

!!!Applying the layout

!!!Commiting changes

TODO
        - Space starts the measurement process from the root element; after measurement it tell children to measure themselves, etc
        - measurement; top to bottom though all the composition of elements.
                - this step find the size of an element and sets measuredExtent (or position sometimes)
        - space starts the layout step
                - as we know the size of each child we compute the actual position for each child
                - changes the real extent to measured extent and the real position to the computed layout position
        - Elements announce events for position and extent changed
        
        Without event handlers the layout process is going to happen only once.
        For example when nodes change the position edges should be updated.
        
!!Layout events

TODO

!!Layout API
I define an api of a layout. Concrete implementations should focus on measure:with: and layout:in:",,"More technical details can be found in the method ${method:BlSpace>>#doLayout}$, the main entry point for executing the layout phase in a space.","Phases are modeled as subclasses of ${class:BlSpaceFramePhase}$ and are executed once per frame. One of them, ${class:BlSpaceFrameLayoutPhase}$, consists in layouting the elements contained in the space. This is done after events and tasks have been executed, but before the drawing phase.",,,"TODO: constraints API
TODO
        - Space starts the measurement process from the root element; after measurement it tell children to measure themselves, etc
        - measurement; top to bottom though all the composition of elements.
                - this step find the size of an element and sets measuredExtent (or position sometimes)
        - space starts the layout step
                - as we know the size of each child we compute the actual position for each child
                - changes the real extent to measured extent and the real position to the computed layout position
        - Elements announce events for position and extent changed
        
        Without event handlers the layout process is going to happen only once.
        For example when nodes change the position edges should be updated.
        
!!Layout events

TODO

!!Layout API
I define an api of a layout. Concrete implementations should focus on measure:with: and layout:in:",,"However, an important aspect in Bloc, is that when one of these properties changes, layouting is not performed immediately. this should not be used outside of tests, as it bypasses the normal layouting system from Bloc.",,,,,,"This is done after events and tasks have been executed, but before the drawing phase.
Layouting should to be executed during a frame when various properties like, width, height or position change in any element contained by the space. However, an important aspect in Bloc, is that when one of these properties changes, layouting is not performed immediately.",,,
1,BlLocalImageCacheTest,This class contains tests,,This class contains tests,,,,,,,,,,,,,,,,,,,,
1,BlMatrix2D,"I represent a matrix used for 2D affine transformations.
https://en.wikipedia.org/wiki/Matrix_(mathematics)

My components are named according to mathematical convention:

 |  a11  a12  |                 |   sx     shy  |
 |  a21  a22  |       =>     |  shx    sy    |
 |  a31  a32  |                 |    x        y     |",I represent a matrix used for 2D affine transformations.,,,,"My components are named according to mathematical convention:

 |  a11  a12  |                 |   sx     shy  |
 |  a21  a22  |       =>     |  shx    sy    |
 |  a31  a32  |                 |    x        y     |",,,,,,,,,,https://en.wikipedia.org/wiki/Matrix_(mathematics),,,,,,,
1,BlMatrixDecomposition,"I represent a matrix decomposition in components.

For example in case of 2D matrix they are:
        - translation
        - scale
        - rotation angle
        - top left 2x2 minor of original matrix
        
3D (4x4) matrices are decomposed as follows:
        - translation
        - scale
        - skew
        - perspective
        - quaternion","""I represent a matrix decomposition in components.",,,,"For example in case of 2D matrix they are:
	- translation
	- scale
	- rotation angle
	- top left 2x2 minor of original matrix
	
3D (4x4) matrices are decomposed as follows:
	- translation
	- scale
	- skew
	- perspective
	- quaternion""",,,,,,,,,,,,,,,,,
1,BlMatrixTransformation,I am an affine transformation that is directly defined by transformation matrix,I am an affine transformation that is directly defined by transformation matrix,,,,,,,,,,,,,,,,,,,,,
1,BlMeasurementUnspecifiedMode,"I represent a concrete implementation of ""unspecified"" measurement mode.
For more information see class comment of BlMeasurementMode","I represent a concrete implementation of ""unspecified"" measurement mode.",,,,,,For more information see class comment of BlMeasurementMode,,BlMeasurementMode,,,,,,,,,,,,,
1,BlMorphicHostSpace,"I am a host space created by BlMorphicHost.
I make it possible to embed Bloc space within arbitrary morphs.
For more information and example, please refer to BlMorphicHost.","""I am a host space created by BlMorphicHost.",I make it possible to embed Bloc space within arbitrary morphs.,,,,,"For more information and example, please refer to BlMorphicHost.""",,,,,,,,,,,,,,,
1,BlMorphicSpaceHostMorph,I act as a space host for a Bloc space,I act as a space host for a Bloc space,,I act as a space host for a Bloc space,,,,,,,,,,,,,,,,,,,
1,BlMorphicWindowHost,I am a concrete implementation of a BlHost that allows users to open host bloc spaces within Moprhic windows,I am a concrete implementation of a BlHost,that allows users to open host bloc spaces within Moprhic windows,that allows users to open host bloc spaces within Moprhic windows,,,,,,BlHost,,,,,,,,,,,,,
1,BlMorphicWindowOpenedEvent,I am fired by morphic host window when it is opened in the World,I am fired by morphic host window when it is opened in the World,,I am fired by morphic host window when it is opened in the World,,,,,,World,,,,,,,,,,,,,
1,BlMouseMiddleButton,I am a middle mouse button. Often can be triggered by mouse wheel click,I am a middle mouse button.,Often can be triggered by mouse wheel clic,,,,,,,,,,,,,,,,,,,,
1,BlMouseMoveEvent,"The mouse move event is fired when a pointing device (usually a mouse) is moved while over an element.

https://developer.mozilla.org/en-US/docs/Web/Events/mousemove",,,The mouse move event is fired when a pointing device (usually a mouse) is moved while over an element.,,,,https://developer.mozilla.org/en-US/docs/Web/Events/mousemove,,,,,,,,https://developer.mozilla.org/en-US/docs/Web/Events/mousemove,,,,,,,
1,BlMouseProcessor,"I am an event processor.
I convert basic events to more complex events.
For example, i generate events like click, dbl click, drag&drop, ... from mouse down, mouse up, and mouse move events.

Mouse actions are blocked during drag",I am an event processor.,I convert basic events to more complex events.,I convert basic events to more complex events.,,,,,,,"For example, i generate events like click, dbl click, drag&drop, ... from mouse down, mouse up, and mouse move events.",,,Mouse actions are blocked during drag,,,,,,,,,
1,BlPerpendicularFractionAnchor,"I am a virtual anchor that lays on a perpendicular to a line between two reference anchors.

The curvature - distance from the line connecting reference anchors is defined as a fraction (curvatureFraction) of a length between anchors.",I am a virtual anchor that lays on a perpendicular to a line between two reference anchors.,I am a virtual anchor that lays on a perpendicular to a line between two reference anchors.,,,The curvature - distance from the line connecting reference anchors is defined as a fraction (curvatureFraction) of a length between anchors.,,,,,,,,,,,,,,,,,
1,BlPolygon,"Example:

BlPolygon vertices: { 
        10@50.
        50@20.
        150@40.
        180@150.
        80@140
}",,,,,,,,,,"Example:

BlPolygon vertices: { 
        10@50.
        50@20.
        150@40.
        180@150.
        80@140
}",,,,,,,,,,,,
1,BlRectangleShapeWithArrowExplanation,"! Rectangle geometry with arrow pointer

The goal of this tutorial is to create an element with an arrow-like pointer in the middle of the top edge, as shown below:
${example:BlRectangleShapeWithArrowExplanation>>#elementWithTopArrowGeometry|noCode|previewShow=gtLiveFor:|previewHeight=250}$

A traditional way to implement such geometry is to create a subclass of ${class:BlGeometry}$,  override ${method:BlGeometry>>#buildPathOnSpartaCanvas:}$ and implement quite cumbersome algorithm that computes the location of each point and then connects those points using ==moveTo:== and ==lineTo:== commands provided by ==PathBuilder==. The problem with such solution is its exponential increase in compolexity each time we would like to parametrize and customize the resulting geometry, for example the size of the arrow or its horizontal position. Even more compex would be to implement the support for positioning the arrow on different edges (e.g. left, bottom) or an ability to have multiple arrows on separate edges.

This is where a ${class:BlVectorShape}$ comes-in handy.

!! Creating a rectangle shape

We will start with creation of the rectangle shape ${class:BlRectangleShape}$:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleShape|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Translating the top edge

In order to give the arrow pointing up enough space we should move the top edge of the rectangle down by the length of the arrow. First of all we should ask the rectangle shape to give us its top edge ${method:BlRectangleShape>>#topEdge}$. By default the ==topEdge== of the rectangle is an instance of ${class:BlLineShape}$ which can be translated by sending ${method:BlLineShape>>#moveBy:}$ to the ==topEdge==:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTranslatedTopEdge|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Injecting a line inside of the top edge

Next step on our way to the arrow is to inject a line segment equal to the length of the arrow in the middle of the ==topEdge==. It can be done by sending ${method:BlLineShape>>#injectLineAt:length:}$ to the ==topEdge==. Since we want to inject a line right in the middle of the edge we pass ==0.5== as a line location:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopInjectedLine|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Splitting the injected line

We are almost ready to create a rectangular arrow. We just need to split an injected line in half in order to create the top corner of the rectangle. We can do so by sending a ${method:BlLineShape>>#splitAt:}$ to the now middle section of the ==topEdge== which was created by the previous line injection step:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopPolylineSplitInHalf|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Moving the top of the triangle

Once we have everything we need for the arrow triangle we can move it's top up by the length of the arrow. To do so we should send ${method:BlPointShape>>#moveBy:}$ to the connection point of the splitted line in the middle of the ==topEdge==. After doing so we receive the expected vector shape we we can later use together with ${class:BlShapeGeometry}$:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopArrow|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$",,,,,,,,,"${class:BlGeometry}$
 ==PathBuilder==
${class:BlVectorShape}$
${class:BlRectangleShape}$
${class:BlLineShape}$
${class:BlShapeGeometry}$","! Rectangle geometry with arrow pointer

The goal of this tutorial is to create an element with an arrow-like pointer in the middle of the top edge, as shown below:
${example:BlRectangleShapeWithArrowExplanation>>#elementWithTopArrowGeometry|noCode|previewShow=gtLiveFor:|previewHeight=250}$

A traditional way to implement such geometry is to create a subclass of ${class:BlGeometry}$,  override ${method:BlGeometry>>#buildPathOnSpartaCanvas:}$ and implement quite cumbersome algorithm that computes the location of each point and then connects those points using ==moveTo:== and ==lineTo:== commands provided by ==PathBuilder==. The problem with such solution is its exponential increase in compolexity each time we would like to parametrize and customize the resulting geometry, for example the size of the arrow or its horizontal position. Even more compex would be to implement the support for positioning the arrow on different edges (e.g. left, bottom) or an ability to have multiple arrows on separate edges.

This is where a ${class:BlVectorShape}$ comes-in handy.

!! Creating a rectangle shape

We will start with creation of the rectangle shape ${class:BlRectangleShape}$:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleShape|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Translating the top edge

In order to give the arrow pointing up enough space we should move the top edge of the rectangle down by the length of the arrow. First of all we should ask the rectangle shape to give us its top edge ${method:BlRectangleShape>>#topEdge}$. By default the ==topEdge== of the rectangle is an instance of ${class:BlLineShape}$ which can be translated by sending ${method:BlLineShape>>#moveBy:}$ to the ==topEdge==:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTranslatedTopEdge|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Injecting a line inside of the top edge

Next step on our way to the arrow is to inject a line segment equal to the length of the arrow in the middle of the ==topEdge==. It can be done by sending ${method:BlLineShape>>#injectLineAt:length:}$ to the ==topEdge==. Since we want to inject a line right in the middle of the edge we pass ==0.5== as a line location:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopInjectedLine|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Splitting the injected line

We are almost ready to create a rectangular arrow. We just need to split an injected line in half in order to create the top corner of the rectangle. We can do so by sending a ${method:BlLineShape>>#splitAt:}$ to the now middle section of the ==topEdge== which was created by the previous line injection step:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopPolylineSplitInHalf|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$

!! Moving the top of the triangle

Once we have everything we need for the arrow triangle we can move it's top up by the length of the arrow. To do so we should send ${method:BlPointShape>>#moveBy:}$ to the connection point of the splitted line in the middle of the ==topEdge==. After doing so we receive the expected vector shape we we can later use together with ${class:BlShapeGeometry}$:
${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopArrow|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$",,,,,,,,,,,,
1,BlScalableFitHeightStrategy,"I make sure that content element fits vertically within scalable element.

It makes sense to use me if scalable element has fixed or matching parent vertical size but fits content horizontally.",,I make sure that content element fits vertically within scalable element.,,,,,,,,,,,,,,,It makes sense to use me if scalable element has fixed or matching parent vertical size but fits content horizontally.,,,,,
1,BlScalableFitWidthStrategy,"I make sure that content element fits horizontally within scalable element.

It makes sense to use me if scalable element has fixed or matching parent horizontal size but fits content vertically.",,I make sure that content element fits horizontally within scalable element.,,,,,,,,,,,,,,,It makes sense to use me if scalable element has fixed or matching parent horizontal size but fits content vertically.,,,,,
1,BlSelection,I represent a text selection defined as interval [from...to],I represent a text selection defined as interval [from...to],,,,,,,,,,,,,,,,,,,,,
1,BlSpaceEventExamples,I contain examples of space related events,,I contain examples of space related events,,,,,,,,,,,,,,,,,,,,
1,BlSpaceFramePhase,"I represent a frame phase.

Each phase knows about its start time and send a corresponding event once the phase is completed.",I represent a frame phase.,Each phase knows about its start time and send a corresponding event once the phase is completed.,,,,,,,,,,,,,,,,,,,,
1,BlSpartaMozSkiaCanvasBuilder,"I am a copy of class BlSpartaMozCanvasBuilder. This comment is copied from there, and might not be entirely accurate

I build sparta canvas using Moz2D backend",I am a copy of class BlSpartaMozCanvasBuilder.,I build sparta canvas using Moz2D backend,,,,,I am a copy of class BlSpartaMozCanvasBuilder.,,,,,,"This comment is copied from there, and might not be entirely accurate",,,,,,,,,
1,BlTextBackgroundAttribute,"I represent a text background attribute.
I am used together with BrText and BrTextStyler to style text.

Public API and Key Messages

- paint: set background paint

Example:

        BrTextBackgroundAttribute paint: Color yellow
 
Internal Representation and Key Implementation Points.

    Instance Variables
        paint:                <Object> can be a Color, Pattern, Gradient. Basically anything that is knows how to convert itself to canvas specific paint",I represent a text background attribute.,I am used together with BrText and BrTextStyler to style text.,I am used together with BrText and BrTextStyler to style text.,"Public API and Key Messages

- paint: set background paint",,"Instance Variables
        paint:                <Object> can be a Color, Pattern, Gradient. Basically anything that is knows how to convert itself to canvas specific paint",,,,"Example:

        BrTextBackgroundAttribute paint: Color yellow",,,,,,,,,,,,
1,BlTextElementMeasurementStrategyExamples,"! Text measurement strategies

${class:BlTextElement}$ provides different text measurement strategies, each suitable for a specific use case. There is no perfect strategy, therefore understanding the differences between them is an important step in learning how to work with Text in Bloc.

!! Label measurement

The default text measurement strategy is so called ==Label measurement==, ${method:BlTextElement>>#labelMeasurement}$. The height of the text element in this case is a sum of ascent and descent which is given by the font. It means that the height of the text is independent from the content. The width is given by the exact bounds of the element's text. ==Label measurement== is useful for displaying labels and short pieces of text. Please note, that since the width is precise and depends on the content, whitespace is not taken into account when computing the width of the text element.
${example:BlTextElementMeasurementStrategyExamples>>#textElementWithLabelMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=100}$

!! Editor measurement

A similar measurement strategy which is designed to be used in a text editor computes the width of the element using the ==#advance== property of a text paragraph. The height is computed as a sum of ascent and descent. ${method:BlTextElement>>#editorMeasurement}$
${example:BlTextElementMeasurementStrategyExamples>>#textElementWithEditorMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=100}$

!! Precise measurement

However, sometimes we want to know the exact and precise text bounds. ${method:BlTextElement>>#tightMeasurement}$ does exactly that and clips off any white space surrounding the text. It may be useful for displaying a short piece of a text, usually a word centered within a larger element.
${example:BlTextElementMeasurementStrategyExamples>>#textElementWithTightMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=75}$

!! Conslusion

Now let's compare all text measurement strategies:
${example:BlTextElementMeasurementStrategyExamples>>#measurementDifference|noCode|previewShow=#gtLiveFor:|previewHeight=220}$",,,"${class:BlTextElement}$ provides different text measurement strategies, each suitable for a specific use case. There is no perfect strategy, therefore understanding the differences between them is an important step in learning how to work with Text in Bloc.",,,,,,,"Now let's compare all text measurement strategies:
""! Text measurement strategies

${class:BlTextElement}$ provides different text measurement strategies, each suitable for a specific use case. There is no perfect strategy, therefore understanding the differences between them is an important step in learning how to work with Text in Bloc.

!! Label measurement

The default text measurement strategy is so called ==Label measurement==, ${method:BlTextElement>>#labelMeasurement}$. The height of the text element in this case is a sum of ascent and descent which is given by the font. It means that the height of the text is independent from the content. The width is given by the exact bounds of the element's text. ==Label measurement== is useful for displaying labels and short pieces of text. Please note, that since the width is precise and depends on the content, whitespace is not taken into account when computing the width of the text element.
${example:BlTextElementMeasurementStrategyExamples>>#textElementWithLabelMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=100}$

!! Editor measurement

A similar measurement strategy which is designed to be used in a text editor computes the width of the element using the ==#advance== property of a text paragraph. The height is computed as a sum of ascent and descent. ${method:BlTextElement>>#editorMeasurement}$
${example:BlTextElementMeasurementStrategyExamples>>#textElementWithEditorMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=100}$

!! Precise measurement

However, sometimes we want to know the exact and precise text bounds. ${method:BlTextElement>>#tightMeasurement}$ does exactly that and clips off any white space surrounding the text. It may be useful for displaying a short piece of a text, usually a word centered within a larger element.
${example:BlTextElementMeasurementStrategyExamples>>#textElementWithTightMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=75}$

!! Conslusion

Now let's compare all text measurement strategies:
${example:BlTextElementMeasurementStrategyExamples>>#measurementDifference|noCode|previewShow=#gtLiveFor:|previewHeight=220}$""",,,,,,,,,,,,
1,BlTextUnderlineAttribute,"! Underline
I represent a text underline attribute.
I am used together with ${class:BlText}$ and ${class:TBlTextStyleable}$ to style text.

https://en.wikipedia.org/wiki/Underline

See ${class:BlTextUnderlineAttributeExamples}$ for examples",I represent a text underline attribute.,I am used together with ${class:BlText}$ and ${class:TBlTextStyleable}$ to style text.,I am used together with ${class:BlText}$ and ${class:TBlTextStyleable}$ to style text.,,,,"https://en.wikipedia.org/wiki/Underline

See ${class:BlTextUnderlineAttributeExamples}$ for examples",,,,,,,,https://en.wikipedia.org/wiki/Underline,,,,,,,
1,BlTime,"I encapsulate a concept of time and play a role of a time provider for Animations or other parts of the system that compute durations or how much time passed since some action.

Bloc components must not directly rely on system time or hardcode it in any place because it prevents us from simulating spaces. The use of me makes system exemplifiable",,I encapsulate a concept of time and play a role of a time provider for Animations or other parts of the system that compute durations or how much time passed since some action.,I encapsulate a concept of time and play a role of a time provider for Animations or other parts of the system that compute durations or how much time passed since some action.,,,,,,Animations,,,,Bloc components must not directly rely on system time or hardcode it in any place because it prevents us from simulating spaces. The use of me makes system exemplifiable,,,,,,,,,
1,BlUniverseEvent,I am an event that is sent to the universe by the host to control the Universe's lifecycle,I am an event that is sent to the universe by the host to control the Universe's lifecycle,,I am an event that is sent to the universe by the host to control the Universe's lifecycle,,,,,,Universe,,,,,,,,,,,,,
1,BlUniverseEventsCleared,Emitted when all of the event loop's events have been processed and control flow is about to be taken away from the Universe.,,Emitted when all of the event loop's events have been processed and control flow is about to be taken away from the Universe.,,,,,,,,,,,,,,,,,Emitted when all of the event loop's events have been processed and control flow is about to be taken away from the Universe.,,,
1,BlVisibilityHidden,"I am a concrete visibility type - ""hidden"".
Once set, element should not be rendered but should participate in layout and take space.","I am a concrete visibility type - ""hidden"".",,,,,,,,,,,,"Once set, element should not be rendered but should participate in layout and take space.",,,,"Once set, element should not be rendered but should participate in layout and take space.",,,,,
1,BrEditorTextFlowLine,"I represent a single line of a flow layout.

I store reference to the next line in order to avoid unnecessary array of lines creation for a very common case of just one line",I represent a single line of a flow layout.,I store reference to the next line in order to avoid unnecessary array of lines creation for a very common case of just one line,,,,,,,,,,,,,,,,,,,,
1,BrExampleColoredElementStencil,I am an example of a custom Stencil that creates a rounded rectangular element with cusomizable background color and corner radius,I am an example of a custom Stencil,that creates a rounded rectangular element with cusomizable background color and corner radius,,that creates a rounded rectangular element with cusomizable background color and corner radius,,,,,,,,,,,,,,,,,,
1,BrExamplesShowroom,"I am a collection of ""showroom"" examples.

! Buttons

In the example below we show all existing button styles
${example:BrExamplesShowroom class>>#allButtons|expanded|noCode}$

The following glamorous button reacts to various UI interaction events and changes its style according the state (pressed, hovered)
${example:BrExamplesShowroom>>#glamorousButton}$

Button can also be disabled to prevent click events
${example:BrExamplesShowroom>>#glamorousDisabledButton}$

! Toggles

Toggle buttons can have radically different look, while the behaviour of all of them is exactly the same.
${example:BrExamplesShowroom class>>#allToggles|noCode}$

!! Labelled toggle

To create a toggle button with a label user should the corresponding  ${class:BrMaterialToggleWithIconLook}$

${example:BrExamplesShowroom>>#materialLabelToggle}$

!! Iconified toggle

Similarly we can use the icon look to build an iconified toggle:
${example:BrExamplesShowroom>>#materialIconToggle}$

!! Iconified labelled toggle

We can compose label and icon looks to create a toggle button with both label and the icon. Note that the order of looks defines the visual order of the label and icon:

${example:BrExamplesShowroom>>#materialToggle}$

Thus being said by swapping the label and icon look we can move the icon to the right from the label:

${example:BrExamplesShowroom>>#materialReversedToggle}$

! Accordion

Accordion is the exandable and collapsable widget that consists of a header and a content. Any visual ${class:BlElement}$ can be a header of the accordion. The following example shows how a ${class:BrButton}$ can be used an accordion header:

${example:BrExamplesShowroom>>#accordion}$

! Tabs

The following example shows how to create a tab group widget with 3 tabs. The content of each tab is defined with the help of a stencil.

${example:BrExamplesShowroom>>#glamorousTabs}$

! Toolbar

The toolbar is a logical set of action buttons (either labelled or iconified).
${example:BrExamplesShowroom>>#glamorousToolbar}$
${example:BrExamplesShowroom>>#materialToolbar}$

! List

The example below describes how to instantiate a new instance of the simple list that only has one column:
${example:BrExamplesShowroom>>#simpleList|noCode}$

${example:BrExamplesShowroom>>#columnedList|noCode}$","I am a collection of ""showroom"" examples.",,,,,,,,,"! Buttons

In the example below we show all existing button styles
${example:BrExamplesShowroom class>>#allButtons|expanded|noCode}$

The following glamorous button reacts to various UI interaction events and changes its style according the state (pressed, hovered)
${example:BrExamplesShowroom>>#glamorousButton}$

Button can also be disabled to prevent click events
${example:BrExamplesShowroom>>#glamorousDisabledButton}$

! Toggles

Toggle buttons can have radically different look, while the behaviour of all of them is exactly the same.
${example:BrExamplesShowroom class>>#allToggles|noCode}$

!! Labelled toggle

To create a toggle button with a label user should the corresponding  ${class:BrMaterialToggleWithIconLook}$

${example:BrExamplesShowroom>>#materialLabelToggle}$

!! Iconified toggle

Similarly we can use the icon look to build an iconified toggle:
${example:BrExamplesShowroom>>#materialIconToggle}$

!! Iconified labelled toggle

We can compose label and icon looks to create a toggle button with both label and the icon. Note that the order of looks defines the visual order of the label and icon:

${example:BrExamplesShowroom>>#materialToggle}$

Thus being said by swapping the label and icon look we can move the icon to the right from the label:

${example:BrExamplesShowroom>>#materialReversedToggle}$

! Accordion

Accordion is the exandable and collapsable widget that consists of a header and a content. Any visual ${class:BlElement}$ can be a header of the accordion. The following example shows how a ${class:BrButton}$ can be used an accordion header:

${example:BrExamplesShowroom>>#accordion}$

! Tabs

The following example shows how to create a tab group widget with 3 tabs. The content of each tab is defined with the help of a stencil.

${example:BrExamplesShowroom>>#glamorousTabs}$

! Toolbar

The toolbar is a logical set of action buttons (either labelled or iconified).
${example:BrExamplesShowroom>>#glamorousToolbar}$
${example:BrExamplesShowroom>>#materialToolbar}$

! List

The example below describes how to instantiate a new instance of the simple list that only has one column:
${example:BrExamplesShowroom>>#simpleList|noCode}$

${example:BrExamplesShowroom>>#columnedList|noCode}$",,,,,,,,,,,,
1,BrGlamorousIcons,"I am a Glamorous icons container. You can import new icons using ${method:name=BrGlamorousIcons class>>#importIconsFromDirectory:}$ using the script below. It imports all ==PNG== files and creates class methods with the same name.

[[[
BrGlamorousIcons importIconsFromDirectory: './gt-icons' asFileReference
]]]

Here is a list of available icons:

${class:BrGlamorousIcons|show=gtIconsFor:|expanded=}$","""I am a Glamorous icons container.",You can import new icons using ${method:name=BrGlamorousIcons class>>#importIconsFromDirectory:}$ using the script below. It imports all ==PNG== files and creates class methods with the same name.,,"Here is a list of available icons:

${class:BrGlamorousIcons|show=gtIconsFor:|expanded=}$",You can import new icons using ${method:name=BrGlamorousIcons class>>#importIconsFromDirectory:}$ using the script below.,,,,,It imports all ==PNG== files and creates class methods with the same name. [[[ BrGlamorousIcons importIconsFromDirectory: './gt-icons' asFileReference ]]],,PNG,,,,,,,,,,
1,BrInteractiveModel,"I am a composite interaction model responsible for managing widget state such as pressed, hovered, focused.","I am a composite interaction model responsible for managing widget state such as pressed, hovered, focused.","I am a composite interaction model responsible for managing widget state such as pressed, hovered, focused.","I am a composite interaction model responsible for managing widget state such as pressed, hovered, focused.",,,,,,,,,,,,,,,,,,,
1,BrLook,I define how widgets look. In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets,,I define how widgets look. In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets,In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets,,,,,,BrViewModel,,,,,,,,,,,,,
1,BrMaterialToggleBackgroundLook,I describe how background of a material toggle button changes due to toggle events,,I describe how background of a material toggle button changes due to toggle events,,,,,,,,,,,,,,,,,,,,
1,BrPagerPagePreviewResizeListener,I update the size of a page preview element in a scroll bar according to the size of a corresponding page,,I update the size of a page preview element in a scroll bar according to the size of a corresponding page,,,,,,,,,,,,,,,,,,,,
1,BrPagerPageResizerElement,I am the element with which a pager page can be resized horizontally.,I am the element with which a pager page can be resized horizontally.,,I am the element with which a pager page can be resized horizontally.,,,,,,,,,,,,,,,,,,,
1,BrSelectionRequest,I am sent by a look to request selection update from the view model,,I am sent by a look to request selection update from the view model,,,,,,,,,,,,,,,,,,,,
1,BrTabAddedEvent,I am sent when a new tab is added to ${class:BrTabGroupModel},,I am sent when a new tab is added to ${class:BrTabGroupModel},I am sent when a new tab is added to ${class:BrTabGroupModel},,,,,,${class:BrTabGroupModel},,,,,,,,,,,,,
1,BrTextEditor,"! The Moldable Editor

I edit text and provide high level abstractions of essential text editor functionality such as selection, cursor, text insertions and deletions.

I make use of ${class:BrTextAdornmentAttribute}$ to augment text with visual elements. 

I subclass infinite data source in order to be able to smoothly display practically infinite amounts of text.",! The Moldable Editor,"I edit text and provide high level abstractions of essential text editor functionality such as selection, cursor, text insertions and deletions.",I make use of ${class:BrTextAdornmentAttribute}$ to augment text with visual elements.,,,,,I subclass infinite data source in order to be able to smoothly display practically infinite amounts of text.,${class:BrTextAdornmentAttribute}$,,,,,,,,,,,,,
1,BrTextEditorCursorElementRemovedEvent,I am sent by the text editor element when an element playing a role of the cursor is removed from the editor,I am sent by the text editor element,I am sent by the text editor element when an element playing a role of the cursor is removed from the editor,,,,,,,,,,,,,,,,,,,,
1,BrTextEditorExamples,"! Today we will learn how to compose an editor 🙊

==It is as simple as computing a factorial, a piece of cake! == 🍰

[[[show=gtPrintIn:
        10 factorial
]]]

!!! 🔹 First create the text 💁

[[[example=BrTextEditorExamples>>#newText]]]

!!! 🔸 Next, we build the editor 👷

[[[example=BrTextEditorExamples>>#newEditor]]]

!!! 🔹 Then, we attach text to the enditor. 💡

[[[example=BrTextEditorExamples>>#editor:text:]]]

!!! 🔸 Next, we create an editor element. 🤘

[[[example=BrTextEditorExamples>>#newElement|show=gtLiveIn:]]]

!!! 🔹 And finally, build everything together 💪

[[[example=BrTextEditorExamples>>#element:editorText:|show=gtLiveIn:]]]

! Done 😎",,! Today we will learn how to compose an editor 🙊,,,,,,,,"[[show=gtPrintIn:
        10 factorial
]]]

!!! 🔹 First create the text 💁

[[[example=BrTextEditorExamples>>#newText]]]

!!! 🔸 Next, we build the editor 👷

[[[example=BrTextEditorExamples>>#newEditor]]]

!!! 🔹 Then, we attach text to the enditor. 💡

[[[example=BrTextEditorExamples>>#editor:text:]]]

!!! 🔸 Next, we create an editor element. 🤘

[[[example=BrTextEditorExamples>>#newElement|show=gtLiveIn:]]]

!!! 🔹 And finally, build everything together 💪

[[[example=BrTextEditorExamples>>#element:editorText:|show=gtLiveIn:]]]

! Done 😎",,,,,,,,,,,,
1,BrTextEditorLetterInputFilter,I only allow letters,,I only allow letters,,,,,,,,,,,I only allow letters,,,,,,,,,
1,BrTextEditorLineSplitter,I split a piece of text into line segments ${class:BrTextEditorLineSegment}$,,I split a piece of text into line segments ${class:BrTextEditorLineSegment}$,,,,,,,${class:BrTextEditorLineSegment}$,,,,,,,,,,,,,
1,BrTextEditorSelectionRecorder,"I am used to record text selection intervals while user drags mouse over the text editor.
Additionally I play a role of a selection strategy to support single or multiple selection.",,"I am used to record text selection intervals while user drags mouse over the text editor.
Additionally I play a role of a selection strategy to support single or multiple selection.","I am used to record text selection intervals while user drags mouse over the text editor.
Additionally I play a role of a selection strategy to support single or multiple selection.",,,,,,,,,,,,,,,,,,,
1,BrTextEditorSelectionUpdateCommand,I do the hard job of visually updating selection by requesting segment holders to partially update themselves,,I do the hard job of visually updating selection by requesting segment holders to partially update themselves,,I do the hard job of visually updating selection by requesting segment holders to partially update themselves,,,,,,,,,,,,,,,,,,
1,GlutinResumedEvent,Emitted when the application has been resumed.,,Emitted when the application has been resumed.,,,,,,,,,,,,,,,,,Emitted when the application has been resumed.,,,
1,Gt4XMLHighlightedToken,This class stores a highlight TextColor and 1-based start/end highlight positions.,,This class stores a highlight TextColor and 1-based start/end highlight positions.,,,1-based start/end highlight positions.,,,,TextColor,,,,,,,,,,,,,
1,GtABAddress,I hold all data relevant for an address,,I hold all data relevant for an address,,,,,,,,,,,,,,,,,,,,
1,GtConnectorButtonAddedEvent,Is sent after button is added to the scene graph,,Is sent after button is added to the scene graph,,,,,,,,,,,,,,,,,,,,
1,GtConnectorButtonCreatedEvent,"Is sent by ButtonAttribute after button is created.

I allow Connector to be notified and attach its own additional handlers to newly created button",,"Is sent by ButtonAttribute after button is created.

I allow Connector to be notified and attach its own additional handlers to newly created button","Is sent by ButtonAttribute after button is created.

I allow Connector to be notified and attach its own additional handlers to newly created button",,,,,,,,,,,,,,,,Is sent by ButtonAttribute after button is created.,,,
1,GtDiagrammerArrowheadFilledCircleStencil,I create a filled circle arrow head with the border and background equal to the color of the curve,,I create a filled circle arrow head with the border and background equal to the color of the curve,,,,,,,,,,,,,,,,,,,,
1,GtDiagrammerArrowheadFilledTriangleStencil,I create a filled triangle arrowhead,,I create a filled triangle arrowhead,,,,,,,,,,,,,,,,,,,,
1,GtDiagrammerArrowheadNoneStencil,I am used to remove arrow heads,,I am used to remove arrow heads,,,,,,,,,,,,,,,,,,,,
1,GtDiagrammerDummyTool,I am a dummy tool that does nothing,I am a dummy tool,that does nothing,,,,,,,,,,,,,,,,,,,,
1,GtDiagrammerEditorList,"I display a list of editors of an object in a vertical list.

I fetch data from the diagrammer editor data source",,"I display a list of editors of an object in a vertical list.

I fetch data from the diagrammer editor data source","I display a list of editors of an object in a vertical list.

I fetch data from the diagrammer editor data source",,,,,,,,,,,,,,,,,,,
1,GtDiagrammerEllipseStencil,I create an ellipse element,,I create an ellipse element,,,,,,,,,,,,,,,,,,,,
1,GtDiagrammerExamples,"!Diagrammer

[[[example=GtDiagrammerExamples>>#diagrammer|expanded=true|noCode=true|show=gtLiveIn:]]]",,,,,,,,,,"!Diagrammer

[[[example=GtDiagrammerExamples>>#diagrammer|expanded=true|noCode=true|show=gtLiveIn:]]]",,,,,,,,,,,,
1,GtDiagrammerPicker,"I am a scriptable toogle group to display a uniform collection of selectable values.

[[[
| picker |
picker := GtDiagrammerPicker new.
picker layout: BlFlowLayout horizontal.
picker display: [ { 'Hello' . 'World' . 'I' . 'am' . 'a' . 'picker' } ].
picker shape: [ :aString | BrToggle new
        look: BrMaterialToggleLabelledLook;
        margin: (BlInsets all: 3);
        label: aString ].
picker constraintsDo: [ :c |
        c horizontal exact: 400.
        c vertical fitContent ].
picker when: BrToggleActivatedEvent do: [ :anEvent | self inform: anEvent model ].
picker
]]]",I am a scriptable toogle group to display a uniform collection of selectable values.,,,,,,,,,"[[[
| picker |
picker := GtDiagrammerPicker new.
picker layout: BlFlowLayout horizontal.
picker display: [ { 'Hello' . 'World' . 'I' . 'am' . 'a' . 'picker' } ].
picker shape: [ :aString | BrToggle new
        look: BrMaterialToggleLabelledLook;
        margin: (BlInsets all: 3);
        label: aString ].
picker constraintsDo: [ :c |
        c horizontal exact: 400.
        c vertical fitContent ].
picker when: BrToggleActivatedEvent do: [ :anEvent | self inform: anEvent model ].
picker
]]]",,,,,,,,,,,,
1,GtDiagrammerStarStencil,I create a star element,,I create a star element,,,,,,,,,,,,,,,,,,,,
1,GtExampleDependenciesResolver,"I know how to extract the dependencies of a given example. The dependencies of a given example consists in message sends to other method constructing an example. 

To determine if a message send represents a dependency to a method containing an example, I use heuristic defined by subclasses of ==GtExampleDependencyResolver==.",,I know how to extract the dependencies of a given example. The dependencies of a given example consists in message sends to other method constructing an example.,,,"To determine if a message send represents a dependency to a method containing an example, I use heuristic defined by subclasses of ==GtExampleDependencyResolver==.",,,,==GtExampleDependencyResolver==,,,,,,,,,,,,,
1,GtExampleFactory,"I am a factory that can create ${class:GtExample}$ instances. 

Users should configure me with a #sourceClass:. This is the class used to look for methods defining examples. To create an example, a method defining an example is executed having a provider as a receiver. If the example method is defined on the class side, the provider is the class object. If the method is defined on the instance side, the provider consists in a new instance of that class. In the second case, a new instance is created for running each example method. Optionally users can configure the factory with an explicit provider. If this is done, this provider will be used for all examples created by the factory.

To initialize the subjects of an example I call #gtExampleSubjects on the provider object.
To initialize various properties of an example I detect all pragmas from the example method for which a method exists in class of the example (the method should have the same name as the pragma keyword). Then I execute those methods with the example as a receiver and the pragma arguments.",I am a factory that can create ${class:GtExample}$ instances.,,,Users should configure me with a #sourceClass:.,"Users should configure me with a #sourceClass:. This is the class used to look for methods defining examples. To create an example, a method defining an example is executed having a provider as a receiver. If the example method is defined on the class side, the provider is the class object. If the method is defined on the instance side, the provider consists in a new instance of that class. In the second case, a new instance is created for running each example method. Optionally users can configure the factory with an explicit provider. If this is done, this provider will be used for all examples created by the factory.

To initialize the subjects of an example I call #gtExampleSubjects on the provider object.
To initialize various properties of an example I detect all pragmas from the example method for which a method exists in class of the example (the method should have the same name as the pragma keyword). Then I execute those methods with the example as a receiver and the pragma arguments.",,,,${class:GtExample}$,"To initialize the subjects of an example I call #gtExampleSubjects on the provider object.
To initialize various properties of an example I detect all pragmas from the example method for which a method exists in class of the example (the method should have the same name as the pragma keyword). Then I execute those methods with the example as a receiver and the pragma arguments.",,,the method should have the same name as the pragma keyword,,,,Users should configure me with a #sourceClass:. the method should have the same name as the pragma keyword,,,,,
1,GtExampleInstanceSubject,I indicate that the subject of an example is an object. I am the default subject of an example. Other kinds of subjects should be used to inducate a particular type of object like a class or method.,I am the default subject of an example.,I indicate that the subject of an example is an object.,I am the default subject of an example.,,,,,Other kinds of subjects should be used to inducate a particular type of object like a class or method.,,,,,,,,,,,,,,
1,GtExampleProcessor,"I am an abstract class for manipulating examples.

My subclasses can add different semantics for different use cases. For example, evaluating an example is to be treated differently from a debugging scenario, or from a  scenario to recorver static dependencies.

I maintain a context that can be accessed from within the examples being processed during the execution of the processor.

#value - Execute the processor. Can return a value, depending on the processor.
#canProcess - Verifies if the processor can execute on the given example.",I am an abstract class for manipulating examples.,I maintain a context that can be accessed from within the examples being processed during the execution of the processor.,,"#value - Execute the processor. Can return a value, depending on the processor.
#canProcess - Verifies if the processor can execute on the given example.",,,,"My subclasses can add different semantics for different use cases. For example, evaluating an example is to be treated differently from a debugging scenario, or from a  scenario to recorver static dependencies.",,"For example, evaluating an example is to be treated differently from a debugging scenario, or from a scenario to recorver static dependencies.",,,,,,,,,,,,
1,GtGradAbstractTreeLayout,"This an implementation of a Moen's tree layout algorithm.
Moen's algorithm attempts to create a tree with a triangular shape and place nodes somewhat simetrically. It is an extension of the well-known Reingold-Tilfold algorithm. It improved the older algorithm's ability to handle non-uniform sized nodes. Moen's trees are oriented horizontally. However, this implementation offers the posibility of choosing the orientation - vertical or horizontal. 

The Reingold-Tilfold  algorithm, and thus Moen's also,  starts with a bottom-up traversal of the tree. It calculates left and right subtrees of a tree and merges them. When doing that, it makes sure that the parents are centered above their children. Reignold-Tilfold's algorithm  was originally designed only for binary trees, but later extended to work for non-binary ones as well.  While Reignold-Tilfold's algorithm produces a compact tree layout, Moen's strives to make a tighter one. To accomplish that, it uses shapes represented by polyline structures. These shapes are initially formed for each leaf, so that the polyline goes around the node, but leaves the left side open. During the first phase of the algorithm's execution (bottom-up traversal), these shapes  are merged - shapes of parents are merged with shapes of children. In this implementation, we call the polylines contours. When merging contours, minimum horizontal/vertical offsets at which siblings can be placed with resepct to  their upper (left) sibling (depending of the layout's orientation) are calculated

Once the bottom-up traversal is finished,  calculation of offsets is finished as well. At that point, the tree is traversed again, but this time from top (root) to the bottom. During this second traversal, positions of the tree's nodes are set. Calculation of positions factors in the mentioned offsets, as well as the positions of the node's parent and the layout's  node and level distance properties.

Additionally, this implementation supports alignment of  nodes (top, center, bottom in case of the vertical layout and left, center, right in case of the horizontal layout). This is done through calculation of differences in sizes of nodes compared to the largest nodes on the same level, as well as the differences in sizes of their parents compared to the largest nodes on the parent level.

GtGradTreeLayout is  a superclass of GtGradHorizontalTreeLayout and GtGradVerticalTreeLayout classes and  contains generic tree layout methods and definitions of methods the two subclasses need to redefine.  Generally, the differences between the implementations of  the hozitonal and vertical variants  are really small, revolving around one using  or setting the x and the other y coordinates.

The tree algorithms can be  used to lay out inner elements of a Bloc element or a Mondrian view.",This an implementation of a Moen's tree layout algorithm.,"However, this implementation offers the posibility of choosing the orientation - vertical or horizontal. 
 In this implementation, we call the polylines contours. When merging contours, minimum horizontal/vertical offsets at which siblings can be placed with resepct to  their upper (left) sibling (depending of the layout's orientation) are calculated

Once the bottom-up traversal is finished,  calculation of offsets is finished as well. At that point, the tree is traversed again, but this time from top (root) to the bottom. During this second traversal, positions of the tree's nodes are set. Calculation of positions factors in the mentioned offsets, as well as the positions of the node's parent and the layout's  node and level distance properties.

Additionally, this implementation supports alignment of  nodes (top, center, bottom in case of the vertical layout and left, center, right in case of the horizontal layout). This is done through calculation of differences in sizes of nodes compared to the largest nodes on the same level, as well as the differences in sizes of their parents compared to the largest nodes on the parent level.","GtGradTreeLayout is  a superclass of GtGradHorizontalTreeLayout and GtGradVerticalTreeLayout classes and  contains generic tree layout methods and definitions of methods the two subclasses need to redefine.  Generally, the differences between the implementations of  the hozitonal and vertical variants  are really small, revolving around one using  or setting the x and the other y coordinates.",,"Moen's algorithm attempts to create a tree with a triangular shape and place nodes somewhat simetrically. It is an extension of the well-known Reingold-Tilfold algorithm. It improved the older algorithm's ability to handle non-uniform sized nodes. Moen's trees are oriented horizontally.

The Reingold-Tilfold  algorithm, and thus Moen's also,  starts with a bottom-up traversal of the tree. It calculates left and right subtrees of a tree and merges them. When doing that, it makes sure that the parents are centered above their children. Reignold-Tilfold's algorithm  was originally designed only for binary trees, but later extended to work for non-binary ones as well.  While Reignold-Tilfold's algorithm produces a compact tree layout, Moen's strives to make a tighter one. To accomplish that, it uses shapes represented by polyline structures. These shapes are initially formed for each leaf, so that the polyline goes around the node, but leaves the left side open. During the first phase of the algorithm's execution (bottom-up traversal), these shapes  are merged - shapes of parents are merged with shapes of children.",,,"GtGradTreeLayout is  a superclass of GtGradTreeLayout and GtGradVerticalTreeLayout classes and  contains generic tree layout methods and definitions of methods the two subclasses need to redefine.  Generally, the differences between the implementations of  the hozitonal and vertical variants  are really small, revolving around one using  or setting the x and the other y coordinates.","GtGradTreeLayout
GtGradTreeLayout
GtGradVerticalTreeLayout",,,,,,,The tree algorithms can be  used to lay out inner elements of a Bloc element or a Mondrian view.,,,,,,
1,GtGraphCircleEnclosure,"! Smallest enclosing circle of circles

I compute the smallest circle that encloses the specified array of circles. The enclosing circle is computed using the *Matoušek-Sharir-Welzl>http://www.inf.ethz.ch/personal/emo/PublFiles/SubexLinProg_ALG16_96.pdf* algorithm.

The implementation is based on *d3.packEnclose(circles)>https://github.com/d3/d3-hierarchy/blob/master/src/pack/enclose.js*

Let's start with an empty enclosure:
${example:GtGraphCircleEnclosureExamples>>#emptyEnclosure|previewShow=#gtPreviewFor:|previewHeight=300}$

and add circles one by one, starting with a larger one. A circle enclosure is represented by a cyan circle. An enclosure of a single circle is a special case and can be computed directly by ${method:GtGraphCircleEnclosure class>>#enclosure:}$. Note, that the added circle has a margin set which is taken into account by enclosure:
${example:GtGraphCircleEnclosureExamples>>#enclosureWithOneCircle|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$

adding a second circle expands the enclosure circle to fit both circles ==C1== and ==C2==. Two circle enclosure is also a special case and can be derived directly by ${method:GtGraphCircleEnclosure class>>#enclosure:and:}$
${example:GtGraphCircleEnclosureExamples>>#enclosureWithTwoCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$

Three circle enclosure is a special case too. ${method:GtGraphCircleEnclosure class>>#enclosure:and:and:}$ is responsible for the computation. Let's add the third circle to our enclosure to see the result: 
${example:GtGraphCircleEnclosureExamples>>#enclosureWithThreeCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$

Starting with four circles, an enclosure should be computed recursively by building and updating a basis enclosure consisting of one to three circles: ${method:GtGraphCircleEnclosure class>>#enclosureAll:}$. 

${example:GtGraphCircleEnclosureExamples>>#enclosureWithFourCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$",! Smallest enclosing circle of circles,I compute the smallest circle that encloses the specified array of circles. The enclosing circle is computed using the,,,,,"The enclosing circle is computed using the *Matoušek-Sharir-Welzl>http://www.inf.ethz.ch/personal/emo/PublFiles/SubexLinProg_ALG16_96.pdf* algorithm.
The implementation is based on *d3.packEnclose(circles)>https://github.com/d3/d3-hierarchy/blob/master/src/pack/enclose.js",,,"${example:GtGraphCircleEnclosureExamples>>#emptyEnclosure|previewShow=#gtPreviewFor:|previewHeight=300}$

and add circles one by one, starting with a larger one. A circle enclosure is represented by a cyan circle. An enclosure of a single circle is a special case and can be computed directly by ${method:GtGraphCircleEnclosure class>>#enclosure:}$. Note, that the added circle has a margin set which is taken into account by enclosure:
${example:GtGraphCircleEnclosureExamples>>#enclosureWithOneCircle|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$

adding a second circle expands the enclosure circle to fit both circles ==C1== and ==C2==. Two circle enclosure is also a special case and can be derived directly by ${method:GtGraphCircleEnclosure class>>#enclosure:and:}$
${example:GtGraphCircleEnclosureExamples>>#enclosureWithTwoCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$

Three circle enclosure is a special case too. ${method:GtGraphCircleEnclosure class>>#enclosure:and:and:}$ is responsible for the computation. Let's add the third circle to our enclosure to see the result: 
${example:GtGraphCircleEnclosureExamples>>#enclosureWithThreeCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$

Starting with four circles, an enclosure should be computed recursively by building and updating a basis enclosure consisting of one to three circles: ${method:GtGraphCircleEnclosure class>>#enclosureAll:}$. 

${example:GtGraphCircleEnclosureExamples>>#enclosureWithFourCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$",,,,,"http://www.inf.ethz.ch/personal/emo/PublFiles/SubexLinProg_ALG16_96.pdf
https://github.com/d3/d3-hierarchy/blob/master/src/pack/enclose.js",,,,,,,
1,GtGraphEdgesIterator,I am an abstract iterator over edges connected to a graph element,I am an abstract iterator over edges connected to a graph element,,I am an abstract iterator over edges connected to a graph element,,,,,,,,,,,,,,,,,,,
1,GtGraphForceBasedLayout,"A ROForceBasedLayout is inspired from the Code of D3. The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045

Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.

Instance Variables
        alpha:                <Object>
        center:                <Object>
        charge:                <Object>
        charges:                <Object>
        fixedNodes:                <Object>
        friction:                <Object>
        gravity:                <Object>
        layoutInitial:                <Object>
        length:                <Object>
        lengths:                <Object>
        nodes:                <Object>
        oldPositions:                <Object>
        strength:                <Object>
        strengths:                <Object>
        theta:                <Object>
        weights:                <Object>

alpha
        - xxxxx

center
        - xxxxx

charge
        - xxxxx

charges
        - xxxxx

fixedNodes
        - xxxxx

friction
        - xxxxx

gravity
        - xxxxx

layoutInitial
        - xxxxx

length
        - xxxxx

lengths
        - xxxxx

nodes
        - xxxxx

oldPositions
        - xxxxx

strength
        - xxxxx

strengths
        - xxxxx

theta
        - xxxxx

weights
        - xxxxx",A ROForceBasedLayout is inspired from the Code of D3.,,,,,"Instance Variables
        alpha:                <Object>
        center:                <Object>
        charge:                <Object>
        charges:                <Object>
        fixedNodes:                <Object>
        friction:                <Object>
        gravity:                <Object>
        layoutInitial:                <Object>
        length:                <Object>
        lengths:                <Object>
        nodes:                <Object>
        oldPositions:                <Object>
        strength:                <Object>
        strengths:                <Object>
        theta:                <Object>
        weights:                <Object>

alpha
        - xxxxx

center
        - xxxxx

charge
        - xxxxx

charges
        - xxxxx

fixedNodes
        - xxxxx

friction
        - xxxxx

gravity
        - xxxxx

layoutInitial
        - xxxxx

length
        - xxxxx

lengths
        - xxxxx

nodes
        - xxxxx

oldPositions
        - xxxxx

strength
        - xxxxx

strengths
        - xxxxx

theta
        - xxxxx

weights
        - xxxxx","The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045

Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.",,,,,,,,The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045,,,,,,Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.,
1,GtGraphTreemapLayoutConstraints,I am a ${class:BlLayoutConstraints}$ for ${class:GtGraphTreemapSquarifiedLayout}$ layout.,I am a ${class:BlLayoutConstraints}$ for ${class:GtGraphTreemapSquarifiedLayout}$ layout.,,I am a ${class:BlLayoutConstraints}$ for ${class:GtGraphTreemapSquarifiedLayout}$ layout.,,,,,,${class:BlLayoutConstraints}$ for ${class:GtGraphTreemapSquarifiedLayout}$,,,,,,,,,,,,,
1,GtGraphTreemapSlice,"My subclasses implement treemap slice algorithms.
See my subclasses for more details and examples: ${class:GtGraphTreemapSlice|show=gtSubclassesFor:|expanded=true}$",,,,,,,See my subclasses for more details and examples: ${class:GtGraphTreemapSlice|show=gtSubclassesFor:|expanded=true}$,"My subclasses implement treemap slice algorithms.
See my subclasses for more details and examples: ${class:GtGraphTreemapSlice|show=gtSubclassesFor:|expanded=true}$",,,,,,,,,,,,,,
1,GtGraphTreemapSliceHorizontalLayout,"I implement an horizontal slice algorithm.
I use ${class:GtGraphTreemapSliceHorizontal}$ to compute ${class:BlElement}$ children positions and extents.

!! Example 

${example:GtGraphTreemapLayoutExamples>>#numbersSliceHorizontal|codeExpanded=false|previewExpanded=true}$",I implement an horizontal slice algorithm.,,I use ${class:GtGraphTreemapSliceHorizontal}$ to compute ${class:BlElement}$ children positions and extents.,,,,,,"${class:GtGraphTreemapSliceHorizontal}$
 ${class:BlElement}$","!! Example 

${example:GtGraphTreemapLayoutExamples>>#numbersSliceHorizontal|codeExpanded=false|previewExpanded=true}$",,,,,,,,,,,,
1,GtGraphTreemapSquarify,"I split an area into rectangles that are close to squares (aspect ratio 1) as much as possible.
I use ${method:GtGraphTreemapNode>>#weight}$ node values to split an area into.
I use ${class:GtGraphTreemapSquarifyStep}$ to split area into sub-areas and measure ${class:GtGraphTreemapNode}$ positions and extends.

The algorithm is implemented as described in the paper by Mark Bruls, Kees Huizing, and Jarke J. van Wij, ""Squarified Treemaps"" [*PDF>https://www.win.tue.nl/~vanwijk/stm.pdf*].

!! Algorithm Explanation

This is an adapted extract from the paper Squarified Treemaps mentioned above. Suppose we have a rectangle with width ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#width}$ and height ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#height}$, and furthermore suppose that this rectangle must be subdivided in seven rectangles with areas ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#nodeValues}$. The area will be subdivided as follows:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|noCode|codeExpanded=false|previewExpanded=true|previewShow=#gtPreviewFor:}$

The *first step* of our algorithm is to split the initial rectangle. We choose for a horizontal subdivision, because the original rectangle is wider than high. We next fill the left half. First we add a single rectangle. The aspect ratio of this first rectangle is ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFirstStep|label=#worstValueRounded}$.

${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFirstStep|previewExpanded=true|noCode}$

Next we add a second rectangle, above the first. The worst aspect ratio improves to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSecondStep|label=#worstValueRounded}$.
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSecondStep|previewExpanded=true|noCode}$

However, if we add the next (area 4) above these original rectangles, the aspect ratio of this rectangle is ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesThirdStep|label=#worstValueRounded}$.
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesThirdStep|previewExpanded=true|noCode}$

Therefore, we decide that we have reached an optimum for the left half in step two, and start processing the right half. The initial subdivision we choose here is vertical, because the rectangle is higher than wider. In step 4 we add the rectangle with area 4:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFourthStep|previewExpanded=true|noCode}$

In the next step, we add area 3. The worst aspect ratio decreases from ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFourthStep|label=#worstValueRounded}$ to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|label=#worstValueRounded}$: 
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|previewExpanded=true|noCode}$

Addition of the next (area 2) however does not improve the result as the worst aspect ratio increases from ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|label=#worstValueRounded}$ to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSixthStep|label=#worstValueRounded}$:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSixthStep|previewExpanded=true|noCode}$

So we reject the previous step and start to fill the right top partition:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSeventhStep|previewExpanded=true|noCode}$
 
These steps are repeated until all rectangles have been processed. The final result is the following:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|noCode|codeExpanded=false|previewExpanded=true}$.

An optimal result can not be guaranteed, and counterexamples can be set up. The order in which the rectangles are processed is important. We found that a decreasing order usually gives the best results. The initially large rectangle is then filled in first with the larger subrectangles.",,"I split an area into rectangles that are close to squares (aspect ratio 1) as much as possible.
I use ${method:GtGraphTreemapNode>>#weight}$ node values to split an area into.
I use ${class:GtGraphTreemapSquarifyStep}$ to split area into sub-areas and measure ${class:GtGraphTreemapNode}$ positions and extends.","I use ${method:GtGraphTreemapNode>>#weight}$ node values to split an area into.
I use ${class:GtGraphTreemapSquarifyStep}$ to split area into sub-areas and measure ${class:GtGraphTreemapNode}$ positions and extends.",,,,"The algorithm is implemented as described in the paper by Mark Bruls, Kees Huizing, and Jarke J. van Wij, ""Squarified Treemaps"" [*PDF>https://www.win.tue.nl/~vanwijk/stm.pdf*].",,,"! Algorithm Explanation

This is an adapted extract from the paper Squarified Treemaps mentioned above. Suppose we have a rectangle with width ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#width}$ and height ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#height}$, and furthermore suppose that this rectangle must be subdivided in seven rectangles with areas ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#nodeValues}$. The area will be subdivided as follows:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|noCode|codeExpanded=false|previewExpanded=true|previewShow=#gtPreviewFor:}$

The *first step* of our algorithm is to split the initial rectangle. We choose for a horizontal subdivision, because the original rectangle is wider than high. We next fill the left half. First we add a single rectangle. The aspect ratio of this first rectangle is ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFirstStep|label=#worstValueRounded}$.

${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFirstStep|previewExpanded=true|noCode}$

Next we add a second rectangle, above the first. The worst aspect ratio improves to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSecondStep|label=#worstValueRounded}$.
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSecondStep|previewExpanded=true|noCode}$

However, if we add the next (area 4) above these original rectangles, the aspect ratio of this rectangle is ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesThirdStep|label=#worstValueRounded}$.
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesThirdStep|previewExpanded=true|noCode}$

Therefore, we decide that we have reached an optimum for the left half in step two, and start processing the right half. The initial subdivision we choose here is vertical, because the rectangle is higher than wider. In step 4 we add the rectangle with area 4:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFourthStep|previewExpanded=true|noCode}$

In the next step, we add area 3. The worst aspect ratio decreases from ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFourthStep|label=#worstValueRounded}$ to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|label=#worstValueRounded}$: 
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|previewExpanded=true|noCode}$

Addition of the next (area 2) however does not improve the result as the worst aspect ratio increases from ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|label=#worstValueRounded}$ to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSixthStep|label=#worstValueRounded}$:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSixthStep|previewExpanded=true|noCode}$

So we reject the previous step and start to fill the right top partition:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSeventhStep|previewExpanded=true|noCode}$
 
These steps are repeated until all rectangles have been processed. The final result is the following:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|noCode|codeExpanded=false|previewExpanded=true}$.",,"The algorithm is implemented as described in the paper by Mark Bruls, Kees Huizing, and Jarke J. van Wij, ""Squarified Treemaps"" [*PDF>https://www.win.tue.nl/~vanwijk/stm.pdf*].","An optimal result can not be guaranteed, and counterexamples can be set up. The order in which the rectangles are processed is important.",,https://www.win.tue.nl/~vanwijk/stm.pdf,,,We found that a decreasing order usually gives the best results. The initially large rectangle is then filled in first with the larger subrectangles.,,The order in which the rectangles are processed is important.,,
1,GtGraphTreemapSquarifyLandscapeRectangle,"I represent a rectangle. My height is smaller than my width.
I layout ${class:GtGraphTreemapNode}$ along my shorter side (height).
I am used by ${class:GtGraphTreemapSquarifyStep}$.

!! Example

In the following example, I occupy top-right side of a total area with ${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesFirstArea|label=#nodesCount}$ nodes:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesFirstArea|noCode}$",I represent a rectangle. My height is smaller than my width.,I layout ${class:GtGraphTreemapNode}$ along my shorter side (height).,I am used by ${class:GtGraphTreemapSquarifyStep}$.,,,,,,,"!! Example

In the following example, I occupy top-right side of a total area with ${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesFirstArea|label=#nodesCount}$ nodes:
${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesFirstArea|noCode}$",,,,,,,,,,,,
1,GtLibraryInstaller,"I am the installer of shared libraries along side image or vm.
I should be configured by the user for a specific library.

The following example shows how I am configured for Sparta/Moz2D library.

[[[
| installer |
installer := GtLibraryInstaller new.
installer library: 'Moz2D'.
installer version: 'development'.
installer binary: 'libMoz2D'.
installer url: 'https://dl.feenk.com/{library}/{platform}/{version}/{arch}/{binary}.{extension}'.
installer running: [ MozServices isRunning ].
installer works: [ MozLibrary uniqueInstance hasModule ].
installer postInstall: [ MozServices start ].
]]]",I am the installer of shared libraries along side image or vm.,,,,,,,,,"The following example shows how I am configured for Sparta/Moz2D library.

[[[
| installer |
installer := GtLibraryInstaller new.
installer library: 'Moz2D'.
installer version: 'development'.
installer binary: 'libMoz2D'.
installer url: 'https://dl.feenk.com/{library}/{platform}/{version}/{arch}/{binary}.{extension}'.
installer running: [ MozServices isRunning ].
installer works: [ MozLibrary uniqueInstance hasModule ].
installer postInstall: [ MozServices start ].
]]]",,,,,,I should be configured by the user for a specific library.,,,,,,
1,GtLibraryInstallerLogAnnouncement,"I am sent by installer when it tries to log some messages.

The UI may want to display them in a Transcript",,I am sent by installer when it tries to log some messages.,The UI may want to display them in a Transcript,,,,,,,,,,,,,,,,,,,
1,GtLibraryInstallerMorph,Top most container of the whole installer,Top most container of the whole installer,,,,,,,,,,,,,,,,,,,,,
1,GtPhlowForwarderView,"I forward a view definition to another object.
I am useful in situations when the object that has the view definition is expensive to create.
I am also useful in situtions, when the object is created only for the purpose of the view.

I create the object only if someone clicks on my tab (view).

!! Important

${method:GtPhlowView>>#title}$ and ${method:GtPhlowView>>#priority}$ are not taken from the original view. If that were the case, the advantage of the solution would be lost since the title and priority are necessary to build the view tab using the title and priority.

!! Example

You can define me as follow: ${method:GtPhlowViewExamples>>#gtForwardedViewFor:|expanded=true}$",,"I forward a view definition to another object.
I am useful in situations when the object that has the view definition is expensive to create.
I am also useful in situtions, when the object is created only for the purpose of the view.

I create the object only if someone clicks on my tab (view).",,,,,,,,"!! Example

You can define me as follow: ${method:GtPhlowViewExamples>>#gtForwardedViewFor:|expanded=true}$",,,"!! Important

${method:GtPhlowView>>#title}$ and ${method:GtPhlowView>>#priority}$ are not taken from the original view. If that were the case, the advantage of the solution would be lost since the title and priority are necessary to build the view tab using the title and priority.",,,,,,,,,
1,GtPlotterAxisProjection,"I represent a projection value  of a domain object on the axis.

Given a Point (20@30) as a domain object and euclidian coordinate system.
Then projection of that point on continuous X-Axis would be 20 and projection on Y-axis would be 30.

A projection of a domain object on discrete axis is an index of that object in a data set",I represent a projection value of a domain object on the axis.,,,,A projection of a domain object on discrete axis is an index of that object in a data set,,,,,"Given a Point (20@30) as a domain object and euclidian coordinate system.
Then projection of that point on continuous X-Axis would be 20 and projection on Y-axis would be 30.",,,,,,,,,,,,
1,GtPlotterScaleDomain,"In mathematics, and more specifically in naive set theory, the domain of definition (or simply the domain) of a function is the set of ""input"" or argument values for which the function is defined. That is, the function provides an ""output"" or value for each member of the domain.[1] Conversely, the set of values the function takes on as output is termed the image of the function, which is sometimes also referred to as the range of the function.

https://en.wikipedia.org/wiki/Domain_of_a_function",,,,,,,,,,,,,,,https://en.wikipedia.org/wiki/Domain_of_a_function,,,"In mathematics, and more specifically in naive set theory, the domain of definition (or simply the domain) of a function is the set of ""input"" or argument values for which the function is defined. That is, the function provides an ""output"" or value for each member of the domain.[1] Conversely, the set of values the function takes on as output is termed the image of the function, which is sometimes also referred to as the range of the function.",,,,
1,GtProtoTasker,"I am an abstract tasker defining mandatory methods for all taskers. 
Tasker is responsible for collectin ${class:GtTaskerTask}$ tasks and executing them when requested. 

Mandatory methods are: 
- ${method:GtProtoTasker>>#addTask:|expanded=true}$
- ${method:GtProtoTasker>>#flush|expanded=true}$

Interesting taskers to explore are ${class:GtTaskerOrderedNonRepetitive}$ and ${class:GtPostponingTasker}$.",I am an abstract tasker defining mandatory methods for all taskers.,Tasker is responsible for collectin ${class:GtTaskerTask}$ tasks and executing them when requested.,,"Mandatory methods are: 
- ${method:GtProtoTasker>>#addTask:|expanded=true}$
- ${method:GtProtoTasker>>#flush|expanded=true}$",,,,Interesting taskers to explore are ${class:GtTaskerOrderedNonRepetitive}$ and ${class:GtPostponingTasker}$.,"${class:GtTaskerTask}$
 ${class:GtTaskerOrderedNonRepetitive}$
 ${class:GtPostponingTasker}$",,,,,,,,,,,,,
1,GtRemoteInspector,"GtRemoteInspector provides a mechanism for remote viewing of objects over a REST/JSON API.

Public API and Key Messages

- message one   
- message two 
- (for bonus points) how to create instances.

   One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

    Instance Variables
        namedObjects:                <Object>


    Implementation Points",,GtRemoteInspector provides a mechanism for remote viewing of objects over a REST/JSON API.,,"Public API and Key Messages

- message one   
- message two 
- (for bonus points) how to create instances.",,"Internal Representation and Key Implementation Points.

    Instance Variables
        namedObjects:                <Object>",,,,,,,,,,,,,,,,
1,GtRlBaselineTagReleaseStrategy,"I am a release strategy that uses the current loaded tag for a repository as the version number.

I indicate a passive release as no actions need to be executed. The version number already exists in the repository.
I should only be used for repositories that have no child repositories or when all child repositories also use this strategy, as I hardcode an existing tag.
As I am passive I do not export any metadata. Even if the repository has child repositories there will be no metadata exported. Because of this I do not use metadata to check previous versions (it is not reliable).

I am a valid release strategy only when all Monticello baselines that load this project use the same tag to load it. 
See ${method:GtRlBaselineTagReleaseStrategy>>#assertCompatibleWithRepository:}$ for assertions that check when I can be used.","""I am a release strategy that uses the current loaded tag for a repository as the version number.","""I am a release strategy that uses the current loaded tag for a repository as the version number.

I indicate a passive release as no actions need to be executed. The version number already exists in the repository.",,,As I am passive I do not export any metadata. Even if the repository has child repositories there will be no metadata exported. Because of this I do not use metadata to check previous versions (it is not reliable).,,,,,"I am a valid release strategy only when all Monticello baselines that load this project use the same tag to load it. 
See ${method:GtRlBaselineTagReleaseStrategy>>#assertCompatibleWithRepository:}$ for assertio",,,,,,,"I should only be used for repositories that have no child repositories or when all child repositories also use this strategy, as I hardcode an existing tag.",,,,,
1,GtRlCommitAndTagReleaseAction,"I execute a commit of the current changes staged for commit and push a tag corresponding to the version number of the repository release.

I only work with strategies of type ${class:GtRlSemanticTagReleaseStrategy}$. 
See ${method:GtRlSemanticTagReleaseStrategy>>#commitAndTagRelease} for more implementation details.",,I execute a commit of the current changes staged for commit and push a tag corresponding to the version number of the repository release.,I only work with strategies of type ${class:GtRlSemanticTagReleaseStrategy}$.,,"I only work with strategies of type ${class:GtRlSemanticTagReleaseStrategy}$. 
See ${method:GtRlSemanticTagReleaseStrategy>>#commitAndTagRelease} for more implementation details.",,See ${method:GtRlSemanticTagReleaseStrategy>>#commitAndTagRelease} for more implementation details.,,,,,,,,,,,,,,,
1,GtRlMajorVersionComputation,"I increment the major number of a semantic version. I reset both the patch and minor parts of the version number to zero.

${example:GtRlSemanticVersionComputationExamples>>#nextMajorVersionComputation}$

If the symbolic version number on which I am applied has a patch or a minor number I reset them to zero in the created version number.
${example:GtRlSemanticVersionComputationExamples>>#nextMajorVersionComputationResettingPatchAndMinorNumbers}$",,I increment the major number of a semantic version. I reset both the patch and minor parts of the version number to zero.,,,If the symbolic version number on which I am applied has a patch or a minor number I reset them to zero in the created version number.,,,,,${example:GtRlSemanticVersionComputationExamples>>#nextMajorVersionComputationResettingPatchAndMinorNumbers}$ ${example:GtRlSemanticVersionComputationExamples>>#nextMajorVersionComputation}$,,,,,,,,,,,,
1,GtRlNode,I am an abstraction for a type of dependency in the loading configuration of a system.,I am an abstraction for a type of dependency in the loading configuration of a system.,I am an abstraction for a type of dependency in the loading configuration of a system.,,,,,,,,,,,,,,,,,,,,
1,GtRlReleaseConfiguration,"I model options for configuring how releases are performed.

I am used by a ${class:GtRlReleaseBuilder}$ to create a new release. Users can configure default options that apply to all repositories from a release, or configure options for individual repositories.

My main API methods for setting other default options are:
- ${method:GtRlReleaseConfiguration>>#defaultReleaseBranchName:}$ The branch name on which to perform the release.
- ${method:GtRlReleaseConfiguration>>#defaultVersionComputation:}$ The strategy for computing the next version number in case a version already exists. These are subclasses of ${class:GtRlSemanticVersionComputation}$;
- ${method:GtRlReleaseConfiguration>>#defaultVersionNumber:}$ The version number to use in case there are no previous releases in a repository.
- ${method:GtRlReleaseConfiguration>>#forceNewRelease}$ Force a new release in a repository even if there no new changes in that repository and all dependencies did not change.

By default I use a release strategy of type ${class:GtRlDedicatedBranchReleaseStrategy}$. However, a custom release strategy can be configured for each indivual project using the method ${method:GtRlReleaseConfiguration>>#setReleaseStrategyOfType:forProjecs:}$.",,I model options for configuring how releases are performed.,"I am used by a ${class:GtRlReleaseBuilder}$ to create a new release. Users can configure default options that apply to all repositories from a release, or configure options for individual repositories.","My main API methods for setting other default options are:
- ${method:GtRlReleaseConfiguration>>#defaultReleaseBranchName:}$ The branch name on which to perform the release.
- ${method:GtRlReleaseConfiguration>>#defaultVersionComputation:}$ The strategy for computing the next version number in case a version already exists. These are subclasses of ${class:GtRlSemanticVersionComputation}$;
- ${method:GtRlReleaseConfiguration>>#defaultVersionNumber:}$ The version number to use in case there are no previous releases in a repository.
- ${method:GtRlReleaseConfiguration>>#forceNewRelease}$ Force a new release in a repository even if there no new changes in that repository and all dependencies did not change.",,,,,,,,,"However, a custom release strategy can be configured for each indivual project using the method ${method:GtRlReleaseConfiguration>>#setReleaseStrategyOfType:forProjecs:}$.",,,"By default I use a release strategy of type ${class:GtRlDedicatedBranchReleaseStrategy}$. However, a custom release strategy can be configured for each indivual project using the method ${method:GtRlReleaseConfiguration>>#setReleaseStrategyOfType:forProjecs:}$.",,,,"However, a custom release strategy can be configured for each indivual project using the method ${method:GtRlReleaseConfiguration>>#setReleaseStrategyOfType:forProjecs:}$.",,
1,GtSnippetElementHolder,"I hold a snippet element within an infinite list element.
I know my unique snippet type (pharo code, url, empty etc)",,"I hold a snippet element within an infinite list element.I know my unique snippet type (pharo code, url, empty etc)",,,,,,,,,,,,,,,,,,,,
1,GtSnippetRequest,I am sent by snippet widget looks when they request to receive a snippet model from the widget model,I am sent by snippet widget looks when they request to receive a snippet model from the widget model,I am sent by snippet widget looks when they request to receive a snippet model from the widget model,,,,,,,,,,,,,,,,,,,,
1,SkiaFilterSourceCanvas,When canvas is a source of a filter we should take its snapshot,,,,,,,,,,,,,,,,,,When canvas is a source of a filter we should take its snapshot,,,,
1,SpartaCairoTextMetrics,"I store the extents of a single glyph or a string of glyphs in user-space coordinates. Because text extents are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.

bearingX - the horizontal distance from the origin to the leftmost part of the glyphs as drawn. Positive if the glyphs lie entirely to the right of the origin.

bearingY - the vertical distance from the origin to the topmost part of the glyphs as drawn. Positive only if the glyphs lie completely below the origin; will usually be negative.

width - width of the glyphs as drawn

height - height of the glyphs as drawn

advanceX - distance to advance in the X direction after drawing these glyphs

advanceY - distance to advance in the Y direction after drawing these glyphs. Will typically be zero except for vertical text layout as found in East-Asian languages.",,I store the extents of a single glyph or a string of glyphs in user-space coordinates.,,,"Because text extents are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.","bearingX - the horizontal distance from the origin to the leftmost part of the glyphs as drawn. Positive if the glyphs lie entirely to the right of the origin.

bearingY - the vertical distance from the origin to the topmost part of the glyphs as drawn. Positive only if the glyphs lie completely below the origin; will usually be negative.

width - width of the glyphs as drawn

height - height of the glyphs as drawn

advanceX - distance to advance in the X direction after drawing these glyphs

advanceY - distance to advance in the Y direction after drawing these glyphs. Will typically be zero except for vertical text layout as found in East-Asian languages.",,,,,,,"They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.",,,,,,,,,
1,SpartaCanvas,"! SpartaCanvas
I represent a Sparta canvas and provide an API to perform various drawing operations.
I define an abstract API of Sparta canvas that all concrete implementations must have.

!! Overview
My main responsibility is to create and provide backend specific builders and various objects.

In order to create and perform a drawing operation users should rely on corresponding builder.
For example if one wants to fill a path with a paint she needs to send #fill message to canvas to get a fill builder (painter).

There is a separate builder for every single operation. They can be found in ""api"" protocol.

I'm also responsible for creation of filter primitives (filter types) that are used with ""filter"" operation.
They can be found in ""filters"" protocol.

I am polymorphic with ==SpartaSurface==.

!! Public API and Key Messages

- ==fill== - create a builder of fill drawing operation  
- ==stroke== - create a builder of stroke drawing operation
- ==path== - create a path builder
- ==paint== - create a paint builder (linear, radial gradients)
- ==clip== - create a builder to clip canvas by path (or rectangle)
- ==transform== - create a builder to transform canvas
- ==font== - create a font build helper
- ==text== - create a text rendering builder
- ==filter== - create a builder of filter drawing operation
- ==mask== - create a builder of masking draw operation
- ==bitmap== - create a bitmap factory
- ==shape== - create a common shapes factory (ellipse, rounded rectangle, etc)
- ==filters== - create a common filters factory

- ==extent== - get my size (width@height)
- ==similar:== - to create an empty canvas of size anExtent and of the same type and format 
- ==asForm== - to rasterize myself and return resulting image as Form

''I am an abstract class and should not be instantiated. However, the best way to create an instance of sparta canvas is to send extent: message.''

!! Example:

Create an empty canvas of size 400@250:
[[[language=smalltalk
canvas := SpartaCanvas extent: 400@250.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/01_empty.png|label=emptyCanvas+


Create a triangle vector path:
[[[language=smalltalk
triangle := canvas path
        moveTo: 100@0;
        lineTo: 200@200;
        lineTo: 0@200;
        close;
        finish.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/02_triangle_path.png|label=trianglePath+

Create a linear gradient:
[[[language=smalltalk
linearGradient := canvas paint linearGradient
        begin: 50@100;
        end: 150@200;
        stops: { 0 -> Color red. 1 -> Color blue }.
]]]

Apply translation to place trangle in the center:
[[[language=smalltalk
canvas transform
        push;
        translateBy: 100@25;
        apply.
]]]

Fill previously created path fith linear gradient:
[[[language=smalltalk
canvas fill
        paint: linearGradient;
        path: triangle;
        draw.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/03_fill_path.png|label=fillPath+

Stroke triangle with blue color:
[[[language=smalltalk
canvas stroke
        paint: Color blue;
        path: triangle;
        width: 6;
        draw.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/04_stroke_path.png|label=strokePath+

Restore transformation matrix:
[[[language=smalltalk
canvas transform pop.
]]]

Create a gaussian blur filter:
[[[language=smalltalk
blur := canvas gaussianBlurFilter
        stdDeviation: 4.
]]]

Apply filter on the whole canvas:
[[[language=smalltalk
canvas filter
        area: canvas bounds;
        type: blue;
        draw.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/05_blur.png|label=blur+","! SpartaCanvas
I represent a Sparta canvas and provide an API to perform various drawing operations.","I define an abstract API of Sparta canvas that all concrete implementations must have.

!! Overview
My main responsibility is to create and provide backend specific builders and various objects.

In order to create and perform a drawing operation users should rely on corresponding builder.

There is a separate builder for every single operation. They can be found in ""api"" protocol.

I'm also responsible for creation of filter primitives (filter types) that are used with ""filter"" operation.
They can be found in ""filters"" protocol.",I am polymorphic with ==SpartaSurface==.,"!! Public API and Key Messages

- ==fill== - create a builder of fill drawing operation  
- ==stroke== - create a builder of stroke drawing operation
- ==path== - create a path builder
- ==paint== - create a paint builder (linear, radial gradients)
- ==clip== - create a builder to clip canvas by path (or rectangle)
- ==transform== - create a builder to transform canvas
- ==font== - create a font build helper
- ==text== - create a text rendering builder
- ==filter== - create a builder of filter drawing operation
- ==mask== - create a builder of masking draw operation
- ==bitmap== - create a bitmap factory
- ==shape== - create a common shapes factory (ellipse, rounded rectangle, etc)
- ==filters== - create a common filters factory

- ==extent== - get my size (width@height)
- ==similar:== - to create an empty canvas of size anExtent and of the same type and format 
- ==asForm== - to rasterize myself and return resulting image as Form",,,,,==SpartaSurface==,"!! Example:

Create an empty canvas of size 400@250:
[[[language=smalltalk
canvas := SpartaCanvas extent: 400@250.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/01_empty.png|label=emptyCanvas+


Create a triangle vector path:
[[[language=smalltalk
triangle := canvas path
        moveTo: 100@0;
        lineTo: 200@200;
        lineTo: 0@200;
        close;
        finish.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/02_triangle_path.png|label=trianglePath+

Create a linear gradient:
[[[language=smalltalk
linearGradient := canvas paint linearGradient
        begin: 50@100;
        end: 150@200;
        stops: { 0 -> Color red. 1 -> Color blue }.
]]]

Apply translation to place trangle in the center:
[[[language=smalltalk
canvas transform
        push;
        translateBy: 100@25;
        apply.
]]]

Fill previously created path fith linear gradient:
[[[language=smalltalk
canvas fill
        paint: linearGradient;
        path: triangle;
        draw.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/03_fill_path.png|label=fillPath+

Stroke triangle with blue color:
[[[language=smalltalk
canvas stroke
        paint: Color blue;
        path: triangle;
        width: 6;
        draw.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/04_stroke_path.png|label=strokePath+

Restore transformation matrix:
[[[language=smalltalk
canvas transform pop.
]]]

Create a gaussian blur filter:
[[[language=smalltalk
blur := canvas gaussianBlurFilter
        stdDeviation: 4.
]]]

Apply filter on the whole canvas:
[[[language=smalltalk
canvas filter
        area: canvas bounds;
        type: blue;
        draw.
]]]
+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/05_blur.png|label=blur+",,,"'I am an abstract class and should not be instantiated. However, the best way to create an instance of sparta canvas is to send extent: message.''",,"+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/01_empty.png|label=emptyCanvas+

+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/02_triangle_path.png|label=trianglePath+

+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/03_fill_path.png|label=fillPath+

+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/04_stroke_path.png|label=strokePath+

+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/05_blur.png|label=blur+",,,,,,,
1,SpartaLine,"I represent a line.

I am meant to be polymorphic with Rectangle and Path and can be used as path in various operations, except clipping.

Public API and Key Messages

- from get my start point
- to get my end point

  SpartaLine from: 10@10 to: 20@20
 
Internal Representation and Key Implementation Points.

    Instance Variables
        from:                <Point>
        to:                <Point>


    Implementation Points",I represent a line.,"I am meant to be polymorphic with Rectangle and Path and can be used as path in various operations, except clipping.",,"Public API and Key Messages

- from get my start point
- to get my end point

  SpartaLine from: 10@10 to: 20@20",,"Instance Variables
        from:                <Point>
        to:                <Point>",,,,,,,,,,,,,,,,
1,SpUserFontSource,I represent a font face source and know how to retrieve font contents from it,I represent a font face source,and know how to retrieve font contents from it,,,,,,,,,,,,,,,,,,,,
1,SpUserFontSourceBuffer,"I am a buffer source.
Is useful if font is stored as byte array in the image",I am a buffer source.,,,,,,,,,,,,,,,,Is useful if font is stored as byte array in the image,,,,,
1,TBlEventTarget,"I implement a basic infrastructure of event management.
Any object that needs to be able to handle events should use me.",,I implement a basic infrastructure of event management.,,,,,,,,,,,,,,,Any object that needs to be able to handle events should use me.,,,,,
1,TSpartaCompositeFilter,"I am a composite filter and can have an arbitrary amount of input soures

https://www.w3.org/TR/SVG/filters.html#feCompositeElement

Example:

        ""Merge"" filter primitive is just a composite filter with OVER composion mode.

        merge := canvas compositeFilter
                over;
                source: filter1;
                source:filter2;
                source: filter3;
                source: filter4
                ...",I am a composite filter and can have an arbitrary amount of input soures,,,,,,https://www.w3.org/TR/SVG/filters.html#feCompositeElement,,,"Example:

        ""Merge"" filter primitive is just a composite filter with OVER composion mode.

        merge := canvas compositeFilter
                over;
                source: filter1;
                source:filter2;
                source: filter3;
                source: filter4
                ...",,,,,https://www.w3.org/TR/SVG/filters.html#feCompositeElement,,,,,,,
1,TSpartaPaint,"! TSpartaPaint

I define an API of a Paint. Backend specific paints  should use me and provide concrete implemenations of all my methods.

!! Overview
A paint is transformable and can be used with one of extend modes, for example repeat, reflect or clamp.

I am instantiated by canvas and does not supposed to be created by refering paint class directly.
Sparta canvas provides a paint builder that should be used to build concerete paints.

!! Public API and Key Messages
''I define an api of an abstract paint.''

- ==transformation== - to get current transformation matrix, can not be mil
- ==transformation:== set new paint transformation. If not set, supposed to be identity.
- ==clamp== - do not repeat me
- ==reflect== - mirror the image
- ==repeat== - repeat in both X and Y axis
- ==repeatX== - repeat only X axis
- ==repeatY== - repeat only Y axis
- ==rotateByDegrees:== rotate me by amount of degrees clockwise
- ==rotateByRadians:== rotate me by amount of radians clockwise
- ==scaleBy:== scale me by a factor, a Point or a number.
- ==translateBy:== translate me by a Point or a number
 
!! Internal Representation and Key Implementation Points.

Generally, a Paint is not meant to be an external object, however for additional flexibility I am implemented as a Trait.",,"! TSpartaPaint

I define an API of a Paint.

!! Overview
A paint is transformable and can be used with one of extend modes, for example repeat, reflect or clamp.","I am instantiated by canvas and does not supposed to be created by refering paint class directly.
Sparta canvas provides a paint builder that should be used to build concerete paints.","!! Public API and Key Messages
''I define an api of an abstract paint.''

- ==transformation== - to get current transformation matrix, can not be mil
- ==transformation:== set new paint transformation. If not set, supposed to be identity.
- ==clamp== - do not repeat me
- ==reflect== - mirror the image
- ==repeat== - repeat in both X and Y axis
- ==repeatX== - repeat only X axis
- ==repeatY== - repeat only Y axis
- ==rotateByDegrees:== rotate me by amount of degrees clockwise
- ==rotateByRadians:== rotate me by amount of radians clockwise
- ==scaleBy:== scale me by a factor, a Point or a number.
- ==translateBy:== translate me by a Point or a number","!! Internal Representation and Key Implementation Points.

Generally, a Paint is not meant to be an external object, however for additional flexibility I am implemented as a Trait.",,,,,,,,,,,Backend specific paints  should use me and provide concrete implemenations of all my methods.,,,,,,
1,TSpartaStrokeOptions,"I define an api of stroke options object.
Stroke options are used in stroking operations.",,"I define an api of stroke options object.
Stroke options are used in stroking operations.",,"I define an api of stroke options object.
Stroke options are used in stroking operations.",,,,,,,,,,,,,,,,,,
1,TSpFontDescriptor,"I am a helper trait that defines basic font properties such as weight, style and stretch",I am a helper trait,"that defines basic font properties such as weight, style and stretch",,,,,,,,,,,,,,,,,,,,
1,TSpTextRun,"I define an API of a Text run - an object that holds an array of glyphs that represent a piece of text.

Note that TextRun is optimised for the case of simple ASCII string (all chars are 8 bit), simple multilanguage string (all chars are 16 bit) and complex scripts (characters have various length of 8-32 bits).

Users should never instantiate TextRun directly, instead ask TextPainter to do the necessary job - it is needed to support backend specific text runs",an object that holds an array of glyphs that represent a piece of text.,I define an API of a Text run,,,"Note that TextRun is optimised for the case of simple ASCII string (all chars are 8 bit), simple multilanguage string (all chars are 16 bit) and complex scripts (characters have various length of 8-32 bits).",,,,,,,,"Note that TextRun is optimised for the case of simple ASCII string (all chars are 8 bit), simple multilanguage string (all chars are 16 bit) and complex scripts (characters have various length of 8-32 bits).

Users should never instantiate TextRun directly, instead ask TextPainter to do the necessary job - it is needed to support backend specific text runs",,,,,,,,,
1,XdDocumentsExamples,"!! How-To Create Base64 String

[[[
| aDocument anXdFile |
aDocument := Gt2DocumentExamples new documentWithExistingClass.
anXdFile := aDocument saveToXDoc.
ZnBase64Encoder new 
        breakLines;
        encode: anXdFile streamingStrategy bytes 
]]]",,,,,,,,,,"!! How-To Create Base64 String

[[[
| aDocument anXdFile |
aDocument := Gt2DocumentExamples new documentWithExistingClass.
anXdFile := aDocument saveToXDoc.
ZnBase64Encoder new 
        breakLines;
        encode: anXdFile streamingStrategy bytes 
]]]",,,,,,,,,,,,
2,FameOppositeClassNotExistRule,Check if the opposite class declared in a pragma #MSEProperty:type:opposite: is defined.,,Check if the opposite class declared in a pragma #MSEProperty:type:opposite: is defined.,,,,,,,,,,,,,,,,,,,,
2,FAMIXAnnotationTypeGroup,FAMIXAnnotationTypeGroup is a MooseGroup containing only FAMIX enities of type FAMIXAnnotationType.,FAMIXAnnotationTypeGroup is a MooseGroup containing only FAMIX enities of type FAMIXAnnotationType.,FAMIXAnnotationTypeGroup is a MooseGroup containing only FAMIX enities of type FAMIXAnnotationType.,,,,,,,"MooseGroup
FAMIXAnnotationType.",,,,,,,,,,,,,
2,FamixGenerator,"| g |
g := FamixGenerator new.
g generateWithoutCleaning.
FamixCompatibilityGenerator resetMetamodel.",,,,,,,,,,"| g |
g := FamixGenerator new.
g generateWithoutCleaning.
FamixCompatibilityGenerator resetMetamodel.",,,,,,,,,,,,
2,FamixJavaEntity,"file :=  'ArgoUML-0.34.mse' asFileReference readStream.

dictionary := Dictionary newFrom: (
        FamixJavaEntity withAllSubclasses collect: [ :c | 
                cn := c name withoutPrefix: #FamixJava.
                ('FAMIX.', cn) -> ('FamixJava-Entities.', cn) ]).

dictionary at: 'FAMIX.JavaSourceLanguage' put: 'FamixJava-Entities.SourceLanguage'.

repo := MooseModel importFrom: file withMetamodel: FamixJavaGenerator metamodel translationDictionary: dictionary.

model := MooseModel new.
        model silentlyAddAll: repo elements.
        model entityStorage forRuntime.
model.",,,,,,,,,,"file :=  'ArgoUML-0.34.mse' asFileReference readStream.

dictionary := Dictionary newFrom: (
        FamixJavaEntity withAllSubclasses collect: [ :c | 
                cn := c name withoutPrefix: #FamixJava.
                ('FAMIX.', cn) -> ('FamixJava-Entities.', cn) ]).

dictionary at: 'FAMIX.JavaSourceLanguage' put: 'FamixJava-Entities.SourceLanguage'.

repo := MooseModel importFrom: file withMetamodel: FamixJavaGenerator metamodel translationDictionary: dictionary.

model := MooseModel new.
        model silentlyAddAll: repo elements.
        model entityStorage forRuntime.
model.",,,,,,,,,,,,
2,FAMIXNamespaceGroup,FAMIXNamespaceGroup is a MooseGroup containing only FAMIX enities of type FAMIXNamespace.,FAMIXNamespaceGroup is a MooseGroup,containing only FAMIX enities of type FAMIXNamespace.,containing only FAMIX enities of type FAMIXNamespace.,,,,,,FAMIXNamespace,,,,,,,,,,,,,
2,FamixTDereferencedInvocation,"Represents an invocation which function is contained in a pointer.

The function itself is typically unknown (referenced by the pointer).

It has a referencer which is the pointer variable",Represents an invocation which function is contained in a pointer.,The function itself is typically unknown (referenced by the pointer).It has a referencer which is the pointer variable,,,,,,,,,,,The function itself is typically unknown (referenced by the pointer).,,,,,,,,,
2,FamixTPackage,"FAMIXPackage represents a package in the source language, meaning that it provides a means to group entities without any baring on lexical scoping. 

Java extractors map Java packages to FAMIXNamespaces. They can also mirror the same information in terms of FAMIXPackage instances.","FAMIXPackage represents a package in the source language,",meaning that it provides a means to group entities without any baring on lexical scoping.,,,Java extractors map Java packages to FAMIXNamespaces. They can also mirror the same information in terms of FAMIXPackage instances.,,,,"FAMIXNamespaces
FAMIXPackage",,,,,,,,,,,,,
2,FamixTParameterType,"ParameterType represents the symbolic type used in parameterizable classes. This is a FAMIXType.

Example:
public class AClass<A,B,C> {
...
}

Where AClass is a ParameterizableClass. A, B and C are ParameterType of AClass.",ParameterType represents the symbolic type used in parameterizable classes. This is a FAMIXType.,,,,,,,,,"Example:
public class AClass<A,B,C> {
...
}

Where AClass is a ParameterizableClass. A, B and C are ParameterType of AClass.",,,,,,,,,,,,
2,FamixTTrait,FAMIXTrait models a trait as it can be found in Pharo or PHP.,,FAMIXTrait models a trait as it can be found in Pharo or PHP.,FAMIXTrait models a trait as it can be found in Pharo or PHP.,,,,,,,,,,,,,,,,,,,
2,FMFutureProperty,"Description
--------------------

I represent a property of the object currently been imported while it is not yet imported.

I will be useful until all my values are resolved. Each time a value is resolved I'll check if I can be resolved. In that case, I'll push my values in real property.
 
Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
	parentClass:		<aFMFutureEntity>		The entity owning the property.
	values:			<aCollection>			The values of the property. Those values can contain dangling references while everything is not imported yet.","""Description
--------------------

I represent a property of the object currently been imported while it is not yet imported.","I represent a property of the object currently been imported while it is not yet imported.

I will be useful until all my values are resolved. Each time a value is resolved I'll check if I can be resolved. In that case, I'll push my values in real property.",,,,"Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
	parentClass:		<aFMFutureEntity>		The entity owning the property.
	values:			<aCollection>			The values of the property. Those values can contain dangling references while everything is not imported yet.""",,,,,,,,,,,,,,,,
2,FMModel,"Description
--------------------

I am a model used in the scope of Fame.

I contains real instances of a class representing a concept in the current metamodel. This class is described by an entity of my meta-model. 

I have a meta-model containing descriptions of my content. A FMModel has a FMMetaModel as meta-model which has a FMMetaMetaModel has metamodel. 

For example, in the Smalltalk metamodel of Famix, if we want to represent the Point class we will have:
- A FMModel containing an instance of FamixStClass representing the Point class.
- A FMMetaModel containing instances of FM3Elements describing FamixStClass.
- A FMMetaMetaModel containing instances of FM3Element describing FM3 meta model (Package, Class and Property).

I include a system of caches in case my users want to store informations to speed up an application.

I will initialize myself with a new FMMetaModel but this one can be replaced by an existing one.

Public API and Key Messages
--------------------

- #metaDescriptionOn:                 Allows one to get the meta-description of an element.

Examples
--------------------
        
        | model |
        model := FMModel new.
        model metamodel importString: FMHeinekenExample metamodelMSE.
        model.


        model := (FMModel withMetamodel: (FMMetaModel fromString: FMHeinekenExample metamodelMSE)).
 
Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
        additionalProperties:                <aDictionary>                A cache used to store some informations about the model.
        elements:                                                <aCollection>                All the entities of the model.
        metamodel:                                        <aFMMetaModel>                The meta-model describing my entities.","Description
--------------------

I am a model used in the scope of Fame.",I contains real instances of a class representing a concept in the current metamodel.,"This class is described by an entity of my meta-model. 

I have a meta-model containing descriptions of my content. A FMModel has a FMMetaModel as meta-model which has a FMMetaMetaModel has metamodel.","Public API and Key Messages
--------------------

- #metaDescriptionOn:                 Allows one to get the meta-description of an element.","I include a system of caches in case my users want to store informations to speed up an application.

I will initialize myself with a new FMMetaModel but this one can be replaced by an existing one.","Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
        additionalProperties:                <aDictionary>                A cache used to store some informations about the model.
        elements:                                                <aCollection>                All the entities of the model.
        metamodel:                                        <aFMMetaModel>                The meta-model describing my entities.",,,FMMetaModel,"For example, in the Smalltalk metamodel of Famix, if we want to represent the Point class we will have:
- A FMModel containing an instance of FamixStClass representing the Point class.
- A FMMetaModel containing instances of FM3Elements describing FamixStClass.
- A FMMetaMetaModel containing instances of FM3Element describing FM3 meta model (Package, Class and Property).
Examples
--------------------
        
        | model |
        model := FMModel new.
        model metamodel importString: FMHeinekenExample metamodelMSE.
        model.


        model := (FMModel withMetamodel: (FMMetaModel fromString: FMHeinekenExample metamodelMSE)).",,,,,,,,,,,,
2,FMMSEPrinter,"Description
--------------------

I am responsible of printing the MSE format markup during a model export.

Examples
--------------------

        | printer |
        printer := FMMSEPrinter onString.
        FMMetaMetaModel default exportWithPrinter: printer.
        printer stream contents","""Description
--------------------

I am responsible of printing the MSE format markup during a model export.",,,,,,,,,"Examples
--------------------

	| printer |
	printer := FMMSEPrinter onString.
	FMMetaMetaModel default exportWithPrinter: printer.
	printer stream contents""",,,,,,,,,,,,
2,FMOne,"Description
--------------------

I am a relation slot representing a property containing only one element.

Examples
--------------------

        Trait named: #FamixTMethod
                slots: { #parentType => FMOne type: #FamixTWithMethods opposite: #methods }
                package: 'Famix-Traits-Method'","Description
--------------------

I am a relation slot representing a property containing only one element.",,,,,,,,,"Examples
--------------------

        Trait named: #FamixTMethod
                slots: { #parentType => FMOne type: #FamixTWithMethods opposite: #methods }
                package: 'Famix-Traits-Method'",,,,,,,,,,,,
2,FMRelationSlot,"Description
--------------------

I am an abstract slot used to declare fame properties for a class.
The declared properties with my subclasses must have an opposite.

A relation slot will have:
- A name which is the name of the property
- A type which is the type of the property 
- An inverse name which is the name of the opposite property.

My sublasses will define everything related to the cardinality of the relation side.
 
Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
        inverseName:                <aString>                The name of the opposite slot.
        inverseSlot:                <aSlot>
        targetClass:                <aClass>","Description
--------------------

I am an abstract slot",used to declare fame properties for a class.,,,,"A relation slot will have:
- A name which is the name of the property
- A type which is the type of the property 
- An inverse name which is the name of the opposite property.


Internal Representation and Key Implementation Points.
--------------------

    Instance Variables
        inverseName:                <aString>                The name of the opposite slot.
        inverseSlot:                <aSlot>
        targetClass:                <aClass>",,My sublasses will define everything related to the cardinality of the relation side.,,,,,,,,The declared properties with my subclasses must have an opposite.,,,,,,
2,FmxMBPrintVisitor,"I'm a visitor for instances of #FamixMetamodelGenerator and subclasses.

I just visit each node in the builder, and print it on the Transcript.

see FmxMBVisitor to see how to use me.","""I'm a visitor for instances of #FamixMetamodelGenerator and subclasses.","I just visit each node in the builder, and print it on the Transcript.",,,,,"see FmxMBVisitor to see how to use me.
""",,FmxMBVisitor,,,,,,,,,,,,,
2,KGBForMetricsTestResource,I am a test resource building a FamixStModel with some of KGB packages used for metrics tests.,I am a test resource,building a FamixStModel with some of KGB packages used for metrics test,building a FamixStModel with some of KGB packages used for metrics test,,,,,,FamixStModel,,,,,,,,,,,,,
2,LANInterface,"LAN Interface comments for testing purposes.

Instance Variables:
	addressee	<ValueHolder>	description of addressee
	contents	<ValueHolder>	description of contents
	deviceNameMenu	<ValueModel>	description of deviceNameMenu
	nextNode	<ValueHolder>	description of nextNode
	nodeList	<SelectionInList>	description of nodeList
	nodeName	<ValueHolder>	description of nodeName
	originator	<ValueHolder>	description of originator","""LAN Interface comments for testing purposes.","""LAN Interface comments for testing purposes.",,,,"Instance Variables:
	addressee	<ValueHolder>	description of addressee
	contents	<ValueHolder>	description of contents
	deviceNameMenu	<ValueModel>	description of deviceNameMenu
	nextNode	<ValueHolder>	description of nextNode
	nodeList	<SelectionInList>	description of nodeList
	nodeName	<ValueHolder>	description of nodeName
	originator	<ValueHolder>	description of originator
""",,,,,,,,,,,,,,,,
2,MalBreadthFirstSearchPath,"Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a `search key') and explores the neighbor nodes first, before moving to the next level neighbours. (source: Wikipedia)",Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures.,"Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a `search key') and explores the neighbor nodes first, before moving to the next level neighbours.",,,,,(source: Wikipedia),,,,,,,,,,,,,,,
2,MalDendrogramNode,"Copyright (c), 2004-2007 Adrian Kuhn. This class is part of Hapax. Hapax is distributed under BSD License, see package comment.","This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",,"This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",,,,"Hapax is distributed under BSD License, see package comment.",,,,,,,,,,,,,,"Copyright (c), 2004-2007 Adrian Kuhn. Hapax is distributed under BSD License,",
2,MalFormalContext,MalFormalContext mammals2 computeConcepts,,,,,,,,,,MalFormalContext mammals2 computeConcepts,,,,,,,,,,,,
2,MalHgNode,"A MalHgNode is a node inside a hierarchical graph. It knows the graph it belongs to, its children and its parent, on which level in the graph it resides and its outgoing ind incoming edges. One can also store arbitrary informaition as attributes to a node.

Instance Variables
        attributes:                <Dictionary>
        children:                <OrderedCollection>
        hiGraph:                <MalHierarchicalGraph>
        incoming:                <OrderedCollection>
        level:                      <Number>
        outgoing:                <OrderedCollection>
        parent:                      <MalHgNode>

attributes
        - Dictionary to attach arbitrary information to a node

children
        - This nodes children. Empty collection if the node is a leaf in the hierarchy.

hiGraph
        - The MalHierarchicalGraph this node belongs to.

incoming
        - All incoming edges to this node.

level
        - The level this node is on in the hierachy where 0 is the top level (root nodes). The larger the number, the deeper down in the hierarchy the node is located.

outgoing
        - All outgoing edges from this node.

parent
        - This nodes parent",A MalHgNode is a node inside a hierarchical graph.,"It knows the graph it belongs to, its children and its parent, on which level in the graph it resides and its outgoing ind incoming edges. One can also store arbitrary informaition as attributes to a node.",,"attributes
        - Dictionary to attach arbitrary information to a node

children
        - This nodes children. Empty collection if the node is a leaf in the hierarchy.

hiGraph
        - The MalHierarchicalGraph this node belongs to.

incoming
        - All incoming edges to this node.

level
        - The level this node is on in the hierachy where 0 is the top level (root nodes). The larger the number, the deeper down in the hierarchy the node is located.

outgoing
        - All outgoing edges from this node.

parent
        - This nodes parent",,"Instance Variables
        attributes:                <Dictionary>
        children:                <OrderedCollection>
        hiGraph:                <MalHierarchicalGraph>
        incoming:                <OrderedCollection>
        level:                      <Number>
        outgoing:                <OrderedCollection>
        parent:                      <MalHgNode>",,"It knows the graph it belongs to, its children and its parent, on which level in the graph it resides and its outgoing ind incoming edges",,,,,,,,,,,,,,
2,MalKruskal,"Kruskal's algorithm is a greedy algorithm in graph theory that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component).

See https://en.wikipedia.org/wiki/Kruskal%27s_algorithm",,"Kruskal's algorithm is a greedy algorithm in graph theory that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component).",,,,,See https://en.wikipedia.org/wiki/Kruskal%27s_algorithm,,,,,,,,See https://en.wikipedia.org/wiki/Kruskal%27s_algorithm,,,,,,,
2,MalLatticePatterns,"The class implements the identification of patterns in FCA lattices. We can detect like horizontal decomposition with the algos in the class.

| data fca context lattice |
        data := #(#(#Cat #(#fourlegs #hair)) #(#Dog #(#smart #fourlegs #hair)) #(#Dolphin #(#smart #marine)) #(#Gibbon #(#hair #smart #thumbed)) #(#Man #(#smart #thumbed)) #(#Whale #(#smart #marine))).
        fca := MalFormalContext new.
        context := fca with: data using: #first using: #last.
        (MalLatticePatterns on: (MalLattice on: context)) reportPatterns

For moose models
        
|fca model treillis context|
model := (MooseModel root allModels) second.
fca := MalFormalContext new.
context := fca with: (model allModelClasses) using: #yourself using: [:cl | cl methods collect: [:m | m name]].
treillis := (MalLattice on: context).
Transcript clear.
(MalLatticePatterns on: treillis) reportPatterns.
(MalLattice new viewLattice: treillis).


Smalltalk collection class hierarchy:

|fca model treillis context|
treillis := (MalLattice on: MalFormalContext classHierarchyCollection).
(MalLatticePatterns on: treillis) reportModules.",,The class implements the identification of patterns in FCA lattices. We can detect like horizontal decomposition with the algos in the class.,,,,,,,,"| data fca context lattice |
        data := #(#(#Cat #(#fourlegs #hair)) #(#Dog #(#smart #fourlegs #hair)) #(#Dolphin #(#smart #marine)) #(#Gibbon #(#hair #smart #thumbed)) #(#Man #(#smart #thumbed)) #(#Whale #(#smart #marine))).
        fca := MalFormalContext new.
        context := fca with: data using: #first using: #last.
        (MalLatticePatterns on: (MalLattice on: context)) reportPatterns

For moose models
        
|fca model treillis context|
model := (MooseModel root allModels) second.
fca := MalFormalContext new.
context := fca with: (model allModelClasses) using: #yourself using: [:cl | cl methods collect: [:m | m name]].
treillis := (MalLattice on: context).
Transcript clear.
(MalLatticePatterns on: treillis) reportPatterns.
(MalLattice new viewLattice: treillis).


Smalltalk collection class hierarchy:

|fca model treillis context|
treillis := (MalLattice on: MalFormalContext classHierarchyCollection).
(MalLatticePatterns on: treillis) reportModules.",,,,,,,,,,,,
2,MalNodeWithPreviousAndNext,"A basic node able to host the model and to represent edges with no additional class.
Edges are navigable in both way through the nextNodes and prevousNodes instances variables.",,A basic node able to host the model and to represent edges with no additional class.,,,,Edges are navigable in both way through the nextNodes and prevousNodes instances variables.,,,,,,,,,,,,,,,,
2,MalRowMatrix,"Copyright (c), 2004-2007 Adrian Kuhn. This class is part of Hapax. Hapax is distributed under BSD License, see package comment.","This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",,"This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",,,,"This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",,,,,,,,,,,,,,"Copyright (c), 2004-2007 Adrian Kuhn. This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",
2,MalTerms,"Terms subclasses Bag with support for handling stopwords etc.

example: string
        | terms |
        terms := Terms new.
        terms addString: string using: CamelCaseScanner new.
        terms withCoundDo: [ :term :count |
                term -> count ].

Copyright (c), 2004-2007 Adrian Kuhn. This class is part of Hapax. Hapax is distributed under BSD License, see package comment.","""Terms subclasses Bag with support for handling stopwords etc.","""Terms subclasses Bag with support for handling stopwords etc.","Copyright (c), 2004-2007 Adrian Kuhn. This class is part of Hapax. Hapax is distributed under BSD License, see package comment.""",,,,"Hapax is distributed under BSD License, see package comment.",,,example: string | terms | terms := Terms new. terms addString: string using: CamelCaseScanner new. terms withCoundDo: [ :term :count | term -> count ].,,,,,,,,,,,"Copyright (c), 2004-2007 Adrian Kuhn. This class is part of Hapax. Hapax is distributed under BSD License, see package comment.",
2,ManifestFamixPharoSmalltalkEntities,I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser,,I store metadata for this package.,These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser,,,,,,SmalllintManifestChecker,,,,,,,,,,,,,
2,ManifestMooseQuery,I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser,,I store metadata for this package.,These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser,,,,,,SmalllintManifestChecker,,,,,,,,,,,,,
2,MooseAbstractImporter,"I'm the root for the new importer.
This way my subclasses share error logging and importerContext",I'm the root for the new importer.,,,,,,,This way my subclasses share error logging and importerContext,,,,,,,,,,,,,,
2,MooseCustomTask,"MooseCustomTask is a task perform some computation specified as a block.

The main API is then

        with: aBlock description: aDescription length: aNumber",MooseCustomTask is a task perform some computation specified as a block.,,,"The main API is then

        with: aBlock description: aDescription length: aNumber",,,,,,,,,,,,,,,,,,
2,MooseEntity,"MooseEntity is an abstract entity. Entities should subclass this class.
Any moose entity should answer its mooseID, its mooseName and its mooseModel.

!!Extension mechanism

The state instance variable provides a mechanism for extending the state of entities. This is achieved through MooseEntityState. Using this mechanism, a package can extend an entity to add more state. This extension will only be visible when the package is loaded. This is an important mechanism to enable extensibility and modularity. 

For example, if you have YourEntity that subclasses MooseEntity, you can extend it with:

YourEntity>>yourExtendingAttribute
        ^ self privateState attributeAt: #yourExtendingAttribute
YourEntity>>yourExtendingAttribute: aValue
        ^ self privateState attributeAt: #yourExtendingAttribute put: aValue

(see MooseEntityState for more information)


!!Meta descriptions

Entities should also be meta-described in terms of Fame. This is achieved by means of pragmas:

- First, on the class side, you should have a method . For example, YourEntity could have
YourEntity class>>annotation
        <MSEClass: #YourEntity super: #MooseEntity>
        <package: 'YourPackage'>
        <MSEComment: 'The YourEntity Smalltalk class has a correspondent YourEntity meta entity in the Fame world'>

- The pragma <MSEProperty:type:> must be placed in the getter method to denote a Fame property. For example:
YourEntity>>yourExtendingAttribute
        <MSEProperty: #yourExtendingAttribute type: #YourType>
        <MSEComment: 'This is an attribute extended in a different package'>
        ^ self privateState attributeAt: #yourExtendingAttribute
        
        
!!Important API

- mooseID is an Integer that uniquely identifies this entity within the entire Moose environment. 
        It should not change nor be nil. It is generated automatically during the creation of the MooseEntity.
- mooseModel of an entity is must be an instance of MooseModel. It may be nil if the entity is not part of a model.        
        Each entity belongs to one and only one model, if an entity has not yet been added to a model or if an entity has been removed from a model the mooseModel is undefined, that is it may be nil.
- mooseDescription - returns the corresponding FM3MetaDescription instance
- mooseName - returns a symbol that should qualify the current entity. It does not have to be unique",MooseEntity is an abstract entity.,,,"Any moose entity should answer its mooseID, its mooseName and its mooseModel.


!!Important API

- mooseID is an Integer that uniquely identifies this entity within the entire Moose environment. 
        It should not change nor be nil. It is generated automatically during the creation of the MooseEntity.
- mooseModel of an entity is must be an instance of MooseModel. It may be nil if the entity is not part of a model.        
        Each entity belongs to one and only one model, if an entity has not yet been added to a model or if an entity has been removed from a model the mooseModel is undefined, that is it may be nil.
- mooseDescription - returns the corresponding FM3MetaDescription instance
- mooseName - returns a symbol that should qualify the current entity. It does not have to be unique",,,,,,"!!Extension mechanism

The state instance variable provides a mechanism for extending the state of entities. This is achieved through MooseEntityState. Using this mechanism, a package can extend an entity to add more state. This extension will only be visible when the package is loaded. This is an important mechanism to enable extensibility and modularity. 

For example, if you have YourEntity that subclasses MooseEntity, you can extend it with:

YourEntity>>yourExtendingAttribute
        ^ self privateState attributeAt: #yourExtendingAttribute
YourEntity>>yourExtendingAttribute: aValue
        ^ self privateState attributeAt: #yourExtendingAttribute put: aValue

(see MooseEntityState for more information)


!!Meta descriptions

Entities should also be meta-described in terms of Fame. This is achieved by means of pragmas:

- First, on the class side, you should have a method . For example, YourEntity could have
YourEntity class>>annotation
        <MSEClass: #YourEntity super: #MooseEntity>
        <package: 'YourPackage'>
        <MSEComment: 'The YourEntity Smalltalk class has a correspondent YourEntity meta entity in the Fame world'>

- The pragma <MSEProperty:type:> must be placed in the getter method to denote a Fame property. For example:
YourEntity>>yourExtendingAttribute
        <MSEProperty: #yourExtendingAttribute type: #YourType>
        <MSEComment: 'This is an attribute extended in a different package'>
        ^ self privateState attributeAt: #yourExtendingAttribute",,,,,,"!!Extension mechanism

The state instance variable provides a mechanism for extending the state of entities. This is achieved through MooseEntityState. Using this mechanism, a package can extend an entity to add more state. This extension will only be visible when the package is loaded. This is an important mechanism to enable extensibility and modularity.",Entities should subclass this class.,,,,,
2,MooseSystemComplexityLocator,self openOn: MooseModel root allModels last allModelClasses,,,,,,,,,,self openOn: MooseModel root allModels last allModelClasses,,,,,,,,,,,,
2,MooseVisualLocator,The MooseVisualLocator is a simple template that offers a list of classes on the left hand side and some presentation on the right hand side. It is meant to be subclassed.,The MooseVisualLocator is a simple template,that offers a list of classes on the left hand side and some presentation on the right hand side.,,,It is meant to be subclassed.,,,,,,,,,,,,,,,,,
2,PackageBlueprintTestResource,I am a test resource building a FamixStModel with the package blueprint test resource entities.,I am a test resource building a FamixStModel with the package blueprint test resource entities.,I am a test resource building a FamixStModel with the package blueprint test resource entities.,I am a test resource building a FamixStModel with the package blueprint test resource entities.,,,,,,FamixStModel,,,,,,,,,,,,,
2,TDependencyQueries,"Description
--------------------

This trait provides a common, paradigm agnostic vocabulary to query dependencies of software entities.

It includes some generic way to query an entity via its associations. The API offer the possibility to query an entity with three parameters:
- The direction of the navigation (Incoming/Outgoing -- in/out)
- The kind of association (FAMIXAcces, FAMIXReference, all...)
- The scope of the query (The receiver, the receiver and its children)

The actual core of the algorithms are in MooseQueryCalculator class.

Most  of the generic methods takes a symbol to describe the direction. This symbol will be used to find a MooseQueryAbstactDirectionStrategy to configure a MooseQueryCalculator.

For more informations: https://moosequery.ferlicot.fr/

Public API and Key Messages
--------------------

- #query: aSymbol with: aFAMIXAssociation                                 Looks for the associations of the kind aFAMIXAssociation in the direction described by the symbol in the receiver and its children.
- #queryLocal: aSymbol with: aFAMIXAssociation                 Looks for the associations of the kind aFAMIXAssociation in the direction described by the symbol in the receiver.
- #queryAll: aSymbol                                                                         Looks for the associations in the direction described by the symbol in the receiver and its children.

There is a lot of other generic queries. You can find all of them in the ""moose-queries-generic"" protocol.

Examples
--------------------

        aFAMIXClass query: #in with: FAMIXInheritance.
                --> Will return a MooseIncomingQueryResult containing the FAMIXInheritance associations having aFAMIXClass or its children as target
                        
        aFAMIXMethod query: #out with: FAMIXAccess.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAccess associations having aFAMIXMethod or its children as source
        
        
        aFAMIXClass queryLocal: #in with: FAMIXInheritance.
                --> Will return a MooseIncomingQueryResult containing the FAMIXInheritance associations having aFAMIXClass as target
        
        aFAMIXMethod queryLocal: #out with: FAMIXAccess.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAccess associations having aFAMIXMethod as source                
        
                        
        aFAMIXClass queryAll: #in.
                --> Will return a MooseIncomingQueryResult containing the FAMIXAssociation having aFAMIXClass or its children as target
        
        aFAMIXMethod queryAll: #out.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAssociation having aFAMIXMethod or its children as source
        
                
        aFAMIXClass queryAllLocal: #in.
                --> Will return a MooseIncomingQueryResult containing the FAMIXAssociation having aFAMIXClass as target
        
        aFAMIXMethod queryAllLocal: #out.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAssociation having aFAMIXMethod as source",,"Description
--------------------

This trait provides a common, paradigm agnostic vocabulary to query dependencies of software entities.",The actual core of the algorithms are in MooseQueryCalculator class.,"It includes some generic way to query an entity via its associations. The API offer the possibility to query an entity with three parameters:
- The direction of the navigation (Incoming/Outgoing -- in/out)
- The kind of association (FAMIXAcces, FAMIXReference, all...)
- The scope of the query (The receiver, the receiver and its children)
Public API and Key Messages
--------------------

- #query: aSymbol with: aFAMIXAssociation                                 Looks for the associations of the kind aFAMIXAssociation in the direction described by the symbol in the receiver and its children.
- #queryLocal: aSymbol with: aFAMIXAssociation                 Looks for the associations of the kind aFAMIXAssociation in the direction described by the symbol in the receiver.
- #queryAll: aSymbol                                                                         Looks for the associations in the direction described by the symbol in the receiver and its children.",Most  of the generic methods takes a symbol to describe the direction. This symbol will be used to find a MooseQueryAbstactDirectionStrategy to configure a MooseQueryCalculator.,,"The actual core of the algorithms are in MooseQueryCalculator class.
For more informations: https://moosequery.ferlicot.fr/
There is a lot of other generic queries. You can find all of them in the ""moose-queries-generic"" protocol.",,MooseQueryCalculator class.,"Examples
--------------------

        aFAMIXClass query: #in with: FAMIXInheritance.
                --> Will return a MooseIncomingQueryResult containing the FAMIXInheritance associations having aFAMIXClass or its children as target
                        
        aFAMIXMethod query: #out with: FAMIXAccess.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAccess associations having aFAMIXMethod or its children as source
        
        
        aFAMIXClass queryLocal: #in with: FAMIXInheritance.
                --> Will return a MooseIncomingQueryResult containing the FAMIXInheritance associations having aFAMIXClass as target
        
        aFAMIXMethod queryLocal: #out with: FAMIXAccess.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAccess associations having aFAMIXMethod as source                
        
                        
        aFAMIXClass queryAll: #in.
                --> Will return a MooseIncomingQueryResult containing the FAMIXAssociation having aFAMIXClass or its children as target
        
        aFAMIXMethod queryAll: #out.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAssociation having aFAMIXMethod or its children as source
        
                
        aFAMIXClass queryAllLocal: #in.
                --> Will return a MooseIncomingQueryResult containing the FAMIXAssociation having aFAMIXClass as target
        
        aFAMIXMethod queryAllLocal: #out.
                --> Will return a MooseOutgoingQueryResult containing the FAMIXAssociation having aFAMIXMethod as source",,,,,For more informations: https://moosequery.ferlicot.fr/,,,,,,,
2,TOODependencyQueries,"A TOODependencyQueries defines a vocabulary to compute dependencies of object-oriented entities.

For more informations: https://moosequery.ferlicot.fr/",,A TOODependencyQueries defines a vocabulary to compute dependencies of object-oriented entities.,,,,,For more informations: https://moosequery.ferlicot.fr/,,,,,,,,https://moosequery.ferlicot.fr/,,,,,,,
3,PPDebugParser,"A PPDebugParser is  a parser that traces all the progress and returns special object that can be browsed to see how the parsing advanced over a time.

Used by adding enableDebug before parsing.

Instance Variables
        root:                result of root parser

root
        - xxxxx",A PPDebugParser is  a parser,A PPDebugParser is  a parser that traces all the progress and returns special object that can be browsed to see how the parsing advanced over a time.,Used by adding enableDebug before parsing.,"root
        - xxxxx",,"Instance Variables
        root:                result of root parser",,,,,,,,,,,,,,,,
3,PPInfo,"A PPInfo represent the informations around a parsing result and also contain this result. It is usefull to get parsing evaluation and stream position.

Instance Variables
        element:                <Object>
        start:                <Object>
        stop:                <Object>

element
        - xxxxx

start
        - xxxxx

stop
        - xxxxx",A PPInfo represent the informations around a parsing result and also contain this result,It is usefull to get parsing evaluation and stream position.,,,,"Instance Variables
        element:                <Object>
        start:                <Object>
        stop:                <Object>

element
        - xxxxx

start
        - xxxxx

stop
        - xxxxx",,,,,,,,,,,,,,,,
3,PPListPattern,"PPListPattern that is used to match any number of parsers. As its superclass, it cannot be used for actually parsing something.",,"PPListPattern that is used to match any number of parsers.As its superclass, it cannot be used for actually parsing something.",,,,,,"As its superclass, it cannot be used for actually parsing something.",,,,,"As its superclass, it cannot be used for actually parsing something.",,,,,,,,,
3,PPLiteralParser,"Abstract literal parser that parses some kind of literal type (to be specified by subclasses).

Instance Variables:
	literal	<Object>	The literal object to be parsed.
	message	<String>	The error message to be generated.","""Abstract literal parser that parses some kind of literal type (to be specified by subclasses).",,"""Abstract literal parser that parses some kind of literal type (to be specified by subclasses).",,,"Instance Variables:
	literal	<Object>	The literal object to be parsed.
	message	<String>	The error message to be generated.""",,,,,,,,,,,,,,,,
3,PPNonEmptyParser,"I return failure, if the delegate parser did not consumed any input.",,"I return failure, if the delegate parser did not consumed any input.",,,,,,,,,,,,,,,,,,,,
3,PPParserReplaceRule,"PPParserReplaceRule replaces a matched grammar with another grammar, which may include patterns from the matching grammar.

Instance Variables:
        replaceParser        <PPParser>        The parser to replace the matched parser with.",,"PPParserReplaceRule replaces a matched grammar with another grammar, which may include patterns from the matching grammar.",,,,"Instance Variables:
        replaceParser        <PPParser>        The parser to replace the matched parser with.",,,,,,,,,,,,,,,,
3,PPPluggableParser,"A pluggable parser that passes the parser stream into a block. This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.

Instance Variables:
        block        <BlockClosure>        The pluggable one-argument block.",A pluggable parser,that passes the parser stream into a block. This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.,This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.,,,"Instance Variables:
        block        <BlockClosure>        The pluggable one-argument block.",,,PetitParser.,,,,,,,,,,,,,
3,PPRelativePositionStream,"A PPRelativePositionStream is a specialized stream to get the relative position according to another stream.

Instance Variables",A PPRelativePositionStream is a specialized stream to get the relative position according to another stream.,A PPRelativePositionStream is a specialized stream to get the relative position according to another stream.,,,,,,,,,,,,,,,,,,,,
3,PPScriptingTest,"These are some simple demo-scripts of parser combinators for the compiler construction course.
http://www.iam.unibe.ch/~scg/Teaching/CC/index.html",These are some simple demo-scripts of parser combinators,,,,,,"These are some simple demo-scripts of parser combinators for the compiler construction course.
http://www.iam.unibe.ch/~scg/Teaching/CC/index.html",,,,,,,,http://www.iam.unibe.ch/~scg/Teaching/CC/index.html,,,,,,,
3,PPSea,"A PPIsland allows for imprecise parsing. One can create it on a parser p by calling: 'p island' E.g.:

p := x, a island, y              accepts following inputs:
x.....a.....b 
xab

yet fails on:
x....a....c
xb
xac
x..b....a....b

The input represented by dots is called water and water can appear before and after the island. Use it, if you don't want to define all the grammar rules and you want to skip something.

I am still an experiment, but if you know how to improve me, please contact Jan Kurs at: kurs@iam.unibe.ch

Instance Variables
        afterWaterParser:                <Object>
        awp:                <Object>
        beforeWaterParser:                <Object>
        bwp:                <Object>
        context:                <Object>
        island:                <Object>

afterWaterParser
        - xxxxx

awp
        - xxxxx

beforeWaterParser
        - xxxxx

bwp
        - xxxxx

context
        - xxxxx

island
        - xxxxx",,"""A PPIsland allows for imprecise parsing. One can create it on a parser p by calling: 'p island' E.g.:",,"afterWaterParser
        - xxxxx

awp
        - xxxxx

beforeWaterParser
        - xxxxx

bwp
        - xxxxx

context
        - xxxxx

island
        - xxxxx""",,"Instance Variables
        afterWaterParser:                <Object>
        awp:                <Object>
        beforeWaterParser:                <Object>
        bwp:                <Object>
        context:                <Object>
        island:                <Object>

afterWaterParser
        - xxxxx

awp
        - xxxxx

beforeWaterParser
        - xxxxx

bwp
        - xxxxx

context
        - xxxxx

island
        - xxxxx""",,,,"p := x, a island, y              accepts following inputs:
x.....a.....b 
xab

yet fails on:
x....a....c
xb
xac
x..b....a....b

The input represented by dots is called water and water can appear before and after the island. Use it, if you don't want to define all the grammar rules and you want to skip something.

I am still an experiment, but if you know how to improve me, please contact Jan Kurs at: kurs@iam.unibe.ch",,,,"I am still an experiment, but if you know how to improve me, please contact Jan Kurs at: kurs@iam.unibe.ch",,,,,,,,
3,PPXPathFilter,"I'm a node filter. 
A xpath node applies me to filter xml elements.",I'm a node filter.,A xpath node applies me to filter xml elements.,,,,,,,,,,,,,,,,,,,,
4,ChrysalPillarishConfiguration,I'm a pillar specific class to manage code not generated for the configuration class. Pillar code should not use me but my subclass.,I'm a pillar specific class to manage code not generated for the configuration class.,I'm a pillar specific class to manage code not generated for the configuration class.,,,,,,Pillar code should not use me but my subclass.,,,,,,,,,Pillar code should not use me but my subclass.,,,,,
4,PRAbstractCommand,"I'm an object managing configuration. I'm usually invoked from a command line but not only.

My main entry point is 

	createConfiguration: confFilename baseDirectory: baseDirectory argDictionary: arguments

When you type on the command line
	
	./pharo-ui Pillar.image pillar export --to=""latex"" Chapters/Chapter1/chapter1.pillar
	
You can obtain the same doing; 

	PRExportBuilder new 	
		createConfiguration: 'pillar.conf' 
		baseDirectory:  FileSystem workingDirectory   
		argDictionary: {
				'inputFile'-> (FileSystem workingDirectory / 'Chapters/Chapter1/chapter1.pillar') .
				'defaultExporters' -> {'latex'}
				} asDictionary;
		export","""I'm an object managing configuration.",I'm usually invoked from a command line but not only.,,,,,,,,"My main entry point is 

	createConfiguration: confFilename baseDirectory: baseDirectory argDictionary: arguments

When you type on the command line
	
	./pharo-ui Pillar.image pillar export --to=""""latex"""" Chapters/Chapter1/chapter1.pillar
	
You can obtain the same doing; 

	PRExportBuilder new 	
		createConfiguration: 'pillar.conf' 
		baseDirectory:  FileSystem workingDirectory   
		argDictionary: {
				'inputFile'-> (FileSystem workingDirectory / 'Chapters/Chapter1/chapter1.pillar') .
				'defaultExporters' -> {'latex'}
				} asDictionary;
		export
		""",,,,,,,,,,,,
4,PRBashScriptLanguage,Bash scripting language,Bash scripting language,,,,,,,,,,,,,,,,,,,,,
4,PRBookTesterVisitor,"I am a visitor specialized in visiting books and testing their code. Therefore, I only redefine visitCodeBlock: and specify it with the different parameters the codelock may have.

I gather all results as PRBookTestResult s in allTestsResults.

visitCodeblock: uses executeAndReport: creating a PRBookTestResult with the result of the evaluation of the codeblock.

checkAndReportFileNamed: starts the visit in a given file.

Every codeblock can be specified with the following parameters implying a specialized visit:
- testcase: The codeblock is an example defined as follows, 
                                [[[testcase=true
                                (stimuli) >>> result
                                ]]]
        
- methodDefinition: The codeblock is a method definition defined as follows,
                                [[[methodDefinition=true
                                ClassName >> methodName
                                        method body
                                ]]]
        
- classDefinition 
                                [[[classDefinition=true
                                Object subclass: #YourClass
                                        instanceVariableNames: 'iv1 iv2'
                                        classVariableNames: ''
                                        package: 'YourPackage'
                                ]]]
        
- evaluation
                                [[[testcase=true
                                (stimuli) >>> result
                                ]]]",I am a visitor specialized in visiting books and testing their code.,"Therefore, I only redefine visitCodeBlock: and specify it with the different parameters the codelock may have.

I gather all results as PRBookTestResult s in allTestsResults.",I am a visitor specialized in visiting books and testing their code.,"visitCodeblock: uses executeAndReport: creating a PRBookTestResult with the result of the evaluation of the codeblock.

checkAndReportFileNamed: starts the visit in a given file.",,,,,PRBookTestResult,,,,,,,"Every codeblock can be specified with the following parameters implying a specialized visit:
- testcase: The codeblock is an example defined as follows, 
                                [[[testcase=true
                                (stimuli) >>> result
                                ]]]
        
- methodDefinition: The codeblock is a method definition defined as follows,
                                [[[methodDefinition=true
                                ClassName >> methodName
                                        method body
                                ]]]
        
- classDefinition 
                                [[[classDefinition=true
                                Object subclass: #YourClass
                                        instanceVariableNames: 'iv1 iv2'
                                        classVariableNames: ''
                                        package: 'YourPackage'
                                ]]]
        
- evaluation
                                [[[testcase=true
                                (stimuli) >>> result
                                ]]]",,,,,,
4,PRDocumentListAnnotation,"I am class representing a DocumentListAnnotation. 
I allow users to get abstracts of files located in a directory and specify a link to access these files.
I can choose the number of files to take and the way to sort them.
We can also choose they way abstracts will be represented by specifying templates. We ahave the possibility of giving multiple templates.
Then abstracts will alternately change templates if you specified mutliple directories.

When no template file is specified, abstracts are generated as DocumentGroup containing different files elements.
With templates the annotation is remplaced by a Raw document in Html.
For templates values, you can not specify directories, only .mustache files. You have to specify complete path starting from the project directory.
Also for the path, the complete path from the project directory.

${docList:path=blogs|limit=3|sort=date|templates=#('templates/docArticle.mustache' 'templates/template.mustache')}$

${docList:path=wrongDirectory|limit=3|sort=date|templates=#('templates/docArticle.mustache' 'templates/template.mustache')}$ should raise an Error","""I am class representing a DocumentListAnnotation.","I allow users to get abstracts of files located in a directory and specify a link to access these files.
I can choose the number of files to take and the way to sort them.
We can also choose they way abstracts will be represented by specifying templates. We ahave the possibility of giving multiple templates.
Then abstracts will alternately change templates if you specified mutliple directories.

When no template file is specified, abstracts are generated as DocumentGroup containing different files elements.
With templates the annotation is remplaced by a Raw document in Html.
For templates values, you can not specify directories, only .mustache files. You have to specify complete path starting from the project directory.",,,,,,,,"Also for the path, the complete path from the project directory.

${docList:path=blogs|limit=3|sort=date|templates=#('templates/docArticle.mustache' 'templates/template.mustache')}$

${docList:path=wrongDirectory|limit=3|sort=date|templates=#('templates/docArticle.mustache' 'templates/template.mustache')}$ should raise an Error""",,,"For templates values, you can not specify directories, only .mustache files. You have to specify complete path starting from the project directory.",,,,,,,,,
4,PRFootnote,"I am a footnote, you can create me with :

noted: aString

It create a footnote with note specified in parameter.",I am a footnote,It create a footnote with note specified in parameter.,,,,,,,,noted: aString,,,,,,,,,,,,
4,PRHeadingLevelOffsetTransformer,"Convert from the level of a Pillar heading to the level of heading in the exported document. For example, a ==headingLevelOffset== of 3 converts a 1st level Pillar heading to an ==<h4>== in HTML.",,Convert from the level of a Pillar heading to the level of heading in the exported document,,,,,,,,"For example, a ==headingLevelOffset== of 3 converts a 1st level Pillar heading to an ==<h4>== in HTML.",,,,,,,,,,,,
4,PRHTMLCanvas,"An HTML canvas that facilitates writing HTML to a stream. The main method is #tag that allow you to write something like this:

canvas tag
        name: 'a';
        parameterAt: 'href' put: href;
        with: [ ""some code that generates the HTML inside the link"" ]",An HTML canvas that facilitates writing HTML to a stream.,An HTML canvas that facilitates writing HTML to a stream. The main method is #tag that allow you to write something like this:,,The main method is #tag that allow you to write something like this:,,"canvas tag
        name: 'a';
        parameterAt: 'href' put: href;
        with: [ ""some code that generates the HTML inside the link"" ]",,,,,,,,,,,,,,,,
4,PRHTMLScriptLanguage,Hypertext markup language,Hypertext markup language,,,,,,,,,,,,,,,,,,,,,
4,PRInputFileAnnotation,"I include a reference to a pillar file. With me we can add a transformation to remplace an annotation to a pillar file by his tree.

My tag is: 'inputFile''.

I can have in parameter:
- a path to a file with the key ""value="" (required, you can write it without the key)

Examples: 

${inputFile:myFile.pillar}$

${inputFile:value=directory/myFile.pillar}$",,"I include a reference to a pillar file.
With me we can add a transformation to remplace an annotation to a pillar file by his tree.",,"My tag is: 'inputFile''.

I can have in parameter:
- a path to a file with the key ""value="" (required, you can write it without the key)",,,,,,"Examples: 

${inputFile:myFile.pillar}$

${inputFile:value=directory/myFile.pillar}$",,,,,,,,,,,,
4,PRLaTeXEnvironment,"A LaTeX environment

To emit

\begin{XXX}
kjlkjkl
\end{XXX}",A LaTeX environment,To emit,,,,,,,,,,,,,,,,,,,,
4,PRList,"I am an abstract list. I represent the abstraction over ordered, unordered HTML or latex list. My children are instances of *PRListItem*. If you need a container of elements better use of PRDocumentGroup.","I am an abstract list. I represent the abstraction over ordered, unordered HTML or latex list.",,,,,,,My children are instances of *PRListItem*. If you need a container of elements better use of PRDocumentGroup.,,,,,,,,,If you need a container of elements better use of PRDocumentGroup.,,,,,
4,PRMarkdownWriter,"I am a writer for CommonMark
http://spec.commonmark.org/0.28/","""I am a writer for CommonMark",,,,,,"http://spec.commonmark.org/0.28/""",,,,,,,,,,,,,,,
4,PRObject,"I am a superclass of most objects within Pier. I hold a dictionary of properties, so that users can easily annotate me with new values. I am visitable.",I am a superclass of most objects within Pier.,"I hold a dictionary of properties, so that users can easily annotate me with new values. I am visitable.",,,,,,,,,,,,,,,,,,,,
4,PRParagraph,"I'm a paragraph of text containing text, line breaks or annotations.
I'm close to a latex or HTML paragraph. I do not contain complex structures such as lists, codeblocks.","I'm a paragraph of text containing text, line breaks or annotations.","I'm close to a latex or HTML paragraph. I do not contain complex structures such as lists, codeblocks.",,,,,,,,,,,,,,,,,,,,
4,PRParameter,"I represent a key and value pair. 
My key is instance of PRParameterKey and its associated vaue is an instance of PRParameterValue.","""I represent a key and value pair.",,"My key is instance of PRParameterKey and its associated vaue is an instance of PRParameterValue.
""",,,,,,"PRParameterKey
 PRParameterValue",,,,,,,,,,,,,
4,PRParseWarning,I am a warning for the parse of a Pillar file.,I am a warning for the parse of a Pillar file.,,,,,,,,,,,,,,,,,,,,,
4,PRPhase,"I am an abstract class to describe a Phase of an export. 
A Phase takes an input, transforms it and returns an output.

A phase holds a configuration. This configuration is a  the configuration of the export.

To create a new phase you have to define its prority as a class method then to define the action of the Phase with a method actionOn: anInput. This method will return an output. 
You can also add some transformations to the output like: 

transformerInputFileOn: aCollection
        <pillarTransformer: 1> ""the parameter is the priority of the transformation""
        aCollection
                do: [ :each | 
                        PRFileInclusion new
                                configuration: self configuration;
                                start: each ]",I am an abstract class to describe a Phase of an export.,"A Phase takes an input, transforms it and returns an output.

A phase holds a configuration. This configuration is a  the configuration of the export.",,,,,,,,"To create a new phase you have to define its prority as a class method then to define the action of the Phase with a method actionOn: anInput. This method will return an output. 
You can also add some transformations to the output like: 

transformerInputFileOn: aCollection
        <pillarTransformer: 1> ""the parameter is the priority of the transformation""
        aCollection
                do: [ :each | 
                        PRFileInclusion new
                                configuration: self configuration;
                                start: each ]",,,,,,,,,,,,
4,PRPillarParser,I use the PRPillarGrammar and I build a PRDocument.,,I use the PRPillarGrammar and I build a PRDocument.,I use the PRPillarGrammar and I build a PRDocument.,,,,,,"PRPillarGrammar
PRDocument.",,,,,,,,,,,,,
4,PRPillarParserMain,"I'm responsible for starting the parsing process of a Pillar document. If possible, I will use a compiled version of PRPillarParser. I will also use the STON reader to read potentital metadata at the begining of the stream.",,I'm responsible for starting the parsing process of a Pillar document,"If possible, I will use a compiled version of PRPillarParser. I will also use the STON reader to read potentital metadata at the begining of the stream.",,,,,,"PRPillarParser
STON",,,,,,,,,,,,,
4,PRPillarParserOld,"I am a parser for a Pillar syntax. 
I use the PRPillarGrammar and I build a PRDocument.",I am a parser for a Pillar syntax.,I use the PRPillarGrammar and I build a PRDocument.,I use the PRPillarGrammar and I build a PRDocument.,,,,,,"PRPillarGrammar
PRDocument.",,,,,,,,,,,,,
4,PRPreformatted,I am preformatted text or source code. My children are instances of *PRText*.,I am preformatted text or source code.,,,,,,,My children are instances of *PRText*.,,,,,,,,,,,,,,
4,PRScreenshotAnnotation,"I am an annotation used to show a screenshot of a given class and method.

I am used in a PRDocument to include a PRPicture and add a PNG file to the /figures chapter subfolder.

My parameters are: 
- package: the targetted package
- class: the targetted class
- method: the targetted method
- caption: the caption that will appear under my figure in the final book
- width: PRFigure width (as would be used in a more classic figure inclusion with +caption .>file|width=50)
- label: PRFigure label (as would be used in a more classic figure inclusion with +caption .>file|label=aa)

I am used as follows in a document:

        ${screenshot:package=Kernel|class=Integer|method=+|caption='The Plus Method'|width=50|label=aa}$
        
Note:
        Contrary to the loader or run annotations, there is a transformation going on here: a PRFigure is created in the end, so there is a need here to use a PRNodeTransformer subclass, PRScreenshotTransformer.",I am an annotation,"used to show a screenshot of a given class and method.

I am used in a PRDocument to include a PRPicture and add a PNG file to the /figures chapter subfolder.",I am used in a PRDocument to include a PRPicture and add a PNG file to the /figures chapter subfolder.,"My parameters are: 
- package: the targetted package
- class: the targetted class
- method: the targetted method
- caption: the caption that will appear under my figure in the final book
- width: PRFigure width (as would be used in a more classic figure inclusion with +caption .>file|width=50)
- label: PRFigure label (as would be used in a more classic figure inclusion with +caption .>file|label=aa)",,,,,"PRDocument, PRPicture","I am used as follows in a document:

        ${screenshot:package=Kernel|class=Integer|method=+|caption='The Plus Method'|width=50|label=aa}$",,,"Note:
        Contrary to the loader or run annotations, there is a transformation going on here: a PRFigure is created in the end, so there is a need here to use a PRNodeTransformer subclass, PRScreenshotTransformer.",,,,,,,,,
4,PRShowClassTransformer,"I am a transformer for the showClass annotation.

I know how to  visit a showClass annotation and the way to transform it.

I create a PRCodeblock with the class definition within it.",I am a transformer for the showClass annotation.,I know how to visit a showClass annotation and the way to transform it.,I create a PRCodeblock with the class definition within it.,,,,,,PRCodeblock,,,,,,,,,,,,,
4,PRSyntaxError,An error about syntax,An error about syntax,,,,,,,,,,,,,,,,,,,,,
4,PRUnorderedList,I am an unordered list. I am typically used for unnumbered lists,I am an unordered list,,I am typically used for unnumbered lists,,,,,,,,,,,,,,,,,,,
4,PRWatcher,"A class to watch served sites.
Each 5 seconds, the website is regenerated",A class to watch served sites.,"A class to watch served sites.
Each 5 seconds, the website is regenerated",,,,,,,,,,,,,,,,,,,,
5,PMAccuracy,Accuracy is a framework for testing the numerical accuracy of the results of methods.,Accuracy is a framework for,for testing the numerical accuracy of the results of methods.,,,,,,,,,,,,,,,,,,,,
5,PMAdditionalTest,"here are tests that would be in Math-Tests-DHB-Numerical, if it could construct random matrices",,"here are tests that would be in Math-Tests-DHB-Numerical, if it could construct random matrices",,,,,,,,,,,,,,,,,,,,
5,PMAM3Stepper,"It is stepper for Adams - Moulton method of order 3.
An s-step Adams - Moulton method can reach order s+1.
We can't use AM3 method until we have old solution value and approximate new one. A  AM3 method is implicit.",It is stepper for Adams - Moulton method of order 3.,"An s-step Adams - Moulton method can reach order s+1. 
A  AM3 method is implicit.",,,,,,,,,,,We can't use AM3 method until we have old solution value and approximate new one.,,,,,,We can't use AM3 method until we have old solution value and approximate new one.,,,
5,PMBernoulliGeneratorTest,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,,,,,,BernoulliGenerator,,,,,,,,,,,,,
5,PMExponentialGenerator,"A PMExponentialGenerator uses a uniform random variable in [0,1] to sample from an exponential distribution.

The exponential distribution has a single parameter beta, here denoted as mean. 

The default RandomGenerator is PMRandom, but can be modified.

The next method uses the formula:

x=  - \beta * ln (1 - u)

to generate an exponential sample x from a uniform [0,1] sample u.

(Applied Statistics 3rd ed., Ledolter and Hogg, p. 185)","""A PMExponentialGenerator uses a uniform random variable in [0,1] to sample from an exponential distribution.","The exponential distribution has a single parameter beta, here denoted as mean.",,"The default RandomGenerator is PMRandom, but can be modified.","The next method uses the formula:

x=  - \beta * ln (1 - u)

to generate an exponential sample x from a uniform [0,1] sample u.",,"(Applied Statistics 3rd ed., Ledolter and Hogg, p. 185)""",,,,,,,,,,,,,,,
5,PMGradient,"Computes the gradient of a function of a Collection of Numbers.

Example: f(x,y)=x^2 * y
g := PMGradient of:[:x|x first squared * x second].
g value:#(3 2). ""-->#(12 9)"" 
g value:#(1 1). ""-->#(2 1)""",,"""Computes the gradient of a function of a Collection of Numbers.",,,,,,,,"Example: f(x,y)=x^2 * y
g := PMGradient of:[:x|x first squared * x second].
g value:#(3 2). """"-->#(12 9)"""" 
g value:#(1 1). """"-->#(2 1)"""" """,,,,,,,,,,,,
5,PMHyperDualNumber,"PMHyperDualNumbers can be used to additionally calculate second order derivatives.
They can be mixed with Numbers, not with PMDualNumbers.",,"PMHyperDualNumbers can be used to additionally calculate second order derivatives.They can be mixed with Numbers, not with PMDualNumbers.",,,,,,,,,,,,,,,"They can be mixed with Numbers, not with PMDualNumbers.",,,,,
5,PMImplicitAnnouncer,An ImplicitAnnouncer is used by ODESolver to announce step results (ImplicitSolverAnnouncement).,An ImplicitAnnouncer is used by ODESolver to announce step results (ImplicitSolverAnnouncement).,,An ImplicitAnnouncer is used by ODESolver to announce step results (ImplicitSolverAnnouncement).,,,,,,"ODESolver
ImplicitSolverAnnouncement",,,,,,,,,,,,,
5,PMKolmogorovSmirnov1Sample,"does a two-sided Kolmogorov-Smirnow test and checks whether sample data are from a population with a given distribution. you have to set the data that can be any collection of numbers and the cumulative distribution function. you can do the last one in two ways, either  by specifying a block via #cdf: or by specifying a distribution with concrete parameters via #populationDistribution: .
#ksStatistic returns kolmogorovs D, calculated as the maximum of D+ and D- , iow it does not (!) use D = max( | F(y(i)) - i/n| ) . (see eg http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm  why this would be wrong.)
#pValue returns the probability of getting a D <= ksStatistic .
#rejectEqualityHypothesisWithAlpha: does what its name says of course.
example:
nd:= DhbNormalDistribution new.""--> Normal distribution( 0, 1)""
ks :=KolmogorovSmirnov  compareData: ((1 to:100) collect:[:i|nd random]) withDistribution: nd.""--> 
a KolmogorovSmirnov(dataSize: 100 cdf: distributionValue of Normal distribution( 0, 1))""
ks rejectEqualityHypothesisWithAlpha: 0.05.""--> false""",,does a two-sided Kolmogorov-Smirnow test and checks whether sample data are from a population with a given distribution,,"#ksStatistic returns kolmogorovs D, calculated as the maximum of D+ and D- , iow it does not (!) use D = max( | F(y(i)) - i/n| ) . (see eg http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm  why this would be wrong.)
#pValue returns the probability of getting a D <= ksStatistic .
#rejectEqualityHypothesisWithAlpha: does what its name says of course.",,,(see eg http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm  why this would be wrong.),,,"you can do the last one in two ways, either  by specifying a block via #cdf: or by specifying a distribution with concrete parameters via #populationDistribution: .
example:
nd:= DhbNormalDistribution new.""--> Normal distribution( 0, 1)""
ks :=KolmogorovSmirnov  compareData: ((1 to:100) collect:[:i|nd random]) withDistribution: nd.""--> 
a KolmogorovSmirnov(dataSize: 100 cdf: distributionValue of Normal distribution( 0, 1))""
ks rejectEqualityHypothesisWithAlpha: 0.05.""--> false""",,,you have to set the data that can be any collection of numbers and the cumulative distribution function.,why this would be wrong.),http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm,,,,you have to set the data that can be any collection of numbers and the cumulative distribution function.,,,
5,PMLineSearch,"I implement line search algorithm to find the minimum of a function g(x) >= 0 on the interval 0 < x < 1.
The method is initialized by g(0), g(1) and g'(0).
The step from x = 0 to x = 1 suppose to minimize g(x) (i.e. g'(0) < 0), but due to nonlinearity of g(x) might fail to do so.
In this case, this method finds such an x that this function is minimized in the sense:

g(x) <= g(0) + alpha g'(0)

for some small alpha (defaults to 1e-4).

Usage

For once off use: 

          (PMLineSearch function:  funBlock valueAtZero: g0  derivativeAtZero: dg0  valueAtOne: g1 ) evaluate.

where funBlock is the implementation of g(x), g0 = g(0), dg0 = g'(0) and g1 = g(0).

For repeated use:

            storedMethod := DhbLineSearch new.
           storedMethod setFunction: funBlock.
           storedMethod setValueAtZero: g0 derivativeAtZero: dg0  valueAtOne: g1.
           storedMethod evaluate. 
 
!!! Optimization tip!!!

It is guaranteed that g(x) will be called on the resulting x.

See DhbNewtonZeroFinder (PMNewtonZeroFinder) that uses this to minimize the number of function evaluations.","""I implement line search algorithm to find the minimum of a function g(x) >= 0 on the interval 0 < x < 1.","""I implement line search algorithm to find the minimum of a function g(x) >= 0 on the interval 0 < x < 1.
The method is initialized by g(0), g(1) and g'(0).",,,"The step from x = 0 to x = 1 suppose to minimize g(x) (i.e. g'(0) < 0), but due to nonlinearity of g(x) might fail to do so.
In this case, this method finds such an x that this function is minimized in the sense:

g(x) <= g(0) + alpha g'(0)

for some small alpha (defaults to 1e-4).

!!! Optimization tip!!!

It is guaranteed that g(x) will be called on the resulting x.

See DhbNewtonZeroFinder (PMNewtonZeroFinder) that uses this to minimize the number of function evaluations.""",,"See DhbNewtonZeroFinder (PMNewtonZeroFinder) that uses this to minimize the number of function evaluations.""",,,"Usage

For once off use: 

          (PMLineSearch function:  funBlock valueAtZero: g0  derivativeAtZero: dg0  valueAtOne: g1 ) evaluate.

where funBlock is the implementation of g(x), g0 = g(0), dg0 = g'(0) and g1 = g(0).

For repeated use:

            storedMethod := DhbLineSearch new.
           storedMethod setFunction: funBlock.
           storedMethod setValueAtZero: g0 derivativeAtZero: dg0  valueAtOne: g1.
           storedMethod evaluate.",,,,,,,,,,,,
5,PMMatrix,"I represent a mathematical matrix. I can be build from rows as follows: 

[[[ 
PMMatrix rows: #((1 2 3)(4 5 6)).
]]]

I understand the usual matrix operations.",I represent a mathematical matrix.,,,I understand the usual matrix operations.,,,,,,"I can be build from rows as follows: 

[[[ 
PMMatrix rows: #((1 2 3)(4 5 6)).
]]]",,,,,,,,,,,,
5,PMODESolver,"An ODE Solver uses a Stepper to solve a System. 

The main interface once the solver is set up (it has a stepper and a solver) is
        solve: system x0: aState t0: startTime t1: endTime
        solve: system x0: aState t0: startTime t1: endTime stepSize: dt
        
Announcements are made when a step is taken.",,,An ODE Solver uses a Stepper to solve a System.,"The main interface once the solver is set up (it has a stepper and a solver) is
        solve: system x0: aState t0: startTime t1: endTime
        solve: system x0: aState t0: startTime t1: endTime stepSize: dt",Announcements are made when a step is taken.,,,,,,,,,,,,,,,,,
5,PMQuantileTest,"QuantileTest tests mainly '#quantile: method:' by calculating quartiles with every method on SortedCollections of size 4, 5, 6 and 11.",,,,,"QuantileTest tests mainly '#quantile: method:' by calculating quartiles with every method on SortedCollections of size 4, 5, 6 and 11.",,,,,,,,,,,,,,,,,
5,PMSciKitLearnSVDFlipAlgorithmTest,This is the test class that exercises scikit-learn Eigenvector Flip Algorithm,This is the test class that exercises scikit-learn Eigenvector Flip Algorithm,This is the test class that exercises scikit-learn Eigenvector Flip Algorithm,,,,,,,,,,,,,,,,,,,,
5,PMSingularValueDecompositionTest,"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:

For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".

For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.

For the Collaborators Part: State my main collaborators and one line about how I interact with them. 

Public API and Key Messages
- message one   
- message two 
- (for bonus points) how to create instances.

   One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

    Instance Variables
        ones:                <Object>
        randomMatrix:                <Object>
        s_matrix:                <Object>
        u:                <Object>
        v:                <Object>


    Implementation Points",,,,,,"Instance Variables
        ones:                <Object>
        randomMatrix:                <Object>
        s_matrix:                <Object>
        u:                <Object>
        v:                <Object>",,,,,"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:

For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".

For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.

For the Collaborators Part: State my main collaborators and one line about how I interact with them. 

Public API and Key Messages
- message one   
- message two 
- (for bonus points) how to create instances.

   One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

    Implementation Points",,,,,,,,,,,
5,PMStateTime,"A StateTime class is a generalization of point. It holds both a state and a time.

We don't want to  use Point, since state may be a vector quantity, and the behavior of array @ number is a little off (it stores points in an array, what we want is the array itself in state, and the scalar quantity in time).","""A StateTime class is a generalization of point.",It holds both a state and a time.,,,"We don't want to use Point, since state may be a vector quantity, and the behavior of array @ number is a little off (it stores points in an array, what we want is the array itself in state, and the scalar quantity in time).""",,,,,,,,,,,,,,,,,
5,PMStepper,"Basic steppers execute one timestep of a specific order with a given stepsize.

From odeint-v2 documentation:

Solving ordinary differential equation numerically is usually done iteratively, that is a given state of an ordinary differential equation is iterated forward x(t) -> x(t+dt) -> x(t+2dt). Steppers perform one single step. The most general stepper type is described by the Stepper concept.

Before calling doStep, it is important to associate the stepper with a system. The class method onSystem will assign the system to the Stepper.",Basic steppers,Basic steppers execute one timestep of a specific order with a given stepsize.,The most general stepper type is described by the Stepper concept.,. The class method onSystem will assign the system to the Stepper.,"Solving ordinary differential equation numerically is usually done iteratively, that is a given state of an ordinary differential equation is iterated forward x(t) -> x(t+dt) -> x(t+2dt). Steppers perform one single step.",,"From odeint-v2 documentation:

Solving ordinary differential equation numerically is usually done iteratively, that is a given state of an ordinary differential equation is iterated forward x(t) -> x(t+dt) -> x(t+2dt). Steppers perform one single step. The most general stepper type is described by the Stepper concept.",,,,,,,,,,,,"Before calling doStep, it is important to associate the stepper with a system.",,,
6,GLMRoassal2MorphicTest,A GLMRoassalMorphicTest is xxxxxxxxx.,A GLMRoassalMorphicTest is xxxxxxxxx.,,,,,,,,,,,,,,,,,,,,,
6,MorphicRoassalAdapter,I am bridging RoassalModel and RTView,,I am bridging RoassalModel and RTView,I am bridging RoassalModel and RTView,,,,,,"RoassalModel
RTView",,,,,,,,,,,,,
6,RTAbout,I am a class that display general information about Roassal,,I am a class that display general information about Roassal,,,,,,,,,,,,,,,,,,,,
6,RTAbstractExample,"I am the super class of all the roassal examples.

Try to use this script to know the excecution of roassal examples 

| examples errors |
examples := OrderedCollection new.
errors := OrderedCollection new.
(RTAbstractExample subclasses collect: #new) 
        do: [ :example | 
                example gtExamples do: [:met | | time builder |
                        time := DateAndTime now.
                        [builder := example perform: met selector.
                        (builder isKindOf: RTBuilder) 
                                ifTrue: [ builder build ].
                        time := DateAndTime now - time.
                        time > (1 asDuration)
                                ifTrue: [ examples add: met->time ]
                        ] on: Error do: [ errors add: met ] ] ]
        displayingProgress: 'Running examples'.
examples->errors",I am the super class of all the roassal examples.,,,,,,,,,"Try to use this script to know the excecution of roassal examples 

| examples errors |
examples := OrderedCollection new.
errors := OrderedCollection new.
(RTAbstractExample subclasses collect: #new) 
        do: [ :example | 
                example gtExamples do: [:met | | time builder |
                        time := DateAndTime now.
                        [builder := example perform: met selector.
                        (builder isKindOf: RTBuilder) 
                                ifTrue: [ builder build ].
                        time := DateAndTime now - time.
                        time > (1 asDuration)
                                ifTrue: [ examples add: met->time ]
                        ] on: Error do: [ errors add: met ] ] ]
        displayingProgress: 'Running examples'.
examples->errors",,,,,,,,,,,,
6,RTAbstractStackedDataSet,A data set is a set of points intended to be charted. A data set has to be added to a RTGrapher.  Look at the class comment of my subclasses for detail.,A data set is a set of points intended to be charted,,A data set has to be added to a RTGrapher.,,,,Look at the class comment of my subclasses for detail.,,,,,,,,,,,,A data set has to be added to a RTGrapher.,,,
6,RTAbstractTreeBuilder,"I am a base class for some builders of roassal like:

RTTreeMapBuilder
RTCircularTreeMapBuilder
RTBundleBuilder
RTSunburstBuilder",I am a base class for some builders of roassal like:,,"I am a base class for some builders of roassal like:

RTTreeMapBuilder
RTCircularTreeMapBuilder
RTBundleBuilder
RTSunburstBuilder",,,,,,"RTTreeMapBuilder
RTCircularTreeMapBuilder
RTBundleBuilder
RTSunburstBuilder",,,,,,,,,,,,,
6,RTAttachPoint,I am the superclass of the class hierarchy describing attach points. An attach point indicates where lines start and end. ,I am the superclass of the class hierarchy describing attach points.,An attach point indicates where lines start and end.,,,,,,,,,,,,,,,,,,,,
6,RTAxisRenderer,A RTAxisRenderer is a renderer for axis. It simply render in a view an axis configuration,A RTAxisRenderer is a renderer for axis.,It simply render in a view an axis configuration,A RTAxisRenderer is a renderer for axis. It simply render in a view an axis configuration,,,,,,,,,,,,,,,,,,,
6,RTBezier3Line,"Describe a cubic Bezier spline

Here is an example:

-=-=-=-=-=
v := RTView new.

s := RTEllipse new color: (Color red alpha: 0.4); size: 30.
e1 := s elementOn: 'Begin'.
e2 := s elementOn: 'End'.
e3 := s elementOn: 'Middle'.


lineShape := RTBezier3Line new.
lineShape controlElement: e3.

lineShape attachPoint: (RTShorterDistanceAttachPoint instance).
edge := lineShape edgeFrom: e1 to: e2.

v add: e1; add: e2; add: e3; add: edge.

e1 @ RTDraggable.
e2 @ RTDraggable.
e3 @ RTDraggable.

e2 translateBy: 80 @ 50.
e3 translateBy: 40 @ 25.

v 
-=-=-=-=-=",,Describe a cubic Bezier spline,,,,,,,,"Here is an example:

-=-=-=-=-=
v := RTView new.

s := RTEllipse new color: (Color red alpha: 0.4); size: 30.
e1 := s elementOn: 'Begin'.
e2 := s elementOn: 'End'.
e3 := s elementOn: 'Middle'.


lineShape := RTBezier3Line new.
lineShape controlElement: e3.

lineShape attachPoint: (RTShorterDistanceAttachPoint instance).
edge := lineShape edgeFrom: e1 to: e2.

v add: e1; add: e2; add: e3; add: edge.

e1 @ RTDraggable.
e2 @ RTDraggable.
e3 @ RTDraggable.

e2 translateBy: 80 @ 50.
e3 translateBy: 40 @ 25.

v 
-=-=-=-=-=",,,,,,,,,,,,
6,RTBorderAttachPoint,"I am an attach point that will end the line on the border of the end shapes.

Unline ContinuousAttachPoint & co. you don't need to care about what the end shape is, as long as it is one of the basic shapes.

Supported shapes:
        - Box
        -RoundedBox
        - Ellipse/Circle

Todo:
        - Polygon

Supported lines:
        - Line (straight line)

Todo:
        - MultiLine
        - BezierLine",I am an attach point that will end the line on the border of the end shapes.,,,,"Unline ContinuousAttachPoint & co. you don't need to care about what the end shape is, as long as it is one of the basic shapes.",,,,ContinuousAttachPoint,,"Supported shapes:
        - Box
        -RoundedBox
        - Ellipse/Circle

Todo:
        - Polygon

Supported lines:
        - Line (straight line)

Todo:
        - MultiLine
        - BezierLine",,,,,,,,,,,
6,RTBox,"A RTBox is a rectangular box. E.g.,

| v |
v := RTView new.
v add: (RTBox new width: 10; height: 20) element.
v open","""A RTBox is a rectangular box.",,,,,,,,,"E.g.,

| v |
v := RTView new.
v add: (RTBox new width: 10; height: 20) element.
v open""",,,,,,,,,,,,
6,RTBucketColor,A scale of elements is discretized into buckets where elements of each bucket is associated to an element. The buckets are formed by creating partitions uniformly.,,A scale of elements is discretized into buckets where elements of each bucket is associated to an element. The buckets are formed by creating partitions uniformly.,,,,,,,,,,,,,,,,,,,,
6,RTCalendarExample,"RTCalendarExample new installTitle: 'VisualizationCSV' 
                code:
'
| b tab colors dictionary |
tab := RTTabTable new input: ''http://bl.ocks.org/mbostock/raw/4063318/dji.csv'' asUrl retrieveContents usingDelimiter: $,.
tab removeFirstRow.

dictionary := Dictionary new.
tab values do: [ :ar | | value |
        value := (ar fifth asNumber - ar second asNumber)/ ar second asNumber.
        dictionary at: ar first asDate put: value ].

colors := #(#(165 0 38) #(215 48 38) #(244 109 67)
        #(253 174 97) #(254 224 139) #(255 255 191) #(217 239 139)
         #(166 217 106) #(102 189 99) #(26 152 80) #(0 104 55)
  ) collect: [ :ar| Color r: ar first g: ar second b: ar third range: 255 ].

b := RTCalendarBuilder new.
b dateShape rectangle size: 15; color: Color white; borderColor: Color lightGray.
b monthShape shape: (b monthShapePath: 15.0).
b yearShape composite: [ :comp | 
        comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).
        comp add: (RTBox new color: Color transparent). ] .
b dates: ((Year year: 1990) to: (Year year: 2010) ).
b dateLayout gapSize: 0.
b monthLayout month.
b yearLayout horizontalLine.
b dateShape if: [ :d | dictionary includesKey: d ] color: 
        [ :d | | value index |
        value := (dictionary at: d)+0.05.
        index := (value * 11/ 0.1)+1.
        index < 1 ifTrue: [ index := 1 ].
        index > 11 ifTrue: [ index := 11 ].
        colors at: index. ].
b dateInteraction popup.
b build.
(b view elements select: [:e | e model isKindOf: Month]) pushFront.
^ b view

'",,,,,,,,,,"RTCalendarExample new installTitle: 'VisualizationCSV' 
                code:
'
| b tab colors dictionary |
tab := RTTabTable new input: ''http://bl.ocks.org/mbostock/raw/4063318/dji.csv'' asUrl retrieveContents usingDelimiter: $,.
tab removeFirstRow.

dictionary := Dictionary new.
tab values do: [ :ar | | value |
        value := (ar fifth asNumber - ar second asNumber)/ ar second asNumber.
        dictionary at: ar first asDate put: value ].

colors := #(#(165 0 38) #(215 48 38) #(244 109 67)
        #(253 174 97) #(254 224 139) #(255 255 191) #(217 239 139)
         #(166 217 106) #(102 189 99) #(26 152 80) #(0 104 55)
  ) collect: [ :ar| Color r: ar first g: ar second b: ar third range: 255 ].

b := RTCalendarBuilder new.
b dateShape rectangle size: 15; color: Color white; borderColor: Color lightGray.
b monthShape shape: (b monthShapePath: 15.0).
b yearShape composite: [ :comp | 
        comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).
        comp add: (RTBox new color: Color transparent). ] .
b dates: ((Year year: 1990) to: (Year year: 2010) ).
b dateLayout gapSize: 0.
b monthLayout month.
b yearLayout horizontalLine.
b dateShape if: [ :d | dictionary includesKey: d ] color: 
        [ :d | | value index |
        value := (dictionary at: d)+0.05.
        index := (value * 11/ 0.1)+1.
        index < 1 ifTrue: [ index := 1 ].
        index > 11 ifTrue: [ index := 11 ].
        colors at: index. ].
b dateInteraction popup.
b build.
(b view elements select: [:e | e model isKindOf: Month]) pushFront.
^ b view

'",,,,,,,,,,,,
6,RTCircleGeometry,"I represent a circle described by its 'center ' and a 'radius'.

I am NOT a Roassal shape, for that use RTEllipse. Instead I am using in some circle-related gemetric computations.","""I represent a circle described by its 'center ' and a 'radius'.

I am NOT a Roassal shape, for that use RTEllipse.","Instead I am using in some circle-related gemetric computations.""",,,,,,,,,,,"I am NOT a Roassal shape, for that use RTEllipse.",,,,"I am NOT a Roassal shape, for that use RTEllipse.",,,,,
6,RTCircleTree,I am a class helper to do the layout in RTCircularTreeMapBuilder,I am a class helper,to do the layout in RTCircularTreeMapBuilder,RTCircularTreeMapBuilder,,,,,,,,,,,,,,,,,,,
6,RTCPQualitative,"Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.

Check it out by executing:
ColorPalette qualitative show

More info: 
http://colorbrewer2.org/learnmore/schemes_full.html#qualitative

---Copyright:
All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.

FalutUI1 color scheme come from: http://flatuicolors.com/",,"Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.",,,,,"More info: 
http://colorbrewer2.org/learnmore/schemes_full.html#qualitative.
FalutUI1 color scheme come from: http://flatuicolors.com/",,,"Check it out by executing:
ColorPalette qualitative show",,FalutUI1 color scheme come from: http://flatuicolors.com/,,,"http://colorbrewer2.org/learnmore/schemes_full.html#qualitative
FalutUI1 color scheme come from: http://flatuicolors.com/",,Qualitative schemes are best suited to representing nominal or categorical data.,Qualitative schemes are best suited to representing nominal or categorical data.,,,"---Copyright:
All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.",
6,RTDecoratedTest,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,,,,,,,,,,,,,,,,,,,
6,RTDualAttachPoint,I am a new class to combine attach points,I am a new class,to combine attach points,,,,,,,,,,,,,,,,,,,,
6,RTEditableLabel,"I am a class to create editable label shapes, but do not forget that roassal is for visualizations not to build morphs",I am a class to create editable label shapes,", but do not forget that roassal is for visualizations not to build morphs",,,,,,,,,,,but do not forget that roassal is for visualizations not to build morphs,,,,,,,,,
6,RTEllipseTest,A RTEllipseTest is a test class for testing the behavior of RTEllipse,A RTEllipseTest is a test class,for testing the behavior of RTEllipse,,,,,,,,,,,,,,,,,,,,
6,RTExperimentalExample,"RTExperimentalExample new installTitle: 'BoxSelectionForEdges' 
                code:
                '
<gtExample>
| b v |
b := RTObjectBrowser new.
v := RTView new.
v addElement: RTBox element.
b object: v.
^ b'",,,,,,,,,,"RTExperimentalExample new installTitle: 'BoxSelectionForEdges' 
                code:
                '
<gtExample>
| b v |
b := RTObjectBrowser new.
v := RTView new.
v addElement: RTBox element.
b object: v.
^ b'",,,,,,,,,,,,
6,RTExploraBuilderTest,"A ROExploraBuilderTest is xxxxxxxxx.

Instance Variables
        builder:                <Object>

builder
        - xxxxx",A ROExploraBuilderTest is xxxxxxxxx.,,,,,"Instance Variables
        builder:                <Object>
builder
        - xxxxx",,,,,,,,,,,,,,,,
6,RTFilterInView,"This interaction adds a set of menu in the view to filter in and out some elements
Here is an example:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.
b view @ RTFilterInView.
b 
-=-=-=

With edges:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b normalizer normalizeColor: #numberOfMethods.
b edges connectFrom: #superclass.
b layout tree.

b view @ RTFilterInView.

b 
-=-=-=

Example using the spawn block:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.

filter := RTFilterInView new.
filter spawnBlock: [ :el | RTView new addAll: el copy; yourself ].
b view @ filter.
b 
-=-=-=",,This interaction adds a set of menu in the view to filter in and out some elements,,,,,,,,"Here is an example:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.
b view @ RTFilterInView.
b 
-=-=-=

With edges:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b normalizer normalizeColor: #numberOfMethods.
b edges connectFrom: #superclass.
b layout tree.

b view @ RTFilterInView.

b 
-=-=-=

Example using the spawn block:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.

filter := RTFilterInView new.
filter spawnBlock: [ :el | RTView new addAll: el copy; yourself ].
b view @ filter.
b 
-=-=-=",,,,,,,,,,,,
6,RTForceBasedLayout,"A ROForceBasedLayout is inspired from the Code of D3. The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045

Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.

Instance Variables
        alpha:                <Object>
        center:                <Object>
        charge:                <Object>
        charges:                <Object>
        fixedNodes:                <Object>
        friction:                <Object>
        gravity:                <Object>
        layoutInitial:                <Object>
        length:                <Object>
        lengths:                <Object>
        nodes:                <Object>
        oldPositions:                <Object>
        strength:                <Object>
        strengths:                <Object>
        theta:                <Object>
        weights:                <Object>

alpha
        - xxxxx

center
        - xxxxx

charge
        - xxxxx

charges
        - xxxxx

fixedNodes
        - xxxxx

friction
        - xxxxx

gravity
        - xxxxx

layoutInitial
        - xxxxx

length
        - xxxxx

lengths
        - xxxxx

nodes
        - xxxxx

oldPositions
        - xxxxx

strength
        - xxxxx

strengths
        - xxxxx

theta
        - xxxxx

weights
        - xxxxx","""A ROForceBasedLayout is inspired from the Code of D3.",,,,,"Instance Variables
	alpha:		<Object>
	center:		<Object>
	charge:		<Object>
	charges:		<Object>
	fixedNodes:		<Object>
	friction:		<Object>
	gravity:		<Object>
	layoutInitial:		<Object>
	length:		<Object>
	lengths:		<Object>
	nodes:		<Object>
	oldPositions:		<Object>
	strength:		<Object>
	strengths:		<Object>
	theta:		<Object>
	weights:		<Object>

alpha
	- xxxxx

center
	- xxxxx

charge
	- xxxxx

charges
	- xxxxx

fixedNodes
	- xxxxx

friction
	- xxxxx

gravity
	- xxxxx

layoutInitial
	- xxxxx

length
	- xxxxx

lengths
	- xxxxx

nodes
	- xxxxx

oldPositions
	- xxxxx

strength
	- xxxxx

strengths
	- xxxxx

theta
	- xxxxx

weights
	- xxxxx""","The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045

Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.",,,,,,,,The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045,,,,,,Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.,
6,RTGrapherSelectRangeViewContext,"Define a range for GT

-=-=-=
g := RTGrapher new.
g view: RTView new.
ds := RTData new.
ds dotShape color: Color blue trans.
ds points: RTShape withAllSubclasses.
ds y: [ :cls | cls numberOfMethods - 50 ].
ds x: [ :cls | cls numberOfLinesOfCode - 150 ].
g add: ds.

RTGrapherSelectRangeViewContext onGrapher: g callback: [ :elements |  (g view attributeAt: #presentation) selection: elements ].

g 
-=-=-=",,Define a range for GT,,,,,,,,"-=-=-=
g := RTGrapher new.
g view: RTView new.
ds := RTData new.
ds dotShape color: Color blue trans.
ds points: RTShape withAllSubclasses.
ds y: [ :cls | cls numberOfMethods - 50 ].
ds x: [ :cls | cls numberOfLinesOfCode - 150 ].
g add: ds.

RTGrapherSelectRangeViewContext onGrapher: g callback: [ :elements |  (g view attributeAt: #presentation) selection: elements ].

g 
-=-=-=",,,,,,,,,,,,
6,RTHighlightableWithCursor,"Highlight to indicates that some interaction be can done. It changes the cursor aspect

E.g.,

-=-=-=
| b |
b := RTUMLClassBuilder new
   instanceVariables: #instVarNames;
   methodselector: #selector;
        methodsNames: #rtmethods;
        attributeselector: #yourself.
b attributeShape color: Color black.
b methodShape color: Color black.
b classNameShape color: Color black.
b lineShape color: Color black.
b boxShape borderColor: Color black.

b addObjects: (Collection withAllSubclasses ).
b layout tree.

b build.

b view elements @ RTHighlightableWithCursor.
^b view
-=-=-=

-=-=-=
b := RTMondrian new.
b shape circle size: 10.
b interaction showEdge 
        connectToAll: #subclasses.

b interaction showLabel 
        highlightObjects: #subclasses.
        

nodes := b nodes: (Collection withAllSubclasses).
nodes @ RTHighlightableWithCursor.
b edges moveBehind; connectFrom: #superclass.
b layout radial.
b
-=-=-=",,Highlight to indicates that some interaction be can done,It changes the cursor aspect,,,,,,,"E.g.,

-=-=-=
| b |
b := RTUMLClassBuilder new
   instanceVariables: #instVarNames;
   methodselector: #selector;
        methodsNames: #rtmethods;
        attributeselector: #yourself.
b attributeShape color: Color black.
b methodShape color: Color black.
b classNameShape color: Color black.
b lineShape color: Color black.
b boxShape borderColor: Color black.

b addObjects: (Collection withAllSubclasses ).
b layout tree.

b build.

b view elements @ RTHighlightableWithCursor.
^b view
-=-=-=

-=-=-=
b := RTMondrian new.
b shape circle size: 10.
b interaction showEdge 
        connectToAll: #subclasses.

b interaction showLabel 
        highlightObjects: #subclasses.
        

nodes := b nodes: (Collection withAllSubclasses).
nodes @ RTHighlightableWithCursor.
b edges moveBehind; connectFrom: #superclass.
b layout radial.
b
-=-=-=",,,,,,,,,,,,
6,RTHistogramSet,The histogram gives you a distribution frequency over the points given. Frequency on y and a collection of values per bars on x.  ,,The histogram gives you a distribution frequency over the points given. Frequency on y and a collection of values per bars on x.,,,,,,,,,,,,,,,,,,,,
6,RTHorizontalData,RTData renders bars and dots in vertical way,,RTData renders bars and dots in vertical way,,,,,,,,,,,,,,,,,,,,
6,RTLabeled,"A RTLabeled  adds a label above an element. The label may be particularized using #text: in the default string representation is not sufficient. Consider:

E.g., 
v := RTView new.
e := (RTEllipse new size: 30) elementOn: 42.
v add: e.
e @ (RTLabeled new text: [ :value | 'My value is ', value asString ]).
v

Instance Variables
	canvas:		<Object>
	color:		<Object>
	highlightable:		<Object>
	lowColor:		<Object>
	offsetOnEdge:		<Object>
	position:		<Object>
	text:		<Object>

canvas
	- xxxxx

color
	- xxxxx

highlightable
	- xxxxx

lowColor
	- xxxxx

offsetOnEdge
	- xxxxx

position
	- xxxxx

text
	- xxxxx",,"""A RTLabeled  adds a label above an element. The label may be particularized using #text: in the default string representation is not sufficient. Consider:",,"canvas
        - xxxxx

color
        - xxxxx

highlightable
        - xxxxx

lowColor
        - xxxxx

offsetOnEdge
        - xxxxx

position
        - xxxxx

text
        - xxxxx""",,"Instance Variables
        canvas:                <Object>
        color:                <Object>
        highlightable:                <Object>
        lowColor:                <Object>
        offsetOnEdge:                <Object>
        position:                <Object>
        text:                <Object>

canvas
        - xxxxx

color
        - xxxxx

highlightable
        - xxxxx

lowColor
        - xxxxx

offsetOnEdge
        - xxxxx

position
        - xxxxx

text
        - xxxxx""",,,,"E.g., 
v := RTView new.
e := (RTEllipse new size: 30) elementOn: 42.
v add: e.
e @ (RTLabeled new text: [ :value | 'My value is ', value asString ]).
v",,,,,,,,,,,,
6,RTLineDecorationExample,"RTLineDecorationExample new installTitle: 'Cool' 
                code:
                '
        | v b1 b2 edges |
        b1 := (RTBox new
                size: 100;
                element)
                translateTo: 0 @ 0;
                @ RTDraggable.
        b2 := (RTBox new
                size: 100;
                element)
                translateTo: 400 @ 0;
                @ RTDraggable.
        edges := OrderedCollection new.
        edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).


v := RTView new
        add: b1;
        add: b2;
        addAll: edges.
edges do: [ :each | each update ].
v
'",,,,,,,,,,"RTLineDecorationExample new installTitle: 'Cool' 
                code:
                '
        | v b1 b2 edges |
        b1 := (RTBox new
                size: 100;
                element)
                translateTo: 0 @ 0;
                @ RTDraggable.
        b2 := (RTBox new
                size: 100;
                element)
                translateTo: 400 @ 0;
                @ RTDraggable.
        edges := OrderedCollection new.
        edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).


v := RTView new
        add: b1;
        add: b2;
        addAll: edges.
edges do: [ :each | each update ].
v
'",,,,,,,,,,,,
6,RTLinePathBuilder,An interpolator a way to create lines in SVG,,An interpolator a way to create lines in SVG,,,,,,,,,,,,,,,,,,,,
6,RTLinkView,"I allow to export several views

for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser

RTLinkView works with RTHTML5Exporter and
RTSVGExporter",,I allow to export several views,"RTLinkView works with RTHTML5Exporter and
RTSVGExporter",,,,,,"RTLinkView works with RTHTML5Exporter and
RTSVGExporter","for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser.",,,,,,,"for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser","for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser",,,,
6,RTMenuActivable,"A RTMenuActivable adds a menu to an element. The menu is activable by right-clicking on the node.

For example:

classes := RTObject withAllSubclasses.
v := RTView new.
v @ RTDraggableView.
n := RTMultiLinearColorForIdentity new objects: classes.
shape := RTEllipse new size: #numberOfMethods; color: n.
es := shape elementsOn: classes.
es @ (RTMenuActivable new action: #inspect; item: 'browse class' action: [ :e | e model browse ]).
v addAll: es.
RTFlowLayout on: es.
v",,,,,,,,,,,,,,,,,,,,,,
6,RTPlatformPopup,I am a basic class to have the platform popup instead of the roassal popup (RTPopup),I am a basic class to have the platform popup instead of the roassal popup (RTPopup),,,,,,,,,,,,,,,,,,,,,
6,RTPopupTest,"A ROAbstractPopupTest is xxxxxxxxx.

Instance Variables
        popup:                <Object>
        view:                <Object>

popup
        - xxxxx

view
        - xxxxx",A ROAbstractPopupTest is xxxxxxxxx.,,,"popup
        - xxxxx

view
        - xxxxx",,"Instance Variables
        popup:                <Object>
        view:                <Object>",,,,,,,,,,,,,,,,
6,RTRectangleAttachPoint,"Continuous attach point which presumes both shapes are not rotated rectangles

-=-=-=
v := RTView new.

e1 := (RTBox new size: 50) elementOn: 1.
e2 := (RTEllipse new size: 50) elementOn: 2.
v add: e1; add: e2.
e2 translateBy: 30 @ 60.

e1 @ RTDraggable.
e2 @ RTDraggable.

s := RTArrowedLine new color: Color black.
s attachPoint: RTRectangleAttachPoint new.
l := s edgeFrom: e1 to: e2.
v add: l.

v
-=-=-=",,Continuous attach point which presumes both shapes are not rotated rectangles,,,,,,,,"-=-=-=
v := RTView new.

e1 := (RTBox new size: 50) elementOn: 1.
e2 := (RTEllipse new size: 50) elementOn: 2.
v add: e1; add: e2.
e2 translateBy: 30 @ 60.

e1 @ RTDraggable.
e2 @ RTDraggable.

s := RTArrowedLine new color: Color black.
s attachPoint: RTRectangleAttachPoint new.
l := s edgeFrom: e1 to: e2.
v add: l.

v
-=-=-=",,,,,,,,,,,,
6,RTResizeCanceled,"I am fired when Resize operation is canceled globally for the whole View.

!! Collaborators

DCRTResizable",,I am fired when Resize operation is canceled globally for the whole View.,"!! Collaborators

DCRTResizable",,,,,,,,,,,,,,,,I am fired when Resize operation is canceled globally for the whole View.,,,
6,RTRotatedLabel,"A RTRotatedLabel describes rotated labels.

| v shape es |
v := RTView new.
shape := RTRotatedLabel new text: [ :c | 'Class ', c name ]; angleInDegree: [ :c | c numberOfMethods \\ 360 ].
es := shape elementsOn: Collection withAllSubclasses.
RTGridLayout on: es.
v addAll: es.
v open",,A RTRotatedLabel describes rotated labels.,,,,,,,,"| v shape es |
v := RTView new.
shape := RTRotatedLabel new text: [ :c | 'Class ', c name ]; angleInDegree: [ :c | c numberOfMethods \\ 360 ].
es := shape elementsOn: Collection withAllSubclasses.
RTGridLayout on: es.
v addAll: es.
v open",,,,,,,,,,,,
6,RTScale,A class to have nice scales checks subclasses,A class to have nice scales,,,,,,checks subclasses,,,,,,,,,,,,,,,
6,RTScrollBarBuilder,"A RTScrollBarBuilder is a scroll bar that you can add to navigate in your view. More than a Draggable view, it allows to keep a mark about your position in the view and it scale for large views. 

It can be static, movable, using #isStatic or #isMovable
aving an orientation #vertical or #horizontal.

the default configuration is #isBasic and #isStatic,

the bar shape is defined by #barShape: <#aBox or default value #anEllipse>
the bar can have a specificity like #scalable, so it give an idea of the size of the view.

Size or fixedPosition can be defined as blocks.

width: to set a static size of width.",A RTScrollBarBuilder is a scroll bar that you can add to navigate in your view.,"More than a Draggable view, it allows to keep a mark about your position in the view and it scale for large views.",,"It can be static, movable, using #isStatic or #isMovable
aving an orientation #vertical or #horizontal.

the default configuration is #isBasic and #isStatic,

the bar shape is defined by #barShape: <#aBox or default value #anEllipse>
the bar can have a specificity like #scalable, so it give an idea of the size of the view.

Size or fixedPosition can be defined as blocks.

width: to set a static size of width.",,,,,,,,,,,,,,,,,,
6,RTSmoothLayoutTranslator,"A ROSmoothLayoutTranslator is xxxxxxxxx.

Instance Variables
        move:                <Object>
        nbCycles:                <Object>

move
        - xxxxx

nbCycles
        - xxxxx",A ROSmoothLayoutTranslator is xxxxxxxxx.,,,"move
        - xxxxx

nbCycles
        - xxxxx",,"Instance Variables
        move:                <Object>
        nbCycles:                <Object>

move
        - xxxxx

nbCycles
        - xxxxx",,,,,,,,,,,,,,,,
6,RTSunburstBuilder,"I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.

You can customize the angle of the arc, and play with the with radius and width of each arc.","""I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.","""I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.

You can customize the angle of the arc, and play with the with radius and width of each arc.""",,,,,,,,,,,,,,,,,,,,
6,RTSunburstBuilderExamples,"RTSunburstBuilderExamples new installTitle: 'basic15' 
                code:
                '
        | b |
        b := RTSunburstBuilder new.
        b strategy: (RTSunburstExtentStrategy new extent: 800@800).
        b shape colorElement: [ :el | el model subclasses isEmpty ifTrue: [ Color purple ] ifFalse: [ Color lightGray ] ].

        b explore: Morph using: #subclasses.
        b view @ RTDraggableView.
        b build.
        ^ b view'",,,,,,,,,,"RTSunburstBuilderExamples new installTitle: 'basic15' 
                code:
                '
        | b |
        b := RTSunburstBuilder new.
        b strategy: (RTSunburstExtentStrategy new extent: 800@800).
        b shape colorElement: [ :el | el model subclasses isEmpty ifTrue: [ Color purple ] ifFalse: [ Color lightGray ] ].

        b explore: Morph using: #subclasses.
        b view @ RTDraggableView.
        b build.
        ^ b view'",,,,,,,,,,,,
6,RTSVGAbstractLine,"A RTSVGAbstractLine refers to the common interface for both regular SVG lines and bezier lines (as paths).

The decoration refers to the Maker of the Line.","""A RTSVGAbstractLine refers to the common interface for both regular SVG lines and bezier lines (as paths).

The decoration refers to the Maker of the Line.""",,,,,,,,,,,,,,,,,,,,,
6,RTSVGBitmap,"NOT WORKING, REFRAIN FROM USAGE",,,,,,,,,,,,,"NOT WORKING, REFRAIN FROM USAGE",,,,,,,,,
6,RTSVGBoxedTextPopup,"A RTSVGBoxedTextPopup is a text popup, contained in a square box.

This boxing, in SVG, supports many features, not included in this class.","A RTSVGBoxedTextPopup is a text popup, contained in a square box.","This boxing, in SVG, supports many features, not included in this class.",,,,,,,,,,,,,,,,,,,,
6,RTSVGPopup,"A RTSVGPopup is any kind of popup born from a certain element.

The click refers to the posibility of activating the popup only when the element is clicked. This is disabled by default.",A RTSVGPopup is any kind of popup born from a certain element.,The click refers to the posibility of activating the popup only when the element is clicked. This is disabled by default.,,,,,,,,,,,This is disabled by default.,,,,,,The click refers to the posibility of activating the popup only when the element is clicked.,,,
6,RTSVGVisitor2Test,I am a simple test class for RTSVGVisitor2,I am a simple test class for RTSVGVisitor2,,,,,,,,RTSVGVisitor2,,,,,,,,,,,,,
6,RTTabTable,RTTabTable is made to work with CSV file contents.,,RTTabTable is made to work with CSV file contents.,,,,,,,,,,,,,,,,,,,,
6,RTTextPath,I am a simple class to generate text in roassal with Athens cairo that uses the textPathCommand from roassal,I am a simple class to generate text in roassal,generate text in roassal,with Athens cairo that uses the textPathCommand from roassal,,,,,,,,,,,,,,,,,,,
6,RTTextWord,"A RTTextWord represents one word of an original text.

Instance Variables
        interval:                <Interval>
        text:                <String | Text>

interval
        - interval of the word in the original text

text
        - word, a part of the orignal text",A RTTextWord represents one word of an original text.,,,"interval
        - interval of the word in the original text

text
        - word, a part of the orignal text",,"Instance Variables
        interval:                <Interval>
        text:                <String | Text>",,,,,,,,,,,,,,,,
6,RTTimelineSetTest,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,,,,,,RTTimeLineSet,,,,,,,,,,,,,
6,RTTreeMapExampleTODELETE,Examples of RTTreeMap,Examples of RTTreeMap,,,,,,,,RTTreeMap,,,,,,,,,,,,,
6,RTVerticalMultipleData,"RTVerticalMultipleData represents a group of data points that are vertically located. Each group has the same X value.

Negative data are not allowed.

Here is an example:
[[[
| b d |                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: #( #('hello' 1 2 1) #('world' 2 4 2 ) #('bonjour' 3 5 4) #('bonjour' 3 5 4 ) #('bonjour' 3 5 4)).
d addMetric: #second.
d addMetric: #third.
d addMetric: #fourth.

d barChartWithBarTitle: #first rotation: -30.
b add: d.

b                        
]]] 

Here another example:
[[[
| b d classes |
classes := (Collection withAllSubclasses reverseSortedAs: #numberOfMethods) first:        10.
                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: classes.
d addMetric: #numberOfLinesOfCode.
d addMetric: #numberOfMethods.

d barChartWithBarTitle: #name rotation: -30.
b add: d.

b
]]]",RTVerticalMultipleData represents a group of data points that are vertically located.,,RTVerticalMultipleData represents a group of data points that are vertically located.,,"Each group has the same X value.

Negative data are not allowed.",,,,,"Here is an example:
[[[
| b d |                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: #( #('hello' 1 2 1) #('world' 2 4 2 ) #('bonjour' 3 5 4) #('bonjour' 3 5 4 ) #('bonjour' 3 5 4)).
d addMetric: #second.
d addMetric: #third.
d addMetric: #fourth.

d barChartWithBarTitle: #first rotation: -30.
b add: d.

b                        
]]] 

Here another example:
[[[
| b d classes |
classes := (Collection withAllSubclasses reverseSortedAs: #numberOfMethods) first:        10.
                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: classes.
d addMetric: #numberOfLinesOfCode.
d addMetric: #numberOfMethods.

d barChartWithBarTitle: #name rotation: -30.
b add: d.

b
]]]",,,,,,,,,,,,
6,RTWeightedCircleLayout,"RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small elements.

Here is an example:
-=-=-=-=-=-=-=-=-=-=-=-=
v := RTView new.
elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).
v addAll: elements.
RTWeightedCircleLayout on: elements.
v
-=-=-=-=-=-=-=-=-=-=-=-=",RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small,RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small elements.,,,,,,,,"Here is an example:
-=-=-=-=-=-=-=-=-=-=-=-=
v := RTView new.
elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).
v addAll: elements.
RTWeightedCircleLayout on: elements.
v
-=-=-=-=-=-=-=-=-=-=-=-=",,,,,,,,,,,,
6,TROSMShape,"This Shape represent an OpenStreetMap background object which tracks the camera zoom level and translation to build a view of the corresponding part of the OpenStreetMap.

A similar approach could work with Google maps.

Instance Variables
	osmZoomLevel:		<Integer>
	position:		<Point>
	rectangle:	<Rectangle>
	scale:		<Point>
	tiles:		<Dictionary of Point -> Form>
	zoom:		<Point>

osmZoomLevel
	- the zoom level in the OSM range (0 to 18, integer)

position
	- position of the shape

rectangle
	- bounds of the shape

scale
	- the scale of the shape

tiles
	- the cache of tiles, indexed by x, y

zoom
	- zoom of the shape


Principle:
	1.0 in Roassal space -> 1km in OSM. 
	R zoom to OSM zoom level: (base is 1km/pixel) 
		1000 * Rzoom = 156543.034 meters/pixel / (2 ^ zoomlevel)
		zoomlevel = ln( 156.543034 * Rzoom ) / ln 2
		remainderZoom =  156.543034 * Rzoom / (2 ^ zoomlevel))
		lon to Roassal space = [ :l | 40075.016686 * (l / 360) ]
		lat to Roassal space = [ :l | ((Float pi / 4) + (l degreesToRadians / 2)) tan ln * 40075.016686 / (2.0 * Float pi) ]
		Remember : working limit for lat/lon is ±85.05113°

Goal:
	depending on the RTView size and the canvas parameters, get the right tiles from OSM and display them.

Algorithm:
	From the camera, get the zoom level and offset.
	Compute the OSM zoom level (with the camera zoom value).
	Make remainder zoom a transform inside the TROSMShape.
	Take corners of bounding box, get lat / long, get tiles x and y based on previous zoom level.
	Set clipping rectangle to TROSMShape bounds.
	Display each tile.
	cache each tile. When displaying, check if tile exists. Remove tile if not used in display.","""This Shape represent an OpenStreetMap background object which tracks the camera zoom level and translation to build a view of the corresponding part of the OpenStreetMap.","""This Shape represent an OpenStreetMap background object which tracks the camera zoom level and translation to build a view of the corresponding part of the OpenStreetMap.",,"osmZoomLevel
        - the zoom level in the OSM range (0 to 18, integer)

position
        - position of the shape

rectangle
        - bounds of the shape

scale
        - the scale of the shape

tiles
        - the cache of tiles, indexed by x, y

zoom
        - zoom of the shape","Principle:
	1.0 in Roassal space -> 1km in OSM. 
	R zoom to OSM zoom level: (base is 1km/pixel) 
		1000 * Rzoom = 156543.034 meters/pixel / (2 ^ zoomlevel)
		zoomlevel = ln( 156.543034 * Rzoom ) / ln 2
		remainderZoom =  156.543034 * Rzoom / (2 ^ zoomlevel))
		lon to Roassal space = [ :l | 40075.016686 * (l / 360) ]
		lat to Roassal space = [ :l | ((Float pi / 4) + (l degreesToRadians / 2)) tan ln * 40075.016686 / (2.0 * Float pi) ]
		Remember : working limit for lat/lon is ±85.05113°

Goal:
	depending on the RTView size and the canvas parameters, get the right tiles from OSM and display them.

Algorithm:
	From the camera, get the zoom level and offset.
	Compute the OSM zoom level (with the camera zoom value).
	Make remainder zoom a transform inside the TROSMShape.
	Take corners of bounding box, get lat / long, get tiles x and y based on previous zoom level.
	Set clipping rectangle to TROSMShape bounds.
	Display each tile.
	cache each tile. When displaying, check if tile exists. Remove tile if not used in display.""","Instance Variables
        osmZoomLevel:                <Integer>
        position:                <Point>
        rectangle:        <Rectangle>
        scale:                <Point>
        tiles:                <Dictionary of Point -> Form>
        zoom:                <Point>

osmZoomLevel
        - the zoom level in the OSM range (0 to 18, integer)

position
        - position of the shape

rectangle
        - bounds of the shape

scale
        - the scale of the shape

tiles
        - the cache of tiles, indexed by x, y

zoom
        - zoom of the shape",,,,,,,,,,,,A similar approach could work with Google maps.,,,,
7,JQLoad,Load HTML from a remote file and inject it into the DOM.,,Load HTML from a remote file and inject it into the DOM.,,,,,,,,,,,,,,,,,,,,
7,WABulkReapingCache,"I am a cache that reaps all elements at once instead of incrementally.

I am intended to be used in GemStone/S instead of WAHashCache. A background process should send #reap to me.

    Instance Variables
        dictionary:                <Dictionary>",I am a cache that reaps all elements at once instead of incrementally.,,I am intended to be used in GemStone/S instead of WAHashCache. A background process should send #reap to me.,,,"Instance Variables
        dictionary:                <Dictionary>",,,WAHashCache,,,,,,,,,,A background process should send #reap to me.,,,
7,WACancelButtonTag,Creates a Cancel submit button.,,Creates a Cancel submit button.,,,,,,,,,,,,,,,,,,,,
7,WACanvasWidget,A common superclass for all widgets that want to use WAHtmlCanvas as their renderer.,A common superclass for all widgets that want to use WAHtmlCanvas as their renderer.,,,,,,,A common superclass for all widgets that want to use WAHtmlCanvas as their renderer.,WAHtmlCanvas,,,,,,,,,,,,,
7,WAComboResponse,"WAComboResponse is a combination of a buffered and a streaming response. By default, WAComboResponse will buffer the entire response to be sent at the end of the request processing cycle. If streaming is desired, the response can be flushed by sending it the #flush message. Flushing a response will sent all previously buffered data using chunked transfer-encoding (which preserves persistent connections). Clients can flush the response as often as they want at appropriate points in their response generation; everything buffered up to that point will be sent. For example, a search results page might use something like:

renderContentOn: aCanvas
	""Render the search page""

	self renderSearchLabelOn: aCanvas.
	aCanvas flush. ""flush before starting search to give immediate feedback""

	self searchResultsDo:[:aResult|
		self renderSearchResultOn: aCanvas.
		aCanvas flush. ""flush after each search result""
	].

After a response has been flushed once, header modifications are no longer possible and will raise a WAIllegalStateException.

Server adaptors need to be aware that a committed response must be closed, when complete. An uncommitted response should be handled as usual by the server adapter.","""WAComboResponse is a combination of a buffered and a streaming response.","By default, WAComboResponse will buffer the entire response to be sent at the end of the request processing cycle. If streaming is desired, the response can be flushed by sending it the #flush message.","Flushing a response will sent all previously buffered data using chunked transfer-encoding (which preserves persistent connections). Clients can flush the response as often as they want at appropriate points in their response generation; everything buffered up to that point will be sent. 

After a response has been flushed once, header modifications are no longer possible and will raise a WAIllegalStateException.

Server adaptors need to be aware that a committed response must be closed, when complete. An uncommitted response should be handled as usual by the server adapter.""",,,,,,,"For example, a search results page might use something like:

renderContentOn: aCanvas
	""""Render the search page""""

	self renderSearchLabelOn: aCanvas.
	aCanvas flush. """"flush before starting search to give immediate feedback""""

	self searchResultsDo:[:aResult|
		self renderSearchResultOn: aCanvas.
		aCanvas flush. """"flush after each search result""""
	].",,,,,,,,,,,,
7,WACookie,"I represent a cookie, a piece of information that is stored on the client and read and writable by the server. I am basically a key/value pair of strings.
You can never trust information in a cookie, the client is free to edit it.
I model only a part of the full cookie specification.

Browser support:
http://www.mnot.net/blog/2006/10/27/cookie_fun

Netscape spec
http://cgi.netscape.com/newsref/std/cookie_spec.html

Cookie spec
http://tools.ietf.org/html/rfc2109

Cookie 2 spec
https://tools.ietf.org/html/rfc6265

HttpOnly
http://msdn2.microsoft.com/en-us/library/ms533046.aspx
https://bugzilla.mozilla.org/show_bug.cgi?id=178993

Compared to WARequestCookie I represent the information that is sent to the user agent.","I represent a cookie, a piece of information that is stored on the client and read and writable by the server. I am basically a key/value pair of strings.
I represent the information that is sent to the user agent.",I model only a part of the full cookie specification.,Compared to WARequestCookie I represent the information that is sent to the user agent.,,"Browser support:
http://www.mnot.net/blog/2006/10/27/cookie_fun

Netscape spec
http://cgi.netscape.com/newsref/std/cookie_spec.html

Cookie spec
http://tools.ietf.org/html/rfc2109

Cookie 2 spec
https://tools.ietf.org/html/rfc6265

HttpOnly
http://msdn2.microsoft.com/en-us/library/ms533046.aspx
https://bugzilla.mozilla.org/show_bug.cgi?id=178993",,"Browser support:
http://www.mnot.net/blog/2006/10/27/cookie_fun

Netscape spec
http://cgi.netscape.com/newsref/std/cookie_spec.html

Cookie spec
http://tools.ietf.org/html/rfc2109

Cookie 2 spec
https://tools.ietf.org/html/rfc6265

HttpOnly
http://msdn2.microsoft.com/en-us/library/ms533046.aspx
https://bugzilla.mozilla.org/show_bug.cgi?id=178993",,,,,,"You can never trust information in a cookie, the client is free to edit it.",,"Browser support:
http://www.mnot.net/blog/2006/10/27/cookie_fun

Netscape spec
http://cgi.netscape.com/newsref/std/cookie_spec.html

Cookie spec
http://tools.ietf.org/html/rfc2109

Cookie 2 spec
https://tools.ietf.org/html/rfc6265

HttpOnly
http://msdn2.microsoft.com/en-us/library/ms533046.aspx
https://bugzilla.mozilla.org/show_bug.cgi?id=178993",,,,,,,
7,WACopyHandlerPlugin,I make a copy of an application.,,I make a copy of an application.,,,,,,,,,,,,,,,,,,,,
7,WADatalistTag,"datalist together with the a new list attribute for input is used to make comboboxes:

<input list=browsers>
<datalist id=browsers>
 <option value=""Safari"">
 <option value=""Internet Explorer"">
 <option value=""Opera"">
 <option value=""Firefox"">
</datalist>",,datalist together with the a new list attribute for input is used to make comboboxes:,,,,,,,,"<input list=browsers>
<datalist id=browsers>
 <option value=""Safari"">
 <option value=""Internet Explorer"">
 <option value=""Opera"">
 <option value=""Firefox"">
</datalist>",,,,,,,,,,,,
7,WADelayedAnswerDecoration,"WADelayedAnswerDecoration adds a delay in displaying a component. 

See WADelayFunctionalTest for sample usage.
Select 'Delay"" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/tests/functional/WADelayFunctionalTest)

Instance Variables:
        delay        <Integer>        delay length in seconds",,WADelayedAnswerDecoration adds a delay in displaying a component.,,,,"Instance Variables:
        delay        <Integer>        delay length in seconds","See WADelayFunctionalTest for sample usage.
Select 'Delay"" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/tests/functional/WADelayFunctionalTest)",,,,,,,,"Select 'Delay"" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/tests/functional/WADelayFunctionalTest)",,,,,,,
7,WADevelopment,A WADevelopment is a collection of convenience methods for dealing with Seaside development in Squeak. This code is not supposed to be ported.,A WADevelopment is a collection of convenience methods for dealing with Seaside development in Squeak.,A WADevelopment is a collection of convenience methods for dealing with Seaside development in Squeak.,,,,,,,,,,,This code is not supposed to be ported.,,,,,,,,,
7,WADynamicVariable,I exist for legacy purposes. You should subclass GRDynamicVariable.,,I exist for legacy purposes.,,,,,,,,,,,,,,,You should subclass GRDynamicVariable.,,,,,
7,WAEncoder,I encode everything that is written to myself using #nextPut: and #nextPutAll: onto the wrapped stream.,,I encode everything that is written to myself using #nextPut: and #nextPutAll: onto the wrapped stream.,,I encode everything that is written to myself using #nextPut: and #nextPutAll: onto the wrapped stream.,,,,,,,,,,,,,,,,,,
7,WAErrorHandler,"WAErrorHandler catches Errors and Warnings and provides two methods for handling each type of exception:

handleError:
handleWarning:

If either method is not implemented, the default implementation will call #handleDefault:, which can be used to provide common behaviour for both exception types.",,WAErrorHandler catches Errors and Warnings and provides two methods for handling each type of exception:,WAErrorHandler catches Errors and Warnings and provides two methods for handling each type of exception:,"handleError:
handleWarning:","If either method is not implemented, the default implementation will call #handleDefault:, which can be used to provide common behaviour for both exception types.",,,,"Error
Warning",,,,"If either method is not implemented, the default implementation will call #handleDefault:, which can be used to provide common behaviour for both exception types.",,,,,,,,,
7,WAExpiringCache,"I am the abstract base class for caches that remove entries. Subclasses are intended to use to track sessions.

    Instance Variables
        maximumSize                        <Integer>
        maximumRelativeAge                <Integer>
        maximumAbsoluteAge        <Integer>
        overflowAction                        <Symbol>
                                
maximumSize:
        Number of sessions supported. When this limit is reached the overflow action is run. 0 for no maximum size. Has to be positive.

maximumRelativeAge:
        After so many seconds of inactivity a session is considered expired. 0 for no limit. Has to be positive.

maximumAbsoluteAge:
        After so many seconds after its creation a session is considered expired no matter when it was last accessed. 0 for no limit. Has to be positive.

overflowAction:
        What to do when the maximum number of sessions is reached. Only matters when the maximum size is bigger than 0.
        Possible values:
                #removeRelativeOldest remove the entry that hasn't been accessed for the longest time
                #removeAbsoluteOldest remove the entry that has been created the longest time ago
                #signalError signal WAMaximumNumberOfSessionsExceededError",I am the abstract base class for caches that remove entries.,,,"maximumSize:
        Number of sessions supported. When this limit is reached the overflow action is run. 0 for no maximum size. Has to be positive.

maximumRelativeAge:
        After so many seconds of inactivity a session is considered expired. 0 for no limit. Has to be positive.

maximumAbsoluteAge:
        After so many seconds after its creation a session is considered expired no matter when it was last accessed. 0 for no limit. Has to be positive.

overflowAction:
        What to do when the maximum number of sessions is reached. Only matters when the maximum size is bigger than 0.
        Possible values:
                #removeRelativeOldest remove the entry that hasn't been accessed for the longest time
                #removeAbsoluteOldest remove the entry that has been created the longest time ago
                #signalError signal WAMaximumNumberOfSessionsExceededError",,"Instance Variables
        maximumSize                        <Integer>
        maximumRelativeAge                <Integer>
        maximumAbsoluteAge        <Integer>
        overflowAction                        <Symbol>",,Subclasses are intended to use to track sessions.,,,,,,,,,,,When this limit is reached the overflow action is run. 0 for no maximum size. Has to be positive.,,,
7,WAFormCharEncodingFromHandlerTest,I test that the encoding from the handler is taken if a handler is present but a codec is missing.,,I test that the encoding from the handler is taken if a handler is present but a codec is missing.,,,,,,,,,,,,,,,,,,,,
7,WAFormDecoration,"A WAFormDecoration places its component inside an html form tag. The buttons inst var must be set. The component that a WAFormDecoration decorates must implement the method ""defaultButton"", which returns the string/symbol of the default button (one selected by default) of the form. Don't place any decorators between WAFormDecoration and its component otherwise ""defaultButton"" method fails. For each string/symbol in the buttons inst var the decorated component must implement a method of the same name, which is called when the button is selected.

Instance Variables
        buttons:                <Collection of strings or symbols>

buttons
        - list of strings or symbols, each string/symbol is the label (first letter capitalized) for a button and the name of the callback method on component when button is pressed,",,A WAFormDecoration places its component inside an html form tag.,A WAFormDecoration places its component inside an html form tag.,"buttons
        - list of strings or symbols, each string/symbol is the label (first letter capitalized) for a button and the name of the callback method on component when button is pressed,",,"Instance Variables
        buttons:                <Collection of strings or symbols>",,,,,,,"Don't place any decorators between WAFormDecoration and its component otherwise ""defaultButton"" method fails.",,,,,,"The buttons inst var must be set. The component that a WAFormDecoration decorates must implement the method ""defaultButton"", which returns the string/symbol of the default button (one selected by default) of the form. 

 For each string/symbol in the buttons inst var the decorated component must implement a method of the same name, which is called when the button is selected.",,,
7,WAFormTag,"The FORM element acts as a container for input elements and buttons.

Evaluation order:
The input fields callbacks will be evaluated in the order they
appear in the XHTML. Buttons will always be evaluated last, no matter
where they are positioned.",,The FORM element acts as a container for input elements and buttons.,The FORM element acts as a container for input elements and buttons.,,"Evaluation order:
The input fields callbacks will be evaluated in the order they
appear in the XHTML. Buttons will always be evaluated last, no matter
where they are positioned.",,,,,,,,,,,,,,,,,
7,WAHtmlHaltAndErrorHandler,"This exception handler also catches halts, in order to prevent Debugger windows from popping up and blocking server processes in deployed images.

Subclass this to provide a customized response or more advanced handling (e.g. emailing of errors).",,"This exception handler also catches halts, in order to prevent Debugger windows from popping up and blocking server processes in deployed images.","This exception handler also catches halts, in order to prevent Debugger windows from popping up and blocking server processes in deployed images.",,,,,Subclass this to provide a customized response or more advanced handling (e.g. emailing of errors).,,,,,,,,,,,,,,
7,WAIframeTag,"The IFRAME element allows authors to insert a frame within a block of text. Inserting an inline frame within a section of text is much like inserting an object via the OBJECT element: they both allow you to insert an HTML document in the middle of another, they may both be aligned with surrounding text, etc. 

The information to be inserted inline is designated by the src attribute of this element. The contents of the IFRAME element, on the other hand, should only be displayed by user agents that do not support frames or are configured not to display frames.

Inline frames may not be resized.",,The IFRAME element allows authors to insert a frame within a block of text.,,,"The information to be inserted inline is designated by the src attribute of this element. The contents of the IFRAME element, on the other hand, should only be displayed by user agents that do not support frames or are configured not to display frames.",,,,,"Inserting an inline frame within a section of text is much like inserting an object via the OBJECT element: they both allow you to insert an HTML document in the middle of another, they may both be aligned with surrounding text, etc.",,,Inline frames may not be resized.,,,,,,,,,
7,WAImageButtonTag,"Creates a graphical submit button. The value of the src attribute specifies the URI of the image that will decorate the button. For accessibility reasons, authors should provide alternate text for the image via the alt attribute. 

When a pointing device is used to click on the image, the form is submitted and the click coordinates passed to the server. The x value is measured in pixels from the left of the image, and the y value in pixels from the top of the image. The submitted data includes name.x=x-value and name.y=y-value where ""name"" is the value of the name attribute, and x-value and y-value are the x and y coordinate values, respectively.",,"""Creates a graphical submit button. The value of the src attribute specifies the URI of the image that will decorate the button.",,,"For accessibility reasons, authors should provide alternate text for the image via the alt attribute. 

When a pointing device is used to click on the image, the form is submitted and the click coordinates passed to the server. The x value is measured in pixels from the left of the image, and the y value in pixels from the top of the image. The submitted data includes name.x=x-value and name.y=y-value where """"name"""" is the value of the name attribute, and x-value and y-value are the x and y coordinate values, respectively.""",,,,,,,src attribute specifies the URI,"For accessibility reasons, authors should provide alternate text for the image via the alt attribute.",,,,,,,,,
7,WAImageStatus,A WAImageStatus displays information about the current Smalltalk image.,,A WAImageStatus displays information about the current Smalltalk image.,,,,,,,,,,,,,,,,,,,,
7,WAInspector,"This is an abstract implementation of a web-based object inspector. Platforms should implement their own subclasses, specifying behaviour for all unimplemented methods.

Note that #openNativeInspectorOn: on the class-side also needs to be implemented.

Also subclasses probably want to implement #initialize and #unload on the class-side to call 'self select' and 'self unselect' respectively. This will ensure they are registered as the current implementation when they are loaded.","""This is an abstract implementation of a web-based object inspector.","Platforms should implement their own subclasses, specifying behaviour for all unimplemented methods.",,,,,,"Also subclasses probably want to implement #initialize and #unload on the class-side to call 'self select' and 'self unselect' respectively. This will ensure they are registered as the current implementation when they are loaded.""",,,,,Note that #openNativeInspectorOn: on the class-side also needs to be implemented.,,,,,,,,,
7,WAInvisibleSessionTrackingStrategy,I am the abstract base class for classes that that use some request attribute that is present on every request for tracking sessions. For document handlers query fields are used.,I am the abstract base class,for classes that that use some request attribute that is present on every request for tracking sessions.,For document handlers query fields are used.,,,,,,,,,,,,,,,,,,,
7,WALabelledFormDialog,"WALabelledFormDialog is an abstract class for generating html forms. Given a data model WALabelledFormDialog displays a label and input field for each instance variable of interest. User supplied data is placed in the data model.

Subclasses need to implment the methods labelForSelector:, model, and rows. The ""model"" method just returns the object whose fields we wish to populate with date. The ""rows"" method returns a collections of symbols. One symbol for each row of data in the dialog. The symbol is used generate the accessor methods for the data in the model. The method ""labelForSelector:"" returns the labels for each row and each submit button in the form.

A standard text input field is used for each row of data. To use other html widgets for input for = a datum implement the method renderXXXOn: where XXX is the symbol for the row. See ""renderNameOn:"" in example below.

The default form has one button ""Ok"". Override the ""buttons"" method to change the text or number of submit buttons on the form. Override the ""defaultButton"" method to indicate which button is the default. For each button in the form the subclass needs a method with the same name as the button, which is called when the user clicks that button. See example below.

LabelledFormDialogExample subclass of WALabelledFormDialog instance methods
        initialize
                super initialize.
                contact := Contact new. ""contact is an inst var""
                self addMessage: 'Please enter the followning information'.

        model
                ^ contact

        ok
                self answer: contact

        cancel
                self answer

        rows
                ^ #(name phoneNumber)

        buttons
                #(ok cancel)

        labelForSelector: aSymbol
                aSymbol == #name ifTrue: [^'Your Name'].
                aSymbol == #phoneNumber ifTrue: [^'Phone Number'].
                aSymbol == #ok ifTrue: [^'Ok'].
                aSymbol == #cancel ifTrue: [^'Cancel'].
                ^ super labelForSelector: aSymbol

        renderNameOn: html 
                ""Show how to specily special input instead of using simple text field.""
                (html select)
                                list: #('Roger' 'Pete');
                                selected: 'Roger';
                                callback: [:v | contact name: v]

Contact Class used above has instance variables name, phoneNumber with standard getter and setter methods",WALabelledFormDialog is an abstract class for generating html forms.,"Given a data model WALabelledFormDialog displays a label and input field for each instance variable of interest. User supplied data is placed in the data model.

A standard text input field is used for each row of data. To use other html widgets for input for = a datum implement the method renderXXXOn: where XXX is the symbol for the row. See ""renderNameOn:"" in example below.",,"Contact Class used above has instance variables name, phoneNumber with standard getter and setter methods.
 model
                ^ contact

        ok
                self answer: contact

        cancel
                self answer

        rows
                ^ #(name phoneNumber)

        buttons
                #(ok cancel)
         labelForSelector: aSymbol
                aSymbol == #name ifTrue: [^'Your Name'].
                aSymbol == #phoneNumber ifTrue: [^'Phone Number'].
                aSymbol == #ok ifTrue: [^'Ok'].
                aSymbol == #cancel ifTrue: [^'Cancel'].
                ^ super labelForSelector: aSymbol","The default form has one button ""Ok"". Override the ""buttons"" method to change the text or number of submit buttons on the form. Override the ""defaultButton"" method to indicate which button is the default. For each button in the form the subclass needs a method with the same name as the button, which is called when the user clicks that button. See example below.","Contact Class used above has instance variables name, phoneNumber with standard getter and setter methods
   contact := Contact new. ""contact is an inst var""",,"Subclasses need to implment the methods labelForSelector:, model, and rows. The ""model"" method just returns the object whose fields we wish to populate with date. The ""rows"" method returns a collections of symbols. One symbol for each row of data in the dialog. The symbol is used generate the accessor methods for the data in the model. The method ""labelForSelector:"" returns the labels for each row and each submit button in the form.",,"LabelledFormDialogExample subclass of WALabelledFormDialog instance methods
        initialize
                super initialize.
                contact := Contact new. ""contact is an inst var""
                self addMessage: 'Please enter the followning information'.

        model
                ^ contact

        ok
                self answer: contact

        cancel
                self answer

        rows
                ^ #(name phoneNumber)

        buttons
                #(ok cancel)

        labelForSelector: aSymbol
                aSymbol == #name ifTrue: [^'Your Name'].
                aSymbol == #phoneNumber ifTrue: [^'Phone Number'].
                aSymbol == #ok ifTrue: [^'Ok'].
                aSymbol == #cancel ifTrue: [^'Cancel'].
                ^ super labelForSelector: aSymbol

        renderNameOn: html 
                ""Show how to specily special input instead of using simple text field.""
                (html select)
                                list: #('Roger' 'Pete');
                                selected: 'Roger';
                                callback: [:v | contact name: v]",,,,,,,,,,,,
7,WAListAttribute,"WAListAttribute is an attribute that is restricted to a list of values. 

Instance Variables:
        options        <Block>        A block returning a list of possible values for the attribute",WAListAttribute is an attribute that is restricted to a list of values.,,,,,"Instance Variables:
        options        <Block>        A block returning a list of possible values for the attribute",,,,,,,,,,,,,,,,
7,WAMemoryInput,"A WAMemoryInput is a dialog that allows the user to enter an amount of memory.

This is a Seaside internal class. Do not rely on it being present. If you need it, copy and paste it.","""A WAMemoryInput is a dialog that allows the user to enter an amount of memory. This is a Seaside internal class.","""A WAMemoryInput is a dialog that allows the user to enter an amount of memory.",,,,,,,,,,,"Do not rely on it being present. If you need it, copy and paste it.""",,,,"This is a Seaside internal class. Do not rely on it being present. If you need it, copy and paste it.",,,,,
7,WAMemoryToolPlugin,I display the memory usage tool.,,I display the memory usage tool.,,,,,,,,,,,,,,,,,,,,
7,WAObjectTag,"Defines an embedded object. Use this element to add multimedia to your XHTML page.
This element allows you to specify the data and parameters for objects inserted into HTML documents, and the code that can be used to display/manipulate that data.",Defines an embedded object,"Use this element to add multimedia to your XHTML page.This element allows you to specify the data and parameters for objects inserted into HTML documents, and the code that can be used to display/manipulate that data.",,,,,,,,,,,,,,,Use this element to add multimedia to your XHTML page.,,,,,
7,WAOptionGroupTag,"The OPTGROUP element allows authors to group choices logically. This is particularly helpful when the user must choose from a long list of options; groups of related choices are easier to grasp and remember than a single long list of options.

It has crappy browser support and noone as ever used it. See WAInputTest >> #renderOptionGroupOn: for examples.",,The OPTGROUP element allows authors to group choices logically. This is particularly helpful when the user must choose from a long list of options; groups of related choices are easier to grasp and remember than a single long list of options.,,,,,See WAInputTest >> #renderOptionGroupOn: for examples.,,WAInputTest >> #renderOptionGroupOn: for examples.,WAInputTest >> #renderOptionGroupOn: for examples.,,,It has crappy browser support and noone as ever used it.,It has crappy browser support and noone as ever used it.,,,,This is particularly helpful when the user must choose from a long list of options; groups of related choices are easier to grasp and remember than a single long list of options.,,,,
7,WAPainterVisitor,An implementation of the Visitor pattern for Painter subclasses.,An implementation of the Visitor pattern for Painter subclasses.,An implementation of the Visitor pattern for Painter subclasses.,An implementation of the Visitor pattern for Painter subclasses.,,,,,An implementation of the Visitor pattern for Painter subclasses.,,,,,,,,,,,,,,
7,WAPath,"WAPath represents a path navigation (breadcrumbs) for a web page and displays standard breadcrumbs(xxx >> yyy >> zzz). WAPath maintains a stack of associations, one for each ""location"" or ""page"" in the path. The association key is the text that is displayed in the breadcrimb. The association value is an object of your choosing, which your code uses to restore that ""page"". 

To add to the path use the method WAPath>>pushSegment: anObject name: 'lulu'. The name: arguement is the association key, the segment: argument is the association value.

The method WAPath>>currentSegment returns object associated with the current ""page"". Your code is not notified when the user clicks on a link in the WAPath object. So when you render a page call WAPath>>currentSegment to get the current object, and generate the page accordingly.

See WAInspector for example use.

Use WATrail to handle breadcrumbs for sequences of call: and answers:.

Instance Variables:
        stack        <Array of associations(String->Object) > History of the page. Keys -> display string, values -> object used in helping generating page.",WAPath represents a path navigation (breadcrumbs) for a web page,"and displays standard breadcrumbs(xxx >> yyy >> zzz). WAPath maintains a stack of associations,","one for each ""location"" or ""page"" in the path. The association key is the text that is displayed in the breadcrimb. The association value is an object of your choosing, which your code uses to restore that ""page"".","To add to the path use the method WAPath>>pushSegment: anObject name: 'lulu'. The name: arguement is the association key, the segment: argument is the association value.

The method WAPath>>currentSegment returns object associated with the current ""page"". Your code is not notified when the user clicks on a link in the WAPath object. So when you render a page call WAPath>>currentSegment to get the current object, and generate the page accordingly.",,"Instance Variables:
        stack        <Array of associations(String->Object) > History of the page. Keys -> display string, values -> object used in helping generating page.","See WAInspector for example use.
Use WATrail to handle breadcrumbs for sequences of call: and answers:.",,"WAInspector
WATrail",,,,,,,,,,,,,
7,WAPharoEncoder,I am  the common superclass for Pharo encoders.,I am  the common superclass for Pharo encoders.,I am  the common superclass for Pharo encoders.,,,,,,,,,,,,,,,,,,,,
7,WAPharoUrlEncoder,I am a Pharo specific URL encoder.,I am a Pharo specific URL encoder.,,,,,,,,,,,URL,,,,,,,,,,
7,WAPharoXmlEncoder,I am a Pharo specific XML encoder.,I am a Pharo specific XML encoder.,,,,,,,,,,,XML,,,,,,,,,,
7,WAPlugin,"I am an abstract root class for all plugins. Plugins are an easy way to add or remove additional tools without changing the codebase. To add a new plugin make sure you choose the right superclass so that the tool can detect your code.

The appearance of all plugins, such as icons, has to be configured using CSS.",I am an abstract root class for all plugins,"Plugins are an easy way to add or remove additional tools without changing the codebase. To add a new plugin make sure you choose the right superclass so that the tool can detect your code.

The appearance of all plugins, such as icons, has to be configured using CSS.",,,,,,,,,,,,,,,,,"The appearance of all plugins, such as icons, has to be configured using CSS.",,,
7,WAProtectionFilter,"The protection filter ensures that the wrapped request handler only accepts requests from the same IP. Do add this filter to a WASession for example to avoid session hijacking, do not add it to static request handlers such as WAApplication or WADispatcher as this might restrict access to the handler if your IP changes.

Note that checking for IP addresses is not bullet proof and should never be used as the sole security measure for a web application as IP addresses can be easily spoofed.",,"""The protection filter ensures that the wrapped request handler only accepts requests from the same IP. Do add this filter to a WASession for example to avoid session hijacking, do not add it to static request handlers such as WAApplication or WADispatcher as this might restrict access to the handler if your IP changes.",,,,,,,,,,,"Note that checking for IP addresses is not bullet proof and should never be used as the sole security measure for a web application as IP addresses can be easily spoofed.""",,,,"Do add this filter to a WASession for example to avoid session hijacking, do not add it to static request handlers such as WAApplication or WADispatcher as this might restrict access to the handler if your IP changes.",,,,,
7,WARedirectingRegistry,I revert to the old < 3.3.0 behavior which is easier for tests.,,I revert to the old < 3.3.0 behavior which is easier for tests.,,,,,,,,,,,,,,,,,,,,
7,WARequestContext,"WARequestContext encapsulates all the knowledge that should be available while processing a single request. It does not matter if this is a request to a static file, an AJAX request, a long Comet request or a normal Seaside requestion.

The request context is valid only during the request that caused it. It should not be stored. Neither within instance variables, nor within the execution stack so that it might be captured by a continuation. In both cases this might lead to memory leaks.",,"WARequestContext encapsulates all the knowledge that should be available while processing a single request. It does not matter if this is a request to a static file, an AJAX request, a long Comet request or a normal Seaside requestion.",,,The request context is valid only during the request that caused it.,,,,,,,,"It should not be stored. Neither within instance variables, nor within the execution stack so that it might be captured by a continuation. In both cases this might lead to memory leaks.",,,,"It should not be stored. Neither within instance variables, nor within the execution stack so that it might be captured by a continuation. In both cases this might lead to memory leaks.",,,,,
7,WARequestContextNotFound,This exception is raised when trying to obtain the current request context when none is available.,,,,,,,,,,,,,,,,,,,This exception is raised when trying to obtain the current request context when none is available.,,,
7,WARubyFunctionalTest,"Examples taken directly from spec:
http://www.w3.org/TR/2001/REC-ruby-20010531/",,,,,,,,,,,,"Examples taken directly from spec:
http://www.w3.org/TR/2001/REC-ruby-20010531/",,,"Examples taken directly from spec:
http://www.w3.org/TR/2001/REC-ruby-20010531/",,,,,,,
7,WASelection,"WASelection creates a selectable list. Items can be any object. If optional labelBlock is not given the string versions of the items are displayed to user, otherwise labelBlock is used to generate the text to display for each item. Returns the item selected by user, (not the index nor the text shown the user). 

        | selection |
        selection := WASelection new.
        selection items: #(1 'cat' 'rat').
        selection 
                labelBlock: [:item | item = 1 ifTrue: ['First'] ifFalse: [item asUppercase]].
        result := self call: selection.
        self inform: result printString

Instance Variables:
        items        <Array of Objects>         
        labelBlock        <One arg Block>",,WASelection creates a selectable list.,,,"Items can be any object. If optional labelBlock is not given the string versions of the items are displayed to user, otherwise labelBlock is used to generate the text to display for each item. Returns the item selected by user, (not the index nor the text shown the user).","Instance Variables:
        items        <Array of Objects>         
        labelBlock        <One arg Block>",,,,"| selection |
        selection := WASelection new.
        selection items: #(1 'cat' 'rat').
        selection 
                labelBlock: [:item | item = 1 ifTrue: ['First'] ifFalse: [item asUppercase]].
        result := self call: selection.
        self inform: result printString",,,,,,,,,,,,
7,WAServerAdaptor,"A WAServer is the abstract base class for all servers. Actual servers do not have to subclass it but have to support the protocol:
 - #codec
 - #usesSmalltalkEncoding

Instance Variables
        codec:                <WACodec>

codec
        - the codec used for response conversion from characters to bytes",A WAServer is the abstract base class for all servers.,,,"- #codec
 - #usesSmalltalkEncoding

codec
        - the codec used for response conversion from characters to bytes",,"Instance Variables
        codec:                <WACodec>",,,,,,,,,,Actual servers do not have to subclass it but have to support the protocol:,,,,,,
7,WATagBrush,"This is the superclass for all XML element classes. Its main additions are
- element name (#tag)
- attributes (instance of WAHtmlAttributes)
- common events (onXXX), this is a hack and would better be solved with traits","""This is the superclass for all XML element classes.",,,,"Its main additions are
- element name (#tag)
- attributes (instance of WAHtmlAttributes)
- common events (onXXX), this is a hack and would better be solved with traits""",,,,,,,,,this is a hack and would better be solved with traits,,,,,,,,
7,WAUpTimeTracker,"WAUpTimeTracker is used to track the TimeStamp when the image last booted.

Access the TimeStamp when the image booted as follows:

	WAUpTimeTracker imageBootTime.

Access the Duration how long ago the image booted as follows:

	WAUpTimeTracker imageUpTime.

At system startup the imageBootTime is (re)set automatically.

This is a work around for Time millisecondClockValue wrapping around.",,"""WAUpTimeTracker is used to track the TimeStamp when the image last booted.

Access the TimeStamp when the image booted as follows:

	WAUpTimeTracker imageBootTime.

Access the Duration how long ago the image booted as follows:

	WAUpTimeTracker imageUpTime.

At system startup the imageBootTime is (re)set automatically.","Access the TimeStamp when the image booted as follows:

	WAUpTimeTracker imageBootTime.

Access the Duration how long ago the image booted as follows:

	WAUpTimeTracker imageUpTime.

At system startup the imageBootTime is (re)set automatically.","Access the TimeStamp when the image booted as follows:

	WAUpTimeTracker imageBootTime.

Access the Duration how long ago the image booted as follows:

	WAUpTimeTracker imageUpTime.

At system startup the imageBootTime is (re)set automatically.",,,,,,,,,"This is a work around for Time millisecondClockValue wrapping around.""",,,,,,,,,
7,WAUrlAttribute,WAUrlAttribute represents a URL attribute. It converts between text entered on the configuration page and WAUrl instances.,WAUrlAttribute represents a URL attribute.,It converts between text entered on the configuration page and WAUrl instances.,,,,,,,,,,,,,,,,,,,,
7,WAVideoTag,"Supported only on experimental Opera
http://people.opera.com/howcome/2007/video/

A video element represents a video or movie, with an alternate representation given by its contents.

http://www.whatwg.org/specs/web-apps/current-work/#video
http://lists.whatwg.org/pipermail/whatwg-whatwg.org/attachments/20070228/6a0cdddc/attachment.txt",,,,,,,"""Supported only on experimental Opera
http://people.opera.com/howcome/2007/video/

A video element represents a video or movie, with an alternate representation given by its contents.

http://www.whatwg.org/specs/web-apps/current-work/#video
http://lists.whatwg.org/pipermail/whatwg-whatwg.org/attachments/20070228/6a0cdddc/attachment.txt""",,,,,,,,,,,,,,,
