stratum,class,comment,summary,Expand,rational,deprecation,usage,exception,todo,Incomplete,Commentedcode,directive,formatter,License,Ownership,Pointer,Autogenerated,Noise,Warning,Recommendation,Precondition,CodingGuidelines,Extension,Subclassexplnation,Observation
1,Abfss.java,"* Azure Blob File System implementation of AbstractFileSystem.
* This impl delegates to the old FileSystem",Azure Blob File System implementation of AbstractFileSystem.,This impl delegates to the old FileSystem,,,,,,,,,,,,,,,,,,,,,
1,AbstractContractGetFileStatusTest.java,"* Test getFileStatus and related listing operations.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* Accept everything.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* Accept nothing.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* Path filter which only expects paths whose final name element
* equals the {@code match} field.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* A filesystem filter which exposes the protected method
* {@link #listLocatedStatus(Path, PathFilter)}.",Test getFileStatus and related listing operations.,"| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* Accept everything.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* Accept nothing.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* Path filter which only expects paths whose final name element
* equals the {@code match} field.
| the tree parameters. Kept small to avoid killing object store test| runs too much.|
* A filesystem filter which exposes the protected method
* {@link #listLocatedStatus(Path, PathFilter)}.",,,,,,,,,,,,,,,,,,,,,
1,AbstractFSContract.java,"* Class representing a filesystem contract that a filesystem
* implementation is expected implement.
*
* Part of this contract class is to allow FS implementations to
* provide specific opt outs and limits, so that tests can be
* skip unsupported features (e.g. case sensitivity tests),
* dangerous operations (e.g. trying to delete the root directory),
* and limit filesize and other numeric variables for scale tests",Class representing a filesystem contract that a filesystem * implementation is expected implement.,,"Part of this contract class is to allow FS implementations to * provide specific opt outs and limits, so that tests can be * skip unsupported features (e.g. case sensitivity tests), * dangerous operations (e.g. trying to delete the root directory), * and limit filesize and other numeric variables for scale tests",,,,,,,,,,,,,,,,,,,,
1,AbstractS3ACommitterFactory.java,* Dynamically create the output committer based on subclass type and settings.,,Dynamically create the output committer based on subclass type and settings.,,,,,,,,,,,,,,,,,,,,,
1,AbstractTFLaunchCommandTestHelper.java,"* This class is an abstract base class for testing Tensorboard and TensorFlow
* launch commands.",This class is an abstract base class for testing Tensorboard and TensorFlow and launch commands.,,This class is an abstract base class for testing Tensorboard and TensorFlow and launch commands.,,,,,,,,,,,,,,,,,,,,
1,ApplicationConstants.java,"* This is the API for the applications comprising of constants that YARN sets
* up for the applications and the containers.
*
* TODO: Investigate the semantics and security of each cross-boundary refs.
|
* The type of launch for the container.
|
* Environment for Applications.
*
* Some of the environment variables for applications are <em>final</em>
* i.e. they cannot be modified by the applications.",* This is the API for the applications comprising of constants that YARN sets * up for the applications and the containers.,The type of launch for the container. | * Environment for Applications. * * Some of the environment variables for applications are <em>final</em> * i.e. they cannot be modified by the applications.,,,,,TODO: Investigate the semantics and security of each cross-boundary refs.,,,,,,,,,,"* Some of the environment variables for applications are <em>final</em>
* i.e. they cannot be modified by the applications.",,,,,,
1,ApplicationStateData.java,* Contains all the state data that needs to be stored persistently * for an Application,Contains all the state data that needs to be stored persistently * for an Application,,needs to be stored persistently * for an Application,,,,,,,,,,,,,,,,,,,,
1,AutoInputFormat.java,"* An {@link InputFormat} that tries to deduce the types of the input files
* automatically. It can currently handle text and sequence files.",An {@link InputFormat} that tries to deduce the types of the input files * automatically.,It can currently handle text and sequence files.,,,,,,,,,,,,An {@link InputFormat} that tries to deduce the types of the input files * automatically.,,,,,,,,,
1,BalancingPolicy.java,"* Balancing policy.
* Since a datanode may contain multiple block pools,
* {@link Pool} implies {@link Node}
* but NOT the other way around
|
* Cluster is balanced if each node is balanced.
|
* Cluster is balanced if each pool in each node is balanced.",* Balancing policy.,"Since a datanode may contain multiple block pools, * {@link Pool} implies {@link Node} * but NOT the other way around |",Cluster is balanced if each node is balanced. | * Cluster is balanced if each pool in each node is balanced.,,,,,,,,,,,"Since a datanode may contain multiple block pools, * {@link Pool} implies {@link Node} * but NOT the other way around |",,,,,,,,,
1,BaseRouterWebServicesTest.java,"* Base class for all the RouterRMAdminService test cases. It provides utility
* methods that can be used by the concrete test case classes.
*",* Base class for all the RouterRMAdminService test cases.,,,,It provides utility * methods that can be used by the concrete test case classes.,,,,,,,,,,,,,,,,,,
1,BatchedRequests.java,"* A grouping of Scheduling Requests which are sent to the PlacementAlgorithm
* to place as a batch. The placement algorithm tends to give more optimal
* placements if more requests are batched together.
| PlacementAlgorithmOutput attempt - the number of times the requests in this|
* Iterator Type.","A grouping of Scheduling Requests which are sent to the PlacementAlgorithm
* to place as a batch
Iterator Type.","The placement algorithm tends to give more optimal
* placements if more requests are batched together.",,,| PlacementAlgorithmOutput attempt - the number of times the requests in this|,,,,,,,,,,,,,,,,,,
1,BlockPlacementStatusWithNodeGroup.java,"* An implementation of @see BlockPlacementStatus for
* @see BlockPlacementPolicyWithNodeGroup",An implementation of @see BlockPlacementStatus,,for * @see BlockPlacementPolicyWithNodeGroup,,,,,,,,,,,for * @see BlockPlacementPolicyWithNodeGroup,,,,,,,,,
1,BlocksMap.java,"* This class maintains the map from a block to its metadata.
* block's metadata currently includes blockCollection it belongs to and
* the datanodes that store the block.",This class maintains the map from a block to its metadata.,"block's metadata currently includes blockCollection it belongs to and
* the datanodes that store the block.",,,,,,,,,,,,,,,,,,,,,
1,BlockUtils.java,* Utils functions to help block functions.,Utils functions to help block functions,,Utils functions to help block functions,,,,,,,,,,,,,,,,,,,,
1,ByteArrayEncodingState.java,"* A utility class that maintains encoding state during an encode call using
* byte array inputs.",A utility class that maintains encoding state during an encode call using * byte array inputs.,A utility class that maintains encoding state during an encode call using * byte array inputs.,,,,,,,,,,,,,,,,,,,,,
1,CapacitySchedulerPlanFollower.java,"* This class implements a {@link PlanFollower}. This is invoked on a timer, and
* it is in charge to publish the state of the {@link Plan}s to the underlying
* {@link CapacityScheduler}. This implementation does so, by
* adding/removing/resizing leaf queues in the scheduler, thus affecting the
* dynamic behavior of the scheduler in a way that is consistent with the
* content of the plan. It also updates the plan's view on how much resources
* are available in the cluster.
* * This implementation of PlanFollower is relatively stateless, and it can
* synchronize schedulers and Plans that have arbitrary changes (performing set
* differences among existing queues). This makes it resilient to frequency of
* synchronization, and RM restart issues (no ""catch up"" is necessary).","This class implements a {@link PlanFollower}. This is invoked on a timer, and
* it is in charge to publish the state of the {@link Plan}s to the underlying
* {@link CapacityScheduler}.","This implementation does so, by
* adding/removing/resizing leaf queues in the scheduler, thus affecting the
* dynamic behavior of the scheduler in a way that is consistent with the
* content of the plan. It also updates the plan's view on how much resources
* are available in the cluster.","This implementation of PlanFollower is relatively stateless, and it can
* synchronize schedulers and Plans that have arbitrary changes (performing set
* differences among existing queues). This makes it resilient to frequency of
* synchronization, and RM restart issues (no ""catch up"" is necessary).",,,,,,,,,,,,,,,,,,,,
1,Classpath.java,"* Command-line utility for getting the full classpath needed to launch a Hadoop
* client application. If the hadoop script is called with ""classpath"" as the
* command, then it simply prints the classpath and exits immediately without
* launching a JVM. The output likely will include wildcards in the classpath.
* If there are arguments passed to the classpath command, then this class gets
* called. With the --glob argument, it prints the full classpath with wildcards
* expanded. This is useful in situations where wildcard syntax isn't usable.
* With the --jar argument, it writes the classpath as a manifest in a jar file.
* This is useful in environments with short limitations on the maximum command
* line length, where it may not be possible to specify the full classpath in a
* command. For example, the maximum command line length on Windows is 8191
* characters.",Command-line utility for getting the full classpath needed to launch a Hadoop * client application.,"If the hadoop script is called with ""classpath"" as the * command, then it simply prints the classpath and exits immediately without * launching a JVM. The output likely will include wildcards in the classpath. * If there are arguments passed to the classpath command, then this class gets * called. With the --glob argument, it prints the full classpath with wildcards * expanded. This is useful in situations where wildcard syntax isn't usable. * With the --jar argument, it writes the classpath as a manifest in a jar file. * This is useful in environments with short limitations on the maximum command * line length, where it may not be possible to specify the full classpath in a * command. For example, the maximum command line length on Windows is 8191 * characters.",,,,,,,,,,,,,,,,,,,,,
1,ComparableVersion.java,"Code source of this file:| http://grepcode.com/file/repo1.maven.org/maven2/| org.apache.maven/maven-artifact/3.1.1/| org/apache/maven/artifact/versioning/ComparableVersion.java/|| Modifications made on top of the source:| 1. Changed| package org.apache.maven.artifact.versioning;| to| package org.apache.hadoop.util;| 2. Removed author tags to clear hadoop author tag warning|
* Generic implementation of version comparison.
* * <p>Features:
* <ul>
* <li>mixing of '<code>-</code>' (dash) and '<code>.</code>' (dot) separators,</li>
* <li>transition between characters and digits also constitutes a separator:
* <code>1.0alpha1 =&gt; [1, 0, alpha, 1]</code></li>
* <li>unlimited number of version components,</li>
* <li>version components in the text can be digits or strings,</li>
* <li>strings are checked for well-known qualifiers and the qualifier ordering is used for version ordering.
* Well-known qualifiers (case insensitive) are:<ul>
* <li><code>alpha</code> or <code>a</code></li>
* <li><code>beta</code> or <code>b</code></li>
* <li><code>milestone</code> or <code>m</code></li>
* <li><code>rc</code> or <code>cr</code></li>
* <li><code>snapshot</code></li>
* <li><code>(the empty string)</code> or <code>ga</code> or <code>final</code></li>
* <li><code>sp</code></li>
* </ul>
* Unknown qualifiers are considered after known qualifiers, with lexical order (always case insensitive),
* </li>
* <li>a dash usually precedes a qualifier, and is always less important than something preceded with a dot.</li>
* </ul><p>
*
* @see <a href=""https://cwiki.apache.org/confluence/display/MAVENOLD/Versioning"">""Versioning"" on Maven Wiki</a>
|
* Represents a numeric item in the version item list.
|
* Represents a string in the version item list, usually a qualifier.
|
* Represents a version list item. This class is used both for the global item list and for sub-lists (which start
* with '-(number)' in the version specification).","Generic implementation of version comparison. Represents a numeric item in the version item list.
|
* Represents a string in the version item list, usually a qualifier.
|
* Represents a version list item. This class is used both for the global item list and for sub-lists (which start
* with '-(number)' in the version specification).",,,,"* Generic implementation of version comparison.
* * <p>Features:
* <ul>
* <li>mixing of '<code>-</code>' (dash) and '<code>.</code>' (dot) separators,</li>
* <li>transition between characters and digits also constitutes a separator:
* <code>1.0alpha1 =&gt; [1, 0, alpha, 1]</code></li>
* <li>unlimited number of version components,</li>
* <li>version components in the text can be digits or strings,</li>
* <li>strings are checked for well-known qualifiers and the qualifier ordering is used for version ordering.
* Well-known qualifiers (case insensitive) are:<ul>
* <li><code>alpha</code> or <code>a</code></li>
* <li><code>beta</code> or <code>b</code></li>
* <li><code>milestone</code> or <code>m</code></li>
* <li><code>rc</code> or <code>cr</code></li>
* <li><code>snapshot</code></li>
* <li><code>(the empty string)</code> or <code>ga</code> or <code>final</code></li>
* <li><code>sp</code></li>
* </ul>
* Unknown qualifiers are considered after known qualifiers, with lexical order (always case insensitive),
* </li>
* <li>a dash usually precedes a qualifier, and is always less important than something preceded with a dot.</li>
* </ul><p>",,,,,,,,,"Code source of this file:| http://grepcode.com/file/repo1.maven.org/maven2/| org.apache.maven/maven-artifact/3.1.1/| org/apache/maven/artifact/versioning/ComparableVersion.java/|| Modifications made on top of the source:| 1. Changed| package org.apache.maven.artifact.versioning;| to| package org.apache.hadoop.util;| 2. Removed author tags to clear hadoop author tag warning|. * @see <a href=""https://cwiki.apache.org/confluence/display/MAVENOLD/Versioning"">""Versioning"" on Maven Wiki</a>",,,,,,,,,
1,ConfigurationException.java,* Exception to throw in case of a configuration problem.,Exception to throw in case of a configuration problem.,,,,,,,,,,,,,,,,,,,,,,
1,ContainerFinishData.java,"* The class contains the fields that can be determined when
* <code>RMContainer</code> finishes, and that need to be stored persistently.","The class contains the fields that can be determined when * <code>RMContainer</code> finishes, and that need to be stored persistently.",,"The class contains the fields that can be determined when * <code>RMContainer</code> finishes, and that need to be stored persistently.",,,,,,,,,,,,,,,,,,,,
1,CpuTimeTracker.java,* Utility for sampling and computing CPU usage.,Utility for sampling and computing CPU usage,,Utility for sampling and computing CPU usage,,,,,,,,,,,,,,,,,,,,
1,DBProfile.java,"* User visible configs based RocksDB tuning page. Documentation for Options.
* <p>
* https://github.com/facebook/rocksdb/blob/master/include/rocksdb/options.h
* <p>
* Most tuning parameters are based on this URL.
* <p>
* https://github.com/facebook/rocksdb/wiki/Setup-Options-and-Basic-Tuning",* User visible configs based RocksDB tuning page.,,,,"Documentation for Options.
* <p>
* https://github.com/facebook/rocksdb/blob/master/include/rocksdb/options.h
* <p>
* Most tuning parameters are based on this URL.
* <p>
* https://github.com/facebook/rocksdb/wiki/Setup-Options-and-Basic-Tuning",,,,,,,,,"Documentation for Options.
* <p>
* https://github.com/facebook/rocksdb/blob/master/include/rocksdb/options.h
* <p>
* Most tuning parameters are based on this URL.
* <p>
* https://github.com/facebook/rocksdb/wiki/Setup-Options-and-Basic-Tuning",,,,,,,,,
1,DefaultAnonymizingRumenSerializer.java,* Default Rumen JSON serializer.,Default Rumen JSON serializer.,,,,,,,,,,,,,,,,,,,,,,
1,DelegatingSSLSocketFactory.java,"* A {@link SSLSocketFactory} that can delegate to various SSL implementations.
* Specifically, either OpenSSL or JSSE can be used. OpenSSL offers better
* performance than JSSE and is made available via the
* <a href=""https://github.com/wildfly/wildfly-openssl"">wildlfy-openssl</a>
* library.
*
* <p>
* The factory has several different modes of operation:
* <ul>
* <li>OpenSSL: Uses the wildly-openssl library to delegate to the
* system installed OpenSSL. If the wildfly-openssl integration is not
* properly setup, an exception is thrown.</li>
* <li>Default: Attempts to use the OpenSSL mode, if it cannot load the
* necessary libraries, it falls back to the Default_JSEE mode.</li>
* <li>Default_JSSE: Delegates to the JSSE implementation of SSL, but
* it disables the GCM cipher when running on Java 8.</li>
* <li>Default_JSSE_with_GCM: Delegates to the JSSE implementation of
* SSL with no modification to the list of enabled ciphers.</li>
* </ul>
* </p>
| This should only be modified within the #initializeDefaultFactory|
* Default indicates Ordered, preferred OpenSSL, if failed to load then fall
* back to Default_JSSE.
*
* <p>
* Default_JSSE is not truly the the default JSSE implementation because
* the GCM cipher is disabled when running on Java 8. However, the name
* was not changed in order to preserve backwards compatibility. Instead,
* a new mode called Default_JSSE_with_GCM delegates to the default JSSE
* implementation with no changes to the list of enabled ciphers.
* </p>",* A {@link SSLSocketFactory} that can delegate to various SSL implementations.,"Specifically, either OpenSSL or JSSE can be used. OpenSSL offers better
* performance than JSSE and is made available via the
* <a href=""https://github.com/wildfly/wildfly-openssl"">wildlfy-openssl</a>
* library.","<p>
* Default_JSSE is not truly the the default JSSE implementation because
* the GCM cipher is disabled when running on Java 8. However, the name
* was not changed in order to preserve backwards compatibility. Instead,
* a new mode called Default_JSSE_with_GCM delegates to the default JSSE
* implementation with no changes to the list of enabled ciphers.
* </p>",,"* <p>
* The factory has several different modes of operation:
* <ul>
* <li>OpenSSL: Uses the wildly-openssl library to delegate to the
* system installed OpenSSL. If the wildfly-openssl integration is not
* properly setup, an exception is thrown.</li>
* <li>Default: Attempts to use the OpenSSL mode, if it cannot load the
* necessary libraries, it falls back to the Default_JSEE mode.</li>
* <li>Default_JSSE: Delegates to the JSSE implementation of SSL, but
* it disables the GCM cipher when running on Java 8.</li>
* <li>Default_JSSE_with_GCM: Delegates to the JSSE implementation of
* SSL with no modification to the list of enabled ciphers.</li>
* </ul>
* </p>
| This should only be modified within the #initializeDefaultFactory|
* Default indicates Ordered, preferred OpenSSL, if failed to load then fall
* back to Default_JSSE.",,,,,,,,,"* A {@link SSLSocketFactory} that can delegate to various SSL implementations.
OpenSSL offers better
* performance than JSSE and is made available via the
* <a href=""https://github.com/wildfly/wildfly-openssl"">wildlfy-openssl</a>
* library.",,,| This should only be modified within the #initializeDefaultFactory|,,,,,,
1,DelegationTokenIdentifier.java,* A delegation token identifier that is specific to HDFS.,A delegation token identifier that is specific to HDFS.,A delegation token identifier that is specific to HDFS.,,,,,,,,,,,,,,,,,,,,,
1,DeleteApplicationHomeSubClusterRequest.java,"* The request to <code>Federation state store</code> to delete the mapping of
* home subcluster of a submitted application.",The request to <code>Federation state store</code> to delete the mapping of * home subcluster of a submitted application.,,,,,,,,,,,,,,,,,,,,,,
1,DFSConfigKeys.java,"* This class contains constants for configuration keys and default values
* used in hdfs.",This class contains constants for configuration keys and default values used in hdfs.,,This class contains constants for configuration keys and default values used in hdfs.,,,,,,,,,,,,,,,,,,,,
1,DfsServlet.java,* A base class for the servlets in DFS.,A base class for the servlets in DFS,,,,,,,,,,,,,,,,,,,,,,
1,DiskBalancerCluster.java,"* DiskBalancerCluster represents the nodes that we are working against.
* <p>
* Please Note :
* Semantics of inclusionList and exclusionLists.
* <p>
* If a non-empty inclusionList is specified then the diskBalancer assumes that
* the user is only interested in processing that list of nodes. This node list
* is checked against the exclusionList and only the nodes in inclusionList but
* not in exclusionList is processed.
* <p>
* if inclusionList is empty, then we assume that all live nodes in the nodes is
* to be processed by diskBalancer. In that case diskBalancer will avoid any
* nodes specified in the exclusionList but will process all nodes in the
* cluster.
* <p>
* In other words, an empty inclusionList is means all the nodes otherwise
* only a given list is processed and ExclusionList is always honored.",DiskBalancerCluster represents the nodes that we are working against.,"Please Note :
* Semantics of inclusionList and exclusionLists.
* <p>
* If a non-empty inclusionList is specified then the diskBalancer assumes that
* the user is only interested in processing that list of nodes. This node list
* is checked against the exclusionList and only the nodes in inclusionList but
* not in exclusionList is processed.
* <p>
* if inclusionList is empty, then we assume that all live nodes in the nodes is
* to be processed by diskBalancer. In that case diskBalancer will avoid any
* nodes specified in the exclusionList but will process all nodes in the
* cluster.
* <p>
* In other words, an empty inclusionList is means all the nodes otherwise
* only a given list is processed and ExclusionList is always honored.",,,,,,,,,,,,,,,,,,,,,
1,DistributedSchedulingAllocateRequest.java,"* Object used by the Application Master when distributed scheduling is enabled,
* in order to forward the {@link AllocateRequest} for GUARANTEED containers to
* the Resource Manager, and to notify the Resource Manager about the allocation
* of OPPORTUNISTIC containers through the Distributed Scheduler.","* Object used by the Application Master when distributed scheduling is enabled,","in order to forward the {@link AllocateRequest} for GUARANTEED containers to * the Resource Manager, and to notify the Resource Manager about the allocation * of OPPORTUNISTIC containers through the Distributed Scheduler.",,,,,,,,,,,,"in order to forward the {@link AllocateRequest} for GUARANTEED containers to * the Resource Manager, and to notify the Resource Manager about the allocation * of OPPORTUNISTIC containers through the Distributed Scheduler.",,,,,,,,,
1,DockerKillCommand.java,* Encapsulates the docker kill command and its command line arguments.,Encapsulates the docker kill command and its command line arguments.,,,,,,,,,,,,,,,,,,,,,,
1,EditLogTailer.java,"* EditLogTailer represents a thread which periodically reads from edits
* journals and applies the transactions contained within to a given
* FSNamesystem.
|
* The thread which does the actual work of tailing edits journals and
* applying the transactions to the FSNS.
|
* Manage the 'active namenode proxy'. This cannot just be the a single proxy since we could
* failover across a number of NameNodes, rather than just between an active and a standby.
* <p>
* We - lazily - get a proxy to one of the configured namenodes and attempt to make the request
* against it. If it doesn't succeed, either because the proxy failed to be created or the request
* failed, we try the next NN in the list. We try this up to the configuration maximum number of
* retries before throwing up our hands. A working proxy is retained across attempts since we
* expect the active NameNode to switch rarely.
* <p>
* This mechanism is <b>very bad</b> for cases where we care about being <i>fast</i>; it just
* blindly goes and tries namenodes.","EditLogTailer represents a thread which periodically reads from edits
* journals and applies the transactions contained within to a given
* FSNamesystem.","|
* The thread which does the actual work of tailing edits journals and
* applying the transactions to the FSNS.
|","* Manage the 'active namenode proxy'. This cannot just be the a single proxy since we could
* failover across a number of NameNodes, rather than just between an active and a standby.
* <p>
* We - lazily - get a proxy to one of the configured namenodes and attempt to make the request
* against it. If it doesn't succeed, either because the proxy failed to be created or the request
* failed, we try the next NN in the list. We try this up to the configuration maximum number of
* retries before throwing up our hands. A working proxy is retained across attempts since we
* expect the active NameNode to switch rarely.
* <p>
* This mechanism is <b>very bad</b> for cases where we care about being <i>fast</i>; it just
* blindly goes and tries namenodes.",,,,,,,,,,,,,,,,,,,,
1,ErasureCodingPolicyManager.java,"* This manages erasure coding policies predefined and activated in the system.
* It loads customized policies and syncs with persisted ones in
* NameNode image.
*
* This class is instantiated by the FSNamesystem.",This manages erasure coding policies predefined and activated in the system,"It loads customized policies and syncs with persisted ones in
* NameNode image.",,,This class is instantiated by the FSNamesystem.,,,,,,,,,* This class is instantiated by the FSNamesystem.,,,,,,,,,
1,EventWatcher.java,"* Event watcher the (re)send a message after timeout.
* <p>
* Event watcher will send the tracked payload/event after a timeout period
* unless a confirmation from the original event (completion event) is arrived.
*
* @param <TIMEOUT_PAYLOAD> The type of the events which are tracked.
* @param <COMPLETION_PAYLOAD> The type of event which could cancel the
* tracking.",* Event watcher the (re)send a message after timeout.,,"Event watcher will send the tracked payload/event after a timeout period
* unless a confirmation from the original event (completion event) is arrived.",,,,,,,,,,,"* @param <TIMEOUT_PAYLOAD> The type of the events which are tracked.
* @param <COMPLETION_PAYLOAD> The type of event which could cancel the
* tracking.",,,,,,,,,
1,Expression.java,"* Interface describing an expression to be used in the
* {@link org.apache.hadoop.fs.shell.find.Find} command.",Interface describing an expression to be used in the * {@link org.apache.hadoop.fs.shell.find.Find} command.,,to be used in the * {@link org.apache.hadoop.fs.shell.find.Find} command.,,,,,,,,,,,to be used in the * {@link org.apache.hadoop.fs.shell.find.Find} command.,,,,,,,,,
1,FairOrderingPolicy.java,"* An OrderingPolicy which orders SchedulableEntities for fairness (see
* FairScheduler
* FairSharePolicy), generally, processes with lesser usage are lesser. If
* sizedBasedWeight is set to true then an application with high demand
* may be prioritized ahead of an application with less usage. This
* is to offset the tendency to favor small apps, which could result in
* starvation for large apps if many small ones enter and leave the queue
* continuously (optional, default false)","* An OrderingPolicy which orders SchedulableEntities for fairness (see
* FairScheduler
* FairSharePolicy), generally, processes with lesser usage are lesser",,,,"If
* sizedBasedWeight is set to true then an application with high demand
* may be prioritized ahead of an application with less usage. This
* is to offset the tendency to favor small apps, which could result in
* starvation for large apps if many small ones enter and leave the queue
* continuously (optional, default false)",,,,,,,,,"* An OrderingPolicy which orders SchedulableEntities for fairness (see
* FairScheduler
* FairSharePolicy), generally, processes with lesser usage are lesser",,,,,,,,,
1,FederationPolicyException.java,* Generic policy exception.,Generic policy exception,,,,,,,,,,,,,,,,,,,,,,
1,FederationProtocolPBTranslator.java,"* Helper class for setting/getting data elements in an object backed by a
* protobuf implementation.",Helper class for setting/getting data elements in an object backed by a * protobuf implementation.,,for setting/getting data elements in an object backed by a * protobuf implementation.,,,* Thrown when an arguments are combined to construct a * <code>AMRMClient.ContainerRequest</code> in an invalid way.,,,,,,,,,,,,,,,,,
1,FederationStateStoreInvalidInputException.java,"* Exception thrown by the {@code FederationMembershipStateStoreInputValidator},
* {@code FederationApplicationHomeSubClusterStoreInputValidator},
* {@code FederationPolicyStoreInputValidator} if the input is invalid.
*","Exception thrown by the {@code FederationMembershipStateStoreInputValidator},",,,,,"* Exception thrown by the {@code FederationMembershipStateStoreInputValidator}, * {@code FederationApplicationHomeSubClusterStoreInputValidator}, * {@code FederationPolicyStoreInputValidator} if the input is invalid.",,,,,,,,"* Exception thrown by the {@code FederationMembershipStateStoreInputValidator}, * {@code FederationApplicationHomeSubClusterStoreInputValidator}, * {@code FederationPolicyStoreInputValidator} if the input is invalid.",,,,,,,,,
1,FileSystemApplicationHistoryStore.java,"* File system implementation of {@link ApplicationHistoryStore}. In this
* implementation, one application will have just one file in the file system,
* which contains all the history data of one application, and its attempts and
* containers. {@link #applicationStarted(ApplicationStartData)} is supposed to
* be invoked first when writing any history data of one application and it will
* open a file, while {@link #applicationFinished(ApplicationFinishData)} is
* supposed to be last writing operation and will close the file.",* File system implementation of {@link ApplicationHistoryStore}.,"In this * implementation, one application will have just one file in the file system, * which contains all the history data of one application, and its attempts and * containers. {@link #applicationStarted(ApplicationStartData)} is supposed to
* be invoked first when writing any history data of one application and it will
* open a file, while {@link #applicationFinished(ApplicationFinishData)} is
* supposed to be last writing operation and will close the file.",,,,,,,,,,,,"* File system implementation of {@link ApplicationHistoryStore}. {@link #applicationStarted(ApplicationStartData)} is supposed to
* be invoked first when writing any history data of one application and it will
* open a file, while {@link #applicationFinished(ApplicationFinishData)} is
* supposed to be last writing operation and will close the file.",,,,,,,,,
1,FsConstants.java,* FileSystem related constants.,FileSystem related constants,,,,,,,,,,,,,,,,,,,,,,
1,GetApplicationHomeSubClusterResponsePBImpl.java,"* Protocol buffer based implementation of
* {@link GetApplicationHomeSubClusterResponse}.",Protocol buffer based implementation of * {@link GetApplicationHomeSubClusterResponse}.,,,,,,,,,,,,,Protocol buffer based implementation of * {@link GetApplicationHomeSubClusterResponse}.,,,,,,,,,
1,GetNamespaceInfoResponse.java,* API response for listing HDFS namespaces present in the state store.,API response for listing HDFS namespaces present in the state store.,,,,,,,,,,,,,,,,,,,,,,
1,GetNodesToAttributesResponse.java,"* <p>
* The response sent by the <code>ResourceManager</code> to a client requesting
* nodes to attributes mapping.
* </p>
*
* @see ApplicationClientProtocol#getNodesToAttributes
* (GetNodesToAttributesRequest)",The response sent by the <code>ResourceManager</code> to a client requesting * nodes to attributes mapping.,,,,,,,,,,,,,@see ApplicationClientProtocol#getNodesToAttributes * (GetNodesToAttributesRequest),,,,,,,,,
1,GetSafeModeRequestPBImpl.java,"* Protobuf implementation of the state store API object
* GetSafeModeRequest.",Protobuf implementation of the state store API object * GetSafeModeRequest.,,,,,,,,,,,,,,,,,,,,,,
1,GetSubClusterPolicyConfigurationRequestPBImpl.java,"* Protocol buffer based implementation of
* {@link GetSubClusterPolicyConfigurationRequest}.",Protocol buffer based implementation of * {@link GetSubClusterPolicyConfigurationRequest}.,,,,,,,,,,,,,Protocol buffer based implementation of * {@link GetSubClusterPolicyConfigurationRequest}.,,,,,,,,,
1,HadoopIllegalArgumentException.java,"* Indicates that a method has been passed illegal or invalid argument. This
* exception is thrown instead of IllegalArgumentException to differentiate the
* exception thrown in Hadoop implementation from the one thrown in JDK.",Indicates that a method has been passed illegal or invalid argument.,This * exception is thrown instead of IllegalArgumentException to differentiate the * exception thrown in Hadoop implementation from the one thrown in JDK.,,,,This * exception is thrown instead of IllegalArgumentException to differentiate the * exception thrown in Hadoop implementation from the one thrown in JDK.,,,,,,,,,,,,,,,,,
1,HashResolver.java,* Order the destinations based on consistent hashing.,Order the destinations based on consistent hashing.,,,,,,,,,,,,,,,,,,,,,,
1,HttpHeaderConfigurations.java,* Responsible to keep all abfs http headers here.,,Responsible to keep all abfs http headers here.,,,,,,,,,,,,,,,,,,,,,
1,IDataLoader.java,* an IDataLoader loads data on demand,an IDataLoader loads data on demand,,,,,,,,,,,,,,,,,,,,,,
1,InconsistentS3ClientFactory.java,"* S3 Client factory used for testing with eventual consistency fault injection.
* This client is for testing <i>only</i>; it is in the production
* {@code hadoop-aws} module to enable integration tests to use this
* just by editing the Hadoop configuration used to bring up the client.",S3 Client factory used for testing with eventual consistency fault injection.,,,,"This client is for testing <i>only</i>; it is in the production
* {@code hadoop-aws} module to enable integration tests to use this
* just by editing the Hadoop configuration used to bring up the client.",,,,,,,,,,,,,,,,,,
1,InfoKeyHandler.java,* Executes Info Object.,Executes Info Object,,,,,,,,,,,,,,,,,,,,,,
1,InvalidContainerRequestException.java,"* Thrown when an arguments are combined to construct a
* <code>AMRMClient.ContainerRequest</code> in an invalid way.",* Thrown when an arguments are combined to construct a * <code>AMRMClient.ContainerRequest</code> in an invalid way.,,,,,,,,,,,,,,,,,,,,,,
1,ITestAbfsReadWriteAndSeek.java,"* Test read, write and seek.
* Uses package-private methods in AbfsConfiguration, which is why it is in
* this package.","Test read, write and seek.",,"Uses package-private methods in AbfsConfiguration, which is why it is in * this package.",,,,,,,,,,,,,,,,,,,,
1,ITestAzureNativeContractSeek.java,* Contract test.,Contract test,,,,,,,,,,,,,,,,,,,,,,
1,ITestCommitOperations.java,"* Test the low-level binding of the S3A FS to the magic commit mechanism,
* and handling of the commit operations.
* This is done with an inconsistent client.","* Test the low-level binding of the S3A FS to the magic commit mechanism, * and handling of the commit operations.",,,,This is done with an inconsistent client.,,,,,,,,,,,,,,,,,,
1,ITestListPerformance.java,* Test list performance.,Test list performance,,,,,,,,,,,,,,,,,,,,,,
1,ITestS3Select.java,"* Test the S3 Select feature with some basic SQL Commands.
* Executed if the destination store declares its support for the feature.",Test the S3 Select feature with some basic SQL Commands.,Executed if the destination store declares its support for the feature.,,,,,,,,,,,,,,,,,,,,,
1,ITestS3SelectCLI.java,"* Test the S3 Select CLI through some operations against landsat
* and files generated from it.",Test the S3 Select CLI through some operations against landsat * and files generated from it.,,,,,,,,,,,,,,,,,,,,,,
1,KerberosDelegationTokenAuthenticator.java,"* The <code>KerberosDelegationTokenAuthenticator</code> provides support for
* Kerberos SPNEGO authentication mechanism and support for Hadoop Delegation
* Token operations.
* <p>
* It falls back to the {@link PseudoDelegationTokenAuthenticator} if the HTTP
* endpoint does not trigger a SPNEGO authentication","The <code>KerberosDelegationTokenAuthenticator</code> provides support for
* Kerberos SPNEGO authentication mechanism and support for Hadoop Delegation
* Token operations.","It falls back to the {@link PseudoDelegationTokenAuthenticator} if the HTTP
* endpoint does not trigger a SPNEGO authentication",,,,,,,,,,,,"It falls back to the {@link PseudoDelegationTokenAuthenticator} if the HTTP
* endpoint does not trigger a SPNEGO authentication",,,,,,,,,
1,LocalizationStatusPBImpl.java,* PB Impl of {@link LocalizationStatus}.,PB Impl of {@link LocalizationStatus}.,,,,,,,,,,,,,PB Impl of {@link LocalizationStatus}.,,,,,,,,,
1,LocatedFileStatus.java,* This class defines a FileStatus that includes a file's block locations.,This class defines a FileStatus that includes a file's block locations,,,,,,,,,,,,,,,,,,,,,,
1,LoggedTask.java,"* A {@link LoggedTask} represents a [hadoop] task that is part of a hadoop job.
* It knows about the [pssibly empty] sequence of attempts, its I/O footprint,
* and its runtime.
* * All of the public methods are simply accessors for the instance variables we
* want to write out in the JSON files.
*",A {@link LoggedTask} represents a [hadoop] task that is part of a hadoop job.,"It knows about the [pssibly empty] sequence of attempts, its I/O footprint,
* and its runtime.",,,"All of the public methods are simply accessors for the instance variables we
* want to write out in the JSON files.
*",,,,,,,,,A {@link LoggedTask} represents a [hadoop] task that is part of a hadoop job.,,,,,,,,,
1,LogParserUtil.java,* Common utility functions for {@link LogParser}.,Common utility functions for {@link LogParser},,,,,,,,,,,,,Common utility functions for {@link LogParser},,,,,,,,,
1,LogWebService.java,* Support only ATSv2 client only.,,,,Support only ATSv2 client only,,,,,,,,,,,,,,,,,,,
1,LRUCacheHashMap.java,* LRU cache with a configurable maximum cache size and access order.,LRU cache with a configurable maximum cache size and access order.,LRU cache with a configurable maximum cache size and access order.,,,,,,,,,,,,,,,,,,,,,
1,MapContext.java,"* The context that is given to the {@link Mapper}.
* @param <KEYIN> the key input type to the Mapper
* @param <VALUEIN> the value input type to the Mapper
* @param <KEYOUT> the key output type from the Mapper
* @param <VALUEOUT> the value output type from the Mapper",The context that is given to the {@link Mapper}.,,,,"* @param <KEYIN> the key input type to the Mapper
* @param <VALUEIN> the value input type to the Mapper
* @param <KEYOUT> the key output type from the Mapper
* @param <VALUEOUT> the value output type from the Mapper",,,,,,,,,* The context that is given to the {@link Mapper}. * @param <KEYIN> the key input type to the Mapper * @param <VALUEIN> the value input type to the Mapper * @param <KEYOUT> the key output type from the Mapper * @param <VALUEOUT> the value output type from the Mapper,,,,,,,,,
1,MetaBlockAlreadyExists.java,* Exception - Meta Block with the same name already exists.,Exception - Meta Block with the same name already exists.,,,,,,,,,,,,,,,,,,,,,,
1,MetricsCache.java,"* A metrics cache for sinks that don't support sparse updates.
|
* Cached record",A metrics cache for sinks that don't support sparse updates. Context of the Queues in Scheduler.,Cached record,,,,,,,,,,,,,,,,,,,,,
1,NativeBatchProcessor.java,"* used to create channel, transfer data and command between Java and native",,,"used to create channel, transfer data and command between Java and native",,,,,,,,,,,,,,,,,,,,
1,NativeSingleLineParser.java,"* This sample parser will parse the sample log and extract the resource
* skyline.
* <p> The expected log format is: NormalizedJobName NumInstances SubmitTime
* StartTime EndTime JobInstanceName memUsage coreUsage","This sample parser will parse the sample log and extract the resource
* skyline.","<p> The expected log format is: NormalizedJobName NumInstances SubmitTime
* StartTime EndTime JobInstanceName memUsage coreUsage",,,,,,,,,,,,,,,,,,,,,
1,Nfs3Metrics.java,"* This class is for maintaining the various NFS gateway activity statistics and
* publishing them through the metrics interfaces.",This class is for maintaining the various NFS gateway activity statistics and * publishing them through the metrics interfaces.,,,,,,,,,,,,,,,,,,,,,,
1,Nfs3Status.java,* Success or error status is reported in NFS3 responses.,* Success or error status is reported in NFS3 responses.,,,,,,,,,,,,,,,,,,,,,,
1,Node2ObjectsMap.java,"* This data structure maintains the list of containers that is on a datanode.
* This information is built from the DN container reports.",This data structure maintains the list of containers that is on a datanode.,This information is built from the DN container reports.,,,,,,,,,,,,,,,,,,,,,
1,NodeUpdateType.java,"* <p>Taxonomy of the <code>NodeState</code> that a
* <code>Node</code> might transition into.</p>
*",<p>Taxonomy of the <code>NodeState</code> that a * <code>Node</code> might transition into.</p>,<p>Taxonomy of the <code>NodeState</code> that a * <code>Node</code> might transition into.</p>,,,,,,,,,,,,,,,,,,,,,
1,NullOutputFormat.java,* Consume all outputs and put them in /dev/null.,Consume all outputs and put them in /dev/null.,Consume all outputs and put them in /dev/null.,,,,,,,,,,,,,,,,,,,,,
1,OMNodeDetails.java,"* This class stores OM node details.
|
* Builder class for OMNodeDetails.","* This class stores OM node details.
|
* Builder class for OMNodeDetails.",,,,,,,,,,,,,* Builder class for OMNodeDetails.,,,,,,,,,
1,OpportunisticContainersStatusPBImpl.java,* Protocol Buffer implementation of OpportunisticContainersStatus.,Protocol Buffer implementation of OpportunisticContainersStatus,,,,,,,,,,,,,,,,,,,,,,
1,OzoneObj.java,"* Class representing an unique ozone object.
* |
* Ozone Objects supported for ACL.
|
* Ozone Objects supported for ACL.",Class representing an unique ozone object,Ozone Objects supported for ACL.,,,,,,,,,,,,,,,,,,,,,
1,Parser.java,A class for parsing outputs,A class for parsing outputs,,,,,,,,,,,,,,,,,,,,,,
1,PartialOutputCommitter.java,"* Interface for an {@link org.apache.hadoop.mapreduce.OutputCommitter}
* implementing partial commit of task output, as during preemption.","* Interface for an {@link org.apache.hadoop.mapreduce.OutputCommitter} * implementing partial commit of task output, as during preemption.",,,,,,,,,,,,,Interface for an {@link org.apache.hadoop.mapreduce.OutputCommitter},,,,,,,,,
1,PartitionResourcesInfo.java,* This class represents queue/user resource usage info for a given partition,This class represents queue/user resource usage info for a given partition,,This class represents queue/user resource usage info for a given partition,,,,,,,,,,,,,,,,,,,,
1,PlanningQuotaException.java,"* This exception is thrown if the user quota is exceed while accepting or
* updating a reservation.",This exception is thrown if the user quota is exceed while accepting or * updating a reservation.,,,,,,,,,,,,,,,,,,,,,,
1,ProcessIdFileReader.java,* Helper functionality to read the pid from a file.,Helper functionality to read the pid from a file.,,,,,,,,,,,,,,,,,,,,,,
1,QuasiMonteCarlo.java,"* A map/reduce program that estimates the value of Pi
* using a quasi-Monte Carlo (qMC) method.
* Arbitrary integrals can be approximated numerically by qMC methods.
* In this example,
* we use a qMC method to approximate the integral $I = \int_S f(x) dx$,
* where $S=[0,1)^2$ is a unit square,
* $x=(x_1,x_2)$ is a 2-dimensional point,
* and $f$ is a function describing the inscribed circle of the square $S$,
* $f(x)=1$ if $(2x_1-1)^2+(2x_2-1)^2 &lt;= 1$ and $f(x)=0$, otherwise.
* It is easy to see that Pi is equal to $4I$.
* So an approximation of Pi is obtained once $I$ is evaluated numerically.
* * There are better methods for computing Pi.
* We emphasize numerical approximation of arbitrary integrals in this example.
* For computing many digits of Pi, consider using bbp.
*
* The implementation is discussed below.
*
* Mapper:
* Generate points in a unit square
* and then count points inside/outside of the inscribed circle of the square.
*
* Reducer:
* Accumulate points inside/outside results from the mappers.
*
* Let numTotal = numInside + numOutside.
* The fraction numInside/numTotal is a rational approximation of
* the value (Area of the circle)/(Area of the square) = $I$,
* where the area of the inscribed circle is Pi/4
* and the area of unit square is 1.
* Finally, the estimated value of Pi is 4(numInside/numTotal). | 2-dimensional Halton sequence {H(i)},
* where H(i) is a 2-dimensional point and i >= 1 is the index.
* Halton sequence is used to generate sample points for Pi estimation. |
* Mapper class for Pi estimation.
* Generate points in a unit square
* and then count points inside/outside of the inscribed circle of the square.
|
* Reducer class for Pi estimation.
* Accumulate points inside/outside results from the mappers.",* A map/reduce program that estimates the value of Pi.,"using a quasi-Monte Carlo (qMC) method. Arbitrary integrals can be approximated numerically by qMC methods. * There are better methods for computing Pi.
* We emphasize numerical approximation of arbitrary integrals in this example.
* For computing many digits of Pi, consider using bbp.
*
* The implementation is discussed below.
*
* Mapper:
* Generate points in a unit square
* and then count points inside/outside of the inscribed circle of the square.
*
* Reducer:
* Accumulate points inside/outside results from the mappers. * Mapper class for Pi estimation.
* Generate points in a unit square
* and then count points inside/outside of the inscribed circle of the square.
|
* Reducer class for Pi estimation.
* Accumulate points inside/outside results from the mappers.",,,"In this example,
* we use a qMC method to approximate the integral $I = \int_S f(x) dx$,
* where $S=[0,1)^2$ is a unit square,
* $x=(x_1,x_2)$ is a 2-dimensional point,
* and $f$ is a function describing the inscribed circle of the square $S$,
* $f(x)=1$ if $(2x_1-1)^2+(2x_2-1)^2 &lt;= 1$ and $f(x)=0$, otherwise.
* It is easy to see that Pi is equal to $4I$.
* So an approximation of Pi is obtained once $I$ is evaluated numerically.
* * There are better methods for computing Pi.
* We emphasize numerical approximation of arbitrary integrals in this example.
* For computing many digits of Pi, consider using bbp.
*",,,,,,,,,"In this example,
* we use a qMC method to approximate the integral $I = \int_S f(x) dx$,",,,,"For computing many digits of Pi, consider using bbp.",,,,,
1,Query.java,"* Check if a record matches a query. The query is usually a partial record.
*
* @param <T> Type of the record to query.",Check if a record matches a query.,The query is usually a partial record.,,,,,,,,,,,,* @param <T> Type of the record to query.,,,,,,,,,
1,QueueName.java,* Represents a queue name.,Represents a queue name.,,,,,,,,,,,,,,,,,,,,,,
1,RandomKeyGenerator.java,"* Data generator tool to generate as much keys as possible.
|
* Wrapper to hold ozone keyValidate entry.
|
* Validates the write done in ozone cluster.",Data generator tool to generate as much keys as possible.,"Wrapper to hold ozone keyValidate entry.
|
* Validates the write done in ozone cluster.",,,,,,,,,,,,,,,,,,,,,
1,ReencryptionUpdater.java,"* Class for finalizing re-encrypt EDEK operations, by updating file xattrs with
* edeks returned from reencryption.
* <p>
* The tasks are submitted by ReencryptionHandler.
* <p>
* It is assumed only 1 Updater will be running, since updating file xattrs
* requires namespace write lock, and performance gain from multi-threading
* is limited.
|
* Class to track re-encryption submissions of a single zone. It contains
* all the submitted futures, and statistics about how far the futures are
* processed.
|
* Class representing the task for one batch of a re-encryption command. It
* also contains statistics about how far this single batch has been executed.
|
* Class that encapsulates re-encryption details of a file.","Class for finalizing re-encrypt EDEK operations. Class representing the task for one batch of a re-encryption command. It
* also contains statistics about how far this single batch has been executed. Class that encapsulates re-encryption details of a file.","by updating file xattrs with * edeks returned from reencryption. * <p> * The tasks are submitted by ReencryptionHandler. * <p>. It is assumed only 1 Updater will be running, since updating file xattrs
* requires namespace write lock, and performance gain from multi-threading
* is limited.
|
* Class to track re-encryption submissions of a single zone. It contains
* all the submitted futures, and statistics about how far the futures are
* processed. It contains the
* file inode, stores the initial edek of the file, and the new edek
* after re-encryption.
* <p>
* Assumptions are the object initialization happens when dir lock is held,
* and inode is valid and is encrypted during initialization.
* <p>
* Namespace changes may happen during re-encryption, and if inode is changed
* the re-encryption is skipped.",Class for finalizing re-encrypt EDEK operations,,,,,,,,,,,,,,,,,,,,
1,RegistryInternalConstants.java,"* Internal constants for the registry.
*
* These are the things which aren't visible to users.
*",Internal constants for the registry.,,These are the things which aren't visible to users.,,,,,,,,,,,,,,,,,,,,
1,RegistryOperations.java,* Registry Operations,Registry Operations,,,,,,,,,,,,,,,,,,,,,,
1,ReInitializeContainerRequestPBImpl.java,CHECKSTYLE:OFF,,,,,,,,,,CHECKSTYLE:OFF,,,,,,,,,,,,,
1,ResourceBlacklistRequest.java,"* {@link ResourceBlacklistRequest} encapsulates the list of resource-names * which should be added or removed from the <em>blacklist</em> of resources * for the application.
* * @see ResourceRequest
* @see ApplicationMasterProtocol#allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest)",* {@link ResourceBlacklistRequest} encapsulates the list of resource-names * which should be added or removed from the <em>blacklist</em> of resources * for the application.,,,,,,,,,,,,,"* {@link ResourceBlacklistRequest} encapsulates the list of resource-names * which should be added or removed from the <em>blacklist</em> of resources * for the application.
* * @see ResourceRequest
* @see ApplicationMasterProtocol#allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest)",,,,,,,,,
1,ResourceRequestsJsonVerifications.java,"* Performs value verifications on
* {@link org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceRequestInfo}
* objects against the values of {@link ResourceRequest}. With the help of the
* {@link Builder}, users can also make verifications of the custom resource
* types and its values.
|
* Builder class for {@link ResourceRequestsJsonVerifications}.","* Performs value verifications on
* {@link org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceRequestInfo}
* objects against the values of {@link ResourceRequest}.
|
* Builder class for {@link ResourceRequestsJsonVerifications}.","With the help of the
* {@link Builder}, users can also make verifications of the custom resource
* types and its values.",,,,,,,,,,,,"* Performs value verifications on
* {@link org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceRequestInfo}
* objects against the values of {@link ResourceRequest}. With the help of the
* {@link Builder}, users can also make verifications of the custom resource
* types and its values.
|
* Builder class for {@link ResourceRequestsJsonVerifications}.",,,,,,,,,
1,RetriableDirectoryCreateCommand.java,"* This class extends Retriable command to implement the creation of directories
* with retries on failure.",This class extends Retriable command to implement the creation of directories * with retries on failure.,,,,,,,,,,,,,,,,,,,,,,
1,RMAdminRequestInterceptor.java,"* Defines the contract to be implemented by the request intercepter classes,
* that can be used to intercept and inspect messages sent from the client to
* the resource manager.",Defines the contract to be implemented by the request intercepter classes,,,,that can be used to intercept and inspect messages sent from the client to * the resource manager.,,,,,,,,,,,,,,,,,,
1,RSLegacyRawErasureCoderFactory.java,* A raw coder factory for the legacy raw Reed-Solomon coder in Java.,A raw coder factory for the legacy raw Reed-Solomon coder in Java.,,,,,,,,,,,,,,,,,,,,,,
1,SafeModeException.java,"* This exception is thrown when the name node is in safe mode.
* Client cannot modified namespace until the safe mode is off.
*",,,,,Client cannot modified namespace until the safe mode is off.,* This exception is thrown when the name node is in safe mode.,,,,,,,,,,,,,* Client cannot modified namespace until the safe mode is off.,,,,
1,SchedulerQueueManager.java,"*
* Context of the Queues in Scheduler.
*",Context of the Queues in Scheduler.,,,,,,,,,,,,,,,,,,,,,,
1,SequenceFileRecordReader.java,* An {@link RecordReader} for {@link SequenceFile}s.,* An {@link RecordReader} for {@link SequenceFile}s.,,,,,,,,,,,,,* An {@link RecordReader} for {@link SequenceFile}s.,,,,,,,,,
1,ShellBasedUnixGroupsMapping.java,"* A simple shell-based implementation of {@link GroupMappingServiceProvider} * that exec's the <code>groups</code> shell command to fetch the group
* memberships of a given user.",A simple shell-based implementation of {@link GroupMappingServiceProvider},that exec's the <code>groups</code> shell command to fetch the group * memberships of a given user.,,,,,,,,,,,,,,,,,,,,,
1,StandardSocketFactory.java,* Specialized SocketFactory to create sockets with a SOCKS proxy,Specialized SocketFactory to create sockets with a SOCKS proxy,,,,,,,,,,,,,,,,,,,,,,
1,StateStoreFileSystemImpl.java,"* {@link StateStoreDriver} implementation based on a filesystem. The common
* implementation uses HDFS as a backend. The path can be specified setting
* dfs.federation.router.driver.fs.path=hdfs://host:port/path/to/store.",* {@link StateStoreDriver} implementation based on a filesystem.,The common * implementation uses HDFS as a backend.,,,The path can be specified setting * dfs.federation.router.driver.fs.path=hdfs://host:port/path/to/store.,,,,,,,,,* {@link StateStoreDriver} implementation based on a filesystem.,,,,,,,,,
1,StreamBaseRecordReader.java,"* Shared functionality for hadoopStreaming formats. A custom reader can be
* defined to be a RecordReader with the constructor below and is selected with
* the option bin/hadoopStreaming -inputreader ...
* * @see StreamXmlRecordReader",Shared functionality for hadoopStreaming formats.,,,,"A custom reader can be
* defined to be a RecordReader with the constructor below and is selected with
* the option bin/hadoopStreaming -inputreader ...",,,,,,,,,A custom reader can be * defined to be a RecordReader with the constructor below and is selected with * the option bin/hadoopStreaming -inputreader ... * * @see StreamXmlRecordReader,,,,,,,,,
1,StructureGenerator.java,"* This program generates a random namespace structure with the following
* constraints:
* 1. The number of subdirectories is a random number in [minWidth, maxWidth].
* 2. The maximum depth of each subdirectory is a random number * [2*maxDepth/3, maxDepth].
* 3. Files are randomly placed in the empty directories. The size of each
* file follows Gaussian distribution.
* The generated namespace structure is described by two files in the output
* directory. Each line of the first file * contains the full name of a leaf directory. * Each line of the second file contains
* the full name of a file and its size, separated by a blank.
* * The synopsis of the command is
* java StructureGenerator
-maxDepth <maxDepth> : maximum depth of the directory tree; default is 5.
-minWidth <minWidth> : minimum number of subdirectories per directories; default is 1
-maxWidth <maxWidth> : maximum number of subdirectories per directories; default is 5
-numOfFiles <#OfFiles> : the total number of files; default is 10.
-avgFileSize <avgFileSizeInBlocks>: average size of blocks; default is 1.
-outDir <outDir>: output directory; default is the current directory.
-seed <seed>: random number generator seed; default is the current time.
| In memory representation of a directory | In memory representation of a file",This program generates a random namespace structure,"This program generates a random namespace structure with the following
* constraints:
* 1. The number of subdirectories is a random number in [minWidth, maxWidth].
* 2. The maximum depth of each subdirectory is a random number * [2*maxDepth/3, maxDepth].
* 3. Files are randomly placed in the empty directories. The size of each
* file follows Gaussian distribution.
* The generated namespace structure is described by two files in the output
* directory. Each line of the first file * contains the full name of a leaf directory. * Each line of the second file contains
* the full name of a file and its size, separated by a blank.",,,"* The synopsis of the command is
* java StructureGenerator
-maxDepth <maxDepth> : maximum depth of the directory tree; default is 5.
-minWidth <minWidth> : minimum number of subdirectories per directories; default is 1
-maxWidth <maxWidth> : maximum number of subdirectories per directories; default is 5
-numOfFiles <#OfFiles> : the total number of files; default is 10.
-avgFileSize <avgFileSizeInBlocks>: average size of blocks; default is 1.
-outDir <outDir>: output directory; default is the current directory.
-seed <seed>: random number generator seed; default is the current time.
| In memory representation of a directory | In memory representation of a file",,,,,,,,,,,,,,,,,,
1,SwiftBadRequestException.java,"* Thrown to indicate that data locality can't be calculated or requested path is incorrect.
* Data locality can't be calculated if Openstack Swift version is old.",Thrown to indicate that data locality can't be calculated or requested path is incorrect.,,,Data locality can't be calculated if Openstack Swift version is old.,,,,,,,,,,,,,,,,,,,
1,SwiftRestClient.java,"* This implements the client-side of the Swift REST API.
*
* The core actions put, get and query data in the Swift object store,
* after authenticating the client.
*
* <b>Logging:</b>
*
* Logging at DEBUG level displays detail about the actions of this
* client, including HTTP requests and responses -excluding authentication
* details.
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Base class for all Swift REST operations.
*
* @param <M> request
* @param <R> result
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* There's a special type for auth messages, so that low-level
* message handlers can react to auth failures differently from everything
* else.
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Generate an auth message.
* @param <R> response
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Create operation.
*
* @param <R> result type
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Delete operation.
*
* @param <R>",* This implements the client-side of the Swift REST API.,"The core actions put, get and query data in the Swift object store, * after authenticating the client. * * <b>Logging:</b> * * Logging at DEBUG level displays detail about the actions of this * client, including HTTP requests and responses -excluding authentication * details.",,,,"* There's a special type for auth messages, so that low-level
* message handlers can react to auth failures differently from everything
* else.
|",,,,,,,,"Get the current operation statistics. * @return a snapshot of the statistics. Base class for all Swift REST operations.
*
* @param <M> request
* @param <R> result
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Generate an auth message.
* @param <R> response
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Create operation.
*
* @param <R> result type
|
* Get the current operation statistics.
* @return a snapshot of the statistics
|
* Delete operation.
*
* @param <R>",,,,,,,,,
1,TableConfig.java,* Class that maintains Table Configuration.,Class that maintains Table Configuration.,,,,,,,,,,,,,,,,,,,,,,
1,TestAddBlock.java,* Test AddBlockOp is written and read correctly,Test AddBlockOp is written and read correctly,Test AddBlockOp is written and read correctly,,,,,,,,,,,,,,,,,,,,,
1,TestAdlContractDeleteLive.java,* Test delete contract test.,Test delete contract test.,,,,,,,,,,,,,,,,,,,,,,
1,TestAdlContractSeekLive.java,* Test seek operation on Adl file system.,Test seek operation on Adl file system.,,,,,,,,,,,,,,,,,,,,,,
1,TestConfServlet.java,"* Basic test case that the ConfServlet can write configuration
* to its output in XML and JSON format.",Basic test case that the ConfServlet can write configuration * to its output in XML and JSON format.,Basic test case that the ConfServlet can write configuration * to its output in XML and JSON format.,,,,,,,,,,,,,,,,,,,,,
1,TestConnCache.java,"* This class tests the client connection caching in a single node
* mini-cluster.",This class tests the client connection,caching in a single node * mini-cluster.,,,,,,,,,,,,,,,,,,,,,
1,TestCustomOauthTokenProvider.java,"* Test custom OAuth token providers.
* This is a unit test not an E2E integration test because that would
* require OAuth auth setup, always.
* Instead this just checks that the creation works and that everything
* is propagated.",Test custom OAuth token providers.,"Instead this just checks that the creation works and that everything
* is propagated.","This is a unit test not an E2E integration test because that would * require OAuth auth setup, always.",,,,,,,,,,,,,,,,,,,,
1,TestDataDrivenDBInputFormat.java,"import org.apache.hadoop.examples.DBCountPageView;|
* Test aspects of DataDrivenDBInputFormat",Test aspects of DataDrivenDBInputFormat,,,,,,,,import org.apache.hadoop.examples.DBCountPageView;|,,,,,,,,,,,,,,
1,TestDominantResourceFairnessPolicy.java,"* comparator.compare(sched1, sched2) < 0 means that sched1 should get a
* container before sched2",,"comparator.compare(sched1, sched2) < 0 means that sched1 should get a * container before sched2",,,,,,,,,,,,,,,,,,,,,
1,TestEditLogFileOutputStream.java,* Test the EditLogFileOutputStream,Test the EditLogFileOutputStream,,,,,,,,,,,,,,,,,,,,,,
1,TestFederationPolicyUtils.java,* Unit test for {@link FederationPolicyUtils}.,Unit test for {@link FederationPolicyUtils}.,,,,,,,,,,,,,Unit test for {@link FederationPolicyUtils}.,,,,,,,,,
1,TestFileSizeCountTask.java,* Unit test for File Size Count Task.,Unit test for File Size Count Task,,,,,,,,,,,,,,,,,,,,,,
1,TestHandler.java,* Tests Handler interface.,Tests Handler interface.,,,,,,,,,,,,,,,,,,,,,,
1,TestHDFSServerPorts.java,"* This test checks correctness of port usage by hdfs components:
* NameNode, DataNode, SecondaryNamenode and BackupNode.
* * The correct behavior is:<br> * - when a specific port is provided the server must either start on that port * or fail by throwing {@link java.net.BindException}.<br>
* - if the port = 0 (ephemeral) then the server should choose * a free port and start on it.","* This test checks correctness of port usage by hdfs components:
* NameNode, DataNode, SecondaryNamenode and BackupNode.","* * The correct behavior is:<br> * - when a specific port is provided the server must either start on that port * or fail by throwing {@link java.net.BindException}.<br>
* - if the port = 0 (ephemeral) then the server should choose * a free port and start on it.",,,,* * The correct behavior is:<br> * - when a specific port is provided the server must either start on that port * or fail by throwing {@link java.net.BindException},,,,,,,,,,,,,,,,,
1,TestKeyInputStream.java,* Tests {@link KeyInputStream}.,Tests {@link KeyInputStream}.,,,,,,,,,,,,,Tests {@link KeyInputStream}.,,,,,,,,,
1,TestMetricsVisitor.java,* Test the metric visitor interface,Test the metric visitor interface,,,,,,,,,,,,,,,,,,,,,,
1,TestNativeAzureFileSystemUploadLogic.java,"* Tests for the upload, buffering and flush logic in WASB.
| Just an arbitrary number so that the values I write have a predictable|
* Various scenarios to test in how often we flush data while uploading.","Tests for the upload, buffering and flush logic in WASB.",| Just an arbitrary number so that the values I write have a predictable|,* Various scenarios to test in how often we flush data while uploading.,,,,,,,,,,,,,,,,,,,,
1,TestOmMultipartKeyInfoCodec.java,* This class tests OmMultipartKeyInfoCodec.,This class tests OmMultipartKeyInfoCodec.,,,,,,,,,,,,,,,,,,,,,,
1,TestOMVolumeRequest.java,* Base test class for Volume request.,Base test class for Volume request,,Base test class for Volume request,,,,,,,,,,,,,,,,,,,,
1,TestOzoneNativeAuthorizer.java,* Test class for {@link OzoneNativeAuthorizer}.,Test class for {@link OzoneNativeAuthorizer}.,,,,,,,,,,,,,Test class for {@link OzoneNativeAuthorizer}.,,,,,,,,,
1,TestProtoBufRpc.java,"* Test for testing protocol buffer based RPC mechanism.
* This test depends on test.proto definition of types in src/test/proto
* and protobuf service definition from src/test/test_rpc_service.proto",Test for testing protocol buffer based RPC mechanism.,"This test depends on test.proto definition of types in src/test/proto
* and protobuf service definition from src/test/test_rpc_service.proto",,,,,,,,,,,,,,,,,,,,,
1,TestRDBStore.java,* RDBStore Tests.,RDBStore Tests.,,,,,,,,,,,,,,,,,,,,,,
1,TestRegistrySecurityHelper.java,* Test for registry security operations,Test for registry security operations,,,,,,,,,,,,,,,,,,,,,,
1,TestRollingFileSystemSinkWithLocal.java,"* Test the {@link RollingFileSystemSink} class in the context of the local file
* system.",Test the {@link RollingFileSystemSink} class in the context of the local file * system.,,,,,,,,,,,,,Test the {@link RollingFileSystemSink} class in the context of the local file * system.,,,,,,,,,
1,TestRouterWebServiceUtil.java,* Test class to validate RouterWebServiceUtil methods.,Test class to validate RouterWebServiceUtil methods.,,,,,,,,,,,,,,,,,,,,,,
1,TestS3BucketManager.java,* Tests for S3 Bucket Manager.,Tests for S3 Bucket Manager.,,,,,,,,,,,,,Tests for S3 Bucket Manager.,,,,,,,,,
1,TestSaveNamespace.java,"* Test various failure scenarios during saveNamespace() operation.
* Cases covered:
* <ol>
* <li>Recover from failure while saving into the second storage directory</li>
* <li>Recover from failure while moving current into lastcheckpoint.tmp</li>
* <li>Recover from failure while moving lastcheckpoint.tmp into
* previous.checkpoint</li>
* <li>Recover from failure while rolling edits file</li>
* </ol>",Test various failure scenarios during saveNamespace() operation.,"Cases covered:
* <ol>
* <li>Recover from failure while saving into the second storage directory</li>
* <li>Recover from failure while moving current into lastcheckpoint.tmp</li>
* <li>Recover from failure while moving lastcheckpoint.tmp into
* previous.checkpoint</li>
* <li>Recover from failure while rolling edits file</li>
* </ol>",,,,,,,,,,,,,,,,,,,,,
1,TestSCMDatanodeHeartbeatDispatcher.java,* This class tests the behavior of SCMDatanodeHeartbeatDispatcher.,This class tests the behavior of SCMDatanodeHeartbeatDispatcher.,,,,,,,,,,,,,,,,,,,,,,
1,TestSequenceFile.java,Support for flat files of binary key/value pairs.,Support for flat files of binary key/value pairs,Support for flat files of binary key/value pairs,,,,,,,,,,,,,,,,,,,,,
1,TestSeveralNameNodes.java,* Test that we can start several and run with namenodes on the same minicluster,Test that we can start several and run with namenodes on the same minicluster,we can start several and run with namenodes on the same minicluster,,,,,,,,,,,,,,,,,,,,,
1,TestSwiftFileSystemContract.java,"* This is the full filesystem contract test -which requires the
* Default config set up to point to a filesystem.
*
* Some of the tests override the base class tests -these
* are where SwiftFS does not implement those features, or
* when the behavior of SwiftFS does not match the normal
* contract -which normally means that directories and equal files
* are being treated as equal.","* This is the full filesystem contract test -which requires the
* Default config set up to point to a filesystem.",,"* Some of the tests override the base class tests -these
* are where SwiftFS does not implement those features, or
* when the behavior of SwiftFS does not match the normal
* contract -which normally means that directories and equal files
* are being treated as equal.",,,,,,,,,,,,,,,,,,,"* Some of the tests override the base class tests -these
* are where SwiftFS does not implement those features, or
* when the behavior of SwiftFS does not match the normal
* contract -which normally means that directories and equal files
* are being treated as equal.",
1,TestTaskCommit.java,"* Special Committer that does not cleanup temporary files in
* abortTask
* * The framework's FileOutputCommitter cleans up any temporary
* files left behind in abortTask. We want the test case to
* find these files and hence short-circuit abortTask.
|
* Special committer that always requires commit.","Special Committer that does not cleanup temporary files in
* abortTask",,"The framework's FileOutputCommitter cleans up any temporary
* files left behind in abortTask. We want the test case to
* find these files and hence short-circuit abortTask.",,* Special committer that always requires commit.,,,,,,,,,,,,,,,,,,
1,TestTaskContext.java,* Tests context api and {@link StatusReporter#getProgress()} via * {@link TaskAttemptContext#getProgress()} API .,Tests context api and {@link StatusReporter#getProgress()} via * {@link TaskAttemptContext#getProgress()} API .,,,,,,,,,,,,,Tests context api and {@link StatusReporter#getProgress()} via * {@link TaskAttemptContext#getProgress()} API .,,,,,,,,,
1,TestTopCLI.java,"* Test class for TopCli.
*",Test class for TopCli.,,,,,,,,,,,,,,,,,,,,,,
1,TestUpgradeDomainBlockPlacementPolicy.java,"* End-to-end test case for upgrade domain
* The test configs upgrade domain for nodes via admin json
* config file and put some nodes to decommission state.
* The test then verifies replicas are placed on the nodes that
* satisfy the upgrade domain policy.
*",End-to-end test case for upgrade domain,"The test configs upgrade domain for nodes via admin json
* config file and put some nodes to decommission state.
* The test then verifies replicas are placed on the nodes that
* satisfy the upgrade domain policy.",,,,,,,,,,,,,,,,,,,,,
1,TextInputFormat.java,"* An {@link InputFormat} for plain text files. Files are broken into lines.
* Either linefeed or carriage-return are used to signal end of line. Keys are
* the position in the file, and values are the line of text..",An {@link InputFormat} for plain text files. Files are broken into lines.,"Either linefeed or carriage-return are used to signal end of line. Keys are * the position in the file, and values are the line of text..",,,,,,,,,,,,An {@link InputFormat} for plain text files. Files are broken into lines.,,,,,,,,,
1,TimelineDataToRetrieve.java,"* Encapsulates information regarding which data to retrieve for each entity
* while querying.<br>
* Data to retrieve contains the following :<br>
* <ul>
* <li><b>confsToRetrieve</b> - Used for deciding which configs to return
* in response. This is represented as a {@link TimelineFilterList} object
* containing {@link TimelinePrefixFilter} objects. These can either be
* exact config keys' or prefixes which are then compared against config
* keys' to decide configs(inside entities) to return in response. If null
* or empty, all configurations will be fetched if fieldsToRetrieve
* contains {@link Field#CONFIGS} or {@link Field#ALL}. This should not be
* confused with configFilters which is used to decide which entities to
* return instead.</li>
* <li><b>metricsToRetrieve</b> - Used for deciding which metrics to return
* in response. This is represented as a {@link TimelineFilterList} object
* containing {@link TimelinePrefixFilter} objects. These can either be
* exact metric ids' or prefixes which are then compared against metric
* ids' to decide metrics(inside entities) to return in response. If null
* or empty, all metrics will be fetched if fieldsToRetrieve contains
* {@link Field#METRICS} or {@link Field#ALL}. This should not be confused
* with metricFilters which is used to decide which entities to return
* instead.</li>
* <li><b>fieldsToRetrieve</b> - Specifies which fields of the entity
* object to retrieve, see {@link Field}. If null, retrieves 3 fields,
* namely entity id, entity type and entity created time. All fields will
* be returned if {@link Field#ALL} is specified.</li>
* <li><b>metricsLimit</b> - If fieldsToRetrieve contains METRICS/ALL or
* metricsToRetrieve is specified, this limit defines an upper limit to the
* number of metrics to return. This parameter is ignored if METRICS are not to
* be fetched.</li>
* <li><b>metricsTimeStart</b> - Metric values before this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to 0.</li>
* <li><b>metricsTimeEnd</b> - Metric values after this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to {@link Long#MAX_VALUE}.
* </li>
* </ul>","Encapsulates information regarding which data to retrieve for each entity
* while querying.<br>","* Data to retrieve contains the following :<br>
* <ul>
* <li><b>confsToRetrieve</b> - Used for deciding which configs to return
* in response. This is represented as a {@link TimelineFilterList} object
* containing {@link TimelinePrefixFilter} objects. These can either be
* exact config keys' or prefixes which are then compared against config
* keys' to decide configs(inside entities) to return in response. If null
* or empty, all configurations will be fetched if fieldsToRetrieve
* contains {@link Field#CONFIGS} or {@link Field#ALL}. This should not be
* confused with configFilters which is used to decide which entities to
* return instead.</li>
* <li><b>metricsToRetrieve</b> - Used for deciding which metrics to return
* in response. This is represented as a {@link TimelineFilterList} object
* containing {@link TimelinePrefixFilter} objects. These can either be
* exact metric ids' or prefixes which are then compared against metric
* ids' to decide metrics(inside entities) to return in response. If null
* or empty, all metrics will be fetched if fieldsToRetrieve contains
* {@link Field#METRICS} or {@link Field#ALL}. This should not be confused
* with metricFilters which is used to decide which entities to return
* instead.</li>
* <li><b>fieldsToRetrieve</b> - Specifies which fields of the entity
* object to retrieve, see {@link Field}. If null, retrieves 3 fields,
* namely entity id, entity type and entity created time. All fields will
* be returned if {@link Field#ALL} is specified.</li>
* <li><b>metricsLimit</b> - If fieldsToRetrieve contains METRICS/ALL or
* metricsToRetrieve is specified, this limit defines an upper limit to the
* number of metrics to return. This parameter is ignored if METRICS are not to
* be fetched.</li>
* <li><b>metricsTimeStart</b> - Metric values before this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to 0.</li>
* <li><b>metricsTimeEnd</b> - Metric values after this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to {@link Long#MAX_VALUE}.
* </li>
* </ul>",,,,,,,,,,,,"* Data to retrieve contains the following :<br>
* <ul>
* <li><b>confsToRetrieve</b> - Used for deciding which configs to return
* in response. This is represented as a {@link TimelineFilterList} object
* containing {@link TimelinePrefixFilter} objects. These can either be
* exact config keys' or prefixes which are then compared against config
* keys' to decide configs(inside entities) to return in response. If null
* or empty, all configurations will be fetched if fieldsToRetrieve
* contains {@link Field#CONFIGS} or {@link Field#ALL}. This should not be
* confused with configFilters which is used to decide which entities to
* return instead.</li>
* <li><b>metricsToRetrieve</b> - Used for deciding which metrics to return
* in response. This is represented as a {@link TimelineFilterList} object
* containing {@link TimelinePrefixFilter} objects. These can either be
* exact metric ids' or prefixes which are then compared against metric
* ids' to decide metrics(inside entities) to return in response. If null
* or empty, all metrics will be fetched if fieldsToRetrieve contains
* {@link Field#METRICS} or {@link Field#ALL}. This should not be confused
* with metricFilters which is used to decide which entities to return
* instead.</li>
* <li><b>fieldsToRetrieve</b> - Specifies which fields of the entity
* object to retrieve, see {@link Field}. If null, retrieves 3 fields,
* namely entity id, entity type and entity created time. All fields will
* be returned if {@link Field#ALL} is specified.</li>
* <li><b>metricsLimit</b> - If fieldsToRetrieve contains METRICS/ALL or
* metricsToRetrieve is specified, this limit defines an upper limit to the
* number of metrics to return. This parameter is ignored if METRICS are not to
* be fetched.</li>
* <li><b>metricsTimeStart</b> - Metric values before this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to 0.</li>
* <li><b>metricsTimeEnd</b> - Metric values after this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to {@link Long#MAX_VALUE}.
* </li>
* </ul>",,,"<li>This should not be
* confused with configFilters which is used to decide which entities to
* return instead.</li>
<li>This should not be confused
* with metricFilters which is used to decide which entities to return
* instead.</li>
This parameter is ignored if METRICS are not to
* be fetched.</li>
* <li><b>metricsTimeStart</b> - Metric values before this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to 0.</li>
* <li><b>metricsTimeEnd</b> - Metric values after this timestamp would not
* be retrieved. If null or {@literal <0}, defaults to {@link Long#MAX_VALUE}.
* </li>
* </ul>",,,,,,
1,TimelineStorageMonitor.java,"* This abstract class is for monitoring Health of Timeline Storage.
| Different Storages supported by ATSV2.",This abstract class is for monitoring Health of Timeline Storage,,for monitoring Health of Timeline Storage,,,,,,,,,,,,,,,,,,,,
1,TonyRuntimeFactory.java,* Implementation of RuntimeFactory with Tony Runtime,Implementation of RuntimeFactory with Tony Runtime,,,,,,,,,,,,,Implementation of RuntimeFactory with Tony Runtime,,,,,,,,,
1,TypedEvent.java,"* Basic event implementation to implement custom events.
*
* @param <T>",Basic event implementation,,to implement custom events.,,@param <T>,,,,,,,,,,,,,,,,,,
1,UniformSizeInputFormat.java,"* UniformSizeInputFormat extends the InputFormat class, to produce
* input-splits for DistCp.
* It looks at the copy-listing and groups the contents into input-splits such
* that the total-number of bytes to be copied for each input split is
* uniform.","UniformSizeInputFormat extends the InputFormat class, to produce
* input-splits for DistCp.","It looks at the copy-listing and groups the contents into input-splits such
* that the total-number of bytes to be copied for each input split is
* uniform.",,,,,,,,,,,,,,,,,,,,,
1,Utils.java,"* A utility class. It provides
* A path filter utility to filter out output/part files in the output dir
|
* This class filters output(part) files from the given directory
* It does not accept files with filenames _logs and _SUCCESS.
* This can be used to list paths of output directory as follows:
* Path[] fileList = FileUtil.stat2Paths(fs.listStatus(outDir,
* new OutputFilesFilter()));
|
* This class filters log files from directory given
* It doesnt accept paths having _logs.
* This can be used to list paths of output directory as follows:
* Path[] fileList = FileUtil.stat2Paths(fs.listStatus(outDir,
* new OutputLogFilter()));","* A utility class. It provides
* A path filter utility to filter out output/part files in the output dir
|","* This class filters output(part) files from the given directory
* It does not accept files with filenames _logs and _SUCCESS.
|
* This class filters log files from directory given
* It doesnt accept paths having _logs.",,,"|
* This class filters output(part) files from the given directory
* It does not accept files with filenames _logs and _SUCCESS.
* This can be used to list paths of output directory as follows:
* Path[] fileList = FileUtil.stat2Paths(fs.listStatus(outDir,
* new OutputFilesFilter()));
|
* This class filters log files from directory given
* It doesnt accept paths having _logs.
* This can be used to list paths of output directory as follows:
* Path[] fileList = FileUtil.stat2Paths(fs.listStatus(outDir,
* new OutputLogFilter()));",,,,,,,,,,,,,,,,,,
1,VolumeSet.java,* VolumeSet to manage HDDS volumes in a DataNode.,VolumeSet to manage HDDS volumes in a DataNode.,,,,,,,,,,,,,VolumeSet to manage HDDS volumes in a DataNode.,,,,,,,,,
1,WritableComparator.java,"A Comparator for {@link WritableComparable}s.
*
* <p>This base implementation uses the natural ordering. To define alternate
* orderings, override {@link #compare(WritableComparable,WritableComparable)}.
*
* <p>One may optimize compare-intensive operations by overriding
* {@link #compare(byte[],int,int,byte[],int,int)}. Static utility methods are
* provided to assist in optimized implementations of this method.",A Comparator for {@link WritableComparable}s.,"* <p>This base implementation uses the natural ordering. To define alternate
* orderings, override {@link #compare(WritableComparable,WritableComparable)}.",,,"<p>This base implementation uses the natural ordering. To define alternate
* orderings, override {@link #compare(WritableComparable,WritableComparable)}.
*
* <p>One may optimize compare-intensive operations by overriding
* {@link #compare(byte[],int,int,byte[],int,int)}. Static utility methods are
* provided to assist in optimized implementations of this method.",,,,,,,,,"A Comparator for {@link WritableComparable}s.
*
* <p>This base implementation uses the natural ordering. To define alternate
* orderings, override {@link #compare(WritableComparable,WritableComparable)}.
*
* <p>One may optimize compare-intensive operations by overriding
* {@link #compare(byte[],int,int,byte[],int,int)}. Static utility methods are
* provided to assist in optimized implementations of this method.",,,,,,,,,
1,YarnAuthorizationProvider.java,"* An implementation of the interface will provide authorization related
* information and enforce permission check. It is excepted that any of the
* methods defined in this interface should be non-blocking call and should not
* involve expensive computation as these method could be invoked in RPC.","An implementation of the interface will provide authorization related
* information and enforce permission check.","It is excepted that any of the
* methods defined in this interface should be non-blocking call and should not
* involve expensive computation as these method could be invoked in RPC.","It is excepted that any of the
* methods defined in this interface should be non-blocking call and should not
* involve expensive computation as these method could be invoked in RPC.",,,,,,,,,,,,,,,,,,,,
1,YarnServiceJobSubmitter.java,* Submit a job to cluster.,Submit a job to cluster.,,,,,,,,,,,,,,,,,,,,,,
2,ChunkFetchSuccess.java,"* Response to {@link ChunkFetchRequest} when a chunk exists and has been successfully fetched.
 *
 * Note that the server-side encoding of this messages does NOT include the buffer itself, as this
 * may be written by Netty in a more efficient manner (i.e., zero-copy write).
 * Similarly, the client-side decoding will reuse the Netty ByteBuf as the buffer.",* Response to {@link ChunkFetchRequest} when a chunk exists and has been successfully fetched.,"* Similarly, the client-side decoding will reuse the Netty ByteBuf as the buffer.",,,,,,,,,,,,,,,"* Note that the server-side encoding of this messages does NOT include the buffer itself, as this
 * may be written by Netty in a more efficient manner (i.e., zero-copy write).
 * Similarly, the client-side decoding will reuse the Netty ByteBuf as the buffer.",,,,,,
2,ExecutorPlugin.java,"* A plugin which can be automatically instantiated within each Spark executor. Users can specify
* plugins which should be created with the ""spark.executor.plugins"" configuration. An instance
* of each plugin will be created for every executor, including those created by dynamic allocation,
* before the executor starts running any tasks.
*
* The specific api exposed to the end users still considered to be very unstable. We will
* hopefully be able to keep compatibility by providing default implementations for any methods
* added, but make no guarantees this will always be possible across all Spark releases.
*
* Spark does nothing to verify the plugin is doing legitimate things, or to manage the resources
* it uses. A plugin acquires the same privileges as the user running the task. A bad plugin
* could also interfere with task execution and make the executor fail in unexpected ways.",A plugin which can be automatically instantiated within each Spark executor.,"Users can specify plugins which should be created with the ""spark.executor.plugins"" configuration. An instance of each plugin will be created for every executor, including those created by dynamic allocation, before the executor starts running any tasks.",,,,,,,,,,,,,,,"* The specific api exposed to the end users still considered to be very unstable. We will
* hopefully be able to keep compatibility by providing default implementations for any methods
* added, but make no guarantees this will always be possible across all Spark releases.
* Spark does nothing to verify the plugin is doing legitimate things, or to manage the resources
* it uses. A plugin acquires the same privileges as the user running the task. A bad plugin
* could also interfere with task execution and make the executor fail in unexpected ways.",,,,,,
2,FlatMapFunction.java,* A function that returns zero or more output records from each input record.,* A function that returns zero or more output records from each input record.,,,,,,,,,,,,,,,,,,,,,,
2,JavaRecord.java,Java Bean class to be used with the example JavaSqlNetworkWordCount.,,,,,Java Bean class to be used with the example JavaSqlNetworkWordCount.,,,,,,,,,,,,,,,,,,
2,JavaStreamingTestExample.java,"* Perform streaming testing using Welch's 2-sample t-test on a stream of data, where the data
 * stream arrives as text files in a directory. Stops when the two groups are statistically
 * significant (p-value < 0.05) or after a user-specified timeout in number of batches is exceeded.
 *
 * The rows of the text files must be in the form `Boolean, Double`. For example:
 *   false, -3.92
 *   true, 99.32
 *
 * Usage:
 *   JavaStreamingTestExample <dataDir> <batchDuration> <numBatchesTimeout>
 *
 * To run on your local machine using the directory `dataDir` with 5 seconds between each batch and
 * a timeout after 100 insignificant batches, call:
 *    $ bin/run-example mllib.JavaStreamingTestExample dataDir 5 100
 *
 * As you add text files to `dataDir` the significance test wil continually update every
 * `batchDuration` seconds until the test becomes significant (p-value < 0.05) or the number of
 * batches processed exceeds `numBatchesTimeout`.","* Perform streaming testing using Welch's 2-sample t-test on a stream of data, where the data
 * stream arrives as text files in a directory. Stops when the two groups are statistically
 * significant (p-value < 0.05) or after a user-specified timeout in number of batches is exceeded.","The rows of the text files must be in the form `Boolean, Double`. For example:
 *   false, -3.92
 *   true, 99.32",,,"Usage:
 *   JavaStreamingTestExample <dataDir> <batchDuration> <numBatchesTimeout>
 *
 * To run on your local machine using the directory `dataDir` with 5 seconds between each batch and
 * a timeout after 100 insignificant batches, call:
 *    $ bin/run-example mllib.JavaStreamingTestExample dataDir 5 100
 *
 * As you add text files to `dataDir` the significance test wil continually update every
 * `batchDuration` seconds until the test becomes significant (p-value < 0.05) or the number of
 * batches processed exceeds `numBatchesTimeout`.",,,,,,,,,,,,,,,,,,
2,KVStore.java,"* Abstraction for a local key/value store for storing app data.
 *
 * <p>
 * There are two main features provided by the implementations of this interface:
 * </p>
 *
 * <h3>Serialization</h3>
 *
 * <p>
 * If the underlying data store requires serialization, data will be serialized to and deserialized
 * using a {@link KVStoreSerializer}, which can be customized by the application. The serializer is
 * based on Jackson, so it supports all the Jackson annotations for controlling the serialization of
 * app-defined types.
 * </p>
 *
 * <p>
 * Data is also automatically compressed to save disk space.
 * </p>
 *
 * <h3>Automatic Key Management</h3>
 *
 * <p>
 * When using the built-in key management, the implementation will automatically create unique
 * keys for each type written to the store. Keys are based on the type name, and always start
 * with the ""+"" prefix character (so that it's easy to use both manual and automatic key
 * management APIs without conflicts).
 * </p>
 *
 * <p>
 * Another feature of automatic key management is indexing; by annotating fields or methods of
 * objects written to the store with {@link KVIndex}, indices are created to sort the data
 * by the values of those properties. This makes it possible to provide sorting without having
 * to load all instances of those types from the store.
 * </p>
 *
 * <p>
 * KVStore instances are thread-safe for both reads and writes.
 * </p>",* Abstraction for a local key/value store for storing app data.,"<p>
 * There are two main features provided by the implementations of this interface:
 * </p>
 *
 * <h3>Serialization</h3>
 *
 * <p>
 * If the underlying data store requires serialization, data will be serialized to and deserialized
 * using a {@link KVStoreSerializer}, which can be customized by the application. The serializer is
 * based on Jackson, so it supports all the Jackson annotations for controlling the serialization of
 * app-defined types.
 * </p>
 *
 * <p>
 * Data is also automatically compressed to save disk space.
 * </p>
 *
 * <h3>Automatic Key Management</h3>
 *
 * <p>
 * When using the built-in key management, the implementation will automatically create unique
 * keys for each type written to the store. Keys are based on the type name, and always start
 * with the ""+"" prefix character (so that it's easy to use both manual and automatic key
 * management APIs without conflicts).
 * </p>
 *
 * <p>
 * Another feature of automatic key management is indexing; by annotating fields or methods of
 * objects written to the store with {@link KVIndex}, indices are created to sort the data
 * by the values of those properties. This makes it possible to provide sorting without having
 * to load all instances of those types from the store.
 * </p>
 *
 * <p>
 * KVStore instances are thread-safe for both reads and writes.
 * </p>",,,,,,,,,,,,"@link KVStoreSerializer
@link KVIndex",,,,,,,,,KVStore instances are thread-safe for both reads and writes.
2,LevelDB.java,"* Implementation of KVStore that uses LevelDB as the underlying data store.
 | Needs to be public for Jackson.",* Implementation of KVStore that uses LevelDB as the underlying data store.,,,,,,,,,,,,,,,,,,| Needs to be public for Jackson.,,,,
2,LocalDiskShuffleDataIO.java,"* Implementation of the {@link ShuffleDataIO} plugin system that replicates the local shuffle
 * storage and index file functionality that has historically been used from Spark 2.4 and earlier.","* Implementation of the {@link ShuffleDataIO} plugin system that replicates the local shuffle
 * storage and index file functionality that has historically been used from Spark 2.4 and earlier.",,,,,,,,,,,,,{@link ShuffleDataIO},,,that has historically been used from Spark 2.4 and earlier.,,,,,,
2,MessageWithHeader.java,"* A wrapper message that holds two separate pieces (a header and a body).
 *
 * The header must be a ByteBuf, while the body can be a ByteBuf or a FileRegion.",* A wrapper message that holds two separate pieces (a header and a body).,,,,,,,,,,,,,,,,,,"The header must be a ByteBuf, while the body can be a ByteBuf or a FileRegion.",,,,
2,RemoveBlocks.java,Request to remove a set of blocks.,Request to remove a set of blocks.,,,,,,,,,,,,,,,,,,,,,,
2,StreamHandle.java,"* Identifier for a fixed number of chunks to read from a stream created by an ""open blocks""
 * message. This is used by {@link org.apache.spark.network.shuffle.OneForOneBlockFetcher}.","Identifier for a fixed number of chunks to read from a stream created by an ""open blocks""
 * message",,,,,,,,,,,,,This is used by {@link org.apache.spark.network.shuffle.OneForOneBlockFetcher}.,,,,,,,,,
2,TBoolColumn.java,"The set of fields this struct contains, along with convenience methods for finding and manipulating them.","The set of fields this struct contains, along with convenience methods for finding and manipulating them.",,,,,,,,,,,,,,,,,,,,,,
2,UploadBlockStream.java,"* A request to Upload a block, which the destination should receive as a stream.
 *
 * The actual block data is not contained here.  It will be passed to the StreamCallbackWithID
 * that is returned from RpcHandler.receiveStream()","* A request to Upload a block, which the destination should receive as a stream.","* The actual block data is not contained here.  It will be passed to the StreamCallbackWithID
 * that is returned from RpcHandler.receiveStream()",,,,,,,,,,,,,,,* The actual block data is not contained here.,,,,,,
3,AbstractCPropertyTab.java,"* It is a parent for all standard property tabs
 * in new CDT model.
 *
 * Although it's enough for new tabs to implement
 * ICPropertyTab interface only, it would be better
 * to extend them from this class.
 *
 * In this case, we'll able to use:
 * - a lot of utility methods via ""provider"" link.
 *   In particular, it allows to get current project,
 *   configuration etc. See ICPropertyProvider interface.
 * - a standard way to create buttons (ins/edit/del etc)
 *   and to handle their events (see buttonPressed(int))
 * - several utility methods to create widgets in the
 *   uniform manner (setupLabel(), setupText() etc).
 * - means to handle control messages which are the main
 *   communication way for new CDT model pages and tabs.",It is a parent for all standard property tabs in new CDT model.,,"In this case, we'll able to use:
  - a lot of utility methods via ""provider"" link.
  In particular, it allows to get current project,
  configuration etc. See ICPropertyProvider interface.
  - a standard way to create buttons (ins/edit/del etc)
  and to handle their events (see buttonPressed(int))
  - several utility methods to create widgets in the
  uniform manner (setupLabel(), setupText() etc).
  - means to handle control messages which are the main
  communication way for new CDT model pages and tabs.",,"Although it's enough for new tabs to implement ICPropertyTab interface only, it would be better to extend them from this class.",,,,,,,,,,,,,,,,,,
3,AbstractTrialUndoActionProvider.java,"* Base class for parser action classes which support trial, undo and
 * final actions.
 |
         * Action for a null rule","Base class for parser action classes which support trial, undo and final actions.",Action for a null rule,,,,,,,,,,,,,,,,,,,,,
3,AddBreakpointRulerAction.java,* Ruler action to add breakpoint with a dialog properties.,Ruler action to add breakpoint with a dialog properties.,,,,,,,,,,,,,,,,,,,,,,
3,AddLineBreakpointActionDelegate.java,"* A delegate for the ""Add Line Breakpoint"" action.
 * <p>
 * Initially derived from AddFunctionBreakpointActionDelegate","A delegate for the ""Add Line Breakpoint"" action.",Initially derived from AddFunctionBreakpointActionDelegate,,,,,,,,,,,,,,,,,,,,,
3,AddMemoryBlocks.java,"* Adds memory blocks to the Memory view.
 *
 * <p>
 * CDT adapter logic will link us to a CMemoryBlockRetrievalExtension
 * if and only if the CDI backend support memory spaces. When this is the case,
 * the platform will call us to add a memory monitor to the Memory view. We
 * must put up a dialog, handle the user input, create the memory blocks
 * with default renderings and add them to the view.
 *
 * <p>
 * @since 3.2
 *
 | In order to avoid duplicating the addMemoryBlocks method--one| version for expressions, one for memory-space+address, we pass in a| an opaque parameter and let the logic within addMemoryBlocks| differentiate where needed via isinstanceof| Request object used to get the memory spaces",Adds memory blocks to the Memory view.,"<p> CDT adapter logic will link us to a CMemoryBlockRetrievalExtension if and only if the CDI backend support memory spaces. When this is the case, the platform will call us to add a memory monitor to the memory view. We must put up a dialog, handle the user input, create the memory blocks with default renderings and add them to the view. <p>",,@since 3.2,"In order to avoid duplicating the addMemoryBlocks method--one| version for expressions, one for memory-space+address, we pass in a| an opaque parameter and let the logic within addMemoryBlocks| differentiate where needed via isinstanceof| Request object used to get the memory spaces",,,,,,,,,,,,,,,,,,
3,AllTemplateEngineTests.java,"* This is a TestSuite, the TestCases created to test Template engine are
 * added to testsuite.
 * The test suite will execute all the Testcases added to the Suite.
 *
 * @since 4.0","This is a TestSuite, the TestCases created to test Template engine are added to testsuite.",The test suite will execute all the Testcases added to the Suite.,,@since 4.0,,,,,,,,,,,,,,,,,,,
3,AutoconfMacroParameterListValidator.java,"* This class provides the macro call parameter parsing for the Autoconf Editor hover
 * It is modified from the CDT class CParameterListValidator
 *
 * @author jjohnstn
 *",This class provides the macro call parameter parsing for the Autoconf Editor hover,It is modified from the CDT class CParameterListValidator,,,,,,,,,,,@author jjohnstn,,,,,,,,,,
3,AutotoolsProblemMarkerInfo.java,* @noextend This class is not intended to be subclassed by clients.,,,,,@noextend This class is not intended to be subclassed by clients,,,,,,,,,,,,,,,,,,
3,BindingClassifierTest.java,* Tests for {@link BindingClassifier}.,Tests for {@link BindingClassifier}.,,,,,,,,,,,,,{@link BindingClassifier},,,,,,,,,
3,C99BuildASTParserAction.java,"* Semantic actions called by the C99 parser to build an AST.
 *
 * @author Mike Kucera",Semantic actions called by the C99 parser to build an AST.,,,,,,,,,,,,@author Mike Kucera,,,,,,,,,,
3,CConfigurationDescriptionCache.java,"* CConfigurationDescriptionCache is a proxy class for serialization of configuration description data.
 *
 * An inspection of the scenario where user changes project properties and saves it yields
 * following sequence of events:
 * <ol>
 * <li> Initialization:
 *   <ul>
 *   <li> After eclipse started a project is being opened. A new CConfigurationDescriptionCache is created
 *        with CConfigurationDescriptionCache(ICStorageElement storage, CProjectDescription parent) constructor.
 *   <li> Any clients needed ICConfigurationDescription get CConfigurationDescription using constructor
 *        CConfigurationDescription(CConfigurationData data, String buildSystemId, ICDataProxyContainer cr)
 *        where the CConfigurationDescriptionCache is passed as data. The reference to cache is kept in field fCfgCache.
 *   <li> fCfgCache is used to getSpecSettings() CConfigurationSpecSettings, after that fCfgCache is set to null.
 *   </ul>
 * <li> User enters project properties/settings:
 *   <ul>
 *   <li> another CConfigurationDescription (settings configuration) created using the same constructor setting fCfgCache
 *        to the CConfigurationDescriptionCache.
 *   </ul>
 * <li> User changes settings (in the settings configuration CConfigurationDescription) and saves it:
 *   <ul>
 *   <li> new CConfigurationDescriptionCache is created from the CConfigurationDescription via constructor
 *        CConfigurationDescriptionCache(ICConfigurationDescription baseDescription, ...) where
 *        baseDescription is saved as fBaseDescription.
 *   <li> CConfigurationDescriptionCache.applyData(...) is used to persist the data. at that point
 *        reference fBaseDescription gets set to null.
 *   </ul>
 * </ol>
 *
 * @see ICConfigurationDescription
 * @see CConfigurationDescription
 * @see CProjectDescriptionEvent",CConfigurationDescriptionCache is a proxy class for serialization of configuration description data.,,,,"An inspection of the scenario where user changes project properties and saves it yields
  * following sequence of events:
  * <ol>
  * <li> Initialization:
  * <ul>
  * <li> After eclipse started a project is being opened. A new CConfigurationDescriptionCache is created
  * with CConfigurationDescriptionCache(ICStorageElement storage, CProjectDescription parent) constructor.
  * <li> Any clients needed ICConfigurationDescription get CConfigurationDescription using constructor
  * CConfigurationDescription(CConfigurationData data, String buildSystemId, ICDataProxyContainer cr)
  * where the CConfigurationDescriptionCache is passed as data. The reference to cache is kept in field fCfgCache.
  * <li> fCfgCache is used to getSpecSettings() CConfigurationSpecSettings, after that fCfgCache is set to null.
  * </ul>
  * <li> User enters project properties/settings:
  * <ul>
  * <li> another CConfigurationDescription (settings configuration) created using the same constructor setting fCfgCache
  * to the CConfigurationDescriptionCache.
  * </ul>
  * <li> User changes settings (in the settings configuration CConfigurationDescription) and saves it:
  * <ul>
  * <li> new CConfigurationDescriptionCache is created from the CConfigurationDescription via constructor
  * CConfigurationDescriptionCache(ICConfigurationDescription baseDescription, ...) where
  * baseDescription is saved as fBaseDescription.
  * <li> CConfigurationDescriptionCache.applyData(...) is used to persist the data. at that point
  * reference fBaseDescription gets set to null.
  * </ul>
  * </ol>
  *
  * @see ICConfigurationDescription
  * @see CConfigurationDescription
  * @see CProjectDescriptionEvent",,,,,,,,,"@see ICConfigurationDescription
  * @see CConfigurationDescription
  * @see CProjectDescriptionEvent",,,,,,,,,
3,CDebugModelPresentation.java,* @see IDebugModelPresentation,,,,,,,,,,,,,,@see IDebugModelPresentation,,,,,,,,,
3,CElementDelta.java,* @see ICElementDelta,,,,,,,,,,,,,,@see ICElementDelta,,,,,,,,,
3,ClangToolChain.java,"* The Clang toolchain. There's little different from the GCC toolchain other
 * than the toolchain type and name.
 *
 * @author dschaefer
 *",The Clang toolchain.,There's little different from the GCC toolchain other than the toolchain type and name.,,,,,,,,,,,@author dschaefer,,,,,,,,,,
3,CommonBuildTab.java,"* Common utilities for Core Build launch configuration tabs.
 *
 * @since 9.1",Common utilities for Core Build launch configuration tabs.,,,@since 9.1,,,,,,,,,,,,,,,,,,,
3,ContainerTabModel.java,"* @since 1.2.1
 * @author jjohnstn
 *",,,,@since 1.2.1,,,,,,,,,@author jjohnstn,,,,,,,,,,
3,CoreBuildGenericLaunchConfigProvider.java,"* Core launch configuration provider used by generic target types.
 *
 * @since 8.3",Core launch configuration provider used by generic target types.,,,@since 8.3,,,,,,,,,,,,,,,,,,,
3,CPPASTProblem.java,* C++-specific implementation allows actions to visit the problem.,C++-specific implementation allows actions to visit the problem.,,,,,,,,,,,,,,,,,,,,,,
3,CPPASTReferenceOperator.java,* Reference operator for declarators.,Reference operator for declarators,,,,,,,,,,,,,,,,,,,,,,
3,CPPDeferredFunction.java,"* Represents a reference to a (member) function (instance), which cannot be resolved because
 * an argument depends on a template parameter. A compiler would resolve it during instantiation.","Represents a reference to a (member) function (instance), which cannot be resolved because an argument depends on a template parameter.",A compiler would resolve it during instantiation.,,,,,,,,,,,,,,,,,,,,,
3,CPPImplicitVariable.java,"* Represents a variable implicitly created in C++ code.
 * For example the initializer of a structured binding decomposition [dcl.struct.bind]:
 * <code>auto [first, second] = decomposed;</code>
 *
 * The <code>initializerEvaluation</code> has to be supplied.
 *",Represents a variable implicitly created in C++ code.,,,,"For example the initializer of a structured binding decomposition [dcl.struct.bind]:
  <code>auto [first, second] = decomposed;</code>
  
 The <code>initializerEvaluation</code> has to be supplied.",,,,,,,,,,,,,,,,,,
3,CPPTemplates.java,"* Collection of static methods to perform template instantiation, member specialization and
 * type instantiation.","Collection of static methods to perform template instantiation, member specialization and type instantiation.",,,,,,,,,,,,,,,,,,,,,,
3,CPropertyTester.java,* A property tester that determines if a file is an executable or a C/C++ project.,A property tester that determines if a file is an executable or a C/C++ project.,,,,,,,,,,,,,,,,,,,,,,
3,CUIPreferenceInitializer.java,"* This class implements the setting of the CUI initial preference store settings.
 *
 * @noextend This class is not intended to be subclassed by clients.",This class implements the setting of the CUI initial preference store settings.,,,,@noextend This class is not intended to be subclassed by clients.,,,,,,,,,,,,,,,,,,
3,CWordFinder.java,"* This is a helper class for the text editor to be able to determine, given a
 * particular offset in a document, various candidates segments for things like
 * context help, proposals and hovering.","This is a helper class for the text editor to be able to determine, given a particular offset in a document, various candidates segments for things like context help, proposals and hovering.",,,,,,,,,,,,,,,,,,,,,,
3,DefaultEnvironmentContextInfo.java,"* The default implementation of the IContextInfo used by the Environment Variable Provider
 * Used to represent the Configuration, Project, Workspace and Eclipse environment contexts
 *
 * @since 3.0",The default implementation of the IContextInfo used by the Environment Variable Provider,,"Used to represent the Configuration, Project, Workspace and Eclipse environment contexts",@since 3.0,,,,,,,,,,,,,,,,,,,
3,DefaultFortranDependencyCalculator.java,"*
 *  This class implements the Dependency Manager and Output Name Provider interfaces
 *  for a very ""quick & dirty"" ifort tool-chain on Win32","This class implements the Dependency Manager and Output Name Provider interfaces for a very ""quick & dirty"" ifort tool-chain on Win32",,,,,,,,,,,,,,,,,,,,,,
3,DisplayDsfExecutor.java,"* DSF executor which uses the display thread to run the submitted runnables
 * and callables.  The implementation is based on the default DSF executor
 * which still creates its own thread.  However this thread blocks when running
 * each executable in the display thread.
 *
 * @since 1.0",DSF executor which uses the display thread to run the submitted runnables and callables.,The implementation is based on the default DSF executor which still creates its own thread. However this thread blocks when running each executable in the display thread.,,@since 1.0,,,,,,,,,,,,,,,,,,,
3,DocCommentOwnerBlock.java,"* Project property page for setting documentation comment owner.
 * <em>This class is not intended for use outside of CDT</em>
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.",Project property page for setting documentation comment owner.,,,,"<em>This class is not intended for use outside of CDT</em>
 
 
  @noextend This class is not intended to be subclassed by clients. 
 @noinstantiate This class is not intended to be instantiated by clients.",,,,,,,,,,,,,,,,,,
3,DOMGCCParserExtensionTestSuite.java,"*
 * @author jcamelon
 *",,,,,,,,,,,,,@author jcamelon,,,,,,,,,,
3,DOMParserTestSuite.java,* @author jcamelon,,,,,,,,,,,,,@author jcamelon,,,,,,,,,,
3,DsfDebugUITools.java,* @since 1.1,,,,@since 1.1,,,,,,,,,,,,,,,,,,,
3,DummyPage.java,This class is just to replace a category reference in org.eclipse.cdt.ui that| we exclude because we do not bring in the org.eclipse.cdt.managedbuild.ui plug-in.,This class is just to replace a category reference in org.eclipse.cdt.ui,,that| we exclude because we do not bring in the org.eclipse.cdt.managedbuild.ui plug-in.,,,,,,,,,,,,,,,,,,,,
3,ElementNumberFormatsContribution.java,"* Dynamic menu contribution that shows available number formats in the current
 * selection of the view.
 *
 * @since 2.2",Dynamic menu contribution that shows available number formats in the current selection of the view.,,,@since 2.2,,,,,,,,,,,,,,,,,,,
3,FindStdLibPath.java,"* The purpose is to find a path where stdc++ library is located.
 * Currently the shell script is only for Linux.
 *
 * TODO: It might not be able to execute scripts therefore place the command into a variable.",,,The purpose is to find a path where stdc++ library is located.,,Currently the shell script is only for Linux.,,TODO: It might not be able to execute scripts therefore place the command into a variable.,,,,,,,,,,,,,,,,
3,FoldingConfigurationBlock.java,"* Configures C Editor folding preferences.
 *
 * @since 3.0",Configures C Editor folding preferences,,,@since 3.0,,,,,,,,,,,,,,,,,,,
3,FormattedValueTests.java,"* Tests to verify the operation of FormattedValuesVMUtil
 * @since 2.2
 |
	 * helper class that stores some element paths and nodes using a certain format",Tests to verify the operation of FormattedValuesVMUtil,helper class that stores some element paths and nodes using a certain forma,,@since 2.2,,,,,,,,,,,,,,,,,,,
3,GCCKeywords.java,"* @noextend This interface is not intended to be extended by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.",,,,,"@noextend This interface is not intended to be extended by clients.
  @noinstantiate This class is not intended to be instantiated by clients.",,,,,,,,,,,,,,,,,,
3,GDBControl_7_12.java,"* Need a new FinalLaunchSequence for GDB 7.12
 * @since 5.2",,,,"Need a new FinalLaunchSequence for GDB 7.12
 @since 5.2",,,,,,,,,,,,,,,,,,,
3,GdbExpressionVMProvider.java,"* A specialization of ExpressionVMProvider that uses a GDB-specific variable VM
 * node. To understand why this is necessary, see GdbVariableVMNode.",A specialization of ExpressionVMProvider,that uses a GDB-specific variable VM node,,,,,,,,,,,,"To understand why this is necessary, see GdbVariableVMNode",,,,,,,,,
3,GDBSourceLookup.java,"* Default implementation of {@link IGDBSourceLookup}
 *
 * @since 5.0",Default implementation of {@link IGDBSourceLookup},,,@since 5.0,,,,,,,,,,,,,,,,,,,
3,GnuMakefileGenerator.java,"* This is a specialized makefile generator that takes advantage of the
 * extensions present in Gnu Make.
 *
 * @since 1.2
 * @noinstantiate This class is not intended to be instantiated by clients.
 | String constants for makefile contents and messages|private static final String AUTO_DEP = COMMENT + "".autodeps"";        //$NON-NLS-1$|private static final String MESSAGE = ""ManagedMakeBuilder.message"";        //$NON-NLS-1$|private static final String BUILD_ERROR = MESSAGE + "".error"";        //$NON-NLS-1$|private static final String DEP_INCL = COMMENT + "".module.dep.includes"";        //$NON-NLS-1$|private static final String MOD_INCL = COMMENT + "".module.make.includes"";        //$NON-NLS-1$|        private ITool[] buildTools;|        private boolean[] buildToolsUsed;|        private IManagedBuildInfo info;|        private Set outputExtensionsSet;|=== Maps of macro names (String) to values (List)| Dependency file variables|        private Vector dependencyMakefiles;                //  IPath's - relative to the top build directory or absolute|***********************************************************************
         *   IManagedBuilderMakefileGenerator   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   M A K E F I L E S   P O P U L A T I O N   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   M A I N (makefile)   M A K E F I L E   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   S O U R C E S (sources.mk)   M A K E F I L E   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   F R A G M E N T (subdir.mk)   M A K E F I L E   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   M A K E F I L E   G E N E R A T I O N   C O M M O N   M E T H O D S
         ***********************************************************************|
         * Adds a macro addition prefix to a map of macro names to entries.
         * Entry prefixes look like:
         *         C_SRCS += \
         *         ${addprefix $(ROOT)/, \
         |***********************************************************************
         *   R E S O U R C E   V I S I T O R   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   O T H E R   M E T H O D S
         ***********************************************************************|
         * Process a String denoting a filepath in a way compatible for GNU Make rules, handling
         * windows drive letters and whitespace appropriately.
         * <p><p>
         * The context these paths appear in is on the right hand side of a rule header. i.e.
         * <p><p>
         * target : dep1 dep2 dep3
         * <p>
         * @param path the String denoting the path to process
         * @throws NullPointerException is path is null
         * @return a suitable Make rule compatible path
         |
         * This class walks the delta supplied by the build system to determine
         * what resources have been changed. The logic is very simple. If a
         * buildable resource (non-header) has been added or removed, the directories
         * in which they are located are ""dirty"" so the makefile fragments for them
         * have to be regenerated.
         * <p>
         * The actual dependencies are recalculated as a result of the build step
         * itself. We are relying on make to do the right things when confronted
         * with a dependency on a moved header file. That said, make will treat
         * the missing header file in a dependency rule as a target it has to build
         * unless told otherwise. These dummy targets are added to the makefile
         * to avoid a missing target error.
         | String constants for makefile contents and messages|private static final String AUTO_DEP = COMMENT + "".autodeps"";        //$NON-NLS-1$|private static final String MESSAGE = ""ManagedMakeBuilder.message"";        //$NON-NLS-1$|private static final String BUILD_ERROR = MESSAGE + "".error"";        //$NON-NLS-1$|private static final String DEP_INCL = COMMENT + "".module.dep.includes"";        //$NON-NLS-1$|private static final String MOD_INCL = COMMENT + "".module.make.includes"";        //$NON-NLS-1$|        private ITool[] buildTools;|        private boolean[] buildToolsUsed;|        private IManagedBuildInfo info;|        private Set outputExtensionsSet;|=== Maps of macro names (String) to values (List)| Dependency file variables|        private Vector dependencyMakefiles;                //  IPath's - relative to the top build directory or absolute|***********************************************************************
         *   IManagedBuilderMakefileGenerator   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   M A K E F I L E S   P O P U L A T I O N   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   M A I N (makefile)   M A K E F I L E   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   S O U R C E S (sources.mk)   M A K E F I L E   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   F R A G M E N T (subdir.mk)   M A K E F I L E   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   M A K E F I L E   G E N E R A T I O N   C O M M O N   M E T H O D S
         ***********************************************************************|
         * Adds a macro addition prefix to a map of macro names to entries.
         * Entry prefixes look like:
         *         C_SRCS += \
         *         ${addprefix $(ROOT)/, \
         |***********************************************************************
         *   R E S O U R C E   V I S I T O R   M E T H O D S
         ***********************************************************************|***********************************************************************
         *   O T H E R   M E T H O D S
         ***********************************************************************|
         * Process a String denoting a filepath in a way compatible for GNU Make rules, handling
         * windows drive letters and whitespace appropriately.
         * <p><p>
         * The context these paths appear in is on the right hand side of a rule header. i.e.
         * <p><p>
         * target : dep1 dep2 dep3
         * <p>
         * @param path the String denoting the path to process
         * @throws NullPointerException is path is null
         * @return a suitable Make rule compatible path
         |
         * This class is used to recursively walk the project and determine which
         * modules contribute buildable source files.",This is a specialized makefile generator that takes advantage of the extensions present in Gnu Make.,,,@since 1.2,"@noinstantiate This class is not intended to be instantiated by clients.
  | String constants for makefile contents and messages|private static final String AUTO_DEP = COMMENT + "".autodeps""; //$NON-NLS-1$|private static final String MESSAGE = ""ManagedMakeBuilder.message""; //$NON-NLS-1$|private static final String BUILD_ERROR = MESSAGE + "".error""; //$NON-NLS-1$|private static final String DEP_INCL = COMMENT + "".module.dep.includes""; //$NON-NLS-1$|private static final String MOD_INCL = COMMENT + "".module.make.includes""; //$NON-NLS-1$| private ITool[] buildTools;| private boolean[] buildToolsUsed;| private IManagedBuildInfo info;| private Set outputExtensionsSet;|=== Maps of macro names (String) to values (List)| Dependency file variables| private Vector dependencyMakefiles; // IPath's - relative to the top build directory or absolute|***********************************************************************
  * IManagedBuilderMakefileGenerator M E T H O D S
  ***********************************************************************|***********************************************************************
  * M A K E F I L E S P O P U L A T I O N M E T H O D S
  ***********************************************************************|***********************************************************************
  * M A I N (makefile) M A K E F I L E M E T H O D S
  ***********************************************************************|***********************************************************************
  * S O U R C E S (sources.mk) M A K E F I L E M E T H O D S
  ***********************************************************************|***********************************************************************
  * F R A G M E N T (subdir.mk) M A K E F I L E M E T H O D S
  ***********************************************************************|***********************************************************************
  * M A K E F I L E G E N E R A T I O N C O M M O N M E T H O D S
  ***********************************************************************|
  * Adds a macro addition prefix to a map of macro names to entries.
  * Entry prefixes look like:
  * C_SRCS += \
  * ${addprefix $(ROOT)/, \
  |***********************************************************************
  * R E S O U R C E V I S I T O R M E T H O D S
  ***********************************************************************|***********************************************************************
  * O T H E R M E T H O D S
  ***********************************************************************|
  * Process a String denoting a filepath in a way compatible for GNU Make rules, handling
  * windows drive letters and whitespace appropriately.
  * <p><p>
  * The context these paths appear in is on the right hand side of a rule header. i.e.
  * <p><p>
  * target : dep1 dep2 dep3
  * <p>
  * @param path the String denoting the path to process
  * @throws NullPointerException is path is null
  * @return a suitable Make rule compatible path
  |
  * This class walks the delta supplied by the build system to determine
  * what resources have been changed. The logic is very simple. If a
  * buildable resource (non-header) has been added or removed, the directories
  * in which they are located are ""dirty"" so the makefile fragments for them
  * have to be regenerated.
  * <p>
  * The actual dependencies are recalculated as a result of the build step
  * itself. We are relying on make to do the right things when confronted
  * with a dependency on a moved header file. That said, make will treat
  * the missing header file in a dependency rule as a target it has to build
  * unless told otherwise. These dummy targets are added to the makefile
  * to avoid a missing target error.
  | String constants for makefile contents and messages|private static final String AUTO_DEP = COMMENT + "".autodeps""; //$NON-NLS-1$|private static final String MESSAGE = ""ManagedMakeBuilder.message""; //$NON-NLS-1$|private static final String BUILD_ERROR = MESSAGE + "".error""; //$NON-NLS-1$|private static final String DEP_INCL = COMMENT + "".module.dep.includes""; //$NON-NLS-1$|private static final String MOD_INCL = COMMENT + "".module.make.includes""; //$NON-NLS-1$| private ITool[] buildTools;| private boolean[] buildToolsUsed;| private IManagedBuildInfo info;| private Set outputExtensionsSet;|=== Maps of macro names (String) to values (List)| Dependency file variables| private Vector dependencyMakefiles; // IPath's - relative to the top build directory or absolute|***********************************************************************
  * IManagedBuilderMakefileGenerator M E T H O D S
  ***********************************************************************|***********************************************************************
  * M A K E F I L E S P O P U L A T I O N M E T H O D S
  ***********************************************************************|***********************************************************************
  * M A I N (makefile) M A K E F I L E M E T H O D S
  ***********************************************************************|***********************************************************************
  * S O U R C E S (sources.mk) M A K E F I L E M E T H O D S
  ***********************************************************************|***********************************************************************
  * F R A G M E N T (subdir.mk) M A K E F I L E M E T H O D S
  ***********************************************************************|***********************************************************************
  * M A K E F I L E G E N E R A T I O N C O M M O N M E T H O D S
  ***********************************************************************|
  * Adds a macro addition prefix to a map of macro names to entries.
  * Entry prefixes look like:
  * C_SRCS += \
  * ${addprefix $(ROOT)/, \
  |***********************************************************************
  * R E S O U R C E V I S I T O R M E T H O D S
  ***********************************************************************|***********************************************************************
  * O T H E R M E T H O D S
  ***********************************************************************|
  * Process a String denoting a filepath in a way compatible for GNU Make rules, handling
  * windows drive letters and whitespace appropriately.
  * <p><p>
  * The context these paths appear in is on the right hand side of a rule header. i.e.
  * <p><p>
  * target : dep1 dep2 dep3
  * <p>
  * @param path the String denoting the path to process
  * @throws NullPointerException is path is null
  * @return a suitable Make rule compatible path
  |
  * This class is used to recursively walk the project and determine which
  * modules contribute buildable source files.",,,,,,,,,,,,,,,,,,
3,GroupDebugContextsCommandHandler.java,"* Command handler to trigger grouping of debug contexts operation.
 *
 * @since 7.1",Command handler to trigger grouping of debug contexts operation.,,,@since 7.1,,,,,,,,,,,,,,,,,,,
3,IBHistoryAction.java,* Action used for the include browser forward / backward buttons,Action used for the include browser forward / backward buttons,,,,,,,,,,,,,,,,,,,,,,
3,IBuildObject.java,"* @noextend This class is not intended to be subclassed by clients.
 * @noimplement This interface is not intended to be implemented by clients.",,,,,"@noextend This class is not intended to be subclassed by clients 
 @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,ICLanguageSettingPathEntry.java,"* Representation in the project model of language settings entries of
 * path-kind such as include paths (-I) or include files and others.
 * See interface hierarchy for more specifics.",Representation in the project model of language settings entries of path-kind such as include paths (-I) or include files and others.,,,,,,,,,,,,,See interface hierarchy for more specifics.,,,,,,,,,
3,ICLibraryFileEntry.java,"* Representation in the project model of language settings entries
 * such as library file (-l gcc option). See {@link ICSettingEntry#LIBRARY_FILE}.",Representation in the project model of language settings entries such as library file (-l gcc option).,,,,,,,,,,,,,See {@link ICSettingEntry#LIBRARY_FILE}.,,,,,,,,,
3,ICodeReaderFactory.java,"* This is the interface that an AST Service uses to delegate the construction
 * of a CodeReader.
 *
 * @author jcamelon
 * @deprecated replaced by {@link IncludeFileContentProvider}
 * @noreference This interface is not intended to be referenced by clients.",This is the interface that an AST Service uses to delegate the construction of a CodeReader.,,,@deprecated replaced by {@link IncludeFileContentProvider},@noreference This interface is not intended to be referenced by clients.,,,,,,,,@author jcamelon,{@link IncludeFileContentProvider},,,,,,,,,
3,ICPointerType.java,"* @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.",,,,,"@noextend This class is not intended to be subclassed by clients 
 @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,ICPPAliasTemplateInstance.java,"* Represents an instance of an alias template (14.5.7).
 * @since 5.5
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.",Represents an instance of an alias template (14.5.7).,,,@since 5.5,"@noextend This interface is not intended to be extended by clients. 
  @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,ICPPASTLinkageSpecification.java,"* This interface represents a linkage specification. e.g. extern ""C"" { ... }
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.","This interface represents a linkage specification. e.g. extern ""C"" { ... }",,,,"@noextend This interface is not intended to be extended by clients.
  @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,ICPPASTVirtSpecifier.java,"* A virt-specifier at the end of a function declaration.
 * There are two virt-specifiers, 'final' and 'override'.
 *
 * @noimplement This interface is not intended to be implemented by clients.
 * @noextend This interface is not intended to be extended by clients.
 * @since 5.7",A virt-specifier at the end of a function declaration.,"There are two virt-specifiers, 'final' and 'override'.",,@since 5.7,"@noimplement This interface is not intended to be implemented by clients.
  @noextend This interface is not intended to be extended by clients.",,,,,,,,,,,,,,,,,,
3,ICPPPointerToMemberType.java,"* @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.",,,,,"@noextend This class is not intended to be subclassed by clients 
 @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,ICSourceNotFoundDescription.java,"* This interface is used to provide a description of a debug element,
 * usually a stack frame, when no source can be located for it.
 * An instance is usually provided by an adapter.","This interface is used to provide a description of a debug element, usually a stack frame, when no source can be located for it.",An instance is usually provided by an adapter.,,,,,,,,,,,,,,,,,,,,,
3,IDsfDebugServicesFactory.java,"* A factory to create DSF services.  Using this interface allows
 * to easily have different service implementation for different backends.
 *
 * @since 1.1",A factory to create DSF services.,,Using this interface allows to easily have different service implementation for different backends.,@since 1.1,,,,,,,,,,,,,,,,,,,
3,IGDBTraceControl.java,"* The TraceControl service provides access to the debugger Tracing functionality.
 * It is used to do such things as start and stop tracing.
 *
 * @since 3.0
 |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * Marker interface for a context on which trace operations can be performed
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * Specific Trace Record context.  It describes tracing data.
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * This is the model data interface that corresponds to ITraceRecordDMContext.
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * Trace events
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////| @since 4.4",The TraceControl service provides access to the debugger Tracing functionality.,"|///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * Marker interface for a context on which trace operations can be performed
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * Specific Trace Record context.  It describes tracing data.
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * This is the model data interface that corresponds to ITraceRecordDMContext.
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|
         * Trace events
         |///////////////////////////////////////////////| GDB specific part|///////////////////////////////////////////////|",It is used to do such things as start and stop tracing.,"@since 3.0
@since 4.4",,,,,,,,,,,,,,,,,,,
3,IInclude.java,"* Represents an include declaration in a C translation unit.
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.",Represents an include declaration in a C translation unit,,,,"@noextend This interface is not intended to be extended by clients.
  @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,IJSSwitchCase.java,"* A JavaScript switch case from the <a href=""https://github.com/estree/estree/blob/master/spec.md#switchcase"">ESTree
 * Specification</a>","A JavaScript switch case from the <a href=""https://github.com/estree/estree/blob/master/spec.md#switchcase"">ESTree Specification</a>",,,,,,,,,,,,,,,,,,,,,,
3,IMacroEntry.java,"* @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.",,,,,"@noextend This interface is not intended to be extended by clients. 
  @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,IMIBackend.java,"* Service for controlling the back end process.
 * @since 1.1
 |
	 * Event indicating that the back end process has started or terminated.",Service for controlling the back end process.,Event indicating that the back end process has started or terminated,,@since 1.1,,,,,,,,,,,,,,,,,,,
3,IMSASTDeclspecList.java,"* Represents a Microsoft attribute specifier, introduced by __declspec.
 *
 * @since 6.6
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.","Represents a Microsoft attribute specifier, introduced by __declspec.",,,@since 6.6,"@noextend This interface is not intended to be extended by clients. 
 @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,INodeFactory.java,"* Control Flow Graph Node factory
 *
 * @noextend This interface is not intended to be extended by clients.",Control Flow Graph Node factory,,,,@noextend This interface is not intended to be extended by clients.,,,,,,,,,,,,,,,,,,
3,IPropertyChangeParticipant.java,"* Implemented by classes which can optionally participate in property
 * change events, and report whether an event would affect them without
 * adapting to it.
 * <p>
 * Clients may implement this interface.
 * </p>
 *
 * @since 5.0","Implemented by classes which can optionally participate in property change events, and report whether an event would affect them without adapting to it.",,,@since 5.0,"<p>
  Clients may implement this interface.
  </p>",,,,,,,,,,,,,,,,,,
3,IRefreshAllTarget.java,"* A retargetable action target which allows a debugger to refresh all of its
 * active views with fresh data from the debug target.
 *
 * @since 1.1",A retargetable action target which allows a debugger to refresh all of its active views with fresh data from the debug target.,,,@since 1.1,,,,,,,,,,,,,,,,,,,
3,IRegisters2.java,"* Service extension of IRegisters to manage user defined Register Groups
 * @since 2.6",Service extension of IRegisters to manage user defined Register Groups,,,@since 2.6,,,,,,,,,,,,,,,,,,,
3,IScannerInfoConsoleParser.java,"* Parses a line of command output looking for scanner info entries.
 *
 * @author vhirsl",Parses a line of command output looking for scanner info entries.,,,,,,,,,,,,@author vhirsl,,,,,,,,,,
3,ITestItem.java,"* Base interface to the structural item of test hierarchy (test suite or test
 * case).
 *
 * @noextend This interface is not intended to be extended by clients.
 * @noimplement This interface is not intended to be implemented by clients.
 |
         * Represents status of the test item.
         *
         * @note Order of values is significant (cause enumeration values comparison
         * is necessary)",Represents status of the test item,"Base interface to the structural item of test hierarchy (test suite or test case).
@note Order of values is significant (cause enumeration values comparison is necessary)",,,"@noextend This interface is not intended to be extended by clients.
  @noimplement This interface is not intended to be implemented by clients.",,,,,,,,,,,,,,,,,,
3,IViewInMemory.java,"* Provides the ability to view a variable in the memory view.
 * @since 7.4",Provides the ability to view a variable in the memory view.,,,@since 7.4,,,,,,,,,,,,,,,,,,,
3,LanguageSettingsProvidersSerializer.java,"* Helper class handling serialization and notifications for language settings entries {@link ICLanguageSettingEntry}.
 | those are for readability of xml only|
	 * Dummy class to represent ill-defined provider.
	 | those are for readability of xml only|
	 * language settings provider listener-cfgDescription association
	 | those are for readability of xml only|
	 * Wrapper for workspace providers to ensure level of indirection. That way workspace providers
	 * can be changed/replaced without notifying/changing the configurations which keep the providers
	 * in their lists.
	 | those are for readability of xml only|
	 * Language Settings Change Event implementation.","Helper class handling serialization and notifications for language settings entries {@link ICLanguageSettingEntry}. | those are for readability of xml only|
 Dummy class to represent ill-defined provider. | those are for readability of xml only|
 language settings provider listener-cfgDescription association | those are for readability of xml only|
  Wrapper for workspace providers to ensure level of indirection. That way workspace providers can be changed/replaced without notifying/changing the configurations which keep the providers in their lists | those are for readability of xml only|
 Language Settings Change Event implementation.",,,,,,,,,,,,,,,,,,,,,,
3,MachOBinaryParserPage.java,* @noextend This class is not intended to be subclassed by clients.,,,,,@noextend This class is not intended to be subclassed by clients.,,,,,,,,,,,,,,,,,,
3,ManageConfigRunner.java,* @noextend This class is not intended to be subclassed by clients.,,,,,@noextend This class is not intended to be subclassed by clients,,,,,,,,,,,,,,,,,,
3,MIAsyncErrorProcessor.java,"* In some cases GDB reports 'exec-*' commands failure after the '^running' event is fired.
 * For instance, if an invalid breakpoint is set no error is reported but the consequent
 * 'exec-continue' command fails.
 *
 * 36-exec-continue --thread 1
 * 36^running
 * *running,thread-id=""all""
 * (gdb)
 * &""Warning:\n""
 * &""Cannot insert breakpoint 2.\n""
 * &""Cannot access memory at address 0x0\n""
 * &""\n""
 * 36^error,msg=""Command aborted.""
 * (gdb)
 *
 * This class handles these type of situations by firing MIErrorEvent when such an error appears.
 *
 * @since 5.3",This class handles these type of situations by firing MIErrorEvent when such an error appears.,,"In some cases GDB reports 'exec-*' commands failure after the '^running' event is fired. For instance, if an invalid breakpoint is set no error is reported but the consequent 'exec-continue' command fails.",@since 5.3,,,,,,,,,,,,"36-exec-continue --thread 1
  36^running
  *running,thread-id=""all""
  (gdb)
  &""Warning:\n""
  &""Cannot insert breakpoint 2.\n""
  &""Cannot access memory at address 0x0\n""
  &""\n""
  36^error,msg=""Command aborted."" 
 (gdb)",,,,,,,
3,MIBreakpointsSynchronizer.java,"* Provides synchronization between breakpoints set from outside of the Eclipse
 * breakpoint framework (GDB console, trace files, etc.) and the Breakpoints
 * view.
 * <p>
 * Bug 530377: Prior to fixing 530377, events that arrived from GDB faster than
 * DSF/Eclipse fully processed them could cause the state within the
 * synchronizer and manager to become corrupt. This would happen because it
 * takes multiple DSF stages to complete handling 1 event, so the handling of
 * the next event would become intermingled. That violated many assumptions in
 * the code that the code run in the respective RequestMonitor would be on the
 * same state. This is an unsuprising assumption based on the general idea of
 * DSF as not requiring the normal synchronization primitives as everything is
 * single-threaded. To resolve this problem, there is some code
 * {@link #queueEvent(BreakpointEvent)} that ensures each event is fully
 * processed before the next event starts processing.
 *
 * @since 4.2
 | Catchpoint expressions| GDB tracepoint commands|
	 * Class to store an event that needs to be performed by the synchronizer
	 *
	 * @see MIBreakpointsSynchronizer class documentation for design comments","Provides synchronization between breakpoints set from outside of the Eclipse breakpoint framework (GDB console, trace files, etc.) and the Breakpoints view.","| Catchpoint expressions| GDB tracepoint commands|
  Class to store an event that needs to be performed by the synchronizer
 @see MIBreakpointsSynchronizer class documentation for design comment",,@since 4.2,,,,,,,,,,"* <p>
  * Bug 530377: Prior to fixing 530377, events that arrived from GDB faster than
  * DSF/Eclipse fully processed them could cause the state within the
  * synchronizer and manager to become corrupt. This would happen because it
  * takes multiple DSF stages to complete handling 1 event, so the handling of
  * the next event would become intermingled. That violated many assumptions in
  * the code that the code run in the respective RequestMonitor would be on the
  * same state. This is an unsuprising assumption based on the general idea of
  * DSF as not requiring the normal synchronization primitives as everything is
  * single-threaded. To resolve this problem, there is some code
  * {@link #queueEvent(BreakpointEvent)} that ensures each event is fully
  * processed before the next event starts processing.",,,,,,,,,
3,MIDataListRegisterNames.java,"*
 *     -data-list-register-names [ ( REGNO )+ ]
 *
 *   Show a list of register names for the current target.  If no
 * arguments are given, it shows a list of the names of all the registers.
 * If integer numbers are given as arguments, it will print a list of the
 * names of the registers corresponding to the arguments.  To ensure
 * consistency between a register name and its number, the output list may
 * include empty register names.
 *",Show a list of register names for the current target.,"If no arguments are given, it shows a list of the names of all the registers. 
 If integer numbers are given as arguments, it will print a list of the names of the registers corresponding to the arguments.
 To ensure consistency between a register name and its number, the output list may include empty register names.",,,-data-list-register-names [ ( REGNO )+ ],,,,,,,,,,,,,,,,,,
3,MIEnvironmentDirectory.java,"*
 *      -environment-directory [-r] PATHDIR
 *
 *   Add directory PATHDIR to beginning of search path for source files.
 *   -r will first reset the path to its default
 *",Add directory PATHDIR to beginning of search path for source files.,,,,"-environment-directory [-r] PATHDIR
 
 
 -r will first reset the path to its default",,,,,,,,,,,,,,,,,,
3,MIReverseDebugEnabler.java,"*
 * This class permits to enable, disable or toggle the reverse
 * debugging mode.
 *
 * @since 4.2","This class permits to enable, disable or toggle the reverse debugging mode.",,,@since 4.2,,,,,,,,,,,,,,,,,,,
3,MIStack.java,"* Same as with frame objects, this is a base class for the IVariableDMData object that uses an MIArg object to
         * provide the data.  Sub-classes must supply the MIArg object.
         |
         * Class to track stack depth and debug frames for our internal cache
         |
           A Map of threadId -> FramesCacheInfo, that can be cleared based on a context.
           We use this cache for a few reasons:
           <br>
           First, two commands such as
           <pre>
           -stack-info-depth 11
           -stack-info-depth 2
           </pre>
           would both be sent to GDB because the command cache sees them as different.
           This cache allows us to know that if we already asked for a stack depth
           we can potentially re-use the answer.
           <br>
           The same concept is applicable for the -stack-list-frames command with different limits.
           Also, the stack depth can be deduced from the frames list, so we don't need to ask gdb for it again.
           <p>
           The second reason is that gdb is unreliable when it comes to returning frames. The MI protocol only allows to reply
           with data or with error. When gdb is unwinding sometimes it gets both, and while the console CLI protocol has no
           problem with that, for MI, gdb replies randomly, sometimes with data, sometimes with error. If we cache the valid data
           it will eliminate the issue with invalid data on subsequent invocations. We don't cache errors.
         |
         * Base class for the IFrameDMData object that uses an MIFrame object to
         * provide the data.  Sub-classes must provide the MIFrame object","Same as with frame objects, this is a base class for the IVariableDMData object that uses an MIArg object to provide the data
 
 Base class for the IFrameDMData object that uses an MIFrame object to provide the data.",Class to track stack depth and debug frames for our internal cach,"A Map of threadId -> FramesCacheInfo, that can be cleared based on a context.
  We use this cache for a few reasons:
  <br>
  First, two commands such as
  <pre>
  -stack-info-depth 11
  -stack-info-depth 2
  </pre>
  would both be sent to GDB because the command cache sees them as different.
  This cache allows us to know that if we already asked for a stack depth
  we can potentially re-use the answer.
  <br>
  The same concept is applicable for the -stack-list-frames command with different limits.
  Also, the stack depth can be deduced from the frames list, so we don't need to ask gdb for it again.
  <p>
  The second reason is that gdb is unreliable when it comes to returning frames. The MI protocol only allows to reply
  with data or with error. When gdb is unwinding sometimes it gets both, and while the console CLI protocol has no
  problem with that, for MI, gdb replies randomly, sometimes with data, sometimes with error. If we cache the valid data
  it will eliminate the issue with invalid data on subsequent invocations. We don't cache errors.
  |
  * Base class for the IFrameDMData object that uses an MIFrame object to
  * provide the data. Sub-classes must provide the MIFrame object",,Sub-classes must supply the MIArg object,,,,,,,,,,,,,,Sub-classes must supply the MIArg object.Sub-classes must provide the MIFrame object,,,"* Base class for the IFrameDMData object that uses an MIFrame object to
         * provide the data.  Sub-classes must provide the MIFrame object",
3,MIThreadCreatedEvent.java,"* This can only be detected by gdb/mi after GDB 6.8.
 *",,,,This can only be detected by gdb/mi after GDB 6.8.,,,,,,,,,,,,,,,,,,,
3,MIThreadGroupAddedEvent.java,"* =thread-group-added,id=""i1""
 *
 * This can only be detected by gdb/mi with GDB >= 7.2.
 * @since 5.1",,"=thread-group-added,id=""i1""",,"This can only be detected by gdb/mi with GDB >= 7.2.
  @since 5.1",,,,,,,,,,,,"=thread-group-added,id=""i1""",,,,,,,
3,MultiCfgContributedEnvironment.java,"*
 * @noextend This class is not intended to be subclassed by clients.",,,,,@noextend This class is not intended to be subclassed by clients.,,,,,,,,,,,,This class is not intended to be subclassed by clients.,,,,,,
3,MultiLaunchConfigurationTabGroup.java,"* Tab group for Launch Group.
 * @deprecated See Bug 517722, Launch Groups are now part of Platform.",Tab group for Launch Group.,,,"@deprecated See Bug 517722, Launch Groups are now part of Platform.",,,,,,,,,,,,,,,,,,,
3,PDOMDependencyGenerator.java,"* @author Doug Schaefer
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.",,,,,"@noextend This class is not intended to be subclassed by clients. 
 @noinstantiate This class is not intended to be instantiated by clients.",,,,,,,,@author Doug Schaefer,,,,"* @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.",,,,,,
3,PDOMMacroReferenceName.java,"* Represents declarations, definitions and references to bindings, except for macros.","Represents declarations, definitions and references to bindings, except for macros.",,,,,,,,,,,,,,,,,,,,,,
3,ProblemMarkerManager.java,"* Listens to resource deltas and filters for marker changes of type
 * IMarker.PROBLEM Viewers showing error ticks should register as listener to
 * this type.
 |
         * Visitors used to filter the element delta changes",Listens to resource deltas and filters for marker changes of type IMarker.PROBLEM,Visitors used to filter the element delta change,,,Viewers showing error ticks should register as listener to this type.,,,,,,,,,,,,,,,,,,
3,ProcessLauncher.java,"* This class implements external process launching for internal builder.
 *
 * NOTE: This class is subject to change and discuss,
 * and is currently available in experimental mode only",This class implements external process launching for internal builder.,,,,,,,,,,,,,,,,"NOTE: This class is subject to change and discuss, and is currently available in experimental mode only",,,,,,
3,ProcStatParser.java,"* @author Marc Dumais
 * TODO: extend to more than the tick counters.
 * @see also http://www.linuxhowtos.org/System/procstat.htm",,,,,,,TODO: extend to more than the tick counters.,,,,,,@author Marc Dumais,@see also http://www.linuxhowtos.org/System/procstat.htm,,,,,,,,,
3,QtPDOMNameIndex.java,"* A data structure for storing lists of PDOMNames that are indexed by a String key.
 * This is equivalent to the java type Map<String, List<PDOMName>>.",A data structure for storing lists of PDOMNames that are indexed by a String key.,"This is equivalent to the java type Map<String, List<PDOMName>>",,,,,,,,,,,,,,,,,,,,,
3,RenameCSourceFolderChange.java,* @author EE4 Graf IFS,,,,,,,,,,,,,@author EE4 Graf IFS,,,,,,,,,,
3,ResultsView.java,"* Represents a view part showing the testing results (count statistics,
 * red/green bar, tests hierarchy and test messages).
 | Persistence tags|
         * Represents view orientation
         *
         * @note <code>Auto</code> state may be not acceptable for some methods (see
         * their comments for details).","Represents a view part showing the testing results (count statistics, red/green bar, tests hierarchy and test messages).
 | Persistence tags| Represents view orientatio",,,,,,,,,,,,,,,,"* @note <code>Auto</code> state may be not acceptable for some methods (see
         * their comments for details).",* @note <code>Auto</code> state may be not acceptable for some methods (see their comments for details).,,,,,
3,ReturnCheckerTest.java,* Test for {@see ReturnCheckerTest} class,Test for {@see ReturnCheckerTest} class,,,,,,,,,,,,,* Test for {@see ReturnCheckerTest} class,,,,,,,,,
3,RulerColumnDescriptor.java,"* The description of an extension to the
 * <code>org.eclipse.ui.workbench.texteditor.rulerColumns</code> extension point. Instances are
 * immutable. Instances can be obtained from a {@link RulerColumnRegistry}.
 *
 * @since 7.2
 * @noinstantiate This class is not intended to be instantiated by clients.",The description of an extension to the <code>org.eclipse.ui.workbench.texteditor.rulerColumns</code> extension point,,,@since 7.2,"Instances are immutable. Instances can be obtained from a {@link RulerColumnRegistry}.
 
  @noinstantiate This class is not intended to be instantiated by clients.",,,,,,,,,Instances can be obtained from a {@link RulerColumnRegistry}.,,,* @noinstantiate This class is not intended to be instantiated by clients.,,,,,,
3,SCDOptionsEnum.java,"* Enumeration class for scanner configuration affecting command line options
 *
 * @author vhirsl",Enumeration class for scanner configuration affecting command line options,,,,,,,,,,,,@author vhirsl,,,,,,,,,,
3,SourceDocumentProvider.java,* SourceDocumentProvider,,,,,,,,SourceDocumentProvider,,,,,,,,,,,,,,,
3,SourceLookupTest.java,"* Tests that interaction with source lookups works as expected.
 * <p>
 * All of these tests use one of SourceLookup*.exe that was built from a file
 * that was ""moved"" since build time. At build time the SourceLookup.cc file was
 * located in the {@link #BUILD_PATH} directory, but it is now located in the
 * {@link BaseTestCase#SOURCE_PATH} directory.
 * <p>
 * The wild card in SourceLookup*.exe can be one of the following to cover the
 * different effective types of source lookups that need to be done depending on
 * how the program was compiled. Each of these options produces different debug
 * information about where to find the source file. See the Makefile for more
 * information.
 * <ul>
 * <li><b>AC</b>: Absolute and Canonical path (no ../ in path passed to GCC)
 * </li>
 * <li><b>AN</b>: Absolute and Non-Canonical path (a ../ in path passed to GCC)
 * </li>
 * <li><b>RC</b>: Relative and Canonical path (no ../ in path passed to GCC)
 * </li>
 * <li><b>RN</b>: Relative and Non-Canonical path (a ../ in path passed to GCC)
 * </li>
 * <li><b>No suffix</b>: Compilation that does not need mapping to be found
 * </ul>
 * In addition, there can also be a <b>Dwarf2</b> in the name. That means it is
 * designed to run with GDB <= 7.4, see comment in Makefile for OLDDWARFFLAGS.
 * <p>
 * The result of the variations on compilation arguments means that some of the
 * tests are parameterised.
 * <p>
 * Some of the CDT source lookup features require newer versions of GDB than
 * others, therefore the relevant tests use assumeGdbVersion* methods to be
 * skipped when appropriate.",Tests that interaction with source lookups works as expected.,"<p> All of these tests use one of SourceLookup*.exe that was built from a file that was ""moved"" since build time. At build time the SourceLookup.cc file was located in the {@link #BUILD_PATH} directory, but it is now located in the {@link BaseTestCase#SOURCE_PATH} directory. <p>",,"* In addition, there can also be a <b>Dwarf2</b> in the name. That means it is
  * designed to run with GDB <= 7.4, see comment in Makefile for OLDDWARFFLAGS.
  * <p>
  * The result of the variations on compilation arguments means that some of the
  * tests are parameterised.
  * <p>
  * Some of the CDT source lookup features require newer versions of GDB than
  * others, therefore the relevant tests use assumeGdbVersion* methods to be
  * skipped when appropriate.","* The wild card in SourceLookup*.exe can be one of the following to cover the
  * different effective types of source lookups that need to be done depending on
  * how the program was compiled. Each of these options produces different debug
  * information about where to find the source file. See the Makefile for more
  * information.
  * <ul>
  * <li><b>AC</b>: Absolute and Canonical path (no ../ in path passed to GCC)
  * </li>
  * <li><b>AN</b>: Absolute and Non-Canonical path (a ../ in path passed to GCC)
  * </li>
  * <li><b>RC</b>: Relative and Canonical path (no ../ in path passed to GCC)
  * </li>
  * <li><b>RN</b>: Relative and Non-Canonical path (a ../ in path passed to GCC)
  * </li>
  * <li><b>No suffix</b>: Compilation that does not need mapping to be found
  * </ul>",,,,,,,,,"See the Makefile for more
 * information.",,,,,,,,,
3,SpellEvent.java,* Spell event fired for words detected by a spell check iterator.,Spell event fired for words detected by a spell check iterator.,,,,,,,,,,,,,,,,,,,,,,
3,StandardCElementLabelProvider.java,"* CElementLabelProvider that respects settings from the Appearance preference page.
 * Triggers a viewer update when a preference changes.
 *
 * @deprecated Use {@link AppearanceAwareLabelProvider} instead.",CElementLabelProvider that respects settings from the Appearance preference page.,Triggers a viewer update when a preference changes.,,@deprecated Use {@link AppearanceAwareLabelProvider} instead.,,,,,,,,,,,,,,,,,,,
3,StringDialogField.java,* Dialog field containing a label and a text control.,Dialog field containing a label and a text control.,,,,,,,,,,,,,,,,,,,,,,
3,TestsRunnerProvidersManager.java,"* Collects the data from the Tests Runner provider plug-in extension points and
 * provides the convenient access to it.",Collects the data from the Tests Runner provider plug-in extension points and provides the convenient access to it.,,,,,,,,,,,,,,,,,,,,,,
3,ToggleDynamicPrintfAdapter.java,"* Toggles a dynamic printf in a C/C++ editor.
 *
 * @since 7.5",Toggles a dynamic printf in a C/C++ editor.,,,@since 7.5,,,,,,,,,,,,,,,,,,,
3,TracepointActionsPropertyPage.java,"* Property page for Tracepoint actions
 *
 * @since 2.1",Property page for Tracepoint actions,,,@since 2.1,,,,,,,,,,,,,,,,,,,
3,TracingConsole.java,"* A console that is used to print traces.  The console is attached to a launch.
 *
 * Any input to this console is read and discarded, since this console should be
 * read-only.  We don't actually make the console read-only because it is nice
 * for the user to be able to add delimiters such as empty lines within the traces.
 *
 * @since 2.1
 * This class was moved from package org.eclipse.cdt.dsf.gdb.internal.ui.tracing
 |
         * A reading Job which will prevent the input stream
         * from filling up.  We don't actually do anything with
         * the data we read, since the Trace console should not
         * accept input.
         *
         * But instead of making the console read-only, we allow
         * the user to type things to allow for comments to be
         * inserted within the traces.",A console that is used to print traces. The console is attached to a launch.,"* All of these tests use one of SourceLookup*.exe that was built from a file that was ""moved"" since build time. At build time the SourceLookup.cc file was located in the {@link #BUILD_PATH} directory, but it is now located in the {@link BaseTestCase#SOURCE_PATH} directory. <p>",We don't actually make the console read-only because it is nice for the user to be able to add delimiters such as empty lines within the traces.,"@since 2.1
This class was moved from package org.eclipse.cdt.dsf.gdb.internal.ui.tracing","A reading Job which will prevent the input stream from filling up. We don't actually do anything with the data we read, since the Trace console should not accept input.
  
 But instead of making the console read-only, we allow the user to type things to allow for comments to be inserted within the traces.",,,,,,,,,,,,"We don't actually do anything with
         * the data we read, since the Trace console should not
         * accept input.
         *
         * But instead of making the console read-only, we allow
         * the user to type things to allow for comments to be
         * inserted within the traces.",,,,,,
3,TriggerCellModifier.java,* Cell modifier used to edit the trigger value.,Cell modifier used to edit the trigger value.,,,,,,,,,,,,,,,,,,,,,,
3,TypedCDTViewerFilter.java,"* see org.eclipse.cdt.internal.ui.dialogs.TypedViewerFilter
 *
 * @noextend This class is not intended to be subclassed by clients.",,,,,@noextend This class is not intended to be subclassed by clients.,,,,,,,,,see org.eclipse.cdt.internal.ui.dialogs.TypedViewerFilter,,,,,,,,,
3,UncallCommandHandler.java,"* Command handler to trigger an uncall operation
 *
 * @since 7.0",Command handler to trigger an uncall operation,,,@since 7.0,,,,,,,,,,,,,,,,,,,
3,UPCKeyword.java,"* Enumeration of keywords that UPC adds to C99.
 *
 * @author Mike Kucera",Enumeration of keywords that UPC adds to C99.,,,,,,,,,,,,@author Mike Kucera,,,,,,,,,,
3,UPCLanguage.java,"* Implementation of the ILanguage extension point, adds UPC as a language to CDT.
 *
 * @author Mike Kucera","Implementation of the ILanguage extension point, adds UPC as a language to CDT.",,,,,,,,,,,,@author Mike Kucera,,,,,,,,,,
3,VMHasChildrenUpdate.java,"* Helper class implementation of the {@link IHasChildrenUpdate} update object.
 *
 * @see VMViewerUpdate
 *
 * @since 1.0",Helper class implementation of the {@link IHasChildrenUpdate} update object.,,,@since 1.0,,,,,,,,,,@see VMViewerUpdate,,,,,,,,,
3,WhiteSpaceOptions.java,"* Manage code formatter white space options on a higher level.
 |
         * Preview snippets.
         |        private void createBeforeEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }||        private void createAfterEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }| syntax element tree|    private InnerNode createReturnTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);|            return root;|    }|    private InnerNode createThrowTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);|            return root;|    }|
         * Represents a node in the options tree.
         |
         * Preview snippets.
         |        private void createBeforeEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }||        private void createAfterEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }| syntax element tree|    private InnerNode createReturnTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);|            return root;|    }|    private InnerNode createThrowTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);|            return root;|    }|
         * A node representing a group of options in the tree.
         |
         * Preview snippets.
         |        private void createBeforeEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }||        private void createAfterEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }| syntax element tree|    private InnerNode createReturnTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);|            return root;|    }|    private InnerNode createThrowTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);|            return root;|    }|
         * A node representing a concrete white space option in the tree.",Manage code formatter white space options on a higher level.,,,,"* Preview snippets.
         |        private void createBeforeEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }||        private void createAfterEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }| syntax element tree|    private InnerNode createReturnTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);|            return root;|    }|    private InnerNode createThrowTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);|            return root;|    }|
         * Represents a node in the options tree.
         |
         * Preview snippets.
         |        private void createBeforeEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }||        private void createAfterEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }| syntax element tree|    private InnerNode createReturnTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);|            return root;|    }|    private InnerNode createThrowTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);|            return root;|    }|
         * A node representing a group of options in the tree.
         |
         * Preview snippets.
         |        private void createBeforeEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }||        private void createAfterEllipsis(Map workingValues, InnerNode parent) {|                createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);|        }| syntax element tree|    private InnerNode createReturnTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);|            return root;|    }|    private InnerNode createThrowTree(Map workingValues, InnerNode parent) {|            final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);|            createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);|            return root;|    }|
         * A node representing a concrete white space option in the tree.",,,,"* Preview snippets.
  | private void createBeforeEllipsis(Map workingValues, InnerNode parent) {| createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);| }|| private void createAfterEllipsis(Map workingValues, InnerNode parent) {| createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);| }| syntax element tree| private InnerNode createReturnTree(Map workingValues, InnerNode parent) {| final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);| createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);| return root;| }| private InnerNode createThrowTree(Map workingValues, InnerNode parent) {| final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);| createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);| return root;| }|
  * Represents a node in the options tree.
  |
  * Preview snippets.
  | private void createBeforeEllipsis(Map workingValues, InnerNode parent) {| createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);| }|| private void createAfterEllipsis(Map workingValues, InnerNode parent) {| createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);| }| syntax element tree| private InnerNode createReturnTree(Map workingValues, InnerNode parent) {| final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);| createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);| return root;| }| private InnerNode createThrowTree(Map workingValues, InnerNode parent) {| final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);| createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);| return root;| }|
  * A node representing a group of options in the tree.
  |
  * Preview snippets.
  | private void createBeforeEllipsis(Map workingValues, InnerNode parent) {| createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS, VARARG_PARAMETER_PREVIEW);| }|| private void createAfterEllipsis(Map workingValues, InnerNode parent) {| createOption(parent, workingValues, FormatterMessages.WhiteSpaceOptions_vararg_parameter, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS, VARARG_PARAMETER_PREVIEW);| }| syntax element tree| private InnerNode createReturnTree(Map workingValues, InnerNode parent) {| final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_return);| createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN, RETURN_PREVIEW);| return root;| }| private InnerNode createThrowTree(Map workingValues, InnerNode parent) {| final InnerNode root= new InnerNode(parent, workingValues, FormatterMessages.WhiteSpaceOptions_throw);| createOption(root, workingValues, FormatterMessages.WhiteSpaceTabPage_before_parenthesized_expressions, DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW, THROW_PREVIEW);| return root;| }|
  * A node representing a concrete white space option in the tree.",,,,,,,,,,,,,,
3,WordIgnoreProposal.java,* Proposal to ignore the word during the current editing session.,Proposal to ignore the word during the current editing session.,,,,,,,,,,,,,,,,,,,,,,
3,WorkingCopyTests.java,"* Contains unit test cases for Working Copies. Run using JUnit Plugin Test
 * configuration launcher.",Contains unit test cases for Working Copies,,,,Run using JUnit Plugin Test configuration launcher.,,,,,,,,,,,,,,,,,,
4,AbstractCollectionTester.java,"* Base class for collection testers.
 *
 * @param <E> the element type of the collection to be tested.
 * @author Kevin Bourrillion",* Base class for collection testers.,,,,* @param <E> the element type of the collection to be tested.,,,,,,,,* @author Kevin Bourrillion,,,,,,,,,,
4,AbstractListeningExecutorService.java,"* Abstract {@link ListeningExecutorService} implementation that creates {@link ListenableFuture}
 * instances for each {@link Runnable} and {@link Callable} submitted to it. These tasks are run
 * with the abstract {@link #execute execute(Runnable)} method.
 *
 * <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and
 * termination.
 *
 * @author Chris Povirk
 * @since 14.0","* Abstract {@link ListeningExecutorService} implementation that creates {@link ListenableFuture}
  * instances for each {@link Runnable} and {@link Callable} submitted to it.","These tasks are run
  * with the abstract {@link #execute execute(Runnable)} method.",,* @since 14.0,"* <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and
  * termination.",,,,,,,,* @author Chris Povirk,,,,,,,,,,
4,AbstractLoadingCache.java,"* This class provides a skeletal implementation of the {@code Cache} interface to minimize the
 * effort required to implement this interface.
 *
 * <p>To implement a cache, the programmer needs only to extend this class and provide an
 * implementation for the {@link #get(Object)} and {@link #getIfPresent} methods. {@link
 * #getUnchecked}, {@link #get(Object, Callable)}, and {@link #getAll} are implemented in terms of
 * {@code get}; {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link
 * #putAll} is implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented
 * in terms of {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw
 * an {@link UnsupportedOperationException}.
 *
 * @author Charles Fry
 * @since 11.0",* This class provides a skeletal implementation of the {@code Cache} interface,,"to minimize the
  * effort required to implement this interface.",* @since 11.0,"* <p>To implement a cache, the programmer needs only to extend this class and provide an
  * implementation for the {@link #get(Object)} and {@link #getIfPresent} methods. {@link
  * #getUnchecked}, {@link #get(Object, Callable)}, and {@link #getAll} are implemented in terms of
  * {@code get}; {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link
  * #putAll} is implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented
  * in terms of {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw
  * an {@link UnsupportedOperationException}.","All other methods throw
 * an {@link UnsupportedOperationException}.",,,,,,,* @author Charles Fry,,,,,,,,,,
4,AbstractMultimap.java,"* A skeleton {@code Multimap} implementation, not necessarily in terms of a {@code Map}.
 *
 * @author Louis Wasserman","A skeleton {@code Multimap} implementation, not necessarily in terms of a {@code Map}.",,,,,,,,,,,,@author Louis Wasserman,,,,,,,,,,
4,AbstractMultimapTester.java,"* Superclass for all {@code Multimap} testers.
 *
 * @author Louis Wasserman",* Superclass for all {@code Multimap} testers.,,,,,,,,,,,,@author Louis Wasserman,,,,,,,,,,
4,AbstractSortedKeySortedSetMultimap.java,"* Basic implementation of a {@link SortedSetMultimap} with a sorted key set.
 *
 * <p>This superclass allows {@code TreeMultimap} to override methods to return navigable set and
 * map types in non-GWT only, while GWT code will inherit the SortedMap/SortedSet overrides.
 *
 * @author Louis Wasserman",* Basic implementation of a {@link SortedSetMultimap} with a sorted key set.,,"* <p>This superclass allows {@code TreeMultimap} to override methods to return navigable set and
  * map types in non-GWT only, while GWT code will inherit the SortedMap/SortedSet overrides.",,,,,,,,,,* @author Louis Wasserman,,,,,,,,,,
4,ArbitraryInstances.java,"* Supplies an arbitrary ""default"" instance for a wide range of types, often useful in testing
 * utilities.
 *
 * <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},
 * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code
 * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code
 * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type
 * exposes at least one public static final constant of the same type, one of the constants will be
 * used; or if the class exposes a public parameter-less constructor then it will be ""new""d and
 * returned.
 *
 * <p>All default instances returned by {@link #get} are generics-safe. Clients won't get type
 * errors for using {@code get(Comparator.class)} as a {@code Comparator<Foo>}, for example.
 * Immutable empty instances are returned for collection types; {@code """"} for string; {@code 0} for
 * number types; reasonable default instance for other stateless types. For mutable types, a fresh
 * instance is created each time {@code get()} is called.
 *
 * @author Kevin Bourrillion
 * @author Ben Yu
 * @since 12.0
 | Compare by toString() to satisfy 2 properties:| 1. compareTo(null) should throw NullPointerException| Internal implementations of some classes, with public default constructor that get() needs.| Compare by toString() to satisfy 2 properties:| 1. compareTo(null) should throw NullPointerException| 2. the order is deterministic and easy to understand, for debugging purpose.| Compare by toString() to satisfy 2 properties:| 1. compareTo(null) should throw NullPointerException| Always equal is a valid total ordering. And it works for any Object.","* Supplies an arbitrary ""default"" instance for a wide range of types, often useful in testing
  * utilities.","* <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},
  * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code
  * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code
  * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type
  * exposes at least one public static final constant of the same type, one of the constants will be
  * used; or if the class exposes a public parameter-less constructor then it will be ""new""d and
  * returned.
  *",,* @since 12.0,"* <p>All default instances returned by {@link #get} are generics-safe. Clients won't get type
  * errors for using {@code get(Comparator.class)} as a {@code Comparator<Foo>}, for example.
  * Immutable empty instances are returned for collection types; {@code """"} for string; {@code 0} for
  * number types; reasonable default instance for other stateless types. For mutable types, a fresh
  * instance is created each time {@code get()} is called.","| Compare by toString() to satisfy 2 properties:| 1. compareTo(null) should throw NullPointerException| Internal implementations of some classes, with public default constructor that get() needs.| Compare by toString() to satisfy 2 properties:| 1. compareTo(null) should throw NullPointerException| 2. the order is deterministic and easy to understand, for debugging purpose.| Compare by toString() to satisfy 2 properties:| 1. compareTo(null) should throw NullPointerException| Always equal is a valid total ordering. And it works for any Object.",,,,,,,"* @author Kevin Bourrillion
  * @author Ben Yu",All default instances returned by {@link #get} are generics-safe.,,,"Clients won't get type
 * errors for using {@code get(Comparator.class)} as a {@code Comparator<Foo>}",,,,,,Always equal is a valid total ordering. And it works for any Object.
4,ArrayListMultimapGwtSerializationDependencies.java,"* A dummy superclass to support GWT serialization of the element types of an {@link
 * ArrayListMultimap}. The GWT supersource for this class contains a field for each type.
 *
 * <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
 * approach but with a subclass rather than a superclass.
 *
 * <p>TODO(cpovirk): Consider applying this subclass approach to our other types.","* A dummy superclass to support GWT serialization of the element types of an {@link
  * ArrayListMultimap}.",The GWT supersource for this class contains a field for each type.,,,,,* <p>TODO(cpovirk): Consider applying this subclass approach to our other types.,,,,,,,"* <p>For details about this hack, see {@link GwtSerializationDependencies}, which takes the same
  * approach but with a subclass rather than a superclass.",,,,,,,,,
4,AtomicDoubleArrayTest.java,"* Source:
 * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck-jsr166e/AtomicDoubleArrayTest.java?revision=1.13
 * (Modified to adapt to guava coding conventions)
 | Unit test for {@link AtomicDoubleArray}.",Unit test for {@link AtomicDoubleArray}.,,,,,,,,,,,,,"* Source:
  * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck-jsr166e/AtomicDoubleArrayTest.java?revision=1.13
  * (Modified to adapt to guava coding conventions)",,,,,,,,,
4,BaseEncodingBenchmark.java,Benchmark for {@code BaseEncoding} performance.,Benchmark for {@code BaseEncoding} performance.,,,,,,,,,,,,,,,,,,,,,,
4,BloomFilter.java,"* A Bloom filter for instances of {@code T}. A Bloom filter offers an approximate containment test
 * with one-sided error: if it claims that an element is contained in it, this might be in error,
 * but if it claims that an element is <i>not</i> contained in it, then this is definitely true.
 *
 * <p>If you are unfamiliar with Bloom filters, this nice <a
 * href=""http://llimllib.github.com/bloomfilter-tutorial/"">tutorial</a> may help you understand how
 * they work.
 *
 * <p>The false positive probability ({@code FPP}) of a Bloom filter is defined as the probability
 * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that
 * has not actually been put in the {@code BloomFilter}.
 *
 * <p>Bloom filters are serializable. They also support a more compact serial representation via the
 * {@link #writeTo} and {@link #readFrom} methods. Both serialized forms will continue to be
 * supported by future versions of this library. However, serial forms generated by newer versions
 * of the code may not be readable by older versions of the code (e.g., a serialized Bloom filter
 * generated today may <i>not</i> be readable by a binary that was compiled 6 months ago).
 *
 * <p>As of Guava 23.0, this class is thread-safe and lock-free. It internally uses atomics and
 * compare-and-swap to ensure correctness when multiple threads are used to access it.
 *
 * @param <T> the type of instances that the {@code BloomFilter} accepts
 * @author Dimitris Andreou
 * @author Kevin Bourrillion
 * @since 11.0 (thread-safe since 23.0)
 | Cheat sheet:|| m: total bits| n: expected insertions| b: m/n, bits per insertion| p: expected false positive probability|| 1) Optimal k = b * ln2| 2) p = (1 - e ^ (-kn/m))^k| 3) For optimal k: p = 2 ^ (-k) ~= 0.6185^b| 4) For optimal k: m = -nlnp / ((ln2) ^ 2)|
   * A strategy to translate T instances, to {@code numHashFunctions} bit indexes.
   *
   * <p>Implementations should be collections of pure functions (i.e. stateless).","* A Bloom filter for instances of {@code T}. A Bloom filter offers an approximate containment test
 * with one-sided error: if it claims that an element is contained in it, this might be in error,
 * but if it claims that an element is <i>not</i> contained in it, then this is definitely true.","<p>The false positive probability ({@code FPP}) of a Bloom filter is defined as the probability
 * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that
 * has not actually been put in the {@code BloomFilter}.
 *
 * <p>Bloom filters are serializable. They also support a more compact serial representation via the
 * {@link #writeTo} and {@link #readFrom} methods. Both serialized forms will continue to be
 * supported by future versions of this library. However, serial forms generated by newer versions
 * of the code may not be readable by older versions of the code (e.g., a serialized Bloom filter
 * generated today may <i>not</i> be readable by a binary that was compiled 6 months ago).",,"However, serial forms generated by newer versions
 * of the code may not be readable by older versions of the code (e.g., a serialized Bloom filter
 * generated today may <i>not</i> be readable by a binary that was compiled 6 months ago).
 * <p>As of Guava 23.0, this class is thread-safe and lock-free. It internally uses atomics and
 * compare-and-swap to ensure correctness when multiple threads are used to access it. 
* @since 11.0 (thread-safe since 23.0)","* @param <T> the type of instances that the {@code BloomFilter} accepts.
 | Cheat sheet:|| m: total bits| n: expected insertions| b: m/n, bits per insertion| p: expected false positive probability|| 1) Optimal k = b * ln2| 2) p = (1 - e ^ (-kn/m))^k| 3) For optimal k: p = 2 ^ (-k) ~= 0.6185^b| 4) For optimal k: m = -nlnp / ((ln2) ^ 2)|
   * A strategy to translate T instances, to {@code numHashFunctions} bit indexes.
   *
   * <p>Implementations should be collections of pure functions (i.e. stateless).",,,,,,,,"* @author Dimitris Andreou
 * @author Kevin Bourrillion","* <p>If you are unfamiliar with Bloom filters, this nice <a
 * href=""http://llimllib.github.com/bloomfilter-tutorial/"">tutorial</a> may help you understand how
 * they work.
 * <p>The false positive probability ({@code FPP}) of a Bloom filter is defined as the probability
 * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that
 * has not actually been put in the {@code BloomFilter}.
 *
 * <p>Bloom filters are serializable. They also support a more compact serial representation via the
 * {@link #writeTo} and {@link #readFrom} methods.",,,,"* <p>If you are unfamiliar with Bloom filters, this nice <a
 * href=""http://llimllib.github.com/bloomfilter-tutorial/"">tutorial</a> may help you understand how
 * they work.
   * <p>Implementations should be collections of pure functions (i.e. stateless).",,,,,"* <p>As of Guava 23.0, this class is thread-safe and lock-free. It internally uses atomics and
 * compare-and-swap to ensure correctness when multiple threads are used to access it."
4,CacheBuilder.java,"* A builder of {@link LoadingCache} and {@link Cache} instances having any combination of the
 * following features:
 *
 * <ul>
 *   <li>automatic loading of entries into the cache
 *   <li>least-recently-used eviction when a maximum size is exceeded
 *   <li>time-based expiration of entries, measured since last access or last write
 *   <li>keys automatically wrapped in {@linkplain WeakReference weak} references
 *   <li>values automatically wrapped in {@linkplain WeakReference weak} or {@linkplain
 *       SoftReference soft} references
 *   <li>notification of evicted (or otherwise removed) entries
 *   <li>accumulation of cache access statistics
 * </ul>
 *
 *
 * <p>These features are all optional; caches can be created using all or none of them. By default
 * cache instances created by {@code CacheBuilder} will not perform any type of eviction.
 *
 * <p>Usage example:
 *
 * <pre>{@code
 * LoadingCache<Key, Graph> graphs = CacheBuilder.newBuilder()
 *     .maximumSize(10000)
 *     .expireAfterWrite(Duration.ofMinutes(10))
 *     .removalListener(MY_LISTENER)
 *     .build(
 *         new CacheLoader<Key, Graph>() {
 *           public Graph load(Key key) throws AnyException {
 *             return createExpensiveGraph(key);
 *           }
 *         });
 * }</pre>
 *
 * <p>Or equivalently,
 *
 * <pre>{@code
 * // In real life this would come from a command-line flag or config file
 * String spec = ""maximumSize=10000,expireAfterWrite=10m"";
 *
 * LoadingCache<Key, Graph> graphs = CacheBuilder.from(spec)
 *     .removalListener(MY_LISTENER)
 *     .build(
 *         new CacheLoader<Key, Graph>() {
 *           public Graph load(Key key) throws AnyException {
 *             return createExpensiveGraph(key);
 *           }
 *         });
 * }</pre>
 *
 * <p>The returned cache is implemented as a hash table with similar performance characteristics to
 * {@link ConcurrentHashMap}. It implements all optional operations of the {@link LoadingCache} and
 * {@link Cache} interfaces. The {@code asMap} view (and its collection views) have <i>weakly
 * consistent iterators</i>. This means that they are safe for concurrent use, but if other threads
 * modify the cache after the iterator is created, it is undefined which of these changes, if any,
 * are reflected in that iterator. These iterators never throw {@link
 * ConcurrentModificationException}.
 *
 * <p><b>Note:</b> by default, the returned cache uses equality comparisons (the {@link
 * Object#equals equals} method) to determine equality for keys or values. However, if {@link
 * #weakKeys} was specified, the cache uses identity ({@code ==}) comparisons instead for keys.
 * Likewise, if {@link #weakValues} or {@link #softValues} was specified, the cache uses identity
 * comparisons for values.
 *
 * <p>Entries are automatically evicted from the cache when any of {@linkplain #maximumSize(long)
 * maximumSize}, {@linkplain #maximumWeight(long) maximumWeight}, {@linkplain #expireAfterWrite
 * expireAfterWrite}, {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys
 * weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are
 * requested.
 *
 * <p>If {@linkplain #maximumSize(long) maximumSize} or {@linkplain #maximumWeight(long)
 * maximumWeight} is requested entries may be evicted on each cache modification.
 *
 * <p>If {@linkplain #expireAfterWrite expireAfterWrite} or {@linkplain #expireAfterAccess
 * expireAfterAccess} is requested entries may be evicted on each cache modification, on occasional
 * cache accesses, or on calls to {@link Cache#cleanUp}. Expired entries may be counted by {@link
 * Cache#size}, but will never be visible to read or write operations.
 *
 * <p>If {@linkplain #weakKeys weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain
 * #softValues softValues} are requested, it is possible for a key or value present in the cache to
 * be reclaimed by the garbage collector. Entries with reclaimed keys or values may be removed from
 * the cache on each cache modification, on occasional cache accesses, or on calls to {@link
 * Cache#cleanUp}; such entries may be counted in {@link Cache#size}, but will never be visible to
 * read or write operations.
 *
 * <p>Certain cache configurations will result in the accrual of periodic maintenance tasks which
 * will be performed during write operations, or during occasional read operations in the absence of
 * writes. The {@link Cache#cleanUp} method of the returned cache will also perform maintenance, but
 * calling it should not be necessary with a high throughput cache. Only caches built with
 * {@linkplain #removalListener removalListener}, {@linkplain #expireAfterWrite expireAfterWrite},
 * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys}, {@linkplain
 * #weakValues weakValues}, or {@linkplain #softValues softValues} perform periodic maintenance.
 *
 * <p>The caches produced by {@code CacheBuilder} are serializable, and the deserialized caches
 * retain all the configuration properties of the original cache. Note that the serialized form does
 * <i>not</i> include cache contents, but only configuration.
 *
 * <p>See the Guava User Guide article on <a
 * href=""https://github.com/google/guava/wiki/CachesExplained"">caching</a> for a higher-level
 * explanation.
 *
 * @param <K> the most general key type this builder will be able to create caches for. This is
 *     normally {@code Object} unless it is constrained by using a method like {@code
 *     #removalListener}
 * @param <V> the most general value type this builder will be able to create caches for. This is
 *     normally {@code Object} unless it is constrained by using a method like {@code
 *     #removalListener}
 * @author Charles Fry
 * @author Kevin Bourrillion
 * @since 10.0",* A builder of {@link LoadingCache} and {@link Cache} instances,"having any combination of the
  * following features:
  *
  * <ul>
  * <li>automatic loading of entries into the cache
  * <li>least-recently-used eviction when a maximum size is exceeded
  * <li>time-based expiration of entries, measured since last access or last write
  * <li>keys automatically wrapped in {@linkplain WeakReference weak} references
  * <li>values automatically wrapped in {@linkplain WeakReference weak} or {@linkplain
  * SoftReference soft} references
  * <li>notification of evicted (or otherwise removed) entries
  * <li>accumulation of cache access statistics
  * </ul>
* <p>Entries are automatically evicted from the cache when any of {@linkplain #maximumSize(long)
 * maximumSize}, {@linkplain #maximumWeight(long) maximumWeight}, {@linkplain #expireAfterWrite
 * expireAfterWrite}, {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys
 * weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are
 * requested.",,* @since 10.0,"* <p>These features are all optional; caches can be created using all or none of them. By default
  * cache instances created by {@code CacheBuilder} will not perform any type of eviction.
  *
  * <p>Usage example:
  *
  * <pre>{@code
  * LoadingCache<Key, Graph> graphs = CacheBuilder.newBuilder()
  * .maximumSize(10000)
  * .expireAfterWrite(Duration.ofMinutes(10))
  * .removalListener(MY_LISTENER)
  * .build(
  * new CacheLoader<Key, Graph>() {
  * public Graph load(Key key) throws AnyException {
  * return createExpensiveGraph(key);
  * }
  * });
  * }</pre>
  *
  * <p>Or equivalently,
  *
  * <pre>{@code
  * // In real life this would come from a command-line flag or config file
  * String spec = ""maximumSize=10000,expireAfterWrite=10m"";
  *
  * LoadingCache<Key, Graph> graphs = CacheBuilder.from(spec)
  * .removalListener(MY_LISTENER)
  * .build(
  * new CacheLoader<Key, Graph>() {
  * public Graph load(Key key) throws AnyException {
  * return createExpensiveGraph(key);
  * }
  * });
  * }</pre>
  *
  * <p>The returned cache is implemented as a hash table with similar performance characteristics to
  * {@link ConcurrentHashMap}. It implements all optional operations of the {@link LoadingCache} and
  * {@link Cache} interfaces. The {@code asMap} view (and its collection views) have <i>weakly
  * consistent iterators</i>. This means that they are safe for concurrent use, but if other threads
  * modify the cache after the iterator is created, it is undefined which of these changes, if any,
  * are reflected in that iterator. These iterators never throw {@link
  * ConcurrentModificationException}.
  *
  * <p><b>Note:</b> by default, the returned cache uses equality comparisons (the {@link
  * Object#equals equals} method) to determine equality for keys or values. However, if {@link
  * #weakKeys} was specified, the cache uses identity ({@code ==}) comparisons instead for keys.
  * Likewise, if {@link #weakValues} or {@link #softValues} was specified, the cache uses identity
  * comparisons for values.
  *
  * <p>Entries are automatically evicted from the cache when any of {@linkplain #maximumSize(long)
  * maximumSize}, {@linkplain #maximumWeight(long) maximumWeight}, {@linkplain #expireAfterWrite
  * expireAfterWrite}, {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys
  * weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are
  * requested.
  *
  * <p>If {@linkplain #maximumSize(long) maximumSize} or {@linkplain #maximumWeight(long)
  * maximumWeight} is requested entries may be evicted on each cache modification.
  *
  * <p>If {@linkplain #expireAfterWrite expireAfterWrite} or {@linkplain #expireAfterAccess
  * expireAfterAccess} is requested entries may be evicted on each cache modification, on occasional
  * cache accesses, or on calls to {@link Cache#cleanUp}. Expired entries may be counted by {@link
  * Cache#size}, but will never be visible to read or write operations.
  *
  * <p>If {@linkplain #weakKeys weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain
  * #softValues softValues} are requested, it is possible for a key or value present in the cache to
  * be reclaimed by the garbage collector. Entries with reclaimed keys or values may be removed from
  * the cache on each cache modification, on occasional cache accesses, or on calls to {@link
  * Cache#cleanUp}; such entries may be counted in {@link Cache#size}, but will never be visible to
  * read or write operations.
  *
  * <p>Certain cache configurations will result in the accrual of periodic maintenance tasks which
  * will be performed during write operations, or during occasional read operations in the absence of
  * writes. The {@link Cache#cleanUp} method of the returned cache will also perform maintenance, but
  * calling it should not be necessary with a high throughput cache. Only caches built with
  * {@linkplain #removalListener removalListener}, {@linkplain #expireAfterWrite expireAfterWrite},
  * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys}, {@linkplain
  * #weakValues weakValues}, or {@linkplain #softValues softValues} perform periodic maintenance.
  *
  * <p>The caches produced by {@code CacheBuilder} are serializable, and the deserialized caches
  * retain all the configuration properties of the original cache. Note that the serialized form does
  * <i>not</i> include cache contents, but only configuration.
 
  * @param <K> the most general key type this builder will be able to create caches for. This is
  * normally {@code Object} unless it is constrained by using a method like {@code
  * #removalListener}
  * @param <V> the most general value type this builder will be able to create caches for. This is
  * normally {@code Object} unless it is constrained by using a method like {@code
  * #removalListener}",,,,,,,,"* @author Charles Fry
  * @author Kevin Bourrillion","* <p>See the Guava User Guide article on <a
  * href=""https://github.com/google/guava/wiki/CachesExplained"">caching</a> for a higher-level
  * explanation.
These iterators never throw {@link
 * ConcurrentModificationException}.",,,"* <p><b>Note:</b> by default, the returned cache uses equality comparisons (the {@link
 * Object#equals equals} method) to determine equality for keys or values. However, if {@link
 * #weakKeys} was specified, the cache uses identity ({@code ==}) comparisons instead for keys.
 * Likewise, if {@link #weakValues} or {@link #softValues} was specified, the cache uses identity
 * comparisons for values.
 Note that the serialized form does
 * <i>not</i> include cache contents, but only configuration.",,,,,,"Certain cache configurations will result in the accrual of periodic maintenance tasks which
 * will be performed during write operations, or during occasional read operations in the absence of
 * writes."
4,CacheLoaderTest.java,"* Unit tests for {@link CacheLoader}.
 *
 * @author Charles Fry",* Unit tests for {@link CacheLoader}.,,,,,,,,,,,,@author Charles Fry,,,,,,,,,,
4,CacheManualTest.java,@author Charles Fry,,,,,,,,,,,,,@author Charles Fry,,,,,,,,,,
4,ClassToInstanceMap.java,"* A map, each entry of which maps a Java <a href=""http://tinyurl.com/2cmwkz"">raw type</a> to an
 * instance of that type. In addition to implementing {@code Map}, the additional type-safe
 * operations {@link #putInstance} and {@link #getInstance} are available.
 *
 * <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,
 * and a primitive type and its corresponding wrapper type may map to different values.
 *
 * <p>See the Guava User Guide article on <a href=
 * ""https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap""> {@code
 * ClassToInstanceMap}</a>.
 *
 * <p>To map a generic type to an instance of that type, use {@link
 * com.google.common.reflect.TypeToInstanceMap} instead.
 *
 * @param <B> the common supertype that all entries must share; often this is simply {@link Object}
 * @author Kevin Bourrillion
 * @since 2.0","* A map, each entry of which maps a Java <a href=""http://tinyurl.com/2cmwkz"">raw type</a> to an
  * instance of that type. In addition to implementing {@code Map}, the additional type-safe
  * operations {@link #putInstance} and {@link #getInstance} are available.","* <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,
  * and a primitive type and its corresponding wrapper type may map to different values.",,* @since 2.0,"* <p>To map a generic type to an instance of that type, use {@link
  * com.google.common.reflect.TypeToInstanceMap} instead.
  *
  * @param <B> the common supertype that all entries must share; often this is simply {@link Object}",,,,,,,,* @author Kevin Bourrillion,"* <p>See the Guava User Guide article on <a href=
  * ""https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap""> {@code
  * ClassToInstanceMap}</a>.",,,,"To map a generic type to an instance of that type, use {@link
 * com.google.common.reflect.TypeToInstanceMap} instead.",,,,,
4,CloseablesTest.java,"* Unit tests for {@link Closeables}.
 *
 * <p>Checks proper closing behavior, and ensures that IOExceptions on Closeable.close() are not
 * propagated out from the {@link Closeables#close} method if {@code swallowException} is true.
 *
 * @author Michael Lancaster",* Unit tests for {@link Closeables}.,"* <p>Checks proper closing behavior, and ensures that IOExceptions on Closeable.close() are not
  * propagated out from the {@link Closeables#close} method if {@code swallowException} is true.",,,,,,,,,,,* @author Michael Lancaster,,,,,,,,,,
4,CollectionTestSuiteBuilder.java,"* Concrete instantiation of {@link AbstractCollectionTestSuiteBuilder} for testing collections that
 * do not have a more specific tester like {@link ListTestSuiteBuilder} or {@link
 * SetTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Louis Wasserman","* Concrete instantiation of {@link AbstractCollectionTestSuiteBuilder} for testing collections that
 * do not have a more specific tester like {@link ListTestSuiteBuilder} or {@link
 * SetTestSuiteBuilder}.",,,,,,,,,,,,"* @author Chris Povirk
 * @author Louis Wasserman","@link AbstractCollectionTestSuiteBuilder} 
{@link ListTestSuiteBuilder} or {@link
 * SetTestSuiteBuilder}.",,,,,,,,,
4,ConflictingRequirementsException.java,"* Thrown when requirements on a tester method or class conflict with each other.
 *
 * @author George van den Driessche",* Thrown when requirements on a tester method or class conflict with each other.,,,,,,,,,,,,@author George van den Driessche,,,,,,,,,,
4,CountingOutputStream.java,"* An OutputStream that counts the number of bytes written.
 *
 * @author Chris Nokleberg
 * @since 1.0",An OutputStream that counts the number of bytes written.,,,@since 1.0,,,,,,,,,@author Chris Nokleberg,,,,,,,,,,
4,DescendingMultiset.java,"* A skeleton implementation of a descending multiset. Only needs {@code forwardMultiset()} and
 * {@code entryIterator()}.
 *
 * @author Louis Wasserman",* A skeleton implementation of a descending multiset.,,,,,,,,,,,,* @author Louis Wasserman,"Only needs {@code forwardMultiset()} and
 * {@code entryIterator()}.",,,,,"Only needs {@code forwardMultiset()} and
 * {@code entryIterator()}.",,,,
4,EqualsTester.java,"* Tester for equals() and hashCode() methods of a class.
 *
 * <p>The simplest use case is:
 *
 * <pre>
 * new EqualsTester().addEqualityGroup(foo).testEquals();
 * </pre>
 *
 * <p>This tests {@code foo.equals(foo)}, {@code foo.equals(null)}, and a few other operations.
 *
 * <p>For more extensive testing, add multiple equality groups. Each group should contain objects
 * that are equal to each other but unequal to the objects in any other group. For example:
 *
 * <pre>
 * new EqualsTester()
 *     .addEqualityGroup(new User(""page""), new User(""page""))
 *     .addEqualityGroup(new User(""sergey""))
 *     .testEquals();
 * </pre>
 *
 * <p>This tests:
 *
 * <ul>
 *   <li>comparing each object against itself returns true
 *   <li>comparing each object against null returns false
 *   <li>comparing each object against an instance of an incompatible class returns false
 *   <li>comparing each pair of objects within the same equality group returns true
 *   <li>comparing each pair of objects from different equality groups returns false
 *   <li>the hash codes of any two equal objects are equal
 * </ul>
 *
 * <p>When a test fails, the error message labels the objects involved in the failed comparison as
 * follows:
 *
 * <ul>
 *   <li>""{@code [group }<i>i</i>{@code , item }<i>j</i>{@code ]}"" refers to the
 *       <i>j</i><sup>th</sup> item in the <i>i</i><sup>th</sup> equality group, where both equality
 *       groups and the items within equality groups are numbered starting from 1. When either a
 *       constructor argument or an equal object is provided, that becomes group 1.
 * </ul>
 *
 * @author Jim McMaster
 * @author Jige Yu
 * @since 10.0
 |
   * Class used to test whether equals() correctly handles an instance of an incompatible class.
   * Since it is a private inner class, the invoker can never pass in an instance to the tester",* Tester for equals() and hashCode() methods of a class.,,"* <p>This tests:
  *
  * <ul>
  * <li>comparing each object against itself returns true
  * <li>comparing each object against null returns false
  * <li>comparing each object against an instance of an incompatible class returns false
  * <li>comparing each pair of objects within the same equality group returns true
  * <li>comparing each pair of objects from different equality groups returns false
  * <li>the hash codes of any two equal objects are equal
  * </ul>",* @since 10.0,"* <p>The simplest use case is:
  *
  * <pre>
  * new EqualsTester().addEqualityGroup(foo).testEquals();
  * </pre>
  *
  * <p>This tests {@code foo.equals(foo)}, {@code foo.equals(null)}, and a few other operations.
  *
  * <p>For more extensive testing, add multiple equality groups. Each group should contain objects
  * that are equal to each other but unequal to the objects in any other group. For example:
  *
  * <pre>
  * new EqualsTester()
  * .addEqualityGroup(new User(""page""), new User(""page""))
  * .addEqualityGroup(new User(""sergey""))
  * .testEquals();
  * </pre>
 
 
  |
  * Class used to test whether equals() correctly handles an instance of an incompatible class.
  * Since it is a private inner class, the invoker can never pass in an instance to the tester","* <p>When a test fails, the error message labels the objects involved in the failed comparison as
  * follows:
  *
  * <ul>
  * <li>""{@code [group }<i>i</i>{@code , item }<i>j</i>{@code ]}"" refers to the
  * <i>j</i><sup>th</sup> item in the <i>i</i><sup>th</sup> equality group, where both equality
  * groups and the items within equality groups are numbered starting from 1. When either a
  * constructor argument or an equal object is provided, that becomes group 1.
  * </ul>",,,,,,,"* @author Jim McMaster
  * @author Jige Yu",,,,"* Since it is a private inner class, the invoker can never pass in an instance to the tester","For more extensive testing, add multiple equality groups. Each group should contain objects
 * that are equal to each other but unequal to the objects in any other group",,,,,* Class used to test whether equals() correctly handles an instance of an incompatible class.
4,FeatureSpecificTestSuiteBuilder.java,"* Creates, based on your criteria, a JUnit test suite that exhaustively tests the object generated
 * by a G, selecting appropriate tests by matching them against specified features.
 *
 * @param <B> The concrete type of this builder (the 'self-type'). All the Builder methods of this
 *     class (such as {@link #named}) return this type, so that Builder methods of more derived
 *     classes can be chained onto them without casting.
 * @param <G> The type of the generator to be passed to testers in the generated test suite. An
 *     instance of G should somehow provide an instance of the class under test, plus any other
 *     information required to parameterize the test.
 * @author George van den Driessche","* Creates, based on your criteria, a JUnit test suite that exhaustively tests the object generated
  * by a G",", selecting appropriate tests by matching them against specified features.",,,"* @param <B> The concrete type of this builder (the 'self-type'). All the Builder methods of this
  * class (such as {@link #named}) return this type, so that Builder methods of more derived
  * classes can be chained onto them without casting.
  * @param <G> The type of the generator to be passed to testers in the generated test suite. An
  * instance of G should somehow provide an instance of the class under test, plus any other
  * information required to parameterize the test.",,,,,,,,* @author George van den Driessche,,,,,,,,,,
4,ForwardingBlockingDequeTest.java,"* Test for {@link ForwardingBlockingDeque}
 *
 * @author Emily Soldal",Test for {@link ForwardingBlockingDeque},,,,,,,,,,,,@author Emily Soldal,,,,,,,,,,
4,ForwardingImmutableSet.java,"* GWT implementation of {@link ImmutableSet} that forwards to another {@code Set} implementation.
 *
 * @author Hayward Chan",GWT implementation of {@link ImmutableSet} that forwards to another {@code Set} implementation.,,,,,,,,,,,,* @author Hayward Chan,{@link ImmutableSet},,,,,,,,,
4,ForwardingQueueTest.java,"* Tests for {@code ForwardingQueue}.
 *
 * @author Robert Konigsberg
 * @author Louis Wasserman",Tests for {@code ForwardingQueue}.,,,,,,,,,,,,"* @author Robert Konigsberg
  * @author Louis Wasserman",,,,,,,,,,
4,GwtTestSuite.java,"* Runs all _gwt tests. Grouping them into a suite is much faster than running each as a one-test
 * ""suite,"" as the per-suite setup is expensive.",* Runs all _gwt tests.,,"Grouping them into a suite is much faster than running each as a one-test
  * ""suite,"" as the per-suite setup is expensive.",,,,,,,,,,,,,,,,,,,,
4,HashFunctionEnum.java,"* An enum that contains all of the known hash functions.
 *
 * @author Kurt Alfred Kluever",An enum that contains all of the known hash functions.,,,,,,,,,,,,@author Kurt Alfred Kluever,,,,,,,,,,
4,HostAndPort.java,"* An immutable representation of a host and port.
 *
 * <p>Example usage:
 *
 * <pre>
 * HostAndPort hp = HostAndPort.fromString(""[2001:db8::1]"")
 *     .withDefaultPort(80)
 *     .requireBracketsForIPv6();
 * hp.getHost();   // returns ""2001:db8::1""
 * hp.getPort();   // returns 80
 * hp.toString();  // returns ""[2001:db8::1]:80""
 * </pre>
 *
 * <p>Here are some examples of recognized formats:
 *
 * <ul>
 *   <li>example.com
 *   <li>example.com:80
 *   <li>192.0.2.1
 *   <li>192.0.2.1:80
 *   <li>[2001:db8::1] - {@link #getHost()} omits brackets
 *   <li>[2001:db8::1]:80 - {@link #getHost()} omits brackets
 *   <li>2001:db8::1 - Use {@link #requireBracketsForIPv6()} to prohibit this
 * </ul>
 *
 * <p>Note that this is not an exhaustive list, because these methods are only concerned with
 * brackets, colons, and port numbers. Full validation of the host field (if desired) is the
 * caller's responsibility.
 *
 * @author Paul Marks
 * @since 10.0",* An immutable representation of a host and port.,,,* @since 10.0,"* <p>Example usage:
  *
  * <pre>
  * HostAndPort hp = HostAndPort.fromString(""[2001:db8::1]"")
  * .withDefaultPort(80)
  * .requireBracketsForIPv6();
  * hp.getHost(); // returns ""2001:db8::1""
  * hp.getPort(); // returns 80
  * hp.toString(); // returns ""[2001:db8::1]:80""
  * </pre>
  *
  * <p>Here are some examples of recognized formats:
  *
  * <ul>
  * <li>example.com
  * <li>example.com:80
  * <li>192.0.2.1
  * <li>192.0.2.1:80
  * <li>[2001:db8::1] - {@link #getHost()} omits brackets
  * <li>[2001:db8::1]:80 - {@link #getHost()} omits brackets
  * <li>2001:db8::1 - Use {@link #requireBracketsForIPv6()} to prohibit this
  * </ul>
  *
  * <p>Note that this is not an exhaustive list, because these methods are only concerned with
  * brackets, colons, and port numbers. Full validation of the host field (if desired) is the
  * caller's responsibility.",,,,,,,,* @author Paul Marks,,,,"Note that this is not an exhaustive list, because these methods are only concerned with
 * brackets, colons, and port numbers. Full validation of the host field (if desired) is the
 * caller's responsibility.",,,,,,
4,ImmutableSetHashFloodingDetectionBenchmark.java,Benchmark of implementations of {@link ImmutableSet#hashFloodingDetected(Object[])}.,Benchmark of implementations of {@link ImmutableSet#hashFloodingDetected(Object[])}.,,,,,,,,,,,,,{@link ImmutableSet#hashFloodingDetected(Object[])}.,,,,,,,,,
4,ImmutableTable_CustomFieldSerializerBase.java,"* This class contains static utility methods for writing {@link ImmutableTable} GWT field
 * serializers. Serializers should delegate to {@link #serialize} and {@link #instantiate}.
 *
 * @author Chris Povirk","* This class contains static utility methods for writing {@link ImmutableTable} GWT field
  * serializers.",,,,Serializers should delegate to {@link #serialize} and {@link #instantiate}.,,,,,,,,@author Chris Povirk,,,,,,,,,,
4,LazyStackTraceBenchmark.java,"* Quick and dirty benchmark of {@link Throwables#lazyStackTrace(Throwable)}. We benchmark a ""caller
 * finder"" implementation that might be used in a logging framework.",Quick and dirty benchmark of {@link Throwables#lazyStackTrace(Throwable)}.,,"We benchmark a ""caller
  * finder"" implementation that might be used in a logging framework.",,,,,,,,,,,Quick and dirty benchmark of {@link Throwables#lazyStackTrace(Throwable)}.,,,,,,,,,
4,LongMathBenchmark.java,"* Benchmarks for the non-rounding methods of {@code LongMath}.
 *
 * @author Louis Wasserman",* Benchmarks for the non-rounding methods of {@code LongMath}.,,,,,,,,,,,,@author Louis Wasserman,,,,,,,,,,
4,MapPutAllTester.java,"* A generic JUnit test which tests {@code putAll} operations on a map. Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.
 *
 * @author Chris Povirk
 * @author Kevin Bourrillion",A generic JUnit test which tests {@code putAll} operations on a map,,,,,,,,,,,,"* @author Chris Povirk
 * @author Kevin Bourrillion",* please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.,,,"Can't be invoked directly;
 * please see {@link com.google.common.collect.testing.MapTestSuiteBuilder}.",,,,,,
4,MapSerializationTester.java,"* Basic serialization test for maps.
 *
 * @author Louis Wasserman",* Basic serialization test for maps.,,,,,,,,,,,,@author Louis Wasserman,,,,,,,,,,
4,MultimapBuilder.java,"* A builder for a multimap implementation that allows customization of the backing map and value
 * collection implementations used in a particular multimap.
 *
 * <p>This can be used to easily configure multimap data structure implementations not provided
 * explicitly in {@code com.google.common.collect}, for example:
 *
 * <pre>{@code
 * ListMultimap<String, Integer> treeListMultimap =
 *     MultimapBuilder.treeKeys().arrayListValues().build();
 * SetMultimap<Integer, MyEnum> hashEnumMultimap =
 *     MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();
 * }</pre>
 *
 * <p>{@code MultimapBuilder} instances are immutable. Invoking a configuration method has no effect
 * on the receiving instance; you must store and use the new builder instance it returns instead.
 *
 * <p>The generated multimaps are serializable if the key and value types are serializable, unless
 * stated otherwise in one of the configuration methods.
 *
 * @author Louis Wasserman
 * @param <K0> An upper bound on the key type of the generated multimap.
 * @param <V0> An upper bound on the value type of the generated multimap.
 * @since 16.0
 |
   * Leaving K and V as upper bounds rather than the actual key and value types allows type
   * parameters to be left implicit more often. CacheBuilder uses the same technique.
   |
   * An intermediate stage in a {@link MultimapBuilder} in which the key-value collection map
   * implementation has been specified, but the value collection implementation has not.
   *
   * @param <K0> The upper bound on the key type of the generated multimap.
   * @since 16.0
   |
   * Leaving K and V as upper bounds rather than the actual key and value types allows type
   * parameters to be left implicit more often. CacheBuilder uses the same technique.
   |
   * A specialization of {@link MultimapBuilder} that generates {@link ListMultimap} instances.
   *
   * @since 16.0
   |
   * Leaving K and V as upper bounds rather than the actual key and value types allows type
   * parameters to be left implicit more often. CacheBuilder uses the same technique.
   |
   * A specialization of {@link MultimapBuilder} that generates {@link SetMultimap} instances.
   *
   * @since 16.0
   |
   * Leaving K and V as upper bounds rather than the actual key and value types allows type
   * parameters to be left implicit more often. CacheBuilder uses the same technique.
   |
   * A specialization of {@link MultimapBuilder} that generates {@link SortedSetMultimap} instances.
   *
   * @since 16.0","* A builder for a multimap implementation that allows customization of the backing map and value
  * collection implementations used in a particular multimap.","This can be used to easily configure multimap data structure implementations not provided
 * explicitly in {@code com.google.common.collect},",,* @since 16.0,"* <p>This can be used to easily configure multimap data structure implementations not provided
  * explicitly in {@code com.google.common.collect}, for example:
  *
  * <pre>{@code
  * ListMultimap<String, Integer> treeListMultimap =
  * MultimapBuilder.treeKeys().arrayListValues().build();
  * SetMultimap<Integer, MyEnum> hashEnumMultimap =
  * MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();
  * }</pre>
  *
  * <p>{@code MultimapBuilder} instances are immutable. Invoking a configuration method has no effect
  * on the receiving instance; you must store and use the new builder instance it returns instead.
  *
  * <p>The generated multimaps are serializable if the key and value types are serializable, unless
  * stated otherwise in one of the configuration methods.
 
 
  * @param <K0> An upper bound on the key type of the generated multimap.
  * @param <V0> An upper bound on the value type of the generated multimap.
 
 |
  * Leaving K and V as upper bounds rather than the actual key and value types allows type
  * parameters to be left implicit more often. CacheBuilder uses the same technique.
  |
  * An intermediate stage in a {@link MultimapBuilder} in which the key-value collection map
  * implementation has been specified, but the value collection implementation has not.
  *
  * @param <K0> The upper bound on the key type of the generated multimap.
  * @since 16.0
  |
  * Leaving K and V as upper bounds rather than the actual key and value types allows type
  * parameters to be left implicit more often. CacheBuilder uses the same technique.
  |
  * A specialization of {@link MultimapBuilder} that generates {@link ListMultimap} instances.
  *",,,,,,,,* @author Louis Wasserman,,,"* @since 16.0
  |
  * Leaving K and V as upper bounds rather than the actual key and value types allows type
  * parameters to be left implicit more often. CacheBuilder uses the same technique.
  |
  * A specialization of {@link MultimapBuilder} that generates {@link SetMultimap} instances.
  *
  * @since 16.0
  |
  * Leaving K and V as upper bounds rather than the actual key and value types allows type
  * parameters to be left implicit more often. CacheBuilder uses the same technique.
  |
  * A specialization of {@link MultimapBuilder} that generates {@link SortedSetMultimap} instances.
  *
  * @since 16.0","Invoking a configuration method has no effect
 * on the receiving instance; you must store and use the new builder instance it returns instead.",,,,,,
4,MultimapBuilderTest.java,"* Tests for {@link MultimapBuilder}.
 *
 * @author Louis Wasserman",* Tests for {@link MultimapBuilder}.,,,,,,,,,,,,@author Louis Wasserman,,,,,,,,,,
4,NullsLastOrdering_CustomFieldSerializer.java,"* This class implements the GWT serialization of {@link NullsLastOrdering}.
 *
 * @author Chris Povirk",* This class implements the GWT serialization of {@link NullsLastOrdering}.,,,,,,,,,,,,@author Chris Povirk,,,,,,,,,,
4,ObjectCountHashMap.java,"* ObjectCountHashMap is an implementation of {@code AbstractObjectCountMap} that uses arrays to
 * store key objects and count values. Comparing to using a traditional {@code HashMap}
 * implementation which stores keys and count values as map entries, {@code ObjectCountHashMap}
 * minimizes object allocation and reduces memory footprint.
 *
 * <p>In the absence of element deletions, this will iterate over elements in insertion order.","* ObjectCountHashMap is an implementation of {@code AbstractObjectCountMap} that uses arrays to
  * store key objects and count values.",,"Comparing to using a traditional {@code HashMap}
  * implementation which stores keys and count values as map entries, {@code ObjectCountHashMap}
  * minimizes object allocation and reduces memory footprint.",,"* <p>In the absence of element deletions, this will iterate over elements in insertion order.",,,,,,,,,,,,,,,,,,
4,PeekingIterator.java,"* An iterator that supports a one-element lookahead while iterating.
 *
 * <p>See the Guava User Guide article on <a href=
 * ""https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator""> {@code
 * PeekingIterator}</a>.
 *
 * @author Mick Killianey
 * @since 2.0",* An iterator that supports a one-element lookahead while iterating.,,,,,,,,,,,,"* @author Mick Killianey
 * @since 2.0","* <p>See the Guava User Guide article on <a href=
 * ""https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator""> {@code
 * PeekingIterator}</a>.",,,,,,,,,
4,Preconditions.java,"* Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException(""input is negative: "" + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, ""input is negative: %s"", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 * void exampleBadCaller() {
 *   double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href=""https://github.com/google/guava/wiki/ConditionalFailuresExplained"">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code ""%s""} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code ""%s""} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href=""https://github.com/google/guava/wiki/PreconditionsExplained"">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0","* Static convenience methods that help a method or constructor check whether it was invoked
  * correctly (that is, whether its <i>preconditions</i> were met).","* <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException(""input is negative: "" + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>",,* @since 2.0,"This allows constructs such as
  *
  * <pre>{@code
  * public static double sqrt(double value) {
  * if (value < 0) {
  * throw new IllegalArgumentException(""input is negative: "" + value);
  * }
  * // calculate square root
  * }
  * }</pre>
  *
  * <p>to be replaced with the more compact
  *
  * <pre>{@code
  * public static double sqrt(double value) {
  * checkArgument(value >= 0, ""input is negative: %s"", value);
  * // calculate square root
  * }
  * }</pre>
  *
  * <p>so that a hypothetical bad caller of this method, such as:
  *
  * <pre>{@code
  * void exampleBadCaller() {
  * double d = sqrt(-1.0);
  * }
  * }</pre>
  *
  * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
  *
  * <h3>Performance</h3>
  *
  * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
  * them, even though they usually won't be needed. If you have such arguments, use the conventional
  * if/throw idiom instead.
  *
  * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
  * creation. However, the methods of this class have a large number of overloads that prevent such
  * allocations in many common cases.
  *
  * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
  * string formatting itself should not be a concern.
  *
  * <p>As with any performance concerns, you should consider profiling your code (in a production
  * environment if possible) before spending a lot of effort on tweaking a particular element.
  *
  * <h3>Other types of preconditions</h3>
  *
  * <p>Not every type of precondition failure is supported by these methods. Continue to throw
  * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
  * UnsupportedOperationException} in the situations they are intended for.
  *
  * <h3>Non-preconditions</h3>
  *
  * <p>It is of course possible to use the methods of this class to check for invalid conditions
  * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
  * misleading to future readers of the code and of stack traces. See <a
  * href=""https://github.com/google/guava/wiki/ConditionalFailuresExplained"">Conditional failures
  * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
  * similar to those in this class for non-precondition checks.
  *
  * <h3>{@code java.util.Objects.requireNonNull()}</h3>
  *
  * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
  * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
  * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
  * (The same goes for the message-accepting overloads.)
  *
  * <h3>Only {@code %s} is supported</h3>
  *
  * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
  * strings. This only supports the {@code ""%s""} specifier, not the full range of {@link
  * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
  * number of occurrences of {@code ""%s""} in the format string, {@code Preconditions} will still
  * behave as expected, and will still include all argument values in the error message; the message
  * will simply not be formatted exactly as intended.","* <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
  * of a specified type, which helps the method in which the exception was thrown communicate that
  * its caller has made a mistake.",,,,,,,* @author Kevin Bourrillion,"* <h3>More information</h3>
  *
  * <p>See the Guava User Guide on <a
  * href=""https://github.com/google/guava/wiki/PreconditionsExplained"">using {@code
  * Preconditions}</a>.
. See <a
 * href=""https://github.com/google/guava/wiki/ConditionalFailuresExplained"">Conditional failures
 * explained</a> in the Guava User Guide for more advice

. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.",,,"Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}.","As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)","If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake.",,,,
4,RegularImmutableList_CustomFieldSerializer.java,"* This class implements the GWT serialization of {@link RegularImmutableList}.
 *
 * @author Hayward Chan",* This class implements the GWT serialization of {@link RegularImmutableList}.,,,,,,,,,,,,* @author Hayward Chan,{@link RegularImmutableList}.,,,,,,,,,
4,ReserializingTestCollectionGenerator.java,"* Reserializes the sets created by another test set generator.
 *
 * <p>TODO: make CollectionTestSuiteBuilder test reserialized collections
 *
 * @author Jesse Wilson",* Reserializes the sets created by another test set generator.,,,,,,* <p>TODO: make CollectionTestSuiteBuilder test reserialized collections,,,,,,* @author Jesse Wilson,,,,,,,,,,
4,Resources.java,"* Provides utility methods for working with resources in the classpath. Note that even though these
 * methods use {@link URL} parameters, they are usually not appropriate for HTTP or other
 * non-classpath resources.
 *
 * <p>All method parameters must be non-null unless documented otherwise.
 *
 * @author Chris Nokleberg
 * @author Ben Yu
 * @author Colin Decker
 * @since 1.0
 | A byte source that reads from a URL using {@link URL#openStream()}.",* Provides utility methods for working with resources in the classpath.,A byte source that reads from a URL using {@link URL#openStream()},,* @since 1.0,* <p>All method parameters must be non-null unless documented otherwise.,,,,,,,,"* @author Chris Nokleberg
  * @author Ben Yu
  * @author Colin Decker",,,,"Note that even though these
  * methods use {@link URL} parameters, they are usually not appropriate for HTTP or other
  * non-classpath resources.",,,,,,
4,SmoothRateLimiter.java,"* How is the RateLimiter designed, and why?
   *
   * The primary feature of a RateLimiter is its ""stable rate"", the maximum rate that is should
   * allow at normal conditions. This is enforced by ""throttling"" incoming requests as needed, i.e.
   * compute, for an incoming request, the appropriate throttle time, and make the calling thread
   * wait as much.
   *
   * The simplest way to maintain a rate of QPS is to keep the timestamp of the last granted
   * request, and ensure that (1/QPS) seconds have elapsed since then. For example, for a rate of
   * QPS=5 (5 tokens per second), if we ensure that a request isn't granted earlier than 200ms after
   * the last one, then we achieve the intended rate. If a request comes and the last request was
   * granted only 100ms ago, then we wait for another 100ms. At this rate, serving 15 fresh permits
   * (i.e. for an acquire(15) request) naturally takes 3 seconds.
   *
   * It is important to realize that such a RateLimiter has a very superficial memory of the past:
   * it only remembers the last request. What if the RateLimiter was unused for a long period of
   * time, then a request arrived and was immediately granted? This RateLimiter would immediately
   * forget about that past underutilization. This may result in either underutilization or
   * overflow, depending on the real world consequences of not using the expected rate.
   *
   * Past underutilization could mean that excess resources are available. Then, the RateLimiter
   * should speed up for a while, to take advantage of these resources. This is important when the
   * rate is applied to networking (limiting bandwidth), where past underutilization typically
   * translates to ""almost empty buffers"", which can be filled immediately.
   *
   * On the other hand, past underutilization could mean that ""the server responsible for handling
   * the request has become less ready for future requests"", i.e. its caches become stale, and
   * requests become more likely to trigger expensive operations (a more extreme case of this
   * example is when a server has just booted, and it is mostly busy with getting itself up to
   * speed).
   *
   * To deal with such scenarios, we add an extra dimension, that of ""past underutilization"",
   * modeled by ""storedPermits"" variable. This variable is zero when there is no underutilization,
   * and it can grow up to maxStoredPermits, for sufficiently large underutilization. So, the
   * requested permits, by an invocation acquire(permits), are served from:
   *
   * - stored permits (if available)
   *
   * - fresh permits (for any remaining permits)
   *
   * How this works is best explained with an example:
   *
   * For a RateLimiter that produces 1 token per second, every second that goes by with the
   * RateLimiter being unused, we increase storedPermits by 1. Say we leave the RateLimiter unused
   * for 10 seconds (i.e., we expected a request at time X, but we are at time X + 10 seconds before
   * a request actually arrives; this is also related to the point made in the last paragraph), thus
   * storedPermits becomes 10.0 (assuming maxStoredPermits >= 10.0). At that point, a request of
   * acquire(3) arrives. We serve this request out of storedPermits, and reduce that to 7.0 (how
   * this is translated to throttling time is discussed later). Immediately after, assume that an
   * acquire(10) request arriving. We serve the request partly from storedPermits, using all the
   * remaining 7.0 permits, and the remaining 3.0, we serve them by fresh permits produced by the
   * rate limiter.
   *
   * We already know how much time it takes to serve 3 fresh permits: if the rate is
   * ""1 token per second"", then this will take 3 seconds. But what does it mean to serve 7 stored
   * permits? As explained above, there is no unique answer. If we are primarily interested to deal
   * with underutilization, then we want stored permits to be given out /faster/ than fresh ones,
   * because underutilization = free resources for the taking. If we are primarily interested to
   * deal with overflow, then stored permits could be given out /slower/ than fresh ones. Thus, we
   * require a (different in each case) function that translates storedPermits to throttling time.
   *
   * This role is played by storedPermitsToWaitTime(double storedPermits, double permitsToTake). The
   * underlying model is a continuous function mapping storedPermits (from 0.0 to maxStoredPermits)
   * onto the 1/rate (i.e. intervals) that is effective at the given storedPermits. ""storedPermits""
   * essentially measure unused time; we spend unused time buying/storing permits. Rate is
   * ""permits / time"", thus ""1 / rate = time / permits"". Thus, ""1/rate"" (time / permits) times
   * ""permits"" gives time, i.e., integrals on this function (which is what storedPermitsToWaitTime()
   * computes) correspond to minimum intervals between subsequent requests, for the specified number
   * of requested permits.
   *
   * Here is an example of storedPermitsToWaitTime: If storedPermits == 10.0, and we want 3 permits,
   * we take them from storedPermits, reducing them to 7.0, and compute the throttling for these as
   * a call to storedPermitsToWaitTime(storedPermits = 10.0, permitsToTake = 3.0), which will
   * evaluate the integral of the function from 7.0 to 10.0.
   *
   * Using integrals guarantees that the effect of a single acquire(3) is equivalent to {
   * acquire(1); acquire(1); acquire(1); }, or { acquire(2); acquire(1); }, etc, since the integral
   * of the function in [7.0, 10.0] is equivalent to the sum of the integrals of [7.0, 8.0], [8.0,
   * 9.0], [9.0, 10.0] (and so on), no matter what the function is. This guarantees that we handle
   * correctly requests of varying weight (permits), /no matter/ what the actual function is - so we
   * can tweak the latter freely. (The only requirement, obviously, is that we can compute its
   * integrals).
   *
   * Note well that if, for this function, we chose a horizontal line, at height of exactly (1/QPS),
   * then the effect of the function is non-existent: we serve storedPermits at exactly the same
   * cost as fresh ones (1/QPS is the cost for each). We use this trick later.
   *
   * If we pick a function that goes /below/ that horizontal line, it means that we reduce the area
   * of the function, thus time. Thus, the RateLimiter becomes /faster/ after a period of
   * underutilization. If, on the other hand, we pick a function that goes /above/ that horizontal
   * line, then it means that the area (time) is increased, thus storedPermits are more costly than
   * fresh permits, thus the RateLimiter becomes /slower/ after a period of underutilization.
   *
   * Last, but not least: consider a RateLimiter with rate of 1 permit per second, currently
   * completely unused, and an expensive acquire(100) request comes. It would be nonsensical to just
   * wait for 100 seconds, and /then/ start the actual task. Why wait without doing anything? A much
   * better approach is to /allow/ the request right away (as if it was an acquire(1) request
   * instead), and postpone /subsequent/ requests as needed. In this version, we allow starting the
   * task immediately, and postpone by 100 seconds future requests, thus we allow for work to get
   * done in the meantime instead of waiting idly.
   *
   * This has important consequences: it means that the RateLimiter doesn't remember the time of the
   * _last_ request, but it remembers the (expected) time of the _next_ request. This also enables
   * us to tell immediately (see tryAcquire(timeout)) whether a particular timeout is enough to get
   * us to the point of the next scheduling time, since we always maintain that. And what we mean by
   * ""an unused RateLimiter"" is also defined by that notion: when we observe that the
   * ""expected arrival time of the next request"" is actually in the past, then the difference (now -
   * past) is the amount of time that the RateLimiter was formally unused, and it is that amount of
   * time which we translate to storedPermits. (We increase storedPermits with the amount of permits
   * that would have been produced in that idle time). So, if rate == 1 permit per second, and
   * arrivals come exactly one second after the previous, then storedPermits is _never_ increased --
   * we would only increase it for arrivals _later_ than the expected one second.
   |
   * The time when the next request (no matter its size) will be granted. After granting a request,
   * this is pushed further in the future. Large requests push this further than small requests.
   |
   * This implements the following function where coldInterval = coldFactor * stableInterval.
   *
   * <pre>
   *          ^ throttling
   *          |
   *    cold  +                  /
   * interval |                 /.
   *          |                / .
   *          |               /  .   ← ""warmup period"" is the area of the trapezoid between
   *          |              /   .     thresholdPermits and maxPermits
   *          |             /    .
   *          |            /     .
   *          |           /      .
   *   stable +----------/  WARM .
   * interval |          .   UP  .
   *          |          . PERIOD.
   *          |          .       .
   *        0 +----------+-------+--------------→ storedPermits
   *          0 thresholdPermits maxPermits
   * </pre>
   *
   * Before going into the details of this particular function, let's keep in mind the basics:
   *
   * <ol>
   *   <li>The state of the RateLimiter (storedPermits) is a vertical line in this figure.
   *   <li>When the RateLimiter is not used, this goes right (up to maxPermits)
   *   <li>When the RateLimiter is used, this goes left (down to zero), since if we have
   *       storedPermits, we serve from those first
   *   <li>When _unused_, we go right at a constant rate! The rate at which we move to the right is
   *       chosen as maxPermits / warmupPeriod. This ensures that the time it takes to go from 0 to
   *       maxPermits is equal to warmupPeriod.
   *   <li>When _used_, the time it takes, as explained in the introductory class note, is equal to
   *       the integral of our function, between X permits and X-K permits, assuming we want to
   *       spend K saved permits.
   * </ol>
   *
   * <p>In summary, the time it takes to move to the left (spend K permits), is equal to the area of
   * the function of width == K.
   *
   * <p>Assuming we have saturated demand, the time to go from maxPermits to thresholdPermits is
   * equal to warmupPeriod. And the time to go from thresholdPermits to 0 is warmupPeriod/2. (The
   * reason that this is warmupPeriod/2 is to maintain the behavior of the original implementation
   * where coldFactor was hard coded as 3.)
   *
   * <p>It remains to calculate thresholdsPermits and maxPermits.
   *
   * <ul>
   *   <li>The time to go from thresholdPermits to 0 is equal to the integral of the function
   *       between 0 and thresholdPermits. This is thresholdPermits * stableIntervals. By (5) it is
   *       also equal to warmupPeriod/2. Therefore
   *       <blockquote>
   *       thresholdPermits = 0.5 * warmupPeriod / stableInterval
   *       </blockquote>
   *   <li>The time to go from maxPermits to thresholdPermits is equal to the integral of the
   *       function between thresholdPermits and maxPermits. This is the area of the pictured
   *       trapezoid, and it is equal to 0.5 * (stableInterval + coldInterval) * (maxPermits -
   *       thresholdPermits). It is also equal to warmupPeriod, so
   *       <blockquote>
   *       maxPermits = thresholdPermits + 2 * warmupPeriod / (stableInterval + coldInterval)
   *       </blockquote>
   * </ul>
   |
   * How is the RateLimiter designed, and why?
   *
   * The primary feature of a RateLimiter is its ""stable rate"", the maximum rate that is should
   * allow at normal conditions. This is enforced by ""throttling"" incoming requests as needed, i.e.
   * compute, for an incoming request, the appropriate throttle time, and make the calling thread
   * wait as much.
   *
   * The simplest way to maintain a rate of QPS is to keep the timestamp of the last granted
   * request, and ensure that (1/QPS) seconds have elapsed since then. For example, for a rate of
   * QPS=5 (5 tokens per second), if we ensure that a request isn't granted earlier than 200ms after
   * the last one, then we achieve the intended rate. If a request comes and the last request was
   * granted only 100ms ago, then we wait for another 100ms. At this rate, serving 15 fresh permits
   * (i.e. for an acquire(15) request) naturally takes 3 seconds.
   *
   * It is important to realize that such a RateLimiter has a very superficial memory of the past:
   * it only remembers the last request. What if the RateLimiter was unused for a long period of
   * time, then a request arrived and was immediately granted? This RateLimiter would immediately
   * forget about that past underutilization. This may result in either underutilization or
   * overflow, depending on the real world consequences of not using the expected rate.
   *
   * Past underutilization could mean that excess resources are available. Then, the RateLimiter
   * should speed up for a while, to take advantage of these resources. This is important when the
   * rate is applied to networking (limiting bandwidth), where past underutilization typically
   * translates to ""almost empty buffers"", which can be filled immediately.
   *
   * On the other hand, past underutilization could mean that ""the server responsible for handling
   * the request has become less ready for future requests"", i.e. its caches become stale, and
   * requests become more likely to trigger expensive operations (a more extreme case of this
   * example is when a server has just booted, and it is mostly busy with getting itself up to
   * speed).
   *
   * To deal with such scenarios, we add an extra dimension, that of ""past underutilization"",
   * modeled by ""storedPermits"" variable. This variable is zero when there is no underutilization,
   * and it can grow up to maxStoredPermits, for sufficiently large underutilization. So, the
   * requested permits, by an invocation acquire(permits), are served from:
   *
   * - stored permits (if available)
   *
   * - fresh permits (for any remaining permits)
   *
   * How this works is best explained with an example:
   *
   * For a RateLimiter that produces 1 token per second, every second that goes by with the
   * RateLimiter being unused, we increase storedPermits by 1. Say we leave the RateLimiter unused
   * for 10 seconds (i.e., we expected a request at time X, but we are at time X + 10 seconds before
   * a request actually arrives; this is also related to the point made in the last paragraph), thus
   * storedPermits becomes 10.0 (assuming maxStoredPermits >= 10.0). At that point, a request of
   * acquire(3) arrives. We serve this request out of storedPermits, and reduce that to 7.0 (how
   * this is translated to throttling time is discussed later). Immediately after, assume that an
   * acquire(10) request arriving. We serve the request partly from storedPermits, using all the
   * remaining 7.0 permits, and the remaining 3.0, we serve them by fresh permits produced by the
   * rate limiter.
   *
   * We already know how much time it takes to serve 3 fresh permits: if the rate is
   * ""1 token per second"", then this will take 3 seconds. But what does it mean to serve 7 stored
   * permits? As explained above, there is no unique answer. If we are primarily interested to deal
   * with underutilization, then we want stored permits to be given out /faster/ than fresh ones,
   * because underutilization = free resources for the taking. If we are primarily interested to
   * deal with overflow, then stored permits could be given out /slower/ than fresh ones. Thus, we
   * require a (different in each case) function that translates storedPermits to throttling time.
   *
   * This role is played by storedPermitsToWaitTime(double storedPermits, double permitsToTake). The
   * underlying model is a continuous function mapping storedPermits (from 0.0 to maxStoredPermits)
   * onto the 1/rate (i.e. intervals) that is effective at the given storedPermits. ""storedPermits""
   * essentially measure unused time; we spend unused time buying/storing permits. Rate is
   * ""permits / time"", thus ""1 / rate = time / permits"". Thus, ""1/rate"" (time / permits) times
   * ""permits"" gives time, i.e., integrals on this function (which is what storedPermitsToWaitTime()
   * computes) correspond to minimum intervals between subsequent requests, for the specified number
   * of requested permits.
   *
   * Here is an example of storedPermitsToWaitTime: If storedPermits == 10.0, and we want 3 permits,
   * we take them from storedPermits, reducing them to 7.0, and compute the throttling for these as
   * a call to storedPermitsToWaitTime(storedPermits = 10.0, permitsToTake = 3.0), which will
   * evaluate the integral of the function from 7.0 to 10.0.
   *
   * Using integrals guarantees that the effect of a single acquire(3) is equivalent to {
   * acquire(1); acquire(1); acquire(1); }, or { acquire(2); acquire(1); }, etc, since the integral
   * of the function in [7.0, 10.0] is equivalent to the sum of the integrals of [7.0, 8.0], [8.0,
   * 9.0], [9.0, 10.0] (and so on), no matter what the function is. This guarantees that we handle
   * correctly requests of varying weight (permits), /no matter/ what the actual function is - so we
   * can tweak the latter freely. (The only requirement, obviously, is that we can compute its
   * integrals).
   *
   * Note well that if, for this function, we chose a horizontal line, at height of exactly (1/QPS),
   * then the effect of the function is non-existent: we serve storedPermits at exactly the same
   * cost as fresh ones (1/QPS is the cost for each). We use this trick later.
   *
   * If we pick a function that goes /below/ that horizontal line, it means that we reduce the area
   * of the function, thus time. Thus, the RateLimiter becomes /faster/ after a period of
   * underutilization. If, on the other hand, we pick a function that goes /above/ that horizontal
   * line, then it means that the area (time) is increased, thus storedPermits are more costly than
   * fresh permits, thus the RateLimiter becomes /slower/ after a period of underutilization.
   *
   * Last, but not least: consider a RateLimiter with rate of 1 permit per second, currently
   * completely unused, and an expensive acquire(100) request comes. It would be nonsensical to just
   * wait for 100 seconds, and /then/ start the actual task. Why wait without doing anything? A much
   * better approach is to /allow/ the request right away (as if it was an acquire(1) request
   * instead), and postpone /subsequent/ requests as needed. In this version, we allow starting the
   * task immediately, and postpone by 100 seconds future requests, thus we allow for work to get
   * done in the meantime instead of waiting idly.
   *
   * This has important consequences: it means that the RateLimiter doesn't remember the time of the
   * _last_ request, but it remembers the (expected) time of the _next_ request. This also enables
   * us to tell immediately (see tryAcquire(timeout)) whether a particular timeout is enough to get
   * us to the point of the next scheduling time, since we always maintain that. And what we mean by
   * ""an unused RateLimiter"" is also defined by that notion: when we observe that the
   * ""expected arrival time of the next request"" is actually in the past, then the difference (now -
   * past) is the amount of time that the RateLimiter was formally unused, and it is that amount of
   * time which we translate to storedPermits. (We increase storedPermits with the amount of permits
   * that would have been produced in that idle time). So, if rate == 1 permit per second, and
   * arrivals come exactly one second after the previous, then storedPermits is _never_ increased --
   * we would only increase it for arrivals _later_ than the expected one second.
   |
   * The time when the next request (no matter its size) will be granted. After granting a request,
   * this is pushed further in the future. Large requests push this further than small requests.
   |
   * This implements a ""bursty"" RateLimiter, where storedPermits are translated to zero throttling.
   * The maximum number of permits that can be saved (when the RateLimiter is unused) is defined in
   * terms of time, in this sense: if a RateLimiter is 2qps, and this time is specified as 10
   * seconds, we can save up to 2 * 10 = 20 permits.","* The primary feature of a RateLimiter is its ""stable rate"", the maximum rate that is should
   * allow at normal conditions. This is enforced by ""throttling"" incoming requests as needed, i.e.
   * compute, for an incoming request, the appropriate throttle time, and make the calling thread
   * wait as much.
   * <p>In summary, the time it takes to move to the left (spend K permits), is equal to the area of
   * the function of width == K","* The simplest way to maintain a rate of QPS is to keep the timestamp of the last granted
   * request, and ensure that (1/QPS) seconds have elapsed since then. For example, for a rate of
   * QPS=5 (5 tokens per second), if we ensure that a request isn't granted earlier than 200ms after
   * the last one, then we achieve the intended rate. If a request comes and the last request was
   * granted only 100ms ago, then we wait for another 100ms. At this rate, serving 15 fresh permits
   * (i.e. for an acquire(15) request) naturally takes 3 seconds.
   *
   * It is important to realize that such a RateLimiter has a very superficial memory of the past:
   * it only remembers the last request. What if the RateLimiter was unused for a long period of
   * time, then a request arrived and was immediately granted? This RateLimiter would immediately
   * forget about that past underutilization. This may result in either underutilization or
   * overflow, depending on the real world consequences of not using the expected rate.
   *
   * Past underutilization could mean that excess resources are available. Then, the RateLimiter
   * should speed up for a while, to take advantage of these resources. This is important when the
   * rate is applied to networking (limiting bandwidth), where past underutilization typically
   * translates to ""almost empty buffers"", which can be filled immediately.
   *
   * On the other hand, past underutilization could mean that ""the server responsible for handling
   * the request has become less ready for future requests"", i.e. its caches become stale, and
   * requests become more likely to trigger expensive operations (a more extreme case of this
   * example is when a server has just booted, and it is mostly busy with getting itself up to
   * speed).
   *
   * To deal with such scenarios, we add an extra dimension, that of ""past underutilization"",
   * modeled by ""storedPermits"" variable. This variable is zero when there is no underutilization,
   * and it can grow up to maxStoredPermits, for sufficiently large underutilization. So, the
   * requested permits, by an invocation acquire(permits), are served from:
   *
   * - stored permits (if available)
   *
   * - fresh permits (for any remaining permits)
 
   * This implements the following function where coldInterval = coldFactor * stableInterval.
   *
   * <pre>
   *          ^ throttling
   *          |
   *    cold  +                  /
   * interval |                 /.
   *          |                / .
   *          |               /  .   ← ""warmup period"" is the area of the trapezoid between
   *          |              /   .     thresholdPermits and maxPermits
   *          |             /    .
   *          |            /     .
   *          |           /      .
   *   stable +----------/  WARM .
   * interval |          .   UP  .
   *          |          . PERIOD.
   *          |          .       .
   *        0 +----------+-------+--------------→ storedPermits
   *          0 thresholdPermits maxPermits
   * </pre>
   *
   * Before going into the details of this particular function, let's keep in mind the basics:
   *
   * <ol>
   *   <li>The state of the RateLimiter (storedPermits) is a vertical line in this figure.
   *   <li>When the RateLimiter is not used, this goes right (up to maxPermits)
   *   <li>When the RateLimiter is used, this goes left (down to zero), since if we have
   *       storedPermits, we serve from those first
   *   <li>When _unused_, we go right at a constant rate! The rate at which we move to the right is
   *       chosen as maxPermits / warmupPeriod. This ensures that the time it takes to go from 0 to
   *       maxPermits is equal to warmupPeriod.
   *   <li>When _used_, the time it takes, as explained in the introductory class note, is equal to
   *       the integral of our function, between X permits and X-K permits, assuming we want to
   *       spend K saved permits.
   * </ol>","|
   * This implements a ""bursty"" RateLimiter, where storedPermits are translated to zero throttling.
   * The maximum number of permits that can be saved (when the RateLimiter is unused) is defined in
   * terms of time, in this sense: if a RateLimiter is 2qps, and this time is specified as 10
   * seconds, we can save up to 2 * 10 = 20 permits.
   * It is important to realize that such a RateLimiter has a very superficial memory of the past:
   * it only remembers the last request. What if the RateLimiter was unused for a long period of
   * time, then a request arrived and was immediately granted? This RateLimiter would immediately
   * forget about that past underutilization. This may result in either underutilization or
   * overflow, depending on the real world consequences of not using the expected rate.",,"How this works is best explained with an example:
   *
   * For a RateLimiter that produces 1 token per second, every second that goes by with the
   * RateLimiter being unused, we increase storedPermits by 1. Say we leave the RateLimiter unused
   * for 10 seconds (i.e., we expected a request at time X, but we are at time X + 10 seconds before
   * a request actually arrives; this is also related to the point made in the last paragraph), thus
   * storedPermits becomes 10.0 (assuming maxStoredPermits >= 10.0). At that point, a request of
   * acquire(3) arrives. We serve this request out of storedPermits, and reduce that to 7.0 (how
   * this is translated to throttling time is discussed later). Immediately after, assume that an
   * acquire(10) request arriving. We serve the request partly from storedPermits, using all the
   * remaining 7.0 permits, and the remaining 3.0, we serve them by fresh permits produced by the
   * rate limiter.
   *
   * We already know how much time it takes to serve 3 fresh permits: if the rate is
   * ""1 token per second"", then this will take 3 seconds. But what does it mean to serve 7 stored
   * permits? As explained above, there is no unique answer. If we are primarily interested to deal
   * with underutilization, then we want stored permits to be given out /faster/ than fresh ones,
   * because underutilization = free resources for the taking. If we are primarily interested to
   * deal with overflow, then stored permits could be given out /slower/ than fresh ones. Thus, we
   * require a (different in each case) function that translates storedPermits to throttling time.
   *
   * This role is played by storedPermitsToWaitTime(double storedPermits, double permitsToTake). The
   * underlying model is a continuous function mapping storedPermits (from 0.0 to maxStoredPermits)
   * onto the 1/rate (i.e. intervals) that is effective at the given storedPermits. ""storedPermits""
   * essentially measure unused time; we spend unused time buying/storing permits. Rate is
   * ""permits / time"", thus ""1 / rate = time / permits"". Thus, ""1/rate"" (time / permits) times
   * ""permits"" gives time, i.e., integrals on this function (which is what storedPermitsToWaitTime()
   * computes) correspond to minimum intervals between subsequent requests, for the specified number
   * of requested permits.
   *
   * Here is an example of storedPermitsToWaitTime: If storedPermits == 10.0, and we want 3 permits,
   * we take them from storedPermits, reducing them to 7.0, and compute the throttling for these as
   * a call to storedPermitsToWaitTime(storedPermits = 10.0, permitsToTake = 3.0), which will
   * evaluate the integral of the function from 7.0 to 10.0.
   *
   * Using integrals guarantees that the effect of a single acquire(3) is equivalent to {
   * acquire(1); acquire(1); acquire(1); }, or { acquire(2); acquire(1); }, etc, since the integral
   * of the function in [7.0, 10.0] is equivalent to the sum of the integrals of [7.0, 8.0], [8.0,
   * 9.0], [9.0, 10.0] (and so on), no matter what the function is. This guarantees that we handle
   * correctly requests of varying weight (permits), /no matter/ what the actual function is - so we
   * can tweak the latter freely. (The only requirement, obviously, is that we can compute its
   * integrals).
If we pick a function that goes /below/ that horizontal line, it means that we reduce the area
   * of the function, thus time. Thus, the RateLimiter becomes /faster/ after a period of
   * underutilization. If, on the other hand, we pick a function that goes /above/ that horizontal
   * line, then it means that the area (time) is increased, thus storedPermits are more costly than
   * fresh permits, thus the RateLimiter becomes /slower/ after a period of underutilization.
   *
   * Last, but not least: consider a RateLimiter with rate of 1 permit per second, currently
   * completely unused, and an expensive acquire(100) request comes. It would be nonsensical to just
   * wait for 100 seconds, and /then/ start the actual task. Why wait without doing anything? A much
   * better approach is to /allow/ the request right away (as if it was an acquire(1) request
   * instead), and postpone /subsequent/ requests as needed. In this version, we allow starting the
   * task immediately, and postpone by 100 seconds future requests, thus we allow for work to get
   * done in the meantime instead of waiting idly.
   *
   * This has important consequences: it means that the RateLimiter doesn't remember the time of the
   * _last_ request, but it remembers the (expected) time of the _next_ request. This also enables
   * us to tell immediately (see tryAcquire(timeout)) whether a particular timeout is enough to get
   * us to the point of the next scheduling time, since we always maintain that. And what we mean by
   * ""an unused RateLimiter"" is also defined by that notion: when we observe that the
   * ""expected arrival time of the next request"" is actually in the past, then the difference (now -
   * past) is the amount of time that the RateLimiter was formally unused, and it is that amount of
   * time which we translate to storedPermits. (We increase storedPermits with the amount of permits
   * that would have been produced in that idle time). So, if rate == 1 permit per second, and
   * arrivals come exactly one second after the previous, then storedPermits is _never_ increased --
   * we would only increase it for arrivals _later_ than the expected one second.
   |
   * The time when the next request (no matter its size) will be granted. After granting a request,
   * this is pushed further in the future. Large requests push this further than small requests.
   |",,,,,,,,,,"* How is the RateLimiter designed, and why?
   *
   * The primary feature of a RateLimiter is its ""stable rate"", the maximum rate that is should
   * allow at normal conditions. This is enforced by ""throttling"" incoming requests as needed, i.e.
   * compute, for an incoming request, the appropriate throttle time, and make the calling thread
   * wait as much.
   *
   * The simplest way to maintain a rate of QPS is to keep the timestamp of the last granted
   * request, and ensure that (1/QPS) seconds have elapsed since then. For example, for a rate of
   * QPS=5 (5 tokens per second), if we ensure that a request isn't granted earlier than 200ms after
   * the last one, then we achieve the intended rate. If a request comes and the last request was
   * granted only 100ms ago, then we wait for another 100ms. At this rate, serving 15 fresh permits
   * (i.e. for an acquire(15) request) naturally takes 3 seconds.
   *
   * It is important to realize that such a RateLimiter has a very superficial memory of the past:
   * it only remembers the last request. What if the RateLimiter was unused for a long period of
   * time, then a request arrived and was immediately granted? This RateLimiter would immediately
   * forget about that past underutilization. This may result in either underutilization or
   * overflow, depending on the real world consequences of not using the expected rate.
   *
   * Past underutilization could mean that excess resources are available. Then, the RateLimiter
   * should speed up for a while, to take advantage of these resources. This is important when the
   * rate is applied to networking (limiting bandwidth), where past underutilization typically
   * translates to ""almost empty buffers"", which can be filled immediately.
   *
   * On the other hand, past underutilization could mean that ""the server responsible for handling
   * the request has become less ready for future requests"", i.e. its caches become stale, and
   * requests become more likely to trigger expensive operations (a more extreme case of this
   * example is when a server has just booted, and it is mostly busy with getting itself up to
   * speed).
   *
   * To deal with such scenarios, we add an extra dimension, that of ""past underutilization"",
   * modeled by ""storedPermits"" variable. This variable is zero when there is no underutilization,
   * and it can grow up to maxStoredPermits, for sufficiently large underutilization. So, the
   * requested permits, by an invocation acquire(permits), are served from:
   *
   * - stored permits (if available)
   *
   * - fresh permits (for any remaining permits)
   *
   * How this works is best explained with an example:
   *
   * For a RateLimiter that produces 1 token per second, every second that goes by with the
   * RateLimiter being unused, we increase storedPermits by 1. Say we leave the RateLimiter unused
   * for 10 seconds (i.e., we expected a request at time X, but we are at time X + 10 seconds before
   * a request actually arrives; this is also related to the point made in the last paragraph), thus
   * storedPermits becomes 10.0 (assuming maxStoredPermits >= 10.0). At that point, a request of
   * acquire(3) arrives. We serve this request out of storedPermits, and reduce that to 7.0 (how
   * this is translated to throttling time is discussed later). Immediately after, assume that an
   * acquire(10) request arriving. We serve the request partly from storedPermits, using all the
   * remaining 7.0 permits, and the remaining 3.0, we serve them by fresh permits produced by the
   * rate limiter.
   *
   * We already know how much time it takes to serve 3 fresh permits: if the rate is
   * ""1 token per second"", then this will take 3 seconds. But what does it mean to serve 7 stored
   * permits? As explained above, there is no unique answer. If we are primarily interested to deal
   * with underutilization, then we want stored permits to be given out /faster/ than fresh ones,
   * because underutilization = free resources for the taking. If we are primarily interested to
   * deal with overflow, then stored permits could be given out /slower/ than fresh ones. Thus, we
   * require a (different in each case) function that translates storedPermits to throttling time.
   *
   * This role is played by storedPermitsToWaitTime(double storedPermits, double permitsToTake). The
   * underlying model is a continuous function mapping storedPermits (from 0.0 to maxStoredPermits)
   * onto the 1/rate (i.e. intervals) that is effective at the given storedPermits. ""storedPermits""
   * essentially measure unused time; we spend unused time buying/storing permits. Rate is
   * ""permits / time"", thus ""1 / rate = time / permits"". Thus, ""1/rate"" (time / permits) times
   * ""permits"" gives time, i.e., integrals on this function (which is what storedPermitsToWaitTime()
   * computes) correspond to minimum intervals between subsequent requests, for the specified number
   * of requested permits.
   *
   * Here is an example of storedPermitsToWaitTime: If storedPermits == 10.0, and we want 3 permits,
   * we take them from storedPermits, reducing them to 7.0, and compute the throttling for these as
   * a call to storedPermitsToWaitTime(storedPermits = 10.0, permitsToTake = 3.0), which will
   * evaluate the integral of the function from 7.0 to 10.0.
   *
   * Using integrals guarantees that the effect of a single acquire(3) is equivalent to {
   * acquire(1); acquire(1); acquire(1); }, or { acquire(2); acquire(1); }, etc, since the integral
   * of the function in [7.0, 10.0] is equivalent to the sum of the integrals of [7.0, 8.0], [8.0,
   * 9.0], [9.0, 10.0] (and so on), no matter what the function is. This guarantees that we handle
   * correctly requests of varying weight (permits), /no matter/ what the actual function is - so we
   * can tweak the latter freely. (The only requirement, obviously, is that we can compute its
   * integrals).
   *
   * Note well that if, for this function, we chose a horizontal line, at height of exactly (1/QPS),
   * then the effect of the function is non-existent: we serve storedPermits at exactly the same
   * cost as fresh ones (1/QPS is the cost for each). We use this trick later.
   *
   * If we pick a function that goes /below/ that horizontal line, it means that we reduce the area
   * of the function, thus time. Thus, the RateLimiter becomes /faster/ after a period of
   * underutilization. If, on the other hand, we pick a function that goes /above/ that horizontal
   * line, then it means that the area (time) is increased, thus storedPermits are more costly than
   * fresh permits, thus the RateLimiter becomes /slower/ after a period of underutilization.
   *
   * Last, but not least: consider a RateLimiter with rate of 1 permit per second, currently
   * completely unused, and an expensive acquire(100) request comes. It would be nonsensical to just
   * wait for 100 seconds, and /then/ start the actual task. Why wait without doing anything? A much
   * better approach is to /allow/ the request right away (as if it was an acquire(1) request
   * instead), and postpone /subsequent/ requests as needed. In this version, we allow starting the
   * task immediately, and postpone by 100 seconds future requests, thus we allow for work to get
   * done in the meantime instead of waiting idly.
   *
   * This has important consequences: it means that the RateLimiter doesn't remember the time of the
   * _last_ request, but it remembers the (expected) time of the _next_ request. This also enables
   * us to tell immediately (see tryAcquire(timeout)) whether a particular timeout is enough to get
   * us to the point of the next scheduling time, since we always maintain that. And what we mean by
   * ""an unused RateLimiter"" is also defined by that notion: when we observe that the
   * ""expected arrival time of the next request"" is actually in the past, then the difference (now -
   * past) is the amount of time that the RateLimiter was formally unused, and it is that amount of
   * time which we translate to storedPermits. (We increase storedPermits with the amount of permits
   * that would have been produced in that idle time). So, if rate == 1 permit per second, and
   * arrivals come exactly one second after the previous, then storedPermits is _never_ increased --
   * we would only increase it for arrivals _later_ than the expected one second.
   |
   * The time when the next request (no matter its size) will be granted. After granting a request,
   * this is pushed further in the future. Large requests push this further than small requests.",,"* Note well that if, for this function, we chose a horizontal line, at height of exactly (1/QPS),
   * then the effect of the function is non-existent: we serve storedPermits at exactly the same
   * cost as fresh ones (1/QPS is the cost for each). We use this trick later.",,"Thus, we
   * require a (different in each case) function that translates storedPermits to throttling time.
 (The only requirement, obviously, is that we can compute its
   * integrals).",,,,
4,SortedSetNavigationTester.java,"* A generic JUnit test which tests operations on a SortedSet. Can't be invoked directly; please see
 * {@code SortedSetTestSuiteBuilder}.
 *
 * @author Jesse Wilson
 * @author Louis Wasserman",* A generic JUnit test which tests operations on a SortedSet.,,,,Can't be invoked directly;,,,,,,,,"* @author Jesse Wilson
  * @author Louis Wasserman","Can't be invoked directly; please see
  * {@code SortedSetTestSuiteBuilder}.",,,,,,,,,
4,SubscriberTest.java,"* Tests for {@link Subscriber}.
 *
 * @author Cliff Biffle
 * @author Colin Decker
 | Local exception subclass to check variety of exception thrown. | Local Error subclass to check variety of error thrown.",* Tests for {@link Subscriber}.,,,,,| Local exception subclass to check variety of exception thrown. | Local Error subclass to check variety of error thrown.,,,,,,,"* @author Cliff Biffle
  * @author Colin Decker",,,,,,,,,,
4,TesterRequirements.java,"* Encapsulates the constraints that a class under test must satisfy in order for a tester method to
 * be run against that class.
 *
 * @author George van den Driessche","* Encapsulates the constraints that a class under test must satisfy in order for a tester method to
  * be run against that class.",,,,,,,,,,,,* @author George van den Driessche,,,,,,,,,,
4,TestStringListGenerator.java,"* TODO: javadoc.
 *
 * @author Kevin Bourrillion",,,,,,,* TODO: javadoc.,,,,,,@author Kevin Bourrillion,,,,,,,,,,
4,WrappingScheduledExecutorService.java,"* An abstract {@code ScheduledExecutorService} that allows subclasses to {@linkplain
 * #wrapTask(Callable) wrap} tasks before they are submitted to the underlying executor.
 *
 * <p>Note that task wrapping may occur even if the task is never executed.
 *
 * @author Luke Sandberg","* An abstract {@code ScheduledExecutorService} that allows subclasses to {@linkplain
  * #wrapTask(Callable) wrap} tasks before they are submitted to the underlying executor.",,,,* <p>Note that task wrapping may occur even if the task is never executed.,,,,,,,,* @author Luke Sandberg,,,,* <p>Note that task wrapping may occur even if the task is never executed.,,,,,,
5,AbstractModule.java,"""* A support class for {@link Module}s which reduces repetition and results in a more readable
 * configuration. Simply extend this class, implement {@link #configure()}, and call the inherited
 * methods which mirror those found in {@link Binder}. For example:
 *
 * <pre>
 * public class MyModule extends AbstractModule {
 *   protected void configure() {
 *     bind(Service.class).to(ServiceImpl.class).in(Singleton.class);
 *     bind(CreditCardPaymentService.class);
 *     bind(PaymentService.class).to(CreditCardPaymentService.class);
 *     bindConstant().annotatedWith(Names.named(""port"")).to(8080);
 *   }
 * }
 * </pre>
 *
 * @author crazybob@google.com (Bob Lee)
 /**""","""* A support class for {@link Module}s which reduces repetition and results in a more readable
  * configuration.",,,,"Simply extend this class, implement {@link #configure()}, and call the inherited
  * methods which mirror those found in {@link Binder}. For example:
  *
  * <pre>
  * public class MyModule extends AbstractModule {
  * protected void configure() {
  * bind(Service.class).to(ServiceImpl.class).in(Singleton.class);
  * bind(CreditCardPaymentService.class);
  * bind(PaymentService.class).to(CreditCardPaymentService.class);
  * bindConstant().annotatedWith(Names.named(""port"")).to(8080);
  * }
  * }
  * </pre>",,,,,,,,* @author crazybob@google.com (Bob Lee),,,,,,,,,,
5,Binder.java,"""* Collects configuration information (primarily <i>bindings</i>) which will be used to create an
 * {@link Injector}. Guice provides this object to your application's {@link Module} implementors so
 * they may each contribute their own bindings and other registrations.
 *
 * <h3>The Guice Binding EDSL</h3>
 *
 * Guice uses an <i>embedded domain-specific language</i>, or EDSL, to help you create bindings
 * simply and readably. This approach is great for overall usability, but it does come with a small
 * cost: <b>it is difficult to learn how to use the Binding EDSL by reading method-level
 * javadocs</b>. Instead, you should consult the series of examples below. To save space, these
 * examples omit the opening {@code binder}, just as you will if your module extends {@link
 * AbstractModule}.
 *
 * <pre>
 *     bind(ServiceImpl.class);</pre>
 *
 * This statement does essentially nothing; it ""binds the {@code ServiceImpl} class to itself"" and
 * does not change Guice's default behavior. You may still want to use this if you prefer your
 * {@link Module} class to serve as an explicit <i>manifest</i> for the services it provides. Also,
 * in rare cases, Guice may be unable to validate a binding at injector creation time unless it is
 * given explicitly.
 *
 * <pre>
 *     bind(Service.class).to(ServiceImpl.class);</pre>
 *
 * Specifies that a request for a {@code Service} instance with no binding annotations should be
 * treated as if it were a request for a {@code ServiceImpl} instance. This <i>overrides</i> the
 * function of any {@link ImplementedBy @ImplementedBy} or {@link ProvidedBy @ProvidedBy}
 * annotations found on {@code Service}, since Guice will have already ""moved on"" to {@code
 * ServiceImpl} before it reaches the point when it starts looking for these annotations.
 *
 * <pre>
 *     bind(Service.class).toProvider(ServiceProvider.class);</pre>
 *
 * In this example, {@code ServiceProvider} must extend or implement {@code Provider<Service>}. This
 * binding specifies that Guice should resolve an unannotated injection request for {@code Service}
 * by first resolving an instance of {@code ServiceProvider} in the regular way, then calling {@link
 * Provider#get get()} on the resulting Provider instance to obtain the {@code Service} instance.
 *
 * <p>The {@link Provider} you use here does not have to be a ""factory""; that is, a provider which
 * always <i>creates</i> each instance it provides. However, this is generally a good practice to
 * follow. You can then use Guice's concept of {@link Scope scopes} to guide when creation should
 * happen -- ""letting Guice work for you"".
 *
 * <pre>
 *     bind(Service.class).annotatedWith(Red.class).to(ServiceImpl.class);</pre>
 *
 * Like the previous example, but only applies to injection requests that use the binding annotation
 * {@code @Red}. If your module also includes bindings for particular <i>values</i> of the
 * {@code @Red} annotation (see below), then this binding will serve as a ""catch-all"" for any values
 * of {@code @Red} that have no exact match in the bindings.
 *
 * <pre>
 *     bind(ServiceImpl.class).in(Singleton.class);
 *     // or, alternatively
 *     bind(ServiceImpl.class).in(Scopes.SINGLETON);</pre>
 *
 * Either of these statements places the {@code ServiceImpl} class into singleton scope. Guice will
 * create only one instance of {@code ServiceImpl} and will reuse it for all injection requests of
 * this type. Note that it is still possible to bind another instance of {@code ServiceImpl} if the
 * second binding is qualified by an annotation as in the previous example. Guice is not overly
 * concerned with <i>preventing</i> you from creating multiple instances of your ""singletons"", only
 * with <i>enabling</i> your application to share only one instance if that's all you tell Guice you
 * need.
 *
 * <p><b>Note:</b> a scope specified in this way <i>overrides</i> any scope that was specified with
 * an annotation on the {@code ServiceImpl} class.
 *
 * <p>Besides {@link Singleton}/{@link Scopes#SINGLETON}, there are servlet-specific scopes
 * available in {@code com.google.inject.servlet.ServletScopes}, and your Modules can contribute
 * their own custom scopes for use here as well.
 *
 * <pre>
 *     bind(new TypeLiteral&lt;PaymentService&lt;CreditCard>>() {})
 *         .to(CreditCardPaymentService.class);</pre>
 *
 * This admittedly odd construct is the way to bind a parameterized type. It tells Guice how to
 * honor an injection request for an element of type {@code PaymentService<CreditCard>}. The class
 * {@code CreditCardPaymentService} must implement the {@code PaymentService<CreditCard>} interface.
 * Guice cannot currently bind or inject a generic type, such as {@code Set<E>}; all type parameters
 * must be fully specified.
 *
 * <pre>
 *     bind(Service.class).toInstance(new ServiceImpl());
 *     // or, alternatively
 *     bind(Service.class).toInstance(SomeLegacyRegistry.getService());</pre>
 *
 * In this example, your module itself, <i>not Guice</i>, takes responsibility for obtaining a
 * {@code ServiceImpl} instance, then asks Guice to always use this single instance to fulfill all
 * {@code Service} injection requests. When the {@link Injector} is created, it will automatically
 * perform field and method injection for this instance, but any injectable constructor on {@code
 * ServiceImpl} is simply ignored. Note that using this approach results in ""eager loading"" behavior
 * that you can't control.
 *
 * <pre>
 *     bindConstant().annotatedWith(ServerHost.class).to(args[0]);</pre>
 *
 * Sets up a constant binding. Constant injections must always be annotated. When a constant
 * binding's value is a string, it is eligible for conversion to all primitive types, to {@link
 * Enum#valueOf(Class, String) all enums}, and to {@link Class#forName class literals}. Conversions
 * for other types can be configured using {@link #convertToTypes(Matcher, TypeConverter)
 * convertToTypes()}.
 *
 * <pre>
 *   {@literal @}Color(""red"") Color red; // A member variable (field)
 *    . . .
 *     red = MyModule.class.getDeclaredField(""red"").getAnnotation(Color.class);
 *     bind(Service.class).annotatedWith(red).to(RedService.class);</pre>
 *
 * If your binding annotation has parameters you can apply different bindings to different specific
 * values of your annotation. Getting your hands on the right instance of the annotation is a bit of
 * a pain -- one approach, shown above, is to apply a prototype annotation to a field in your module
 * class, so that you can read this annotation instance and give it to Guice.
 *
 * <pre>
 *     bind(Service.class)
 *         .annotatedWith(Names.named(""blue""))
 *         .to(BlueService.class);</pre>
 *
 * Differentiating by names is a common enough use case that we provided a standard annotation,
 * {@link com.google.inject.name.Named @Named}. Because of Guice's library support, binding by name
 * is quite easier than in the arbitrary binding annotation case we just saw. However, remember that
 * these names will live in a single flat namespace with all the other names used in your
 * application.
 *
 * <pre>
 *     Constructor<T> loneCtor = getLoneCtorFromServiceImplViaReflection();
 *     bind(ServiceImpl.class)
 *         .toConstructor(loneCtor);</pre>
 *
 * In this example, we directly tell Guice which constructor to use in a concrete class
 * implementation. It means that we do not need to place {@literal @}Inject on any of the
 * constructors and that Guice treats the provided constructor as though it were annotated so. It is
 * useful for cases where you cannot modify existing classes and is a bit simpler than using a
 * {@link Provider}.
 *
 * <p>The above list of examples is far from exhaustive. If you can think of how the concepts of one
 * example might coexist with the concepts from another, you can most likely weave the two together.
 * If the two concepts make no sense with each other, you most likely won't be able to do it. In a
 * few cases Guice will let something bogus slip by, and will then inform you of the problems at
 * runtime, as soon as you try to create your Injector.
 *
 * <p>The other methods of Binder such as {@link #bindScope}, {@link #bindInterceptor}, {@link
 * #install}, {@link #requestStaticInjection}, {@link #addError} and {@link #currentStage} are not
 * part of the Binding EDSL; you can learn how to use these in the usual way, from the method
 * documentation.
 *
 * @author crazybob@google.com (Bob Lee)
 * @author jessewilson@google.com (Jesse Wilson)
 * @author kevinb@google.com (Kevin Bourrillion)
 /**""","""* Collects configuration information (primarily <i>bindings</i>) which will be used to create an
  * {@link Injector}. Guice provides this object to your application's {@link Module} implementors so
  * they may each contribute their own bindings and other registrations.",,,,"* <h3>The Guice Binding EDSL</h3>
  *
  * Guice uses an <i>embedded domain-specific language</i>, or EDSL, to help you create bindings
  * simply and readably. This approach is great for overall usability, but it does come with a small
  * cost: <b>it is difficult to learn how to use the Binding EDSL by reading method-level
  * javadocs</b>. Instead, you should consult the series of examples below. To save space, these
  * examples omit the opening {@code binder}, just as you will if your module extends {@link
  * AbstractModule}.
  *
  * <pre>
  * bind(ServiceImpl.class);</pre>
  *
  * This statement does essentially nothing; it ""binds the {@code ServiceImpl} class to itself"" and
  * does not change Guice's default behavior. You may still want to use this if you prefer your
  * {@link Module} class to serve as an explicit <i>manifest</i> for the services it provides. Also,
  * in rare cases, Guice may be unable to validate a binding at injector creation time unless it is
  * given explicitly.
  *
  * <pre>
  * bind(Service.class).to(ServiceImpl.class);</pre>
  *
  * Specifies that a request for a {@code Service} instance with no binding annotations should be
  * treated as if it were a request for a {@code ServiceImpl} instance. This <i>overrides</i> the
  * function of any {@link ImplementedBy @ImplementedBy} or {@link ProvidedBy @ProvidedBy}
  * annotations found on {@code Service}, since Guice will have already ""moved on"" to {@code
  * ServiceImpl} before it reaches the point when it starts looking for these annotations.
  *
  * <pre>
  * bind(Service.class).toProvider(ServiceProvider.class);</pre>
  *
  * In this example, {@code ServiceProvider} must extend or implement {@code Provider<Service>}. This
  * binding specifies that Guice should resolve an unannotated injection request for {@code Service}
  * by first resolving an instance of {@code ServiceProvider} in the regular way, then calling {@link
  * Provider#get get()} on the resulting Provider instance to obtain the {@code Service} instance.
  *
  * <p>The {@link Provider} you use here does not have to be a ""factory""; that is, a provider which
  * always <i>creates</i> each instance it provides. However, this is generally a good practice to
  * follow. You can then use Guice's concept of {@link Scope scopes} to guide when creation should
  * happen -- ""letting Guice work for you"".
  *
  * <pre>
  * bind(Service.class).annotatedWith(Red.class).to(ServiceImpl.class);</pre>
  *
  * Like the previous example, but only applies to injection requests that use the binding annotation
  * {@code @Red}. If your module also includes bindings for particular <i>values</i> of the
  * {@code @Red} annotation (see below), then this binding will serve as a ""catch-all"" for any values
  * of {@code @Red} that have no exact match in the bindings.
  *
  * <pre>
  * bind(ServiceImpl.class).in(Singleton.class);
  * // or, alternatively
  * bind(ServiceImpl.class).in(Scopes.SINGLETON);</pre>
  *
  * Either of these statements places the {@code ServiceImpl} class into singleton scope. Guice will
  * create only one instance of {@code ServiceImpl} and will reuse it for all injection requests of
  * this type. Note that it is still possible to bind another instance of {@code ServiceImpl} if the
  * second binding is qualified by an annotation as in the previous example. Guice is not overly
  * concerned with <i>preventing</i> you from creating multiple instances of your ""singletons"", only
  * with <i>enabling</i> your application to share only one instance if that's all you tell Guice you
  * need.
  *
  * <p><b>Note:</b> a scope specified in this way <i>overrides</i> any scope that was specified with
  * an annotation on the {@code ServiceImpl} class.
  *
  * <p>Besides {@link Singleton}/{@link Scopes#SINGLETON}, there are servlet-specific scopes
  * available in {@code com.google.inject.servlet.ServletScopes}, and your Modules can contribute
  * their own custom scopes for use here as well.
  *
  * <pre>
  * bind(new TypeLiteral&lt;PaymentService&lt;CreditCard>>() {})
  * .to(CreditCardPaymentService.class);</pre>
  *
  * This admittedly odd construct is the way to bind a parameterized type. It tells Guice how to
  * honor an injection request for an element of type {@code PaymentService<CreditCard>}. The class
  * {@code CreditCardPaymentService} must implement the {@code PaymentService<CreditCard>} interface.
  * Guice cannot currently bind or inject a generic type, such as {@code Set<E>}; all type parameters
  * must be fully specified.
  *
  * <pre>
  * bind(Service.class).toInstance(new ServiceImpl());
  * // or, alternatively
  * bind(Service.class).toInstance(SomeLegacyRegistry.getService());</pre>
  *
  * In this example, your module itself, <i>not Guice</i>, takes responsibility for obtaining a
  * {@code ServiceImpl} instance, then asks Guice to always use this single instance to fulfill all
  * {@code Service} injection requests. When the {@link Injector} is created, it will automatically
  * perform field and method injection for this instance, but any injectable constructor on {@code
  * ServiceImpl} is simply ignored. Note that using this approach results in ""eager loading"" behavior
  * that you can't control.
  *
  * <pre>
  * bindConstant().annotatedWith(ServerHost.class).to(args[0]);</pre>
  *
  * Sets up a constant binding. Constant injections must always be annotated. When a constant
  * binding's value is a string, it is eligible for conversion to all primitive types, to {@link
  * Enum#valueOf(Class, String) all enums}, and to {@link Class#forName class literals}. Conversions
  * for other types can be configured using {@link #convertToTypes(Matcher, TypeConverter)
  * convertToTypes()}.
  *
  * <pre>
  * {@literal @}Color(""red"") Color red; // A member variable (field)
  * . . .
  * red = MyModule.class.getDeclaredField(""red"").getAnnotation(Color.class);
  * bind(Service.class).annotatedWith(red).to(RedService.class);</pre>
  *
  * If your binding annotation has parameters you can apply different bindings to different specific
  * values of your annotation. Getting your hands on the right instance of the annotation is a bit of
  * a pain -- one approach, shown above, is to apply a prototype annotation to a field in your module
  * class, so that you can read this annotation instance and give it to Guice.
  *
  * <pre>
  * bind(Service.class)
  * .annotatedWith(Names.named(""blue""))
  * .to(BlueService.class);</pre>
  *
  * Differentiating by names is a common enough use case that we provided a standard annotation,
  * {@link com.google.inject.name.Named @Named}. Because of Guice's library support, binding by name
  * is quite easier than in the arbitrary binding annotation case we just saw. However, remember that
  * these names will live in a single flat namespace with all the other names used in your
  * application.
  *
  * <pre>
  * Constructor<T> loneCtor = getLoneCtorFromServiceImplViaReflection();
  * bind(ServiceImpl.class)
  * .toConstructor(loneCtor);</pre>
  *
  * In this example, we directly tell Guice which constructor to use in a concrete class
  * implementation. It means that we do not need to place {@literal @}Inject on any of the
  * constructors and that Guice treats the provided constructor as though it were annotated so. It is
  * useful for cases where you cannot modify existing classes and is a bit simpler than using a
  * {@link Provider}.
  *
  * <p>The above list of examples is far from exhaustive. If you can think of how the concepts of one
  * example might coexist with the concepts from another, you can most likely weave the two together.
  * If the two concepts make no sense with each other, you most likely won't be able to do it. In a
  * few cases Guice will let something bogus slip by, and will then inform you of the problems at
  * runtime, as soon as you try to create your Injector.
  *
  * <p>The other methods of Binder such as {@link #bindScope}, {@link #bindInterceptor}, {@link
  * #install}, {@link #requestStaticInjection}, {@link #addError} and {@link #currentStage} are not
  * part of the Binding EDSL; you can learn how to use these in the usual way, from the method
  * documentation.
  *
  /**""",,,,,,,,"* @author crazybob@google.com (Bob Lee)
  * @author jessewilson@google.com (Jesse Wilson)
  * @author kevinb@google.com (Kevin Bourrillion)",,,,,,,,,,
5,DefaultMethodInterceptionTest.java,"* Tests for interception of default methods.
 *
 * @author cgdecker@google.com (Colin Decker)
 | Interface with a default method annotated to be intercepted. | Foo implementation that does not override the default method. | A base class defining a method with the same signature as Foo's default method. | Foo implementation that should use superclass method rather than default method. |
   * A base class defining an intercepted method with the same signature as Foo's default method.
   |
   * Foo implementation that should use intercepted superclass method rather than default method.",* Tests for interception of default methods.,,,,| Interface with a default method annotated to be intercepted. | Foo implementation that does not override the default method. | A base class defining a method with the same signature as Foo's default method. | Foo implementation that should use superclass method rather than default method. |,,,,,,,,* @author cgdecker@google.com (Colin Decker),,,,,"| Foo implementation that should use superclass method rather than default method. |
   * Foo implementation that should use intercepted superclass method rather than default method.",,,,"A base class defining a method with the same signature as Foo's default method. 
   * A base class defining an intercepted method with the same signature as Foo's default method.",
5,Element.java,"* An internal binding annotation applied to each element in a multibinding. All elements are
 * assigned a globally-unique id to allow different modules to contribute multibindings
 * independently.
 *
 * @author jessewilson@google.com (Jesse Wilson)",* An internal binding annotation applied to each element in a multibinding,"All elements are
  * assigned a globally-unique id to allow different modules to contribute multibindings
  * independently.",,,,,,,,,,,@author jessewilson@google.com (Jesse Wilson),,,,,,,,,,
5,EncounterImpl.java,@author jessewilson@google.com (Jesse Wilson),,,,,,,,,,,,,@author jessewilson@google.com (Jesse Wilson),,,,,,,,,,
5,ImplicitBindingTest.java,"@author crazybob@google.com (Bob Lee) | An enum cannot be implemented by anything, so it should not be possible to have a successful| Valid JITable binding",,,"An enum cannot be implemented by anything, so it should not be possible to have a successful| Valid JITable binding",,,,,,,,,,@author crazybob@google.com (Bob Lee),,,,,,,,,,
5,ManagedFilterPipeline.java,"* Central routing/dispatch class handles lifecycle of managed filters, and delegates to the servlet
 * pipeline.
 *
 * @author dhanji@gmail.com (Dhanji R. Prasanna)","* Central routing/dispatch class handles lifecycle of managed filters, and delegates to the servlet
  * pipeline.",,,,,,,,,,,,@author dhanji@gmail.com (Dhanji R. Prasanna),,,,,,,,,,
5,PrivateElementProcessor,"* Handles {@code Binder.newPrivateBinder()} elements.
 *
 * @author jessewilson@google.com (Jesse Wilson)",* Handles {@code Binder.newPrivateBinder()} elements.,,,,,,,,,,,,@author jessewilson@google.com (Jesse Wilson),,,,,,,,,,
5,ProxyFactoryTest.java,@author crazybob@google.com (Bob Lee),,,,,,,,,,,,,@author crazybob@google.com (Bob Lee),,,,,,,,,,
5,SpiUtils.java,"* Utilities for testing the Multibinder & MapBinder extension SPI.
 *
 * @author sameb@google.com (Sam Berlin)
 | The kind of test we should perform. A live Injector, a raw Elements (Module) test, or both. | The kind of binding. | The result of the binding.",Utilities for testing the Multibinder & MapBinder extension SPI.,| The kind of binding. | The result of the binding.,,,,,,,,,,,@author sameb@google.com (Sam Berlin),,,,,"| The kind of test we should perform. A live Injector, a raw Elements (Module) test, or both.",,,,,
6,AbstractFocusable.java,"* An abstract base class for focusable components. Includes API for setting the
 * tab index, programmatic focusing, and adding focus and blur listeners.
 *
 * @since 7.6
 * @author Vaadin Ltd",An abstract base class for focusable components.,"Includes API for setting the * tab index, programmatic focusing, and adding focus and blur listeners.",,@since 7.6,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,AbstractMultiSelectState.java,"* Shared state for {@code AbstractMultiSelect}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *",Shared state for {@code AbstractMultiSelect}.,,,@since 8.0,,,,,,,,,@author Vaadin Ltd,Shared state for {@code AbstractMultiSelect}.,,,,,,,,,
6,AbstractProperty.java,"* Abstract base class for {@link Property} implementations.
 *
 * Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 | LegacyPropertyHelper has been removed in Vaadin 8| Events |
     * An <code>Event</code> object specifying the Property whose read-only
     * status has been changed.
     | LegacyPropertyHelper has been removed in Vaadin 8| Events |
     * An <code>Event</code> object specifying the Property whose value has been
     * changed.","Abstract base class for {@link Property} implementations. * Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s.","An <code>Event</code> object specifying the Property whose read-only
     * status has been changed.",,"@since 6.6
'@deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 | LegacyPropertyHelper has been removed in Vaadin 8| Events |",,,,,,,,,,"Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s.
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
{@link Property}",,,| LegacyPropertyHelper has been removed in Vaadin 8| Events |,,,,,,
6,AbstractSingleComponentContainerState.java,"* Default shared state implementation for AbstractSingleComponentContainer.
 *
 * @since 8.0",Default shared state implementation for AbstractSingleComponentContainer,,,@since 8.0,,,,,,,,,,,,,,,,,,,
6,AdjacentElementsWithTooltipsTest.java,"* Test to see if tooltips obey quickOpenDelay when moving between directly
 * adjacent elements.
 *
 * @author Vaadin Ltd",Test to see if tooltips obey quickOpenDelay when moving between directly adjacent elements.,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,ApplicationConfiguration.java,"* Helper class for reading configuration options from the bootstap
     * javascript
     *
     * @since 7.0
     |
     * Wraps a native javascript object containing fields for an error message.
     *
     * @since 7.0","* Helper class for reading configuration options from the bootstap.
  * Wraps a native javascript object containing fields for an error message.",,,"* @since 7.0
@since 7.0",,,,,,,,,,,,,,,,,,,
6,BootstrapPageResponse.java,"* A representation of a bootstrap page being generated. The bootstrap page
 * contains of the full DOM of the HTML document as well as the HTTP headers
 * that will be included in the corresponding HTTP response.
 *
 * @author Vaadin Ltd
 * @since 7.0.0",* A representation of a bootstrap page being generated.,"The bootstrap page
 * contains of the full DOM of the HTML document as well as the HTTP headers
 * that will be included in the corresponding HTTP response.",,* @since 7.0.0,,,,,,,,,* @author Vaadin Ltd,,,,,,,,,,
6,ButtonRenderer.java,"* A Renderer that displays a button with a textual caption. The value of the
 * corresponding property is used as the caption. Click listeners can be added
 * to the renderer, invoked when any of the rendered buttons is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd",* A Renderer that displays a button with a textual caption.,"The value of the
 * corresponding property is used as the caption",,* @since 7.4,"Click listeners can be added
 * to the renderer, invoked when any of the rendered buttons is clicked.",,,,,,,,* @author Vaadin Ltd,,,,,,,,,,
6,ClientRpcWriter.java,"* Serializes {@link ClientRpc client RPC} invocations to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1",Serializes {@link ClientRpc client RPC} invocations to JSON,,,@since 7.1,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,ColorPickerServerRpc.java,"* RPC interface for AbstractColorPicker.
 *
 * @since 7.0.0
 *",* RPC interface for AbstractColorPicker.,,,* @since 7.0.0,,,,,,,,,,,,,,,,,,,
6,ComboBoxState.java,"* Shared state for the ComboBox component.
 *
 * @since 7.0",Shared state for the ComboBox component.,,,@since 7.0,,,,,,,,,,,,,,,,,,,
6,DeclarativeValueProvider.java,"* Value provider class for declarative support.
 * <p>
 * Provides a straightforward mapping between an item and its value.
 *
 * @param <T>
 *            item type",* Value provider class for declarative support. * Provides a straightforward mapping between an item and its value.,,,,"* @param <T>
 *            item type",,,,,,,,,,,,,,,,,,
6,DoubleRangeValidator.java,"* Validator for validating that a {@link Double} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0",* Validator for validating that a {@link Double} is inside a given range.,,,@since 8.0,,,,,,,,,* @author Vaadin Ltd.,Serializes {@link ClientRpc client RPC} invocations to JSON,,,,,,,,,
6,FooterDoubleClickHandler.java,"* Handler for {@link GridDoubleClickEvent}s that happen in the footer of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd","Handler for {@link GridDoubleClickEvent}s that happen in the footer of the
 * Grid.",,,@since 7.4,,,,,,,,,@author Vaadin Ltd,{@link GridDoubleClickEvent}s,,,,,,,,,
6,Grid.java,"* A grid component for displaying tabular data.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 || HEADER AND FOOTER||
     * A callback method for fetching items. The callback is provided with a
     * list of sort orders, offset index and limit.
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * Selection mode representing the built-in selection models in grid.
     * <p>
     * These enums can be used in {@link Grid#setSelectionMode(SelectionMode)}
     * to easily switch between the build-in selection models.
     *
     * @see Grid#setSelectionMode(SelectionMode)
     * @see Grid#setSelectionModel(GridSelectionModel)
     || HEADER AND FOOTER||
     * An event that is fired when the columns are reordered.
     || HEADER AND FOOTER||
     * An event that is fired when a column is resized, either programmatically
     * or by the user.
     || HEADER AND FOOTER||
     * An event fired when an item in the Grid has been clicked.
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * ContextClickEvent for the Grid Component.
     *
     * <p>
     * Usage:
     *
     * <pre>
     * grid.addContextClickListener(event -&gt; Notification.show(
     *         ((GridContextClickEvent&lt;Person&gt;) event).getItem() + "" Clicked""));
     * </pre>
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * An event that is fired when a column's visibility changes.
     *
     * @since 7.5.0
     || HEADER AND FOOTER||
     * A helper base class for creating extensions for the Grid component.
     *
     * @param <T>
     || HEADER AND FOOTER||
     * Class for managing visible details rows.
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * This extension manages the configuration and data communication for a
     * Column inside of a Grid component.
     *
     * @param <T>
     *            the grid bean type
     * @param <V>
     *            the column value type
     |
         * behavior when parsing nested properties which may contain
         * <code>null</code> values in the property chain",A grid component for displaying tabular data.,,,"@since 8.0
@since 7.5.0","@param <T>
     *            the grid bean type
Usage:
     *
     * <pre>
     * grid.addContextClickListener(event -&gt; Notification.show(
     *         ((GridContextClickEvent&lt;Person&gt;) event).getItem() + "" Clicked""));
     * </pre>
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * An event that is fired when a column's visibility changes.
     *
     * @since 7.5.0
     || HEADER AND FOOTER||
     * A helper base class for creating extensions for the Grid component.
     *
     * @param <T>
     || HEADER AND FOOTER||
     * Class for managing visible details rows.
     *
     * @param <T>
     *            the grid bean type",,,,,,|| HEADER AND FOOTER||,,@author Vaadin Ltd,"{@link Grid#setSelectionMode(SelectionMode)}
     * @see Grid#setSelectionMode(SelectionMode)
     * @see Grid#setSelectionModel(GridSelectionModel)",,,"* behavior when parsing nested properties which may contain
         * <code>null</code> values in the property chain",,,,,,
6,GridManyColumnsV7.java,* Test UI for Grid initial rendering performance profiling.,Test UI for Grid initial rendering performance profiling,,,,,,,,,,,,,,,,,,,,,,
6,GridSelectionModel.java,"* The server-side interface that controls Grid's selection state.
 * SelectionModel should extend {@link AbstractGridExtension}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 * @see AbstractSelectionModel
 * @see SingleSelectionModel
 * @see MultiSelectionModel",The server-side interface that controls Grid's selection state.,,,,"* @param <T>
 *            the grid bean type",,,,,,,,* @author Vaadin Ltd,"SelectionModel should extend {@link AbstractGridExtension}.' * @see AbstractSelectionModel
 * @see SingleSelectionModel
 * @see MultiSelectionModel",,,,* SelectionModel should extend {@link AbstractGridExtension}.,,,,,
6,HeaderRow.java,"* A header row in a Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0",A header row in a Grid.,,,@since 8.0,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,InternalContainerAnnotationForJS.java,"* Annotation enabling using multiple {@link JavaScript @JavaScript}
 * annotations.
 * <p>
 * <b>NOT meant to be used</b>, for multiple JavaScript dependencies,
 * {@link JavaScript @JavaScript} should be used instead.
 *
 * @author Vaadin Ltd
 * @since 8.0","* Annotation enabling using multiple {@link JavaScript @JavaScript}
 * annotations.",,,* @since 8.0,,,,,,,,,* @author Vaadin Ltd,,,,"* <p>
 * <b>NOT meant to be used</b>, for multiple JavaScript dependencies,
 * {@link JavaScript @JavaScript} should be used instead.",,,,,,
6,MyPickerConnector.java,"* Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Widget%20styling%20using%20only%20CSS,
 * https
 * ://vaadin.com/wiki/-/wiki/Main/Lightweight%20calculations%20of%20widget%20l
 * ayout and https://vaadin.com/wiki/-/wiki/Main/Complex%20widget%20layouts
 *
 * @author Vaadin Ltd
 * @since 7.0.0",* Mini tutorial code for,,,* @since 7.0.0,,,,,,,,,* @author Vaadin Ltd,"* Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Widget%20styling%20using%20only%20CSS,
 * https
 * ://vaadin.com/wiki/-/wiki/Main/Lightweight%20calculations%20of%20widget%20l
 * ayout and https://vaadin.com/wiki/-/wiki/Main/Complex%20widget%20layouts
 *",,,,,,,,,
6,NotEmptyValidatorTest.java,"* @author Vaadin Ltd
 *",,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,PopupView.java,"*
 * A component for displaying a two different views to data. The minimized view
 * is normally used to render the component, and when it is clicked the full
 * view is displayed on a popup. The inner class {@link PopupView.Content} is
 * used to deliver contents to this component.
 *
 * @author Vaadin Ltd.
 | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * Used to deliver customized content-packages to the PopupView. These are
     * dynamically loaded when they are redrawn. The user must take care that
     * neither of these methods ever return null.
     | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * This event is received by the PopupVisibilityListeners when the
     * visibility of the popup changes. You can get the new visibility directly
     * with {@link #isPopupVisible()}, or get the PopupView that produced the
     * event with {@link #getPopupView()}.
     *
     | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * Defines a listener that can receive a PopupVisibilityEvent when the
     * visibility of the popup changes.
     *","* A component for displaying a two different views to data. The minimized view
 * is normally used to render the component, and when it is clicked the full
 * view is displayed on a popup. The inner class {@link PopupView.Content} is
 * used to deliver contents to this component.","| Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * This event is received by the PopupVisibilityListeners when the
     * visibility of the popup changes. You can get the new visibility directly
     * with {@link #isPopupVisible()}, or get the PopupView that produced the
     * event with {@link #getPopupView()}.
     *
     | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * Defines a listener that can receive a PopupVisibilityEvent when the
     * visibility of the popup changes.","| Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.",,,,,,,,,,' @author Vaadin Ltd.,,,,"* Used to deliver customized content-packages to the PopupView. These are
     * dynamically loaded when they are redrawn. The user must take care that
     * neither of these methods ever return null.","The user must take care that
     * neither of these methods ever return null.",,,,,
6,PortletDummyRequestHandler.java,"* Request handler which provides a dummy HTML response to any resource request
 * with the resource id DUMMY.
 *
 * @author Vaadin Ltd
 * @since 7.1","Request handler which provides a dummy HTML response to any resource request
 * with the resource id DUMMY.",,,@since 7.1,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,QueryBuilder.java,"* @deprecated As of 8.0, no replacement available.",,,,"@deprecated As of 8.0, no replacement available.",,,,,,,,,,,,,,,,,,,
6,RequiredTextFieldTest.java,"* Test for .v-required style
 *
 * @author Vaadin Ltd",Test for .v-required style,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,RpcDataProviderExtension.java,"* Provides Vaadin server-side container data source to a
 * {@link com.vaadin.v7.client.connectors.GridConnector GridConnector}. This is currently
 * implemented as an Extension hardcoded to support a specific connector type.
 * This will be changed once framework support for something more flexible has
 * been implemented.
 *
 * @since 7.4
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, no replacement available.
 |
     * Class for keeping track of current items and ValueChangeListeners.
     *
     * @since 7.6
     |
     * A class to listen to changes in property values in the Container added
     * with {@link Grid#setContainerDatasource(com.vaadin.v7.data.Container.Indexed)
     * Grid#setContainerDatasource(Container.Indexed)},
     * and notifies the data source to update the client-side representation
     * of the modified item.
     * <p>
     * One instance of this class can (and should) be reused for all the
     * properties in an item, since this class will inform that the entire row
     * needs to be re-evaluated (in contrast to a property-based change
     * management)
     * <p>
     * Since there's no Container-wide possibility to listen to any kind of
     * value changes, an instance of this class needs to be attached to each and
     * every Item's Property in the container.
     *
     * @see Grid#addValueChangeListener(com.vaadin.v7.data.Container, Object, Object)
     *      Grid#addValueChangeListener(Container, Object, Object)
     * @see Grid#valueChangeListeners","Provides Vaadin server-side container data source to a
 * {@link com.vaadin.v7.client.connectors.GridConnector GridConnector}. This is currently
 * implemented as an Extension hardcoded to support a specific connector type.
 Class for keeping track of current items and ValueChangeListeners.",,,"@since 7.4
 @deprecated As of 8.0, no replacement available.
 @since 7.6",,,,,,,,,@author Vaadin Ltd,"* @see Grid#addValueChangeListener(com.vaadin.v7.data.Container, Object, Object)
     *      Grid#addValueChangeListener(Container, Object, Object)
     * @see Grid#valueChangeListeners",,,"* This will be changed once framework support for something more flexible has
 * been implemented. 
     * One instance of this class can (and should) be reused for all the
     * properties in an item, since this class will inform that the entire row
     * needs to be re-evaluated (in contrast to a property-based change
     * management)
     * <p>
     * Since there's no Container-wide possibility to listen to any kind of
     * value changes, an instance of this class needs to be attached to each and
     * every Item's Property in the container.",,,,,,
6,SelectAllEvent.java,"* A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the rows in grid","* A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *",,"* A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *",* @since 7.4,"* @param <T>
 *            the type of the rows in grid",,,,,,,,* @author Vaadin Ltd,,,,,,,,,,
6,ShouldWriteDataDelegate.java,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.
 *
 * @see DesignContext#shouldWriteData(Component)
 *
 * @since 7.5.0
 * @author Vaadin Ltd","* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.",,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.",* @since 7.5.0,,,,,,,,,* @author Vaadin Ltd,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.
 * @see DesignContext#shouldWriteData(Component)",,,,,,,,,
6,SimpleGridUI.java,"* @author Vaadin Ltd
 *",,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,SpacerVisibilityChangedEvent.java,"* Event fired when a spacer element is hidden or shown in Escalator.
 *
 * @author Vaadin Ltd
 * @since 7.7.13",,,Event fired when a spacer element is hidden or shown in Escalator.,@since 7.7.13,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,TargetDetailsImpl.java,"* A HashMap backed implementation of {@link TargetDetails} for termina...n.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent#getTransferData(String)}",A HashMap backed implementation of {@link TargetDetails} for termina...n.,,,"@since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent#getTransferData(String)}",,,,,,,,,,A HashMap backed implementation of {@link TargetDetails} for termina...n.,,,,,,,,,
6,UnknownExtensionConnector.java,"* Connector used as a placeholder for extensions that are not present in the
 * widgetset.
 *
 * @since 7.7.4
 * @author Vaadin Ltd","Connector used as a placeholder for extensions that are not present in the
 * widgetset.",,,@since 7.7.4,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,VaadinPortlet.java,"* Portlet 2.0 base class. This replaces the servlet in servlet/portlet 1.0
 * deployments and handles various portlet requests from the browser.
 *
 * @author Vaadin Ltd
 | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Base class for portlet requests that need access to HTTP servlet
     * requests.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for Liferay.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for GateIn.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * @author Vaadin Ltd
     *
     * @deprecated As of 7.0. This is no longer used and only provided for
     *             backwards compatibility. Each {@link RequestHandler} can
     *             individually decide whether it wants to handle a request or
     *             not.","* Portlet 2.0 base class. This replaces the servlet in servlet/portlet 1.0
 * deployments and handles various portlet requests from the browser.","Base class for portlet requests that need access to HTTP servlet.
Portlet request for Liferay.
Portlet request for GateIn.
 Portlet request for WebSphere Portal.",,"@deprecated As of 7.0. This is no longer used and only provided for
     *             backwards compatibility. Each {@link RequestHandler} can
     *             individually decide whether it wants to handle a request or
     *             not.",,,"| TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Base class for portlet requests that need access to HTTP servlet
     * requests.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for Liferay.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for GateIn.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|",,,,,,@author Vaadin Ltd,,,,,,,,,,
6,VaadinServiceInitListener.java,"* Listener for {@link VaadinService} initialization events. The listener can
 * add listeners and request handlers the service.
 * <p>
 * Listener instances are by default discovered and instantiated using
 * {@link ServiceLoader}. This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server.VaadinServiceInitListener file present in
 * the jar file containing the implementation class.
 * <p>
 * Integrations for specific runtime environments, such as OSGi or Spring, might
 * also provide other ways of discovering listeners.
 *
 * @since 8.0
 * @author Vaadin Ltd","* Listener for {@link VaadinService} initialization events. The listener can
 * add listeners and request handlers the service.","* Listener instances are by default discovered and instantiated using
 * {@link ServiceLoader}. This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server.VaadinServiceInitListener file present in
 * the jar file containing the implementation class.
 * Integrations for specific runtime environments, such as OSGi or Spring, might
 * also provide other ways of discovering listeners.",,@since 8.0,,,,,,,* (non-Javadoc),,@author Vaadin Ltd,,,,,,"This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server",,,,
6,VGridLayout.java,"* Private helper class.
     | For internal use only. May be removed or replaced in the future.",Private helper class.,,,,,,,,,,,,,,,,For internal use only. May be removed or replaced in the future.,,,,,,
6,VLazyInitItemIdentifiers.java,"*
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 * ...ragOverCriteria(String)} and
 *             {@link DropTargetExtension#setDropCriteria(String)}",,,,"@deprecated Replaced in 8.1 with
 * ...ragOverCriteria(String)} and
 *             {@link DropTargetExtension#setDropCriteria(String)}",,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
6,VScrollTable.java,"* VScrollTable
 *
 * VScrollTable is a FlowPanel having two widgets in it: * TableHead component *
 * ScrollPanel
 *
 * TableHead contains table's header and widgets + logic for resizing,
 * reordering and hiding columns.
 *
 * ScrollPanel contains VScrollTableBody object which handles content. To save
 * some bandwidth and to improve clients responsiveness with loads of data, in
 * VScrollTableBody all rows are not necessary rendered. There are ""spacers"" in
 * VScrollTableBody to use the exact same space as non-rendered rows would use.
 * This way we can use seamlessly traditional scrollbars and scrolling to fetch
 * more rows instead of ""paging"".
 *
 * In VScrollTable we listen to scroll events. On horizontal scrolling we also
 * update TableHeads scroll position which has its scrollbars hidden. On
 * vertical scroll events we will check if we are reaching the end of area where
 * we have rows rendered and
 *
 * TODO implement unregistering for child components in Cells
 | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Simple interface for parts of the table capable of owning a context menu.
     *
     * @since 7.2
     * @author Vaadin Ltd
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Handles showing context menu on ""long press"" from a touch screen.
     *
     * @since 7.2
     * @author Vaadin Ltd
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Represents a select range of rows
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * For internal use only. May be removed or replaced in the future.
     *
     * Overwrites onBrowserEvent function on FocusableScrollPanel to give event
     * access to touchContextProvider. Has to be public to give TableConnector
     * access to the scrollBodyPanel field.
     *
     * @since 7.2
     * @author Vaadin Ltd
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Used to recall the position of an open context menu if we need to close
     * and reopen it during a row update.
     * <p>
     * For internal use only. May be removed or replaced in the future.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     | For internal use only. May be removed or replaced in the future. | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * HeaderCell that is header cell for row headers.
     *
     * Reordering disabled and clicking on it resets sorting.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * A cell in the footer.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * HeaderCell that is header cell for row headers.
     *
     * Reordering disabled and clicking on it resets sorting.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * The footer of the table which can be seen in the bottom of the Table.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * This Panel can only contain VScrollTableRow type of widgets. This
     * ""simulates"" very large table, keeping spacers which take room of
     * unrendered rows.
     *","* VScrollTable is a FlowPanel having two widgets in it: * TableHead component *
 * ScrollPanel
 *
 * TableHead contains table's header and widgets + logic for resizing,
 * reordering and hiding columns.
 *
 * ScrollPanel contains VScrollTableBody object which handles content. To save
 * some bandwidth and to improve clients responsiveness with loads of data, in
 * VScrollTableBody all rows are not necessary rendered. There are ""spacers"" in
 * VScrollTableBody to use the exact same space as non-rendered rows would use.
 * This way we can use seamlessly traditional scrollbars and scrolling to fetch
 * more rows instead of ""paging"".","In VScrollTable we listen to scroll events. On horizontal scrolling we also
 * update TableHeads scroll position which has its scrollbars hidden. On
 * vertical scroll events we will check if we are reaching the end of area where
 * we have rows rendered and","To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
  * This Panel can only contain VScrollTableRow type of widgets. This
     * ""simulates"" very large table, keeping spacers which take room of
     * unrendered rows.",@since 7.2,,,TODO implement unregistering for child components in Cells,,,,,,@author Vaadin Ltd,"* @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Handles showing context menu on ""long press"" from a touch screen.",,,,,"Has to be public to give TableConnector
     * access to the scrollBodyPanel field.",,,,
6,VTextArea.java,"* This class represents a multiline textfield (textarea).
 *
 * TODO consider replacing this with a RichTextArea based implementation. IE
 * does not support CSS height for textareas in Strict mode :-(
 *
 * @author Vaadin Ltd. *",This class represents a multiline textfield (textarea).,,,,,,"consider ...IE
 * does not support CSS height for textareas in Strict mode :-(",,,,,,@author Vaadin Ltd.,,,,"consider ...IE
 * does not support CSS height for textareas in Strict mode :-(",,,,,,
6,VUpload.java,"*
 * Note, we are not using GWT FormPanel as we want to listen submitcomplete
 * events even though the upload component is already detached.
 *
 * @author Vaadin Ltd
 *",,,,,,,,,,,,,@author Vaadin Ltd,,,,"* Note, we are not using GWT FormPanel as we want to listen submitcomplete
 * events even though the upload component is already detached.",,,,,,
6,Window.java,"* A component that represents a floating popup window that can be added to a
 * {@link UI}. A window is added to a {@code UI} using
 * {@link UI#addWindow(Window)}.
 * <p>
 * The contents of a window is set using {@link #setContent(Component)} or by
 * using the {@link #Window(String, Component)} constructor.
 * </p>
 * <p>
 * A window can be positioned on the screen using absolute coordinates (pixels)
 * or set to be centered using {@link #center()}
 * </p>
 * <p>
 * The caption is displayed in the window header.
 * </p>
 * <p>
 * In Vaadin versions prior to 7.0.0, Window was also used as application level
 * windows. This function is now covered by the {@link UI} class.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Event which is fired when the window order position is changed.
     *
     * @see UI.WindowOrderUpdateEvent
     *
     * @author Vaadin Ltd
     *
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * An interface used for listening to Window order change events.
     *
     * @see UI.WindowOrderUpdateListener
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * An interface used for listening to Window close events. Add the
     * CloseListener to a window and
     * {@link CloseListener#windowClose(CloseEvent)} will be called whenever the
     * user closes the window.
     *
     * <p>
     * Since Vaadin 6.5, removing a window using {@link #removeWindow(Window)}
     * fires the CloseListener.
     * </p>
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Event which is fired when the mode of the Window changes.
     *
     * @author Vaadin Ltd
     * @since 7.1
     *
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * An interface used for listening to Window maximize / restore events. Add
     * the WindowModeChangeListener to a window and
     * {@link WindowModeChangeListener#windowModeChanged(WindowModeChangeEvent)}
     * will be called whenever the window is maximized (
     * {@link WindowMode#MAXIMIZED}) or restored ({@link WindowMode#NORMAL} ).
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Resize events are fired whenever the client-side fires a resize-event
     * (e.g. the browser window is resized). The frequency may vary across
     * browsers.
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Listener for window resize events.
     *
     * @see com.vaadin.ui.Window.ResizeEvent
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * A {@link ShortcutListener} specifically made to define a keyboard
     * shortcut that closes the window.
     *
     * <pre>
     * <code>
     *  // within the window using helper
     *  window.setCloseShortcut(KeyCode.ESCAPE, null);
     *
     *  // or globally
     *  getUI().addAction(new Window.CloseShortcut(window, KeyCode.ESCAPE));
     * </code>
     * </pre>
     *","* A component that represents a floating popup window that can be added to a
 * {@link UI}. A window is added to a {@code UI} using
 * {@link UI#addWindow(Window)}.","The contents of a window is set using {@link #setContent(Component)} or by
 * using the {@link #Window(String, Component)} constructor.
 * </p>
 * <p>
 * A window can be positioned on the screen using absolute coordinates (pixels)
 * or set to be centered using {@link #center()}
 * </p>
 * <p>
 * The caption is displayed in the window header.
 * </p>
 * <p>
 * In Vaadin versions prior to 7.0.0, Window was also used as application level
 * windows. This function is now covered by the {@link UI} class.
Event which is fired when the window order position is changed.
An interface used for listening to Window order change events.
  * An interface used for listening to Window close events. Add the
     * CloseListener to a window and
     * {@link CloseListener#windowClose(CloseEvent)} will be called whenever the
     * user closes the window.   * An interface used for listening to Window maximize / restore events. Add
     * the WindowModeChangeListener to a window and
     * {@link WindowModeChangeListener#windowModeChanged(WindowModeChangeEvent)}
     * will be called whenever the window is maximized (
     * {@link WindowMode#MAXIMIZED}) or restored ({@link WindowMode#NORMAL} ).  * Resize events are fired whenever the client-side fires a resize-event
     * (e.g. the browser window is resized). The frequency may vary across
     * browsers. A {@link ShortcutListener} specifically made to define a keyboard
     * shortcut that closes the window.",,* @since 3.0,"* <pre>
     * <code>
     *  // within the window using helper
     *  window.setCloseShortcut(KeyCode.ESCAPE, null);
     *
     *  // or globally
     *  getUI().addAction(new Window.CloseShortcut(window, KeyCode.ESCAPE));
     * </code>
     * </pre>",,,,,,| ********************************************************************* |,,@author Vaadin Ltd,"* @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Event which is fired when the window order position is changed.
     *
     * @see UI.WindowOrderUpdateEvent",,,,,,,,,
6,XhrConnectionError.java,"* XhrConnectionError provides detail about an error which occurred during an
 * XHR request to the server.
 *
 * @since 7.6
 * @author Vaadin Ltd","XhrConnectionError provides detail about an error which occurred during an
 * XHR request to the server.",,,@since 7.6,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
