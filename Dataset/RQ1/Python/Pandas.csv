fileName,className,classComment,commentStart,commentEnd,classCommentSymbolLength,classCommentLineLength
C:\Users\vaano\python_projects\pandas\setup.py,build_ext,,,,,
C:\Users\vaano\python_projects\pandas\setup.py,CleanCommand,"
Custom distutils command to clean the .so and .pyc files.
",218,219,57,1
C:\Users\vaano\python_projects\pandas\setup.py,CheckSDist,"
Custom sdist that ensures Cython has compiled all pyx files to c.
",299,300,65,1
C:\Users\vaano\python_projects\pandas\setup.py,CheckingBuildExt,"
Subclass build_ext to get clearer report if Cython is necessary.
",365,366,64,1
C:\Users\vaano\python_projects\pandas\setup.py,CythonCommand,"
Custom distutils command subclassed from Cython.Distutils.build_ext
to compile pyx->c, and stop there. All this does is override the
C-compile method build_extension() with a no-op.
",387,390,181,3
C:\Users\vaano\python_projects\pandas\setup.py,DummyBuildSrc,"
numpy's build_src command interferes with Cython's build_ext.
    
",398,399,61,1
C:\Users\vaano\python_projects\pandas\versioneer.py,VersioneerConfig,,,,,
C:\Users\vaano\python_projects\pandas\versioneer.py,NotThisMethod,,,,,
C:\Users\vaano\python_projects\pandas\versioneer.py,VersioneerBadRootError,,,,,
C:\Users\vaano\python_projects\pandas\versioneer.py,cmd_version,,,,,
C:\Users\vaano\python_projects\pandas\versioneer.py,cmd_build_py,,,,,
C:\Users\vaano\python_projects\pandas\versioneer.py,cmd_sdist,,,,,
C:\Users\vaano\python_projects\pandas\versioneer.py,cmd_build_exe,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,MaybeConvertObjects,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,Factorize,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,FactorizeUnique,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,Duplicated,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,DuplicatedUniqueIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,Hashing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,Quantile,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\algorithms.py,SortIntegerArray,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\array.py,BooleanArray,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\attrs_caching.py,DataFrameAttributes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\attrs_caching.py,CacheReadonly,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\attrs_caching.py,Foo,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\binary_ops.py,Ops,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\binary_ops.py,Ops2,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\binary_ops.py,Timeseries,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\binary_ops.py,AddOverflowScalar,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\binary_ops.py,AddOverflowArray,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\boolean.py,TimeLogicalOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Constructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,CategoricalOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Concat,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,ValueCounts,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Repr,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,SetCategories,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,RemoveCategories,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Rank,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Isin,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,IsMonotonic,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Contains,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,CategoricalSlicing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,Indexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\categoricals.py,SearchSorted,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\ctors.py,SeriesConstructors,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\ctors.py,SeriesDtypesConstructors,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\ctors.py,MultiIndexConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\dtypes.py,Dtypes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\dtypes.py,DtypesInvalid,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\dtypes.py,InferDtypes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\eval.py,Eval,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\eval.py,Query,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromDicts,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromSeries,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromDictwithTimestamp,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromRecords,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromNDArray,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromLists,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_ctor.py,FromRange,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,GetNumericData,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Lookup,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Reindex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Rename,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Iteration,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,ToString,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,ToHTML,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Repr,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,MaskBool,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Isnull,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Fillna,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Dropna,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Count,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Apply,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Dtypes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Equals,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Interpolate,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Shift,"frame shift speedup issue-5609",466,466,15,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Nunique,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Duplicated,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,XS,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,SortValues,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,SortIndexByColumns,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Quantile,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,GetDtypeCounts,"2807",560,560,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,NSort,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,Describe,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\frame_methods.py,SelectDtypes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelGroupbyMethods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelGroups,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelTake1D,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelKth,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelDatetimeFields,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelRolling,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelReadCSV,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\gil.py,ParallelFactorize,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,ApplyDictReturn,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Apply,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Groups,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,GroupManyLabels,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Nth,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,DateAttributes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Int64,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,CountMultiDtype,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,CountMultiInt,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,AggFunctions,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,GroupStrings,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,MultiColumn,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Size,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,GroupByMethods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,RankWithTies,"GH 21237
 ",442,442,37,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Float32,"GH 13335
 ",462,462,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Categories,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Datelike,"GH 14338
 ",513,513,56,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,SumBools,"GH 2692
 ",532,532,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,SumMultiLevel,"GH 9049
 ",542,542,15,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,Transform,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,TransformBools,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\groupby.py,TransformNaN,"GH 12737
 ",617,617,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,NumericSeriesIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,NonNumericSeriesIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,DataFrameStringIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,DataFrameNumericIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,Take,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,MultiIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,IntervalIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,CategoricalIndexIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,MethodLookup,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,GetItemSingleColumn,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,AssignTimeseriesIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,InsertColumns,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing.py,ChainIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing_engines.py,NumericEngineIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\indexing_engines.py,ObjectEngineIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_cached_properties.py,IndexCache,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,SetOperations,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,SetDisjoint,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,Datetime,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,Ops,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,Range,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,IndexEquals,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,IndexAppend,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,Indexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,Float64IndexMethod,"GH 13166
 ",202,202,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,IntervalIndexMethod,"GH 24813
 ",213,213,27,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\index_object.py,GC,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\inference.py,NumericInferOps,"from GH 7332
 ",10,10,23,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\inference.py,DateInferOps,"from GH 7332
 ",37,37,22,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\inference.py,ToNumeric,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\inference.py,ToNumericDowncast,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\inference.py,MaybeConvertNumeric,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,Append,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,Concat,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,ConcatDataFrames,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,Join,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,JoinIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,JoinNonUnique,"outer join of non-unique
    GH 6329
 ",150,151,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,Merge,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,I8Merge,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,MergeCategoricals,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,MergeOrdered,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,MergeAsof,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\join_merge.py,Align,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,GetLoc,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,Duplicates,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,Integer,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,Duplicated,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,Sortlevel,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,Values,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,CategoricalLevel,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\multiindex_object.py,Equals,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\offset.py,ApplyIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\offset.py,OffsetSeriesArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\offset.py,OffsetDatetimeIndexArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\package.py,TimeImport,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\pandas_vb_common.py,BaseIO,"
Base class for IO benchmarks
",57,58,28,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\period.py,PeriodIndexConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\period.py,DataFramePeriodColumn,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\period.py,Algorithms,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\period.py,Indexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\plotting.py,SeriesPlotting,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\plotting.py,FramePlotting,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\plotting.py,TimeseriesPlotting,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\plotting.py,Misc,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,Reindex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,ReindexMethod,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,Fillna,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,LevelAlign,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,DropDuplicates,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,Align,"blog ""pandas escaped the zoo""",134,134,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reindex.py,LibFastZip,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\replace.py,FillNa,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\replace.py,ReplaceDict,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\replace.py,ReplaceList,"GH28099
 ",41,41,1,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\replace.py,Convert,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,Melt,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,Pivot,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,SimpleReshape,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,Unstack,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,SparseIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,WideToLong,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,PivotTable,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,Crosstab,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,GetDummies,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,Cut,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\reshape.py,Explode,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,Methods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,Apply,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,ExpandingMethods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,EWMMethods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,VariableWindowMethods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,Pairwise,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,Quantile,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\rolling.py,PeakMemFixed,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,SeriesConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,IsIn,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,IsInFloat64,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,IsInForObjects,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,NSort,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,Dropna,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,SearchSorted,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,Map,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,Clip,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,ValueCounts,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,Dir,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,SeriesGetattr,"https://github.com/pandas-dev/pandas/issues/19764
 ",215,215,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,All,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,Any,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\series_methods.py,NanOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,SparseSeriesToFrame,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,SparseArrayConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,SparseDataFrameConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,FromCoo,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,ToCoo,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,Arithmetic,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\sparse.py,ArithmeticBlock,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,FrameOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,FrameMultiIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,SeriesOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,SeriesMultiIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,Rank,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,Correlation,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\stat_ops.py,Covariance,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Methods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Repeat,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Cat,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Contains,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Split,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Dummies,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Encode,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\strings.py,Slice,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timedelta.py,ToTimedelta,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timedelta.py,ToTimedeltaErrors,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timedelta.py,TimedeltaOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timedelta.py,DatetimeAccessor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timedelta.py,TimedeltaIndexing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,DatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,TzLocalize,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ResetIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,Factorize,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,InferFreq,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,TimeDatetimeConverter,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,Iteration,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ResampleDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ResampleSeries,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ResampleDatetetime64,"GH 7754
 ",186,186,16,1
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,AsOf,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,SortIndex,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,IrregularOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,Lookup,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeYYYYMMDD,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeCacheSmallCount,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeISO8601,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeNONISO8601,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeFormatQuarters,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeFormat,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,ToDatetimeCache,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\timeseries.py,DatetimeAccessor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ToCSV,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ToCSVDatetime,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ToCSVDatetimeBig,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,StringIORewind,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVDInferDatetimeFormat,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVConcatDatetime,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVConcatDatetimeBadDateValue,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVSkipRows,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadUint64Integers,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVThousands,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVComment,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVFloatPrecision,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVCategorical,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVParseDates,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVCachedParseDates,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVMemoryGrowth,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ReadCSVParseSpecialDate,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\csv.py,ParseDateComparison,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\excel.py,WriteExcel,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\excel.py,ReadExcel,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\hdf.py,HDFStoreDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\hdf.py,HDF,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\json.py,ReadJSON,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\json.py,ReadJSONLines,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\json.py,ToJSON,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\json.py,ToJSONLines,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\json.py,ToJSONMem,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\parsers.py,DoesStringLookLikeDatetime,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\parsers.py,ConcatDateCols,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\pickle.py,Pickle,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\sas.py,SAS,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\sql.py,SQL,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\sql.py,WriteSQLDtypes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\sql.py,ReadSQLTable,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\sql.py,ReadSQLTableDtypes,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\stata.py,Stata,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\io\stata.py,StataMissing,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\offsets.py,OnOffset,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\offsets.py,OffestDatetimeArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\period.py,PeriodProperties,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\period.py,PeriodUnaryMethods,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\period.py,PeriodConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\timedelta.py,TimedeltaConstructor,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\timedelta.py,TimedeltaProperties,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\timestamp.py,TimestampConstruction,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\timestamp.py,TimestampProperties,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\timestamp.py,TimestampOps,,,,,
C:\Users\vaano\python_projects\pandas\asv_bench\benchmarks\tslibs\timestamp.py,TimestampAcrossDst,,,,,
C:\Users\vaano\python_projects\pandas\doc\make.py,DocBuilder,"
Class to wrap the different commands of this script.

All public methods of this class can be called as parameters of the
script.
",33,37,129,4
C:\Users\vaano\python_projects\pandas\doc\source\conf.py,AccessorDocumenter,"
Specialized Documenter subclass for accessors.
",446,447,46,1
C:\Users\vaano\python_projects\pandas\doc\source\conf.py,AccessorLevelDocumenter,"
Specialized Documenter subclass for objects on accessor level (methods,
    attributes).",463,465,84,2
C:\Users\vaano\python_projects\pandas\doc\source\conf.py,AccessorAttributeDocumenter,,,,,
C:\Users\vaano\python_projects\pandas\doc\source\conf.py,AccessorMethodDocumenter,,,,,
C:\Users\vaano\python_projects\pandas\doc\source\conf.py,AccessorCallableDocumenter,"
This documenter lets us removes .__call__ from the method signature for
callable accessors like Series.plot
",529,531,107,2
C:\Users\vaano\python_projects\pandas\doc\source\conf.py,PandasAutosummary,"
This alternative autosummary class lets us override the table summary for
Series.plot and DataFrame.plot in the API docs.
",545,547,121,2
C:\Users\vaano\python_projects\pandas\doc\sphinxext\contributors.py,ContributorsDirective,,,,,
C:\Users\vaano\python_projects\pandas\pandas\_version.py,VersioneerConfig,,,,,
C:\Users\vaano\python_projects\pandas\pandas\_version.py,NotThisMethod,,,,,
C:\Users\vaano\python_projects\pandas\pandas\__init__.py,Panel,,,,,
C:\Users\vaano\python_projects\pandas\pandas\__init__.py,SparseDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\__init__.py,SparseSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\__init__.py,__numpy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\__init__.py,Panel,,,,,
C:\Users\vaano\python_projects\pandas\pandas\compat\chainmap.py,DeepChainMap,,,,,
C:\Users\vaano\python_projects\pandas\pandas\compat\pickle_compat.py,_LoadSparseSeries,"To load a SparseSeries as a Series[Sparse]
 ",53,53,1,1
C:\Users\vaano\python_projects\pandas\pandas\compat\pickle_compat.py,_LoadSparseFrame,"To load a SparseDataFrame as a DataFrame[Sparse]
 ",71,71,1,1
C:\Users\vaano\python_projects\pandas\pandas\compat\pickle_compat.py,Unpickler,,,,,
C:\Users\vaano\python_projects\pandas\pandas\compat\numpy\function.py,CompatValidator,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\accessor.py,DirNamesMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\accessor.py,PandasDelegate,"
Abstract base class for delegating methods/properties.
",50,51,54,1
C:\Users\vaano\python_projects\pandas\pandas\core\accessor.py,CachedAccessor,"
Custom property-like object.

A descriptor for caching accessors.

Parameters
----------
name : str
    Namespace that will be accessed under, e.g. ``df.foo``.
accessor : cls
    Class with the extension methods.

Notes
-----
For accessor, The class's __init__ method assumes that one of
``Series``, ``DataFrame`` or ``Index`` as the
single argument ``data``.
",160,176,359,16
C:\Users\vaano\python_projects\pandas\pandas\core\algorithms.py,SelectN,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\algorithms.py,SelectNSeries,"
Implement n largest/smallest for Series

Parameters
----------
obj : Series
n : int
keep : {'first', 'last'}, default 'first'

Returns
-------
nordered : Series
",1090,1101,160,11
C:\Users\vaano\python_projects\pandas\pandas\core\algorithms.py,SelectNFrame,"
Implement n largest/smallest for DataFrame

Parameters
----------
obj : DataFrame
n : int
keep : {'first', 'last'}, default 'first'
columns : list or str

Returns
-------
nordered : DataFrame
",1156,1168,191,12
C:\Users\vaano\python_projects\pandas\pandas\core\apply.py,FrameApply,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\apply.py,FrameRowApply,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\apply.py,FrameColumnApply,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,PandasObject,"
baseclass for various pandas objects
",49,50,36,1
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,NoNewAttributesMixin,"
Mixin which prevents adding new attributes.

Prevents additional attributes via xxx.attribute = ""something"" after a
call to `self.__freeze()`. Mainly used to prevent the user from using
wrong attributes on an accessor (`Series.cat/.str/.dt`).

If you really want to add a new attribute at a later time, you need to use
`object.__setattr__(self, key, value)`.
",91,99,358,8
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,GroupByError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,DataError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,SpecificationError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,SelectionMixin,"
mixin implementing the selection & aggregation interface on a group-like
object sub-classes need to define: obj, exclusions
",134,136,123,2
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,ShallowMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\base.py,IndexOpsMixin,"
Common ops mixin to support a unified interface / docs for Series / Index
",593,594,73,1
C:\Users\vaano\python_projects\pandas\pandas\core\common.py,SettingWithCopyError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\common.py,SettingWithCopyWarning,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\frame.py,DataFrame,"
Two-dimensional, size-mutable, potentially heterogeneous tabular data.

Data structure also contains labeled axes (rows and columns).
Arithmetic operations align on both row and column labels. Can be
thought of as a dict-like container for Series objects. The primary
pandas data structure.

Parameters
----------
data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame
    Dict can contain Series, arrays, constants, or list-like objects.

    .. versionchanged:: 0.23.0
       If data is a dict, column order follows insertion-order for
       Python 3.6 and later.

    .. versionchanged:: 0.25.0
       If data is a list of dicts, column order follows insertion-order
       for Python 3.6 and later.

index : Index or array-like
    Index to use for resulting frame. Will default to RangeIndex if
    no indexing information part of input data and no index provided.
columns : Index or array-like
    Column labels to use for resulting frame. Will default to
    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.
dtype : dtype, default None
    Data type to force. Only a single dtype is allowed. If None, infer.
copy : bool, default False
    Copy data from inputs. Only affects DataFrame / 2d ndarray input.

See Also
--------
DataFrame.from_records : Constructor from tuples, also record arrays.
DataFrame.from_dict : From dicts of Series, arrays, or dicts.
read_csv
read_table
read_clipboard

Examples
--------
Constructing DataFrame from a dictionary.

>>> d = {'col1': [1, 2], 'col2': [3, 4]}
>>> df = pd.DataFrame(data=d)
>>> df
   col1  col2
0     1     3
1     2     4

Notice that the inferred dtype is int64.

>>> df.dtypes
col1    int64
col2    int64
dtype: object

To enforce a single dtype:

>>> df = pd.DataFrame(data=d, dtype=np.int8)
>>> df.dtypes
col1    int8
col2    int8
dtype: object

Constructing DataFrame from numpy ndarray:

>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
...                    columns=['a', 'b', 'c'])
>>> df2
   a  b  c
0  1  2  3
1  4  5  6
2  7  8  9
",313,387,2052,74
C:\Users\vaano\python_projects\pandas\pandas\core\generic.py,NDFrame,"
N-dimensional analogue of DataFrame. Store multi-dimensional in a
size-mutable, labeled data structure

Parameters
----------
data : BlockManager
axes : list
copy : bool, default False
",147,155,184,8
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_IndexSlice,"
Create an object to more easily perform multi-index slicing.

See Also
--------
MultiIndex.remove_unused_levels : New MultiIndex with no unused levels.

Notes
-----
See :ref:`Defined Levels <advanced.shown_levels>`
for further info on slicing a MultiIndex.

Examples
--------

>>> midx = pd.MultiIndex.from_product([['A0','A1'], ['B0','B1','B2','B3']])
>>> columns = ['foo', 'bar']
>>> dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),
                        index=midx, columns=columns)

Using the default slice command:

>>> dfmi.loc[(slice(None), slice('B0', 'B1')), :]
           foo  bar
    A0 B0    0    1
       B1    2    3
    A1 B0    8    9
       B1   10   11

Using the IndexSlice class for a more intuitive command:

>>> idx = pd.IndexSlice
>>> dfmi.loc[idx[:, 'B0':'B1'], :]
           foo  bar
    A0 B0    0    1
       B1    2    3
    A1 B0    8    9
       B1   10   11
",46,83,911,37
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,IndexingError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_NDFrameIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_LocationIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_LocIndexer,"
Access a group of rows and columns by label(s) or a boolean array.

``.loc[]`` is primarily label based, but may also be used with a
boolean array.

Allowed inputs are:

- A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is
  interpreted as a *label* of the index, and **never** as an
  integer position along the index).
- A list or array of labels, e.g. ``['a', 'b', 'c']``.
- A slice object with labels, e.g. ``'a':'f'``.

  .. warning:: Note that contrary to usual python slices, **both** the
      start and the stop are included

- A boolean array of the same length as the axis being sliced,
  e.g. ``[True, False, True]``.
- A ``callable`` function with one argument (the calling Series or
  DataFrame) and that returns valid output for indexing (one of the above)

See more at :ref:`Selection by Label <indexing.label>`

Raises
------
KeyError
    If any items are not found.

See Also
--------
DataFrame.at : Access a single value for a row/column label pair.
DataFrame.iloc : Access group of rows and columns by integer position(s).
DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the
    Series/DataFrame.
Series.loc : Access group of values using labels.

Examples
--------
**Getting values**

>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
...      index=['cobra', 'viper', 'sidewinder'],
...      columns=['max_speed', 'shield'])
>>> df
            max_speed  shield
cobra               1       2
viper               4       5
sidewinder          7       8

Single label. Note this returns the row as a Series.

>>> df.loc['viper']
max_speed    4
shield       5
Name: viper, dtype: int64

List of labels. Note using ``[[]]`` returns a DataFrame.

>>> df.loc[['viper', 'sidewinder']]
            max_speed  shield
viper               4       5
sidewinder          7       8

Single label for row and column

>>> df.loc['cobra', 'shield']
2

Slice with labels for row and single label for column. As mentioned
above, note that both the start and stop of the slice are included.

>>> df.loc['cobra':'viper', 'max_speed']
cobra    1
viper    4
Name: max_speed, dtype: int64

Boolean list with the same length as the row axis

>>> df.loc[[False, False, True]]
            max_speed  shield
sidewinder          7       8

Conditional that returns a boolean Series

>>> df.loc[df['shield'] > 6]
            max_speed  shield
sidewinder          7       8

Conditional that returns a boolean Series with column labels specified

>>> df.loc[df['shield'] > 6, ['max_speed']]
            max_speed
sidewinder          7

Callable that returns a boolean Series

>>> df.loc[lambda df: df['shield'] == 8]
            max_speed  shield
sidewinder          7       8

**Setting values**

Set value for all items matching the list of labels

>>> df.loc[['viper', 'sidewinder'], ['shield']] = 50
>>> df
            max_speed  shield
cobra               1       2
viper               4      50
sidewinder          7      50

Set value for an entire row

>>> df.loc['cobra'] = 10
>>> df
            max_speed  shield
cobra              10      10
viper               4      50
sidewinder          7      50

Set value for an entire column

>>> df.loc[:, 'max_speed'] = 30
>>> df
            max_speed  shield
cobra              30      10
viper              30      50
sidewinder         30      50

Set value for rows matching callable condition

>>> df.loc[df['shield'] > 35] = 0
>>> df
            max_speed  shield
cobra              30      10
viper               0       0
sidewinder          0       0

**Getting values on a DataFrame with an index that has integer labels**

Another example using integers for the index

>>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
...      index=[7, 8, 9], columns=['max_speed', 'shield'])
>>> df
   max_speed  shield
7          1       2
8          4       5
9          7       8

Slice with integer labels for rows. As mentioned above, note that both
the start and stop of the slice are included.

>>> df.loc[7:9]
   max_speed  shield
7          1       2
8          4       5
9          7       8

**Getting values with a MultiIndex**

A number of examples using a DataFrame with a MultiIndex

>>> tuples = [
...    ('cobra', 'mark i'), ('cobra', 'mark ii'),
...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),
...    ('viper', 'mark ii'), ('viper', 'mark iii')
... ]
>>> index = pd.MultiIndex.from_tuples(tuples)
>>> values = [[12, 2], [0, 4], [10, 20],
...         [1, 4], [7, 1], [16, 36]]
>>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)
>>> df
                     max_speed  shield
cobra      mark i           12       2
           mark ii           0       4
sidewinder mark i           10      20
           mark ii           1       4
viper      mark ii           7       1
           mark iii         16      36

Single label. Note this returns a DataFrame with a single index.

>>> df.loc['cobra']
         max_speed  shield
mark i          12       2
mark ii          0       4

Single index tuple. Note this returns a Series.

>>> df.loc[('cobra', 'mark ii')]
max_speed    0
shield       4
Name: (cobra, mark ii), dtype: int64

Single label for row and column. Similar to passing in a tuple, this
returns a Series.

>>> df.loc['cobra', 'mark i']
max_speed    12
shield        2
Name: (cobra, mark i), dtype: int64

Single tuple. Note using ``[[]]`` returns a DataFrame.

>>> df.loc[[('cobra', 'mark ii')]]
               max_speed  shield
cobra mark ii          0       4

Single tuple for the index with a single label for the column

>>> df.loc[('cobra', 'mark i'), 'shield']
2

Slice from index tuple to single label

>>> df.loc[('cobra', 'mark i'):'viper']
                     max_speed  shield
cobra      mark i           12       2
           mark ii           0       4
sidewinder mark i           10      20
           mark ii           1       4
viper      mark ii           7       1
           mark iii         16      36

Slice from index tuple to index tuple

>>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]
                    max_speed  shield
cobra      mark i          12       2
           mark ii          0       4
sidewinder mark i          10      20
           mark ii          1       4
viper      mark ii          7       1
",1336,1570,6272,234
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_iLocIndexer,"
Purely integer-location based indexing for selection by position.

``.iloc[]`` is primarily integer position based (from ``0`` to
``length-1`` of the axis), but may also be used with a boolean
array.

Allowed inputs are:

- An integer, e.g. ``5``.
- A list or array of integers, e.g. ``[4, 3, 0]``.
- A slice object with ints, e.g. ``1:7``.
- A boolean array.
- A ``callable`` function with one argument (the calling Series or
  DataFrame) and that returns valid output for indexing (one of the above).
  This is useful in method chains, when you don't have a reference to the
  calling object, but would like to base your selection on some value.

``.iloc`` will raise ``IndexError`` if a requested indexer is
out-of-bounds, except *slice* indexers which allow out-of-bounds
indexing (this conforms with python/numpy *slice* semantics).

See more at :ref:`Selection by Position <indexing.integer>`.

See Also
--------
DataFrame.iat : Fast integer location scalar accessor.
DataFrame.loc : Purely label-location based indexer for selection by label.
Series.iloc : Purely integer-location based indexing for
               selection by position.

Examples
--------

>>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},
...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},
...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]
>>> df = pd.DataFrame(mydict)
>>> df
      a     b     c     d
0     1     2     3     4
1   100   200   300   400
2  1000  2000  3000  4000

**Indexing just the rows**

With a scalar integer.

>>> type(df.iloc[0])
<class 'pandas.core.series.Series'>
>>> df.iloc[0]
a    1
b    2
c    3
d    4
Name: 0, dtype: int64

With a list of integers.

>>> df.iloc[[0]]
   a  b  c  d
0  1  2  3  4
>>> type(df.iloc[[0]])
<class 'pandas.core.frame.DataFrame'>

>>> df.iloc[[0, 1]]
     a    b    c    d
0    1    2    3    4
1  100  200  300  400

With a `slice` object.

>>> df.iloc[:3]
      a     b     c     d
0     1     2     3     4
1   100   200   300   400
2  1000  2000  3000  4000

With a boolean mask the same length as the index.

>>> df.iloc[[True, False, True]]
      a     b     c     d
0     1     2     3     4
2  1000  2000  3000  4000

With a callable, useful in method chains. The `x` passed
to the ``lambda`` is the DataFrame being sliced. This selects
the rows whose index label even.

>>> df.iloc[lambda x: x.index % 2 == 0]
      a     b     c     d
0     1     2     3     4
2  1000  2000  3000  4000

**Indexing both axes**

You can mix the indexer types for the index and columns. Use ``:`` to
select the entire axis.

With scalar integers.

>>> df.iloc[0, 1]
2

With lists of integers.

>>> df.iloc[[0, 2], [1, 3]]
      b     d
0     2     4
2  2000  4000

With `slice` objects.

>>> df.iloc[1:3, 0:3]
      a     b     c
1   100   200   300
2  1000  2000  3000

With a boolean array whose length matches the columns.

>>> df.iloc[:, [True, False, True, False]]
      a     c
0     1     3
1   100   300
2  1000  3000

With a callable function that expects the Series or DataFrame.

>>> df.iloc[:, lambda df: [0, 2]]
      a     c
0     1     3
1   100   300
2  1000  3000
",1732,1864,3121,132
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_ScalarAccessIndexer,"
Access scalars quickly.
",2059,2060,23,1
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_AtIndexer,"
Access a single value for a row/column label pair.

Similar to ``loc``, in that both provide label-based lookups. Use
``at`` if you only need to get or set a single value in a DataFrame
or Series.

Raises
------
KeyError
    If 'label' does not exist in DataFrame.

See Also
--------
DataFrame.iat : Access a single value for a row/column pair by integer
    position.
DataFrame.loc : Access a group of rows and columns by label(s).
Series.at : Access a single value using a label.

Examples
--------
>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
...                   index=[4, 5, 6], columns=['A', 'B', 'C'])
>>> df
    A   B   C
4   0   2   3
5   0   4   1
6  10  20  30

Get value at specified row/column pair

>>> df.at[4, 'B']
2

Set value at specified row/column pair

>>> df.at[4, 'B'] = 10
>>> df.at[4, 'B']
10

Get value within a Series

>>> df.loc[5].at['B']
4
",2095,2138,885,43
C:\Users\vaano\python_projects\pandas\pandas\core\indexing.py,_iAtIndexer,"
Access a single value for a row/column pair by integer position.

Similar to ``iloc``, in that both provide integer-based lookups. Use
``iat`` if you only need to get or set a single value in a DataFrame
or Series.

Raises
------
IndexError
    When integer position is out of bounds.

See Also
--------
DataFrame.at : Access a single value for a row/column label pair.
DataFrame.loc : Access a group of rows and columns by label(s).
DataFrame.iloc : Access a group of rows and columns by integer position(s).

Examples
--------
>>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
...                   columns=['A', 'B', 'C'])
>>> df
    A   B   C
0   0   2   3
1   0   4   1
2  10  20  30

Get value at specified row/column pair

>>> df.iat[1, 2]
1

Set value at specified row/column pair

>>> df.iat[1, 2] = 10
>>> df.iat[1, 2]
10

Get value within a series

>>> df.loc[0].iat[1]
2
",2170,2212,892,42
C:\Users\vaano\python_projects\pandas\pandas\core\nanops.py,disallow,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\nanops.py,bottleneck_switch,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,Resampler,"
Class for resampling datetimelike data, a groupby-like operation.
See aggregate, transform, and apply functions on this object.

It's easiest to use obj.resample(...) to use Resampler.

Parameters
----------
obj : pandas object
groupby : a TimeGrouper object
axis : int, default 0
kind : str or None
    'period', 'timestamp' to override default index treatment

Returns
-------
a Resampler of the appropriate type

Notes
-----
After resampling, see aggregate, apply, and transform functions.
",37,57,492,20
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,_GroupByMixin,"
Provide the groupby facilities.
",954,955,31,1
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,DatetimeIndexResampler,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,DatetimeIndexResamplerGroupby,"
Provides a resample of a groupby implementation
",1113,1114,47,1
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,PeriodIndexResampler,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,PeriodIndexResamplerGroupby,"
Provides a resample of a groupby implementation.
",1229,1230,48,1
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,TimedeltaIndexResampler,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,TimedeltaIndexResamplerGroupby,"
Provides a resample of a groupby implementation.
",1257,1258,48,1
C:\Users\vaano\python_projects\pandas\pandas\core\resample.py,TimeGrouper,"
Custom groupby class for time-interval grouping.

Parameters
----------
freq : pandas date offset or offset alias for identifying bin edges
closed : closed end of interval; 'left' or 'right'
label : interval boundary to use for labeling; 'left' or 'right'
convention : {'start', 'end', 'e', 's'}
    If axis is PeriodIndex
",1293,1302,322,9
C:\Users\vaano\python_projects\pandas\pandas\core\series.py,Series,"
One-dimensional ndarray with axis labels (including time series).

Labels need not be unique but must be a hashable type. The object
supports both integer- and label-based indexing and provides a host of
methods for performing operations involving the index. Statistical
methods from ndarray have been overridden to automatically exclude
missing data (currently represented as NaN).

Operations between Series (+, -, /, *, **) align values based on their
associated index values-- they need not be the same length. The result
index will be the sorted union of the two indexes.

Parameters
----------
data : array-like, Iterable, dict, or scalar value
    Contains data stored in Series.

    .. versionchanged:: 0.23.0
       If data is a dict, argument order is maintained for Python 3.6
       and later.

index : array-like or Index (1d)
    Values must be hashable and have the same length as `data`.
    Non-unique index values are allowed. Will default to
    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index
    sequence are used, the index will override the keys found in the
    dict.
dtype : str, numpy.dtype, or ExtensionDtype, optional
    Data type for the output Series. If not specified, this will be
    inferred from `data`.
    See the :ref:`user guide <basics.dtypes>` for more usages.
name : str, optional
    The name to give to the Series.
copy : bool, default False
    Copy input data.
",123,158,1431,35
C:\Users\vaano\python_projects\pandas\pandas\core\sorting.py,_KeyMapper,"
Map compressed group id -> key tuple.
",289,290,37,1
C:\Users\vaano\python_projects\pandas\pandas\core\strings.py,StringMethods,"
Vectorized string functions for Series and Index. NAs stay NA unless
handled otherwise by a particular method. Patterned after Python's string
methods, with some inspiration from R's stringr package.

Examples
--------
>>> s.str.split('_')
>>> s.str.replace('_', '')
",2022,2030,266,8
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\base.py,ExtensionArray,"
Abstract base class for custom 1-D array types.

pandas will recognize instances of this class as proper arrays
with a custom type and will not attempt to coerce them to objects. They
may be stored directly inside a :class:`DataFrame` or :class:`Series`.

.. versionadded:: 0.23.0

Attributes
----------
dtype
nbytes
ndim
shape

Methods
-------
argsort
astype
copy
dropna
factorize
fillna
isna
ravel
repeat
searchsorted
shift
take
unique
view
_concat_same_type
_formatter
_from_factorized
_from_sequence
_from_sequence_of_strings
_ndarray_values
_reduce
_values_for_argsort
_values_for_factorize

Notes
-----
The interface includes the following abstract methods that must be
implemented by subclasses:

* _from_sequence
* _from_factorized
* __getitem__
* __len__
* dtype
* nbytes
* isna
* take
* copy
* _concat_same_type

A default repr displaying the type, (truncated) data, length,
and dtype is provided. It can be customized or replaced by
by overriding:

* __repr__ : A default repr for the ExtensionArray.
* _formatter : Print scalars inside a Series or DataFrame.

Some methods require casting the ExtensionArray to an ndarray of Python
objects with ``self.astype(object)``, which may be expensive. When
performance is a concern, we highly recommend overriding the following
methods:

* fillna
* dropna
* unique
* factorize / _values_for_factorize
* argsort / _values_for_argsort
* searchsorted

The remaining methods implemented on this class should be performant,
as they only compose abstract methods. Still, a more efficient
implementation may be available, and these methods can be overridden.

One can implement methods to handle array reductions.

* _reduce

One can implement methods to handle parsing from strings that will be used
in methods such as ``pandas.io.parsers.read_csv``.

* _from_sequence_of_strings

This class does not inherit from 'abc.ABCMeta' for performance reasons.
Methods and properties required by the interface raise
``pandas.errors.AbstractMethodError`` and no ``register`` method is
provided for registering virtual subclasses.

ExtensionArrays are limited to 1 dimension.

They may be backed by none, one, or many NumPy arrays. For example,
``pandas.Categorical`` is an extension array backed by two arrays,
one for codes and one for categories. An array of IPv6 address may
be backed by a NumPy structured array with two fields, one for the
lower 64 bits and one for the upper 64 bits. Or they may be backed
by some other storage type, like Python lists. Pandas makes no
assumptions on how the data are stored, just that it can be converted
to a NumPy array.
The ExtensionArray interface does not impose any rules on how this data
is stored. However, currently, the backing data cannot be stored in
attributes called ``.values`` or ``._values`` to ensure full compatibility
with pandas internals. But other names as ``.data``, ``._data``,
``._items``, ... can be freely used.

If implementing NumPy's ``__array_ufunc__`` interface, pandas expects
that

1. You defer by returning ``NotImplemented`` when any Series are present
   in `inputs`. Pandas will extract the arrays and call the ufunc again.
2. You define a ``_HANDLED_TYPES`` tuple as an attribute on the class.
   Pandas inspect this to determine whether the ufunc is valid for the
   types present.

See :ref:`extending.extension.ufunc` for more.
",57,177,3349,120
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\base.py,ExtensionOpsMixin,"
A base class for linking the operators to their dunder names.

.. note::

   You may want to set ``__array_priority__`` if you want your
   implementation to be called when involved in binary operations
   with NumPy arrays.
",1044,1051,224,7
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\base.py,ExtensionScalarOpsMixin,"
A mixin for defining  ops on an ExtensionArray.

It is assumed that the underlying scalar objects have the operators
already defined.

Notes
-----
If you have defined a subclass MyExtensionArray(ExtensionArray), then
use MyExtensionArray(ExtensionArray, ExtensionScalarOpsMixin) to
get the arithmetic operators.  After the definition of MyExtensionArray,
insert the lines

MyExtensionArray._add_arithmetic_ops()
MyExtensionArray._add_comparison_ops()

to link the operators to your class.

.. note::

   You may want to set ``__array_priority__`` if you want your
   implementation to be called when involved in binary operations
   with NumPy arrays.
",1093,1115,651,22
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\boolean.py,BooleanDtype,"
Extension dtype for boolean data.

.. versionadded:: 1.0.0

.. warning::

   BooleanDtype is considered experimental. The implementation and
   parts of the API may change without warning.

Attributes
----------
None

Methods
-------
None

Examples
--------
>>> pd.BooleanDtype()
BooleanDtype
",38,59,292,21
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\boolean.py,BooleanArray,"
Array of boolean (True/False) data with missing values.

This is a pandas Extension array for boolean data, under the hood
represented by 2 numpy arrays: a boolean array with the data and
a boolean array with the mask (True indicating missing).

BooleanArray implements Kleene logic (sometimes called three-value
logic) for logical operations. See :ref:`boolean.kleene` for more.

To construct an BooleanArray from generic array-like input, use
:func:`pandas.array` specifying ``dtype=""boolean""`` (see examples
below).

.. versionadded:: 1.0.0

.. warning::

   BooleanArray is considered experimental. The implementation and
   parts of the API may change without warning.

Parameters
----------
values : numpy.ndarray
    A 1-d boolean-dtype array with the data.
mask : numpy.ndarray
    A 1-d boolean-dtype array indicating missing values (True
    indicates missing).
copy : bool, default False
    Whether to copy the `values` and `mask` arrays.

Attributes
----------
None

Methods
-------
None

Returns
-------
BooleanArray

Examples
--------
Create an BooleanArray with :func:`pandas.array`:

>>> pd.array([True, False, None], dtype=""boolean"")
<BooleanArray>
[True, False, NA]
Length: 3, dtype: boolean
",210,260,1210,50
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\categorical.py,Categorical,"
Represent a categorical variable in classic R / S-plus fashion.

`Categoricals` can only take on only a limited, and usually fixed, number
of possible values (`categories`). In contrast to statistical categorical
variables, a `Categorical` might have an order, but numerical operations
(additions, divisions, ...) are not possible.

All values of the `Categorical` are either in `categories` or `np.nan`.
Assigning values outside of `categories` will raise a `ValueError`. Order
is defined by the order of the `categories`, not lexical order of the
values.

Parameters
----------
values : list-like
    The values of the categorical. If categories are given, values not in
    categories will be replaced with NaN.
categories : Index-like (unique), optional
    The unique categories for this categorical. If not given, the
    categories are assumed to be the unique values of `values` (sorted, if
    possible, otherwise in the order in which they appear).
ordered : bool, default False
    Whether or not this categorical is treated as a ordered categorical.
    If True, the resulting categorical will be ordered.
    An ordered categorical respects, when sorted, the order of its
    `categories` attribute (which in turn is the `categories` argument, if
    provided).
dtype : CategoricalDtype
    An instance of ``CategoricalDtype`` to use for this categorical

    .. versionadded:: 0.21.0

Attributes
----------
categories : Index
    The categories of this categorical
codes : ndarray
    The codes (integer positions, which point to the categories) of this
    categorical, read only.
ordered : bool
    Whether or not this Categorical is ordered.
dtype : CategoricalDtype
    The instance of ``CategoricalDtype`` storing the ``categories``
    and ``ordered``.

    .. versionadded:: 0.21.0

Methods
-------
from_codes
__array__

Raises
------
ValueError
    If the categories do not validate.
TypeError
    If an explicit ``ordered=True`` is given but no `categories` and the
    `values` are not sortable.

See Also
--------
CategoricalDtype : Type for categorical data.
CategoricalIndex : An Index with an underlying ``Categorical``.

Notes
-----
See the `user guide
<http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_
for more.

Examples
--------
>>> pd.Categorical([1, 2, 3, 1, 2, 3])
[1, 2, 3, 1, 2, 3]
Categories (3, int64): [1, 2, 3]

>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])
[a, b, c, a, b, c]
Categories (3, object): [a, b, c]

Ordered `Categoricals` can be sorted according to the custom order
of the categories and can have a min and max value.

>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,
...                    categories=['c', 'b', 'a'])
>>> c
[a, b, c, a, b, c]
Categories (3, object): [c < b < a]
>>> c.min()
'c'
",206,297,2800,91
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\categorical.py,CategoricalAccessor,"
Accessor object for categorical properties of the Series values.

Be aware that assigning to `categories` is a inplace operation, while all
methods return new categorical data per default (but can be called with
`inplace=True`).

Parameters
----------
data : Series or CategoricalIndex

Examples
--------
>>> s.cat.categories
>>> s.cat.categories = list('abc')
>>> s.cat.rename_categories(list('cab'))
>>> s.cat.reorder_categories(list('cab'))
>>> s.cat.add_categories(['d','e'])
>>> s.cat.remove_categories(['d'])
>>> s.cat.remove_unused_categories()
>>> s.cat.set_categories(list('abcde'))
>>> s.cat.as_ordered()
>>> s.cat.as_unordered()
",2455,2477,639,22
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\datetimelike.py,AttributesMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\datetimelike.py,DatelikeOps,"
Common ops for DatetimeIndex/PeriodIndex, but not TimedeltaIndex.
",135,136,65,1
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\datetimelike.py,TimelikeOps,"
Common ops for TimedeltaIndex/DatetimeIndex, but not PeriodIndex.
",183,184,65,1
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\datetimelike.py,DatetimeLikeArrayMixin,"
Shared Base/Mixin class for DatetimeArray, TimedeltaArray, PeriodArray

Assumes that __new__/__init__ defines:
    _data
    _freq

and that the inheriting class has methods:
    _generate_range
",317,325,194,8
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\datetimes.py,DatetimeArray,"
Pandas ExtensionArray for tz-naive or tz-aware datetime data.

.. versionadded:: 0.24.0

.. warning::

   DatetimeArray is currently experimental, and its API may change
   without warning. In particular, :attr:`DatetimeArray.dtype` is
   expected to change to always be an instance of an ``ExtensionDtype``
   subclass.

Parameters
----------
values : Series, Index, DatetimeArray, ndarray
    The datetime data.

    For DatetimeArray `values` (or a Series or Index boxing one),
    `dtype` and `freq` will be extracted from `values`, with
    precedence given to

dtype : numpy.dtype or DatetimeTZDtype
    Note that the only NumPy dtype allowed is 'datetime64[ns]'.
freq : str or Offset, optional
copy : bool, default False
    Whether to copy the underlying array of values.

Attributes
----------
None

Methods
-------
None
",215,248,829,33
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\integer.py,_IntegerDtype,"
An ExtensionDtype to hold a single size & kind of integer dtype.

These specific implementations are subclasses of the non-public
_IntegerDtype. For example we have Int8Dtype to represent signed int 8s.

The attributes name & type are set when these subclasses are created.
",35,41,273,6
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\integer.py,IntegerArray,"
Array of integer (optional missing) values.

.. versionadded:: 0.24.0

.. warning::

   IntegerArray is currently experimental, and its API or internal
   implementation may change without warning.

We represent an IntegerArray with 2 numpy arrays:

- data: contains a numpy integer array of the appropriate dtype
- mask: a boolean array holding a mask on the data, True is missing

To construct an IntegerArray from generic array-like input, use
:func:`pandas.array` with one of the integer dtypes (see examples).

See :ref:`integer_na` for more.

Parameters
----------
values : numpy.ndarray
    A 1-d integer-dtype array.
mask : numpy.ndarray
    A 1-d boolean-dtype array indicating missing values.
copy : bool, default False
    Whether to copy the `values` and `mask`.

Attributes
----------
None

Methods
-------
None

Returns
-------
IntegerArray

Examples
--------
Create an IntegerArray with :func:`pandas.array`.

>>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())
>>> int_array
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: Int32

String aliases for the dtypes are also available. They are capitalized.

>>> pd.array([1, None, 3], dtype='Int32')
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: Int32

>>> pd.array([1, None, 3], dtype='UInt16')
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: UInt16
",261,322,1314,61
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\interval.py,IntervalArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\numpy_.py,PandasDtype,"
A Pandas ExtensionDtype for NumPy dtypes.

.. versionadded:: 0.24.0

This is mostly for internal compatibility, and is not especially
useful on its own.

Parameters
----------
dtype : numpy.dtype
",27,37,195,10
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\numpy_.py,PandasArray,"
A pandas ExtensionArray for NumPy data.

.. versionadded:: 0.24.0

This is mostly for internal compatibility, and is not especially
useful on its own.

Parameters
----------
values : ndarray
    The NumPy ndarray to wrap. Must be 1-dimensional.
copy : bool, default False
    Whether to copy `values`.

Attributes
----------
None

Methods
-------
None
",104,125,351,21
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\period.py,PeriodArray,"
Pandas ExtensionArray for storing Period data.

Users should use :func:`period_array` to create new instances.

Parameters
----------
values : Union[PeriodArray, Series[period], ndarray[int], PeriodIndex]
    The data to store. These should be arrays that can be directly
    converted to ordinals without inference or copy (PeriodArray,
    ndarray[int64]), or a box around such an array (Series[period],
    PeriodIndex).
freq : str or DateOffset
    The `freq` to use for the array. Mostly applicable when `values`
    is an ndarray of integers, when `freq` is required. When `values`
    is a PeriodArray (or box around), it's checked that ``values.freq``
    matches `freq`.
dtype : PeriodDtype, optional
    A PeriodDtype instance from which to extract a `freq`. If both
    `freq` and `dtype` are specified, then the frequencies must match.
copy : bool, default False
    Whether to copy the ordinals before storing.

Attributes
----------
None

Methods
-------
None

See Also
--------
period_array : Create a new PeriodArray.
PeriodIndex : Immutable Index for period data.

Notes
-----
There are two components to a PeriodArray

- ordinals : integer ndarray
- freq : pd.tseries.offsets.Offset

The values are physically stored as a 1-D ndarray of integers. These are
called ""ordinals"" and represent some kind of offset from a base.

The `freq` indicates the span covered by each element of the array.
All elements in the PeriodArray have the same `freq`.
",108,155,1462,47
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\string_.py,StringDtype,"
Extension dtype for string data.

.. versionadded:: 1.0.0

.. warning::

   StringDtype is considered experimental. The implementation and
   parts of the API may change without warning.

   In particular, StringDtype.na_value may change to no longer be
   ``numpy.nan``.

Attributes
----------
None

Methods
-------
None

Examples
--------
>>> pd.StringDtype()
StringDtype
",22,46,373,24
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\string_.py,StringArray,"
Extension array for string data.

.. versionadded:: 1.0.0

.. warning::

   StringArray is considered experimental. The implementation and
   parts of the API may change without warning.

   In particular, the NA value used may change to no longer be
   ``numpy.nan``.

Parameters
----------
values : array-like
    The array of data.

    .. warning::

       Currently, this expects an object-dtype ndarray
       where the elements are Python strings. This may
       change without warning in the future.
copy : bool, default False
    Whether to copy the array of data.

Attributes
----------
None

Methods
-------
None

See Also
--------
Series.str
    The string methods are available on Series backed by
    a StringArray.

Notes
-----
StringArray returns a BooleanArray for comparison methods.

Examples
--------
>>> pd.array(['This is', 'some text', None, 'data.'], dtype=""string"")
<StringArray>
['This is', 'some text', NA, 'data.']
Length: 4, dtype: string

Unlike ``object`` dtype arrays, ``StringArray`` doesn't allow non-string
values.

>>> pd.array(['1', 1], dtype=""string"")
Traceback (most recent call last):
...
ValueError: StringArray requires an object-dtype ndarray of strings.

For comparison methods, this returns a :class:`pandas.BooleanArray`

>>> pd.array([""a"", None, ""c""], dtype=""string"") == ""a""
<BooleanArray>
[True, NA, False]
Length: 3, dtype: boolean
",97,161,1381,64
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\timedeltas.py,TimedeltaArray,"
Pandas ExtensionArray for timedelta data.

.. versionadded:: 0.24.0

.. warning::

   TimedeltaArray is currently experimental, and its API may change
   without warning. In particular, :attr:`TimedeltaArray.dtype` is
   expected to change to be an instance of an ``ExtensionDtype``
   subclass.

Parameters
----------
values : array-like
    The timedelta data.

dtype : numpy.dtype
    Currently, only ``numpy.dtype(""timedelta64[ns]"")`` is accepted.
freq : Offset, optional
copy : bool, default False
    Whether to copy the underlying array of data.

Attributes
----------
None

Methods
-------
None
",124,153,602,29
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\sparse\accessor.py,BaseAccessor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\sparse\accessor.py,SparseAccessor,"
Accessor for SparseSparse from other sparse matrix data types.
",27,28,62,1
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\sparse\accessor.py,SparseFrameAccessor,"
DataFrame accessor for sparse data.

.. versionadded:: 0.25.0
",189,192,61,3
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\sparse\array.py,SparseArray,"
An ExtensionArray for storing sparse data.

.. versionchanged:: 0.24.0

   Implements the ExtensionArray interface.

Parameters
----------
data : array-like
    A dense array of values to store in the SparseArray. This may contain
    `fill_value`.
sparse_index : SparseIndex, optional
index : Index
fill_value : scalar, optional
    Elements in `data` that are `fill_value` are not stored in the
    SparseArray. For memory savings, this should be the most common value
    in `data`. By default, `fill_value` depends on the dtype of `data`:

    =========== ==========
    data.dtype  na_value
    =========== ==========
    float       ``np.nan``
    int         ``0``
    bool        False
    datetime64  ``pd.NaT``
    timedelta64 ``pd.NaT``
    =========== ==========

    The fill value is potentially specified in three ways. In order of
    precedence, these are

    1. The `fill_value` argument
    2. ``dtype.fill_value`` if `fill_value` is None and `dtype` is
       a ``SparseDtype``
    3. ``data.dtype.fill_value`` if `fill_value` is None and `dtype`
       is not a ``SparseDtype`` and `data` is a ``SparseArray``.

kind : {'integer', 'block'}, default 'integer'
    The type of storage for sparse locations.

    * 'block': Stores a `block` and `block_length` for each
      contiguous *span* of sparse values. This is best when
      sparse data tends to be clumped together, with large
      regions of ``fill-value`` values between sparse values.
    * 'integer': uses an integer to store the location of
      each sparse value.

dtype : np.dtype or SparseDtype, optional
    The dtype to use for the SparseArray. For numpy dtypes, this
    determines the dtype of ``self.sp_values``. For SparseDtype,
    this determines ``self.sp_values`` and ``self.fill_value``.
copy : bool, default False
    Whether to explicitly copy the incoming `data` array.

Attributes
----------
None

Methods
-------
None
",196,257,1923,61
C:\Users\vaano\python_projects\pandas\pandas\core\arrays\sparse\dtype.py,SparseDtype,"
Dtype for data stored in :class:`SparseArray`.

This dtype implements the pandas ExtensionDtype interface.

.. versionadded:: 0.24.0

Parameters
----------
dtype : str, ExtensionDtype, numpy.dtype, type, default numpy.float64
    The dtype of the underlying array storing the non-fill value values.
fill_value : scalar, optional
    The scalar value not stored in the SparseArray. By default, this
    depends on `dtype`.

    =========== ==========
    dtype       na_value
    =========== ==========
    float       ``np.nan``
    int         ``0``
    bool        ``False``
    datetime64  ``pd.NaT``
    timedelta64 ``pd.NaT``
    =========== ==========

    The default value may be overridden by specifying a `fill_value`.

Attributes
----------
None

Methods
-------
None
",24,57,778,33
C:\Users\vaano\python_projects\pandas\pandas\core\computation\common.py,NameResolutionError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\engines.py,NumExprClobberingError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\engines.py,AbstractEngine,"
Object serving as a base class for all engines.
",39,40,47,1
C:\Users\vaano\python_projects\pandas\pandas\core\computation\engines.py,NumExprEngine,"
NumExpr engine class
",100,101,20,1
C:\Users\vaano\python_projects\pandas\pandas\core\computation\engines.py,PythonEngine,"
Evaluate an expression in Python space.

Mostly for testing purposes.
",123,126,69,3
C:\Users\vaano\python_projects\pandas\pandas\core\computation\expr.py,BaseExprVisitor,"
Custom ast walker. Parsers of other engines should subclass this class
if necessary.

Parameters
----------
env : Scope
engine : str
parser : str
preparser : callable
",364,373,166,9
C:\Users\vaano\python_projects\pandas\pandas\core\computation\expr.py,PandasExprVisitor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\expr.py,PythonExprVisitor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\expr.py,Expr,"
Object encapsulating an expression.

Parameters
----------
expr : str
engine : str, optional, default 'numexpr'
parser : str, optional, default 'pandas'
env : Scope, optional, default None
level : int, optional, default 2
",799,808,221,9
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,UndefinedVariableError,"
NameError subclass for local variables.
",54,55,39,1
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,Term,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,Constant,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,Op,"
Hold an operator of arbitrary arity.
",196,197,36,1
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,BinOp,"
Hold a binary operator and its operands.

Parameters
----------
op : str
left : Term or Op
right : Term or Op
",350,357,109,7
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,Div,"
Div operator to special case casting.

Parameters
----------
lhs, rhs : Term or Op
    The Terms or Ops in the ``/`` expression.
",495,501,128,6
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,UnaryOp,"
Hold a unary operator and its operands.

Parameters
----------
op : str
    The token used to represent the operator.
operand : Term or Op
    The Term or Op operand to the operator.

Raises
------
ValueError
    * If no function associated with the passed operator token is found.
",524,537,281,13
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,MathCall,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\ops.py,FuncNode,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,PyTablesScope,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,Term,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,Constant,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,BinOp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,FilterBinOp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,JointFilterBinOp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,ConditionBinOp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,JointConditionBinOp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,UnaryOp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,PyTablesExprVisitor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,PyTablesExpr,"
Hold a pytables-like expression, comprised of possibly multiple 'terms'.

Parameters
----------
where : string term expression, PyTablesExpr, or list-like of PyTablesExprs
queryables : a ""kinds"" map (dict of column name -> kind), or None if column
    is non-indexable
encoding : an encoding that will encode the query terms

Returns
-------
a PyTablesExpr object

Examples
--------

'index>=date'
""columns=['A', 'D']""
'columns=A'
'columns==A'
""~(columns=['A','B'])""
'index>df.index[3] & string=""bar""'
'(index>df.index[3] & index<=df.index[6]) | string=""bar""'
""ts>=Timestamp('2012-02-01')""
""major_axis>=20130101""
",488,513,612,25
C:\Users\vaano\python_projects\pandas\pandas\core\computation\pytables.py,TermValue,"
hold a term value the we use to construct a condition/filter 
",595,596,60,1
C:\Users\vaano\python_projects\pandas\pandas\core\computation\scope.py,Scope,"
Object to hold scope, with a few bells to deal with some custom syntax
and contexts added by pandas.

Parameters
----------
level : int
global_dict : dict or None, optional, default None
local_dict : dict or Scope or None, optional, default None
resolvers : list-like or None, optional, default None
target : object

Attributes
----------
level : int
scope : DeepChainMap
target : object
temps : dict
",87,104,400,17
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\base.py,ExtensionDtype,"
A custom data type, to be paired with an ExtensionArray.

.. versionadded:: 0.23.0

See Also
--------
extensions.register_extension_dtype
extensions.ExtensionArray

Notes
-----
The interface includes the following abstract methods that must
be implemented by subclasses:

* type
* name
* construct_from_string

The following attributes influence the behavior of the dtype in
pandas operations

* _is_numeric
* _is_boolean

Optionally one can override construct_array_type for construction
with the name of this dtype via the Registry. See
:meth:`extensions.register_extension_dtype`.

* construct_array_type

The `na_value` class attribute can be used to set the default NA value
for this type. :attr:`numpy.nan` is used by default.

ExtensionDtypes are required to be hashable. The base class provides
a default implementation, which relies on the ``_metadata`` class
attribute. ``_metadata`` should be a tuple containing the strings
that define your data type. For example, with ``PeriodDtype`` that's
the ``freq`` attribute.

**If you have a parametrized dtype you should set the ``_metadata``
class property**.

Ideally, the attributes in ``_metadata`` will match the
parameters to your ``ExtensionDtype.__init__`` (if any). If any of
the attributes in ``_metadata`` don't implement the standard
``__eq__`` or ``__hash__``, the default implementations here will not
work.

.. versionchanged:: 0.24.0

   Added ``_metadata``, ``__hash__``, and changed the default definition
   of ``__eq__``.

For interaction with Apache Arrow (pyarrow), a ``__from_arrow__`` method
can be implemented: this method receives a pyarrow Array or ChunkedArray
as only argument and is expected to return the appropriate pandas
ExtensionArray for this dtype and the passed values::

    class ExtensionDtype:

        def __from_arrow__(
            self, array: pyarrow.Array/ChunkedArray
        ) -> ExtensionArray:
            ...

This class does not inherit from 'abc.ABCMeta' for performance reasons.
Methods and properties required by the interface raise
``pandas.errors.AbstractMethodError`` and no ``register`` method is
provided for registering virtual subclasses.
",12,81,2156,69
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,Registry,"
Registry for dtype inference.

The registry allows one to map a string repr of a extension
dtype to an extension dtype. The string alias can be used in several
places, including

* Series and Index constructors
* :meth:`pandas.array`
* :meth:`pandas.Series.astype`

Multiple extension types can be registered.
These are tried in order.
",47,59,335,12
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,PandasExtensionDtype,"
A np.dtype duck-typed class, suitable for holding a custom dtype.

THIS IS NOT A REAL NUMPY DTYPE
",110,113,97,3
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,CategoricalDtypeType,"
the type of CategoricalDtype, this metaclass determines subclass ability
",158,159,72,1
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,CategoricalDtype,"
Type for categorical data with the categories and orderedness.

.. versionchanged:: 0.21.0

Parameters
----------
categories : sequence, optional
    Must be unique, and must not contain any nulls.
ordered : bool or None, default False
    Whether or not this categorical is treated as a ordered categorical.
    None can be used to maintain the ordered value of existing categoricals when
    used in operations that combine categoricals, e.g. astype, and will resolve to
    False if there is no existing ordered to maintain.

Attributes
----------
categories
ordered

Methods
-------
None

See Also
--------
Categorical

Notes
-----
This class is useful for specifying the type of a ``Categorical``
independent of the values. See :ref:`categorical.categoricaldtype`
for more.

Examples
--------
>>> t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)
>>> pd.Series(['a', 'b', 'a', 'c'], dtype=t)
0      a
1      b
2      a
3    NaN
dtype: category
Categories (2, object): [b < a]
",166,209,991,43
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,DatetimeTZDtype,"
An ExtensionDtype for timezone-aware datetime data.

**This is not an actual numpy dtype**, but a duck type.

Parameters
----------
unit : str, default ""ns""
    The precision of the datetime data. Currently limited
    to ``""ns""``.
tz : str, int, or datetime.tzinfo
    The timezone.

Attributes
----------
unit
tz

Methods
-------
None

Raises
------
pytz.UnknownTimeZoneError
    When the requested timezone cannot be found.

Examples
--------
>>> pd.DatetimeTZDtype(tz='UTC')
datetime64[ns, UTC]

>>> pd.DatetimeTZDtype(tz='dateutil/US/Central')
datetime64[ns, tzfile('/usr/share/zoneinfo/US/Central')]
",611,644,605,33
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,PeriodDtype,"
An ExtensionDtype for Period data.

**This is not an actual numpy dtype**, but a duck type.

Parameters
----------
freq : str or DateOffset
    The frequency of this PeriodDtype.

Attributes
----------
freq

Methods
-------
None

Examples
--------
>>> pd.PeriodDtype(freq='D')
period[D]

>>> pd.PeriodDtype(freq=pd.offsets.MonthEnd())
period[M]
",782,806,344,24
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\dtypes.py,IntervalDtype,"
An ExtensionDtype for Interval data.

**This is not an actual numpy dtype**, but a duck type.

Parameters
----------
subtype : str, np.dtype
    The dtype of the Interval bounds.

Attributes
----------
subtype

Methods
-------
None

Examples
--------
>>> pd.IntervalDtype(subtype='int64')
interval[int64]
",951,972,304,21
C:\Users\vaano\python_projects\pandas\pandas\core\dtypes\generic.py,_ABCGeneric,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\base.py,GroupByMixin,"
Provide the groupby facilities to the mixed object.
",14,15,51,1
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\generic.py,SeriesGroupBy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\generic.py,DataFrameGroupBy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\groupby.py,GroupByPlot,"
Class implementing the .plot attribute for groupby objects.
",314,315,59,1
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\groupby.py,_GroupBy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\groupby.py,GroupBy,"
Class for grouping and aggregating relational data.

See aggregate, transform, and apply functions on this object.

It's easiest to use obj.groupby(...) to use GroupBy, but you can also do:

::

    grouped = groupby(obj, ...)

Parameters
----------
obj : pandas object
axis : int, default 0
level : int, default None
    Level of MultiIndex
groupings : list of Grouping objects
    Most users should ignore this
exclusions : array-like, optional
    List of columns to exclude
name : str
    Most users should ignore this

Returns
-------
**Attributes**
groups : dict
    {group name -> group labels}
len(grouped) : int
    Number of groups

Notes
-----
After grouping, see aggregate, apply, and transform functions. Here are
some other brief notes about usage. When grouping by multiple groups, the
result index will be a MultiIndex (hierarchical) by default.

Iteration produces (key, group) tuples, i.e. chunking the data by group. So
you can write code like:

::

    grouped = obj.groupby(keys, axis=axis)
    for key, group in grouped:
        # do something with the data

Function calls on GroupBy, if not specially implemented, ""dispatch"" to the
grouped data. So if you group a DataFrame and wish to invoke the std()
method on each group, you can simply do:

::

    df.groupby(mapper).std()

rather than

::

    df.groupby(mapper).aggregate(np.std)

You can pass arguments to these ""wrapped"" functions, too.

See the online documentation for full exposition on these topics and much
more
",1041,1105,1499,64
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\grouper.py,Grouper,"
A Grouper allows the user to specify a groupby instruction for a target
object.

This specification will select a column via the key parameter, or if the
level and/or axis parameters are given, a level of the index of the target
object.

If `axis` and/or `level` are passed as keywords to both `Grouper` and
`groupby`, the values passed to `Grouper` take precedence.

Parameters
----------
key : str, defaults to None
    groupby key, which selects the grouping column of the target
level : name/number, defaults to None
    the level for the target index
freq : str / frequency object, defaults to None
    This will groupby the specified frequency if the target selection
    (via key or level) is a datetime-like object. For full specification
    of available frequencies, please see `here
    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`_.
axis : number/name of the axis, defaults to 0
sort : bool, default to False
    whether to sort the resulting labels
closed : {'left' or 'right'}
    Closed end of interval. Only when `freq` parameter is passed.
label : {'left' or 'right'}
    Interval boundary to use for labeling.
    Only when `freq` parameter is passed.
convention : {'start', 'end', 'e', 's'}
    If grouper is PeriodIndex and `freq` parameter is passed.
base : int, default 0
    Only when `freq` parameter is passed.
loffset : str, DateOffset, timedelta object
    Only when `freq` parameter is passed.

Returns
-------
A specification for a groupby instruction

Examples
--------

Syntactic sugar for ``df.groupby('A')``

>>> df.groupby(Grouper(key='A'))

Specify a resample operation on the column 'date'

>>> df.groupby(Grouper(key='date', freq='60s'))

Specify a resample operation on the level 'date' on the columns axis
with a frequency of 60s

>>> df.groupby(Grouper(level='date', freq='60s', axis=1))
",36,91,1871,55
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\grouper.py,Grouping,"
Holds the grouping information for a single key

Parameters
----------
index : Index
grouper :
obj Union[DataFrame, Series]:
name :
level :
observed : bool, default False
    If we are a Categorical, use the observed values
in_axis : if the Grouping is a column in self.obj and hence among
    Groupby.exclusions list

Returns
-------
**Attributes**:
  * indices : dict of {group -> index_list}
  * codes : ndarray, group codes
  * group_index : unique groups
  * groups : dict of {group -> label_list}
",219,240,502,21
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\ops.py,BaseGrouper,"
This is an internal Grouper class, which actually holds
the generated groups

Parameters
----------
axis : Index
groupings : Sequence[Grouping]
    all the grouping instances to handle in this grouper
    for example for grouper list to groupby, need to pass the list
sort : bool, default True
    whether this grouper will give sorted result or not
group_keys : bool, default True
mutated : bool, default False
indexer : intp array, optional
    the indexer created by Grouper
    some groupers (TimeGrouper) will sort its axis and its
    group_info is also sorted, so need the indexer to reorder
",59,76,598,17
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\ops.py,BinGrouper,"
This is an internal Grouper class

Parameters
----------
bins : the split index of binlabels to group the item of axis
binlabels : the label list
filter_empty : boolean, default False
mutated : boolean, default False
indexer : a intp array

Examples
--------
bins: [2, 4, 6, 8, 10]
binlabels: DatetimeIndex(['2005-01-01', '2005-01-03',
    '2005-01-05', '2005-01-07', '2005-01-09'],
    dtype='datetime64[ns]', freq='2D')

the group_info, which contains the label of each item in grouped
axis, the index of label in label list, group number, is

(array([0, 0, 1, 1, 2, 2, 3, 3, 4, 4]), array([0, 1, 2, 3, 4]), 5)

means that, the grouped axis has 10 items, can be grouped into 5
labels, the first and second items belong to the first label, the
third and forth items belong to the second label, and so on
",684,709,804,25
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\ops.py,DataSplitter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\ops.py,SeriesSplitter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\groupby\ops.py,FrameSplitter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\accessors.py,Properties,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\accessors.py,DatetimeProperties,"
Accessor object for datetimelike properties of the Series values.

Examples
--------
>>> s.dt.hour
>>> s.dt.second
>>> s.dt.quarter

Returns a Series indexed like the original Series.
Raises TypeError if the Series does not contain datetimelike values.
",121,131,252,10
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\accessors.py,TimedeltaProperties,"
Accessor object for datetimelike properties of the Series values.

Examples
--------
>>> s.dt.hours
>>> s.dt.seconds

Returns a Series indexed like the original Series.
Raises TypeError if the Series does not contain datetimelike values.
",192,201,237,9
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\accessors.py,PeriodProperties,"
Accessor object for datetimelike properties of the Series values.

Examples
--------
>>> s.dt.hour
>>> s.dt.second
>>> s.dt.quarter

Returns a Series indexed like the original Series.
Raises TypeError if the Series does not contain datetimelike values.
",283,293,252,10
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\accessors.py,CombinedDatetimelikeProperties,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\base.py,InvalidIndexError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\base.py,Index,"
I Immutable ndarray implementing an ordered, sliceable set. The basic object
    storing axis labels for all pandas objects.

    Parameters
    ----------
    data : array-like (1-dimensional)
    dtype : NumPy dtype (default: object)
        If dtype is None, we find the dtype that best fits the data.
        If an actual dtype is provided, we coerce to that dtype if it's safe.
        Otherwise, an error will be raised.
    copy : bool
        Make a copy of input ndarray.
    name : object
        Name to be stored in the index.
    tupleize_cols : bool (default: True)
        When True, attempt to create a MultiIndex if possible.

    See Also
    --------
    RangeIndex : Index implementing a monotonic integer range.
    CategoricalIndex : Index of :class:`Categorical` s.
    MultiIndex : A multi-level, or hierarchical, Index.
    IntervalIndex : An Index of :class:`Interval` s.
    DatetimeIndex, TimedeltaIndex, PeriodIndex
    Int64Index, UInt64Index,  Float64Index

    Notes
    -----
    An Index instance can **only** contain hashable objects

    Examples
    --------
    >>> pd.Index([1, 2, 3])
    Int64Index([1, 2, 3], dtype='int64')

    >>> pd.Index(list('abc'))
    Index(['a', 'b', 'c'], dtype='object')",173,210,1112,37
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\category.py,CategoricalIndex,"
Index based on an underlying :class:`Categorical`.

CategoricalIndex, like Categorical, can only take on a limited,
and usually fixed, number of possible values (`categories`). Also,
like Categorical, it might have an order, but numerical operations
(additions, divisions, ...) are not possible.

Parameters
----------
data : array-like (1-dimensional)
    The values of the categorical. If `categories` are given, values not in
    `categories` will be replaced with NaN.
categories : index-like, optional
    The categories for the categorical. Items need to be unique.
    If the categories are not given here (and also not in `dtype`), they
    will be inferred from the `data`.
ordered : bool, optional
    Whether or not this categorical is treated as an ordered
    categorical. If not given here or in `dtype`, the resulting
    categorical will be unordered.
dtype : CategoricalDtype or ""category"", optional
    If :class:`CategoricalDtype`, cannot be used together with
    `categories` or `ordered`.

    .. versionadded:: 0.21.0
copy : bool, default False
    Make a copy of input ndarray.
name : object, optional
    Name to be stored in the index.

Attributes
----------
codes
categories
ordered

Methods
-------
rename_categories
reorder_categories
add_categories
remove_categories
remove_unused_categories
set_categories
as_ordered
as_unordered
map

Raises
------
ValueError
    If the categories do not validate.
TypeError
    If an explicit ``ordered=True`` is given but no `categories` and the
    `values` are not sortable.

See Also
--------
Index : The base pandas Index type.
Categorical : A categorical array.
CategoricalDtype : Type for categorical data.

Notes
-----
See the `user guide
<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`_
for more.

Examples
--------
>>> pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa

``CategoricalIndex`` can also be instantiated from a ``Categorical``:

>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])
>>> pd.CategoricalIndex(c)
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa

Ordered ``CategoricalIndex`` can have a min and max value.

>>> ci = pd.CategoricalIndex(['a','b','c','a','b','c'], ordered=True,
...                          categories=['c', 'b', 'a'])
>>> ci
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')  # noqa
>>> ci.min()
'c'
",41,128,2606,87
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\datetimelike.py,DatetimeTimedeltaMixin,"
Mixin class for methods shared by DatetimeIndex and TimedeltaIndex,
but not PeriodIndex
",75,77,87,2
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\datetimelike.py,DatetimeIndexOpsMixin,"
Common ops mixin to support a unified interface datetimelike Index.
",105,106,67,1
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\datetimelike.py,DatetimelikeDelegateMixin,"
Delegation mechanism, specific for Datetime, Timedelta, and Period types.

Functionality is delegated from the Index class to an Array class. A
few things can be customized

* _delegate_class : type
    The class being delegated to.
* _delegated_methods, delegated_properties : List
    The list of property / method names being delagated.
* raw_methods : Set
    The set of methods whose results should should *not* be
    boxed in an index, after being returned from the array
* raw_properties : Set
    The set of properties whose results should should *not* be
    boxed in an index, after being returned from the array",822,837,623,15
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\datetimes.py,DatetimeDelegateMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\datetimes.py,DatetimeIndex,"
Immutable ndarray of datetime64 data, represented internally as int64, and
which can be boxed to Timestamp objects that are subclasses of datetime and
carry metadata such as frequency information.

Parameters
----------
data : array-like (1-dimensional), optional
    Optional datetime-like data to construct index with.
copy : bool
    Make a copy of input ndarray.
freq : str or pandas offset object, optional
    One of pandas date offset strings or corresponding objects. The string
    'infer' can be passed in order to set the frequency of the index as the
    inferred frequency upon creation.
tz : pytz.timezone or dateutil.tz.tzfile
ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'
    When clocks moved backward due to DST, ambiguous times may arise.
    For example in Central European Time (UTC+01), when going from 03:00
    DST to 02:00 non-DST, 02:30:00 local time occurs both at 00:30:00 UTC
    and at 01:30:00 UTC. In such a situation, the `ambiguous` parameter
    dictates how ambiguous times should be handled.

    - 'infer' will attempt to infer fall dst-transition hours based on
      order
    - bool-ndarray where True signifies a DST time, False signifies a
      non-DST time (note that this flag is only applicable for ambiguous
      times)
    - 'NaT' will return NaT where there are ambiguous times
    - 'raise' will raise an AmbiguousTimeError if there are ambiguous times.
name : object
    Name to be stored in the index.
dayfirst : bool, default False
    If True, parse dates in `data` with the day first order.
yearfirst : bool, default False
    If True parse dates in `data` with the year first order.

Attributes
----------
year
month
day
hour
minute
second
microsecond
nanosecond
date
time
timetz
dayofyear
weekofyear
week
dayofweek
weekday
quarter
tz
freq
freqstr
is_month_start
is_month_end
is_quarter_start
is_quarter_end
is_year_start
is_year_end
is_leap_year
inferred_freq

Methods
-------
normalize
strftime
snap
tz_convert
tz_localize
round
floor
ceil
to_period
to_perioddelta
to_pydatetime
to_series
to_frame
month_name
day_name
mean

See Also
--------
Index : The base pandas Index type.
TimedeltaIndex : Index of timedelta64 data.
PeriodIndex : Index of Period data.
to_datetime : Convert argument to datetime.
date_range : Create a fixed-frequency DatetimeIndex.

Notes
-----
To learn more about the frequency strings, please see `this link
<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
",89,187,2496,98
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\frozen.py,FrozenList,"
Container that doesn't allow setting item *but*
because it's technically non-hashable, will be used
for lookups, appropriately, etc.
Side note: This has to be of type list. Otherwise,
               it messes up PyTables type checks.",18,21,132,3
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\interval.py,SetopCheck,"
This is called to decorate the set operations of IntervalIndex
to perform the type check in advance.
",128,130,100,2
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\interval.py,IntervalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\multi.py,MultiIndexUIntEngine,"
This class manages a MultiIndex by mapping label combinations to positive
integers.
",69,71,83,2
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\multi.py,MultiIndexPyIntEngine,"
This class manages those (extreme) cases in which the number of possible
label combinations overflows the 64 bits integers, and uses an ObjectEngine
containing Python integers.
",108,111,176,3
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\multi.py,MultiIndex,"
A multi-level, or hierarchical, index object for pandas objects.

Parameters
----------
levels : sequence of arrays
    The unique labels for each level.
codes : sequence of arrays
    Integers for each level designating which label at each location.

    .. versionadded:: 0.24.0
sortorder : optional int
    Level of sortedness (must be lexicographically sorted by that
    level).
names : optional sequence of objects
    Names for each of the index levels. (name is accepted for compat).
copy : bool, default False
    Copy the meta-data.
verify_integrity : bool, default True
    Check that the levels/codes are consistent and valid.

Attributes
----------
names
levels
codes
nlevels
levshape

Methods
-------
from_arrays
from_tuples
from_product
from_frame
set_levels
set_codes
to_frame
to_flat_index
is_lexsorted
sortlevel
droplevel
swaplevel
reorder_levels
remove_unused_levels
get_locs

See Also
--------
MultiIndex.from_arrays  : Convert list of arrays to MultiIndex.
MultiIndex.from_product : Create a MultiIndex from the cartesian product
                          of iterables.
MultiIndex.from_tuples  : Convert list of tuples to a MultiIndex.
MultiIndex.from_frame   : Make a MultiIndex from a DataFrame.
Index : The base pandas Index type.

Notes
-----
See the `user guide
<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`_
for more.

Examples
--------
A new ``MultiIndex`` is typically constructed using one of the helper
methods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`
and :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):

>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]
>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))
MultiIndex([(1,  'red'),
            (1, 'blue'),
            (2,  'red'),
            (2, 'blue')],
           names=['number', 'color'])

See further examples for how to construct a MultiIndex in the doc strings
of the mentioned helper methods.
",150,227,1978,77
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\numeric.py,NumericIndex,"
Provide numeric type operations.

This is an abstract class.
",45,48,60,3
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\numeric.py,IntegerIndex,"
This is an abstract class for Int64Index, UInt64Index.
",220,221,54,1
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\numeric.py,Int64Index,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\numeric.py,UInt64Index,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\numeric.py,Float64Index,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\period.py,PeriodDelegateMixin,"
Delegate from PeriodIndex to PeriodArray.
",64,65,41,1
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\period.py,PeriodIndex,"
Immutable ndarray holding ordinal values indicating regular periods in
time such as particular years, quarters, months, etc.

Index keys are boxed to Period objects which carries the metadata (eg,
frequency information).

Parameters
----------
data : array-like (1d int np.ndarray or PeriodArray), optional
    Optional period-like data to construct index with
copy : bool
    Make a copy of input ndarray
freq : str or period object, optional
    One of pandas period strings or corresponding objects
year : int, array, or Series, default None
month : int, array, or Series, default None
quarter : int, array, or Series, default None
day : int, array, or Series, default None
hour : int, array, or Series, default None
minute : int, array, or Series, default None
second : int, array, or Series, default None
tz : object, default None
    Timezone for converting datetime64 data to Periods
dtype : str or PeriodDtype, default None

Attributes
----------
day
dayofweek
dayofyear
days_in_month
daysinmonth
end_time
freq
freqstr
hour
is_leap_year
minute
month
quarter
qyear
second
start_time
week
weekday
weekofyear
year

Methods
-------
asfreq
strftime
to_timestamp

See Also
--------
Index : The base pandas Index type.
Period : Represents a period of time.
DatetimeIndex : Index with datetime64 data.
TimedeltaIndex : Index of timedelta64 data.
period_range : Create a fixed-frequency PeriodIndex.

Examples
--------
>>> idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)
",78,143,1472,65
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\range.py,RangeIndex,"
Immutable Index implementing a monotonic integer range.

RangeIndex is a memory-saving special case of Int64Index limited to
representing monotonic ranges. Using RangeIndex may in some instances
improve computing speed.

This is the default index type used
by DataFrame and Series when no explicit index is provided by the user.

Parameters
----------
start : int (default: 0), or other RangeIndex instance
    If int and ""stop"" is not given, interpreted as ""stop"" instead.
stop : int (default: 0)
step : int (default: 1)
name : object, optional
    Name to be stored in the index.
copy : bool, default False
    Unused, accepted for homogeneity with other index types.

Attributes
----------
start
stop
step

Methods
-------
from_range

See Also
--------
Index : The base pandas Index type.
Int64Index : Index of int64 data.
",37,71,825,34
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\timedeltas.py,TimedeltaDelegateMixin,"Most attrs are dispatched via datetimelike_{ops,methods}
    Some are ""raw"" methods, the result is not re-boxed in an Index
    We also have a few ""extra"" attrs, which may or may not be raw,
    which we don't want to expose in the .dt accessor.
 ",42,45,32,1
C:\Users\vaano\python_projects\pandas\pandas\core\indexes\timedeltas.py,TimedeltaIndex,"
Immutable ndarray of timedelta64 data, represented internally as int64, and
which can be boxed to timedelta objects.

Parameters
----------
data  : array-like (1-dimensional), optional
    Optional timedelta-like data to construct index with.
unit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional
    Which is an integer/float number.
freq : str or pandas offset object, optional
    One of pandas date offset strings or corresponding objects. The string
    'infer' can be passed in order to set the frequency of the index as the
    inferred frequency upon creation.
copy  : bool
    Make a copy of input ndarray.
name : object
    Name to be stored in the index.

Attributes
----------
days
seconds
microseconds
nanoseconds
components
inferred_freq

Methods
-------
to_pytimedelta
to_series
round
floor
ceil
to_frame
mean

See Also
--------
Index : The base pandas Index type.
Timedelta : Represents a duration between two dates or times.
DatetimeIndex : Index of datetime64 data.
PeriodIndex : Index of Period data.
timedelta_range : Create a fixed-frequency TimedeltaIndex.

Notes
-----
To learn more about the frequency strings, please see `this link
<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
",59,108,1262,49
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,Block,"
Canonical n-dimensional unit of homogeneous dtype contained in a pandas
data structure

Index-ignorant; let the container take care of that
",85,89,139,4
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,NonConsolidatableMixIn,"
hold methods for the nonconsolidatable blocks 
",1538,1539,45,1
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,ExtensionBlock,"
Block for holding extension types.

Notes
-----
This holds all 3rd-party extension array types. It's also the immediate
parent class for our internal extension types' blocks, CategoricalBlock.

ExtensionArrays are limited to 1-D.
",1660,1668,229,8
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,ObjectValuesExtensionBlock,"
Block providing backwards-compatibility for `.values`.

Used by PeriodArray and IntervalArray to ensure that
Series[T].values is an ndarray of objects.
",1946,1950,151,4
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,NumericBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,FloatOrComplexBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,FloatBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,ComplexBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,IntBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,DatetimeLikeBlockMixin,"
Mixin class for DatetimeBlock, DatetimeTZBlock, and TimedeltaBlock.
",2073,2074,67,1
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,DatetimeBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,DatetimeTZBlock,"
implement a datetime64 block with a tz attribute 
",2217,2218,48,1
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,TimeDeltaBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,BoolBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,ObjectBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\blocks.py,CategoricalBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\concat.py,JoinUnit,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\internals\managers.py,BlockManager,"
Core internal data structure to implement DataFrame, Series, etc.

Manage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a
lightweight blocked set of labeled data to be manipulated by the DataFrame
public API class

Attributes
----------
shape
ndim
axes
values
items

Methods
-------
set_axis(axis, new_labels)
copy(deep=True)

get_dtype_counts
get_dtypes

apply(func, axes, block_filter_fn)

get_bool_data
get_numeric_data

get_slice(slice_like, axis)
get(label)
iget(loc)

take(indexer, axis)
reindex_axis(new_labels, axis)
reindex_indexer(new_labels, indexer, axis)

delete(label)
insert(loc, label, value)
set(label, value)

Parameters
----------


Notes
-----
This is *not* a public API class
",63,109,710,46
C:\Users\vaano\python_projects\pandas\pandas\core\internals\managers.py,SingleBlockManager,"
manage a single block with 
",1432,1433,26,1
C:\Users\vaano\python_projects\pandas\pandas\core\reshape\concat.py,_Concatenator,"
Orchestrates a concatenation operation for BlockManagers
",250,251,56,1
C:\Users\vaano\python_projects\pandas\pandas\core\reshape\merge.py,_MergeOperation,"
Perform a database (SQL) merge operation between two DataFrame or Series
objects using either columns as keys or their row indexes
",545,547,130,2
C:\Users\vaano\python_projects\pandas\pandas\core\reshape\merge.py,_OrderedMerge,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\reshape\merge.py,_AsOfMerge,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\reshape\reshape.py,_Unstacker,"
Helper class to unstack data / pivot with multi-level index

Parameters
----------
values : ndarray
    Values of DataFrame to ""Unstack""
index : object
    Pandas ``Index``
level : int or str, default last level
    Level to ""unstack"". Accepts a name for the level.
value_columns : Index, optional
    Pandas ``Index`` or ``MultiIndex`` object if unstacking a DataFrame
fill_value : scalar, optional
    Default value to fill in missing values if subgroups do not have the
    same set of labels. By default, missing values will be replaced with
    the default fill value for that data type, NaN for float, NaT for
    datetimelike, etc. For integer types, by default data will converted to
    float and missing values will be set to NaN.
constructor : object
    Pandas ``DataFrame`` or subclass used to create unstacked
    response.  If None, DataFrame will be used.

Examples
--------
>>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),
...                                    ('two', 'a'), ('two', 'b')])
>>> s = pd.Series(np.arange(1, 5, dtype=np.int64), index=index)
>>> s
one  a    1
     b    2
two  a    3
     b    4
dtype: int64

>>> s.unstack(level=-1)
     a  b
one  1  2
two  3  4

>>> s.unstack(level=0)
   one  two
a    1    3
b    2    4

Returns
-------
unstacked : DataFrame
",39,86,1310,47
C:\Users\vaano\python_projects\pandas\pandas\core\window\common.py,WindowGroupByMixin,"
Provide the groupby facilities.
",47,48,31,1
C:\Users\vaano\python_projects\pandas\pandas\core\window\ewm.py,EWM,"
Provide exponential weighted functions.

Parameters
----------
com : float, optional
    Specify decay in terms of center of mass,
    :math:`\alpha = 1 / (1 + com),\text{ for } com \geq 0`.
span : float, optional
    Specify decay in terms of span,
    :math:`\alpha = 2 / (span + 1),\text{ for } span \geq 1`.
halflife : float, optional
    Specify decay in terms of half-life,
    :math:`\alpha = 1 - exp(log(0.5) / halflife),\text{for} halflife > 0`.
alpha : float, optional
    Specify smoothing factor :math:`\alpha` directly,
    :math:`0 < \alpha \leq 1`.
min_periods : int, default 0
    Minimum number of observations in window required to have a value
    (otherwise result is NA).
adjust : bool, default True
    Divide by decaying adjustment factor in beginning periods to account
    for imbalance in relative weightings
    (viewing EWMA as a moving average).
ignore_na : bool, default False
    Ignore missing values when calculating weights;
    specify True to reproduce pre-0.15.0 behavior.
axis : {0 or 'index', 1 or 'columns'}, default 0
    The axis to use. The value 0 identifies the rows, and 1
    identifies the columns.

Returns
-------
DataFrame
    A Window sub-classed for the particular operation.

See Also
--------
rolling : Provides rolling window calculations.
expanding : Provides expanding transformations.

Notes
-----
Exactly one of center of mass, span, half-life, and alpha must be provided.
Allowed values and relationship between the parameters are specified in the
parameter descriptions above; see the link at the end of this section for
a detailed explanation.

When adjust is True (default), weighted averages are calculated using
weights (1-alpha)**(n-1), (1-alpha)**(n-2), ..., 1-alpha, 1.

When adjust is False, weighted averages are calculated recursively as:
   weighted_average[0] = arg[0];
   weighted_average[i] = (1-alpha)*weighted_average[i-1] + alpha*arg[i].

When ignore_na is False (default), weights are based on absolute positions.
For example, the weights of x and y used in calculating the final weighted
average of [x, None, y] are (1-alpha)**2 and 1 (if adjust is True), and
(1-alpha)**2 and alpha (if adjust is False).

When ignore_na is True (reproducing pre-0.15.0 behavior), weights are based
on relative positions. For example, the weights of x and y used in
calculating the final weighted average of [x, None, y] are 1-alpha and 1
(if adjust is True), and 1-alpha and alpha (if adjust is False).

More details can be found at
http://pandas.pydata.org/pandas-docs/stable/user_guide/computation.html#exponentially-weighted-windows

Examples
--------

>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
>>> df
     B
0  0.0
1  1.0
2  2.0
3  NaN
4  4.0

>>> df.ewm(com=0.5).mean()
          B
0  0.000000
1  0.750000
2  1.615385
3  1.615385
4  3.670213
",26,112,2820,86
C:\Users\vaano\python_projects\pandas\pandas\core\window\expanding.py,Expanding,"
Provide expanding transformations.

Parameters
----------
min_periods : int, default 1
    Minimum number of observations in window required to have a value
    (otherwise result is NA).
center : bool, default False
    Set the labels at the center of the window.
axis : int or str, default 0

Returns
-------
a Window sub-classed for the particular operation

See Also
--------
rolling : Provides rolling window calculations.
ewm : Provides exponential weighted functions.

Notes
-----
By default, the result is set to the right edge of the window. This can be
changed to the center of the window by setting ``center=True``.

Examples
--------

>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
     B
0  0.0
1  1.0
2  2.0
3  NaN
4  4.0

>>> df.expanding(2).sum()
     B
0  NaN
1  1.0
2  3.0
3  3.0
4  7.0
",11,54,807,43
C:\Users\vaano\python_projects\pandas\pandas\core\window\expanding.py,ExpandingGroupby,"
Provide a expanding groupby implementation.
",253,254,43,1
C:\Users\vaano\python_projects\pandas\pandas\core\window\indexers.py,BaseIndexer,"
Base class for window bounds calculations
",35,36,41,1
C:\Users\vaano\python_projects\pandas\pandas\core\window\indexers.py,FixedWindowIndexer,"
Creates window boundaries that are of fixed length.
",65,66,51,1
C:\Users\vaano\python_projects\pandas\pandas\core\window\indexers.py,VariableWindowIndexer,"
Creates window boundaries that are of variable length, namely for time series.
",91,92,78,1
C:\Users\vaano\python_projects\pandas\pandas\core\window\indexers.py,ExpandingIndexer,"
Calculate expanding window bounds, mimicking df.expanding()
",108,109,59,1
C:\Users\vaano\python_projects\pandas\pandas\core\window\rolling.py,_Window,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\window\rolling.py,Window,"
Provide rolling window calculations.

Parameters
----------
window : int, offset, or BaseIndexer subclass
    Size of the moving window. This is the number of observations used for
    calculating the statistic. Each window will be a fixed size.

    If its an offset then this will be the time period of each window. Each
    window will be a variable sized based on the observations included in
    the time-period. This is only valid for datetimelike indexes.

    If a BaseIndexer subclass is passed, calculates the window boundaries
    based on the defined ``get_window_bounds`` method. Additional rolling
    keyword arguments, namely `min_periods`, `center`, and
    `closed` will be passed to `get_window_bounds`.
min_periods : int, default None
    Minimum number of observations in window required to have a value
    (otherwise result is NA). For a window that is specified by an offset,
    `min_periods` will default to 1. Otherwise, `min_periods` will default
    to the size of the window.
center : bool, default False
    Set the labels at the center of the window.
win_type : str, default None
    Provide a window type. If ``None``, all points are evenly weighted.
    See the notes below for further information.
on : str, optional
    For a DataFrame, a datetime-like column or MultiIndex level on which
    to calculate the rolling window, rather than the DataFrame's index.
    Provided integer column is ignored and excluded from result since
    an integer index is not used to calculate the rolling window.
axis : int or str, default 0
closed : str, default None
    Make the interval closed on the 'right', 'left', 'both' or
    'neither' endpoints.
    For offset-based windows, it defaults to 'right'.
    For fixed windows, defaults to 'both'. Remaining cases not implemented
    for fixed windows.

Returns
-------
a Window or Rolling sub-classed for the particular operation

See Also
--------
expanding : Provides expanding transformations.
ewm : Provides exponential weighted functions.

Notes
-----
By default, the result is set to the right edge of the window. This can be
changed to the center of the window by setting ``center=True``.

To learn more about the offsets & frequency strings, please see `this link
<http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.

The recognized win_types are:

* ``boxcar``
* ``triang``
* ``blackman``
* ``hamming``
* ``bartlett``
* ``parzen``
* ``bohman``
* ``blackmanharris``
* ``nuttall``
* ``barthann``
* ``kaiser`` (needs beta)
* ``gaussian`` (needs std)
* ``general_gaussian`` (needs power, width)
* ``slepian`` (needs width)
* ``exponential`` (needs tau), center is set to None.

If ``win_type=None`` all points are evenly weighted. To learn more about
different window types see `scipy.signal window functions
<https://docs.scipy.org/doc/scipy/reference/signal.html#window-functions>`__.

Examples
--------

>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
>>> df
     B
0  0.0
1  1.0
2  2.0
3  NaN
4  4.0

Rolling sum with a window length of 2, using the 'triang'
window type.

>>> df.rolling(2, win_type='triang').sum()
     B
0  NaN
1  0.5
2  1.5
3  NaN
4  NaN

Rolling sum with a window length of 2, min_periods defaults
to the window length.

>>> df.rolling(2).sum()
     B
0  NaN
1  1.0
2  3.0
3  NaN
4  NaN

Same as above, but explicitly set the min_periods

>>> df.rolling(2, min_periods=1).sum()
     B
0  0.0
1  1.0
2  3.0
3  2.0
4  4.0

A ragged (meaning not-a-regular frequency), time-indexed DataFrame

>>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},
...                   index = [pd.Timestamp('20130101 09:00:00'),
...                            pd.Timestamp('20130101 09:00:02'),
...                            pd.Timestamp('20130101 09:00:03'),
...                            pd.Timestamp('20130101 09:00:05'),
...                            pd.Timestamp('20130101 09:00:06')])

>>> df
                       B
2013-01-01 09:00:00  0.0
2013-01-01 09:00:02  1.0
2013-01-01 09:00:03  2.0
2013-01-01 09:00:05  NaN
2013-01-01 09:00:06  4.0

Contrasting to an integer rolling window, this will roll a variable
length window corresponding to the time period.
The default for min_periods is 1.

>>> df.rolling('2s').sum()
                       B
2013-01-01 09:00:00  0.0
2013-01-01 09:00:02  1.0
2013-01-01 09:00:03  3.0
2013-01-01 09:00:05  NaN
2013-01-01 09:00:06  4.0
",795,945,4406,150
C:\Users\vaano\python_projects\pandas\pandas\core\window\rolling.py,_Rolling,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\window\rolling.py,_Rolling_and_Expanding,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\window\rolling.py,Rolling,,,,,
C:\Users\vaano\python_projects\pandas\pandas\core\window\rolling.py,RollingGroupby,"
Provide a rolling groupby implementation.
",2035,2036,41,1
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,PerformanceWarning,"
Warning raised when there is a possible performance impact.
",11,12,59,1
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,UnsupportedFunctionCall,"
Exception raised when attempting to call a numpy function
on a pandas object, but that function is not supported by
the object e.g. ``np.cumsum(groupby_object)``.
",17,20,162,3
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,UnsortedIndexError,"
Error raised when attempting to get a slice of a MultiIndex,
and the index has not been lexsorted. Subclass of `KeyError`.
",25,27,122,2
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,ParserError,"
Exception that is raised by an error encountered in parsing file contents.

This is a generic error raised for errors encountered when functions like
`read_csv` or `read_html` are parsing contents of a file.

See Also
--------
read_csv : Read CSV (comma-separated) file into a DataFrame.
read_html : Read HTML table into a DataFrame.
",32,41,333,9
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,DtypeWarning,"
Warning raised when reading different dtypes in a column from a file.

Raised for a dtype incompatibility. This can happen whenever `read_csv`
or `read_table` encounter non-uniform dtypes in a column(s) of a given
CSV file.

See Also
--------
read_csv : Read CSV (comma-separated) file into a DataFrame.
read_table : Read general delimited file into a DataFrame.

Notes
-----
This warning is issued when dealing with larger files because the dtype
checking happens per chunk read.

Despite the warning, the CSV file is read with mixed types in a single
column which will be an object type. See the examples below to better
understand this issue.

Examples
--------
This example creates and reads a large CSV file with a column that contains
`int` and `str`.

>>> df = pd.DataFrame({'a': (['1'] * 100000 + ['X'] * 100000 +
...                          ['1'] * 100000),
...                    'b': ['b'] * 300000})
>>> df.to_csv('test.csv', index=False)
>>> df2 = pd.read_csv('test.csv')
... # DtypeWarning: Columns (0) have mixed types

Important to notice that ``df2`` will contain both `str` and `int` for the
same input, '1'.

>>> df2.iloc[262140, 0]
'1'
>>> type(df2.iloc[262140, 0])
<class 'str'>
>>> df2.iloc[262150, 0]
1
>>> type(df2.iloc[262150, 0])
<class 'int'>

One way to solve this issue is using the `dtype` parameter in the
`read_csv` and `read_table` functions to explicit the conversion:

>>> df2 = pd.read_csv('test.csv', sep=',', dtype={'a': str})

No warning was issued.

>>> import os
>>> os.remove('test.csv')
",46,99,1530,53
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,EmptyDataError,"
Exception that is thrown in `pd.read_csv` (by both the C and
Python engines) when empty data or header is encountered.
",104,106,118,2
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,ParserWarning,"
Warning raised when reading a file that doesn't use the default 'c' parser.

Raised by `pd.read_csv` and `pd.read_table` when it is necessary to change
parsers, generally from the default 'c' parser to 'python'.

It happens due to a lack of support or functionality for parsing a
particular attribute of a CSV file with the requested engine.

Currently, 'c' unsupported options include the following parameters:

1. `sep` other than a single character (e.g. regex separators)
2. `skipfooter` higher than 0
3. `sep=None` with `delim_whitespace=False`

The warning can be avoided by adding `engine='python'` as a parameter in
`pd.read_csv` and `pd.read_table` methods.

See Also
--------
pd.read_csv : Read CSV (comma-separated) file into DataFrame.
pd.read_table : Read general delimited file into DataFrame.

Examples
--------
Using a `sep` in `pd.read_csv` other than a single character:

>>> import io
>>> csv = '''a;b;c
...           1;1,8
...           1;2,1'''
>>> df = pd.read_csv(io.StringIO(csv), sep='[;,]')  # doctest: +SKIP
... # ParserWarning: Falling back to the 'python' engine...

Adding `engine='python'` to `pd.read_csv` removes the Warning:

>>> df = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')
",111,147,1227,36
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,MergeError,"
Error raised when problems arise during merging due to problems
with input data. Subclass of `ValueError`.
",152,154,106,2
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,AccessorRegistrationWarning,"
Warning for attribute conflicts in accessor registration.
",159,160,57,1
C:\Users\vaano\python_projects\pandas\pandas\errors\__init__.py,AbstractMethodError,"
Raise this error instead of NotImplementedError for abstract methods
while keeping compatibility with Python 2 and Python 3.
",165,167,124,2
C:\Users\vaano\python_projects\pandas\pandas\io\common.py,_BytesZipFile,"
Wrapper for standard library class ZipFile and allow the returned file-like
    handle to accept byte strings via `write` method.

    BytesIO provides attributes of file-like object and ZipFile.writestr writes
    bytes strings into a member of the archive.",474,479,246,5
C:\Users\vaano\python_projects\pandas\pandas\io\common.py,_MMapWrapper,"
Wrapper for the Python's mmap class so that it can be properly read in
by Python's csv.reader class.

Parameters
----------
f : file object
    File object to be mapped onto memory. Must support the 'fileno'
    method or have an equivalent attribute
",507,515,250,8
C:\Users\vaano\python_projects\pandas\pandas\io\common.py,UTF8Recoder,"
Iterator that reads an encoded stream and re-encodes the input to UTF-8
",544,545,71,1
C:\Users\vaano\python_projects\pandas\pandas\io\html.py,_HtmlFrameParser,"
Base class for parsers that parse HTML into DataFrames.

Parameters
----------
io : str or file-like
    This can be either a string of raw HTML, a valid URL using the HTTP,
    FTP, or FILE protocols or a file-like object.

match : str or regex
    The text to match in the document.

attrs : dict
    List of HTML <table> element attributes to match.

encoding : str
    Encoding to be used by parser

displayed_only : bool
    Whether or not items with ""display:none"" should be ignored

    .. versionadded:: 0.23.0

Attributes
----------
io : str or file-like
    raw HTML, URL, or file-like object

match : regex
    The text to match in the raw HTML

attrs : dict-like
    A dictionary of valid table attributes to use to search for table
    elements.

encoding : str
    Encoding to be used by parser

displayed_only : bool
    Whether or not items with ""display:none"" should be ignored

    .. versionadded:: 0.23.0

Notes
-----
To subclass this class effectively you must override the following methods:
    * :func:`_build_doc`
    * :func:`_attr_getter`
    * :func:`_text_getter`
    * :func:`_parse_td`
    * :func:`_parse_thead_tr`
    * :func:`_parse_tbody_tr`
    * :func:`_parse_tfoot_tr`
    * :func:`_parse_tables`
    * :func:`_equals_tag`
See each method's respective documentation for details on their
functionality.
",139,195,1339,56
C:\Users\vaano\python_projects\pandas\pandas\io\html.py,_BeautifulSoupHtml5LibFrameParser,"
HTML to DataFrame parser that uses BeautifulSoup under the hood.

See Also
--------
pandas.io.html._HtmlFrameParser
pandas.io.html._LxmlFrameParser

Notes
-----
Documentation strings for this class are in the base class
:class:`pandas.io.html._HtmlFrameParser`.
",520,531,261,11
C:\Users\vaano\python_projects\pandas\pandas\io\html.py,_LxmlFrameParser,"
HTML to DataFrame parser that uses lxml under the hood.

Warning
-------
This parser can only handle HTTP, FTP, and FILE urls.

See Also
--------
_HtmlFrameParser
_BeautifulSoupLxmlFrameParser

Notes
-----
Documentation strings for this class are in the base class
:class:`_HtmlFrameParser`.
",626,641,291,15
C:\Users\vaano\python_projects\pandas\pandas\io\parquet.py,BaseImpl,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\parquet.py,PyArrowImpl,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\parquet.py,FastParquetImpl,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,TextFileReader,"
Passed dialect overrides any of the related parser options
",787,788,58,1
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,ParserBase,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,CParserWrapper,"
    
",1861,1862,1,1
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,PythonParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,FixedWidthReader,"
A reader of fixed-width lines.
",3541,3542,30,1
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,FixedWidthFieldParser,"
Specialization that Converts fixed-width fields into DataFrames.
See PythonParser for details.
",3647,3649,94,2
C:\Users\vaano\python_projects\pandas\pandas\io\parsers.py,MyDialect,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,PossibleDataLossError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,ClosedFileError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,IncompatibilityWarning,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,AttributeConflictWarning,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,DuplicateWarning,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,HDFStore,"
Dict-like IO interface for storing pandas objects in PyTables.

Either Fixed or Table format.

Parameters
----------
path : string
    File path to HDF5 file
mode : {'a', 'w', 'r', 'r+'}, default 'a'

    ``'r'``
        Read-only; no data can be modified.
    ``'w'``
        Write; a new file is created (an existing file with the same
        name would be deleted).
    ``'a'``
        Append; an existing file is opened for reading and writing,
        and if the file does not exist it is created.
    ``'r+'``
        It is similar to ``'a'``, but the file must already exist.
complevel : int, 0-9, default None
        Specifies a compression level for data.
        A value of 0 or None disables compression.
complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'
        Specifies the compression library to be used.
        As of v0.20.2 these additional compressors for Blosc are supported
        (default if no compressor specified: 'blosc:blosclz'):
        {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',
         'blosc:zlib', 'blosc:zstd'}.
        Specifying a compression library which is not available issues
        a ValueError.
fletcher32 : bool, default False
        If applying compression use the fletcher32 checksum

Examples
--------
>>> bar = pd.DataFrame(np.random.randn(10, 4))
>>> store = pd.HDFStore('test.h5')
>>> store['foo'] = bar   # write to HDF5
>>> bar = store['foo']   # retrieve
>>> store.close()
",456,497,1459,41
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,TableIterator,"
Define the iteration interface on a table

Parameters
----------
store : HDFStore
s     : the referred storer
func  : the function to execute the query
where : the where of the query
nrows : the rows to iterate on
start : the passed start value (default is None)
stop  : the passed stop value (default is None)
iterator : bool, default False
    Whether to use the default iterator.
chunksize : the passed chunking value (default is 100000)
auto_close : bool, default False
    Whether to automatically close the store at the end of iteration.
",1723,1739,543,16
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,IndexCol,"
an index column description class

Parameters
----------

axis   : axis which I reference
values : the ndarray like converted values
kind   : a string description of this type
typ    : the pytables type
pos    : the position in the pytables
",1836,1846,240,10
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,GenericIndexCol,"
an index which is not represented in the data of the table 
",2118,2119,58,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,DataCol,"
a data holding column, by definition this is not indexable

Parameters
----------

data   : the actual data
cname  : the column name in the table to hold the data (typically
         values)
meta   : a string description of the metadata
metadata : the actual metadata
",2145,2155,267,10
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,DataIndexableCol,"
represent a data column that can be indexed 
",2433,2434,43,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,GenericDataIndexableCol,"
represent a generic pytables data column 
",2460,2461,40,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,Fixed,"
represent an object in my store
facilitate read/write of various types of objects
this is an abstract base class

Parameters
----------
parent : HDFStore
group : Node
    The group node where the table resides.
",2466,2475,210,9
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,GenericFixed,"
a generified fixed version 
",2641,2642,26,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,SeriesFixed,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,BlockManagerFixed,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,FrameFixed,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,Table,"
represent a table:
  facilitate read/write of various types of tables

Attrs in Table Node
-------------------
These are attributes that are store in the main table node, they are
necessary to recreate these tables when read back in.

index_axes    : a list of tuples of the (original indexing axis and
    index column)
non_index_axes: a list of tuples of the (original index axis and
    columns on a non-indexing axis)
values_axes   : a list of the columns which comprise the data of this
    table
data_columns  : a list of the columns that we are allowing indexing
    (these become single columns in values_axes), or True to force all
    columns
nan_rep       : the string to use for nan representations for string
    objects
levels        : the names of levels
metadata      : the names of the metadata columns
",3111,3132,819,21
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,WORMTable,"
a write-once read-many table: this format DOES NOT ALLOW appending to a
table. writing is a one-time operation the data are stored in a format
that allows for searching the data on disk
",4086,4089,185,3
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,AppendableTable,"
support the new appendable table formats 
",4113,4114,40,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,AppendableFrameTable,"
support the new appendable table formats 
",4345,4346,40,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,AppendableSeriesTable,"
support the new appendable table formats 
",4445,4446,40,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,AppendableMultiSeriesTable,"
support the new appendable table formats 
",4494,4495,40,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,GenericTable,"
a table that read/writes the generic pytables table format 
",4510,4511,58,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,AppendableMultiFrameTable,"
a frame with a multi-index 
",4575,4576,26,1
C:\Users\vaano\python_projects\pandas\pandas\io\pytables.py,Selection,"
Carries out a selection operation on a tables.Table object.

Parameters
----------
table : a Table object
where : list of Terms (or convertible to)
start, stop: indices to start and/or stop selection
",5006,5013,199,7
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,SQLAlchemyRequired,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,DatabaseError,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,SQLTable,"
For mapping Pandas tables to SQL tables.
Uses fact that table is reflected by SQLAlchemy to
do better type conversions.
Also holds various flags needed to avoid having to
pass them between functions all the time.
TODO: support for multiIndex",587,592,212,5
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,PandasSQL,"
Subclasses Should define read_sql and to_sql.
",1034,1035,45,1
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,SQLDatabase,"
This class enables conversion between DataFrame and SQL databases
using SQLAlchemy to handle DataBase abstraction.

Parameters
----------
engine : SQLAlchemy connectable
    Connectable to connect with the database. Using SQLAlchemy makes it
    possible to use any DB supported by that library.
schema : string, default None
    Name of SQL schema in database to write to (if database flavor
    supports this). If None, use default schema (default).
meta : SQLAlchemy MetaData object, default None
    If provided, this MetaData object is used instead of a newly
    created. This allows to specify database flavor specific
    arguments in the MetaData object.
",1052,1067,663,15
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,SQLiteTable,"
Patch the SQLTable for fallback support.
Instead of a table variable just use the Create Table statement.
",1430,1432,105,2
C:\Users\vaano\python_projects\pandas\pandas\io\sql.py,SQLiteDatabase,"
Version of SQLDatabase to support SQLite connections (fallback without
SQLAlchemy). This should only be used internally.

Parameters
----------
con : sqlite connection object
",1563,1569,174,6
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,PossiblePrecisionLoss,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,ValueLabelTypeMismatch,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,InvalidColumnName,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataValueLabel,"
Parse a categorical column and prepare formatted output

Parameters
----------
value : int8, int16, int32, float32 or float64
    The Stata missing value code

Attributes
----------
string : string
    String representation of the Stata missing value
value : int8, int16, int32, float32 or float64
    The original encoded missing value

Methods
-------
generate_value_label
",616,633,374,17
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataMissingValue,"
An observation's missing value.

Parameters
----------
value : int8, int16, int32, float32 or float64
    The Stata missing value code

Attributes
----------
string : string
    String representation of the Stata missing value
value : int8, int16, int32, float32 or float64
    The original encoded missing value

Notes
-----
More information: <http://www.stata.com/help.cgi?missing>

Integer missing values make the code '.', '.a', ..., '.z' to the ranges
101 ... 127 (for int8), 32741 ... 32767  (for int16) and 2147483621 ...
2147483647 (for int32).  Missing values for floating point data types are
more complex but the pattern is simple to discern from the following table.

np.float32 missing values (float in Stata)
0000007f    .
0008007f    .a
0010007f    .b
...
00c0007f    .x
00c8007f    .y
00d0007f    .z

np.float64 missing values (double in Stata)
000000000000e07f    .
000000000001e07f    .a
000000000002e07f    .b
...
000000000018e07f    .x
000000000019e07f    .y
00000000001ae07f    .z
",741,781,1001,40
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataWriter,"
A class for writing Stata binary dta files

Parameters
----------
fname : path (string), buffer or path object
    string, path object (pathlib.Path or py._path.local.LocalPath) or
    object implementing a binary write() functions. If using a buffer
    then the buffer will not be automatically closed after the file
    is written.

    .. versionadded:: 0.23.0 support for pathlib, py.path.

data : DataFrame
    Input to save
convert_dates : dict
    Dictionary mapping columns containing datetime types to stata internal
    format to use when writing the dates. Options are 'tc', 'td', 'tm',
    'tw', 'th', 'tq', 'ty'. Column can be either an integer or a name.
    Datetime columns that do not have a conversion type specified will be
    converted to 'tc'. Raises NotImplementedError if a datetime column has
    timezone information
write_index : bool
    Write the index to Stata dataset.
encoding : str
    Default is latin-1. Only latin-1 and ascii are supported.
byteorder : str
    Can be "">"", ""<"", ""little"", or ""big"". default is `sys.byteorder`
time_stamp : datetime
    A datetime to use as file creation date.  Default is the current time
data_label : str
    A label for the data set.  Must be 80 characters or smaller.
variable_labels : dict
    Dictionary containing columns as keys and variable labels as values.
    Each label must be 80 characters or smaller.

Returns
-------
writer : StataWriter instance
    The StataWriter instance has a write_file method, which will
    write the file to the given `fname`.

Raises
------
NotImplementedError
    * If datetimes contain timezone information
ValueError
    * Columns listed in convert_dates are neither datetime64[ns]
      or datetime.datetime
    * Column dtype is not representable in Stata
    * Column listed in convert_dates is not in DataFrame
    * Categorical label contains more than 32,000 characters

Examples
--------
>>> data = pd.DataFrame([[1.0, 1]], columns=['a', 'b'])
>>> writer = StataWriter('./data_file.dta', data)
>>> writer.write_file()

Or with dates
>>> from datetime import datetime
>>> data = pd.DataFrame([[datetime(2000,1,1)]], columns=['date'])
>>> writer = StataWriter('./date_data_file.dta', data, {'date' : 'tw'})
>>> writer.write_file()
",2022,2085,2250,63
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataStrLWriter,"
Converter for Stata StrLs

Stata StrLs map 8 byte values to strings which are stored using a
dictionary-like format where strings are keyed to two values.

Parameters
----------
df : DataFrame
    DataFrame to convert
columns : list
    List of columns names to convert to StrL
version : int, optional
    dta version.  Currently supports 117, 118 and 119
byteorder : str, optional
    Can be "">"", ""<"", ""little"", or ""big"". default is `sys.byteorder`

Notes
-----
Supports creation of the StrL block of a dta file for dta versions
117, 118 and 119.  These differ in how the GSO is stored.  118 and
119 store the GSO lookup value as a uint32 and a uint64, while 117
uses two uint32s. 118 and 119 also encode all strings as unicode
which is required by the format.  117 uses 'latin-1' a fixed width
encoding that extends the 7-bit ascii table with an additional 128
characters.
",2607,2632,874,25
C:\Users\vaano\python_projects\pandas\pandas\io\stata.py,StataWriter117,"
A class for writing Stata binary dta files in Stata 13 format (117)

.. versionadded:: 0.23.0

Parameters
----------
fname : path (string), buffer or path object
    string, path object (pathlib.Path or py._path.local.LocalPath) or
    object implementing a binary write() functions. If using a buffer
    then the buffer will not be automatically closed after the file
    is written.
data : DataFrame
    Input to save
convert_dates : dict
    Dictionary mapping columns containing datetime types to stata internal
    format to use when writing the dates. Options are 'tc', 'td', 'tm',
    'tw', 'th', 'tq', 'ty'. Column can be either an integer or a name.
    Datetime columns that do not have a conversion type specified will be
    converted to 'tc'. Raises NotImplementedError if a datetime column has
    timezone information
write_index : bool
    Write the index to Stata dataset.
byteorder : str
    Can be "">"", ""<"", ""little"", or ""big"". default is `sys.byteorder`
time_stamp : datetime
    A datetime to use as file creation date.  Default is the current time
data_label : str
    A label for the data set.  Must be 80 characters or smaller.
variable_labels : dict
    Dictionary containing columns as keys and variable labels as values.
    Each label must be 80 characters or smaller.
convert_strl : list
    List of columns names to convert to Stata StrL format.  Columns with
    more than 2045 characters are automatically written as StrL.
    Smaller columns can be converted by including the column name.  Using
    StrLs can reduce output file size when strings are longer than 8
    characters, and either frequently repeated or sparse.

Returns
-------
writer : StataWriter117 instance
    The StataWriter117 instance has a write_file method, which will
    write the file to the given `fname`.

Raises
------
NotImplementedError
    * If datetimes contain timezone information
ValueError
    * Columns listed in convert_dates are neither datetime64[ns]
      or datetime.datetime
    * Column dtype is not representable in Stata
    * Column listed in convert_dates is not in DataFrame
    * Categorical label contains more than 32,000 characters

Examples
--------
>>> from pandas.io.stata import StataWriter117
>>> data = pd.DataFrame([[1.0, 1, 'a']], columns=['a', 'b', 'c'])
>>> writer = StataWriter117('./data_file.dta', data)
>>> writer.write_file()

Or with long strings stored in strl format

>>> data = pd.DataFrame([['A relatively long string'], [''], ['']],
...                     columns=['strls'])
>>> writer = StataWriter117('./data_file_with_long_strings.dta', data,
...                         convert_strl=['strls'])
>>> writer.write_file()
",2790,2859,2680,69
C:\Users\vaano\python_projects\pandas\pandas\io\clipboard\__init__.py,PyperclipException,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\clipboard\__init__.py,PyperclipWindowsException,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\clipboard\__init__.py,CheckedCall,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\clipboard\__init__.py,ClipboardUnavailable,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_base.py,_BaseExcelReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_base.py,ExcelWriter,"
Class for writing DataFrame objects into excel sheets, default is to use
xlwt for xls, openpyxl for xlsx.  See DataFrame.to_excel for typical usage.

Parameters
----------
path : str
    Path to xls or xlsx file.
engine : str (optional)
    Engine to use for writing. If None, defaults to
    ``io.excel.<extension>.writer``.  NOTE: can only be passed as a keyword
    argument.
date_format : str, default None
    Format string for dates written into Excel files (e.g. 'YYYY-MM-DD').
datetime_format : str, default None
    Format string for datetime objects written into Excel files.
    (e.g. 'YYYY-MM-DD HH:MM:SS')
mode : {'w', 'a'}, default 'w'
    File mode to use (write or append).

    .. versionadded:: 0.24.0

Attributes
----------
None

Methods
-------
None

Notes
-----
None of the methods and properties are considered public.

For compatibility with CSV writers, ExcelWriter serializes lists
and dicts to strings before writing.

Examples
--------
Default usage:

>>> with ExcelWriter('path_to_file.xlsx') as writer:
...     df.to_excel(writer)

To write to separate sheets in a single file:

>>> with ExcelWriter('path_to_file.xlsx') as writer:
...     df1.to_excel(writer, sheet_name='Sheet1')
...     df2.to_excel(writer, sheet_name='Sheet2')

You can set the date format or datetime format:

>>> with ExcelWriter('path_to_file.xlsx',
                      date_format='YYYY-MM-DD',
                      datetime_format='YYYY-MM-DD HH:MM:SS') as writer:
...     df.to_excel(writer)

You can also append to an existing Excel file:

>>> with ExcelWriter('path_to_file.xlsx', mode='a') as writer:
...     df.to_excel(writer, sheet_name='Sheet3')
Defining an ExcelWriter implementation (see abstract methods for more...)",530,590,1661,60
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_base.py,ExcelFile,"
Class for parsing tabular excel sheets into DataFrame objects.
Uses xlrd. See read_excel for more documentation

Parameters
----------
io : str, path object (pathlib.Path or py._path.local.LocalPath),
    a file-like object, xlrd workbook or openpypl workbook.
    If a string or path object, expected to be a path to xls, xlsx or odf file.
engine : str, default None
    If io is not a buffer or path, this must be set to identify io.
    Acceptable values are None, ``xlrd``, ``openpyxl`` or ``odf``.
    Note that ``odf`` reads tables out of OpenDocument formatted files.
",780,792,574,12
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_odfreader.py,_ODFReader,"
Read tables out of OpenDocument formatted files.

Parameters
----------
filepath_or_buffer: string, path to be parsed or
    an open readable stream.
",12,18,149,6
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_openpyxl.py,_OpenpyxlWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_openpyxl.py,_OpenpyxlReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_xlrd.py,_XlrdReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_xlsxwriter.py,_XlsxStyler,"Map from openpyxl-oriented styles to flatter xlsxwriter representation
    Ordering necessary for both determinism and because some are keyed by
    prefixes of others.
 ",8,10,17,1
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_xlsxwriter.py,_XlsxWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\excel\_xlwt.py,_XlwtWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\css.py,CSSWarning,"
This CSS syntax cannot currently be parsed.
",10,11,43,1
C:\Users\vaano\python_projects\pandas\pandas\io\formats\css.py,CSSResolver,"
A callable for parsing and resolving CSS to atomic properties.
",34,35,62,1
C:\Users\vaano\python_projects\pandas\pandas\io\formats\csvs.py,CSVFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\excel.py,ExcelCell,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\excel.py,CSSToExcelConverter,"
A callable for converting CSS declarations to ExcelWriter styles

Supports parts of CSS 2.2, with minimal CSS 3.0 support (e.g. text-shadow),
focusing on font styling, backgrounds, borders and alignment.

Operates by first computing CSS styles in a fairly generic
way (see :meth:`compute_css`) then determining Excel style
properties from CSS properties (see :meth:`build_xlstyle`).

Parameters
----------
inherited : str, optional
    CSS declarations understood to be the containing scope for the
    CSS processed by :meth:`__call__`.
NB: Most of the methods here could be classmethods, as only __init__
        and __call__ make use of instance attributes.  We leave them as
        instancemethods so that users can easily experiment with extensions
        without monkey-patching.",38,52,537,14
C:\Users\vaano\python_projects\pandas\pandas\io\formats\excel.py,ExcelFormatter,"
Class for formatting a DataFrame to a list of ExcelCells,

Parameters
----------
df : DataFrame or Styler
na_rep: na representation
float_format : string, default None
        Format string for floating point numbers
cols : sequence, optional
    Columns to write
header : boolean or list of string, default True
    Write out column names. If a list of string is given it is
    assumed to be aliases for the column names
index : boolean, default True
    output row names (index)
index_label : string or sequence, default None
        Column label for index column(s) if desired. If None is given, and
        `header` and `index` are True, then the index names are used. A
        sequence should be given if the DataFrame uses MultiIndex.
merge_cells : boolean, default False
        Format MultiIndex and Hierarchical Rows as merged cells.
inf_rep : string, default `'inf'`
    representation for np.inf values (which aren't representable in Excel)
    A `'-'` sign will be added in front of -inf.
style_converter : callable, optional
    This translates Styler styles (CSS) into ExcelWriter styles.
    Defaults to ``CSSToExcelConverter()``.
    It should have signature css_declarations string -> excel style.
    This is only called for body cells.
",331,360,1256,29
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,CategoricalFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,SeriesFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,TextAdjustment,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,EastAsianTextAdjustment,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,TableFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,DataFrameFormatter,"
Render a DataFrame

self.to_string() : console-friendly tabular output
self.to_html()   : html table
self.to_latex()   : LaTeX tabular environment table
",528,533,152,5
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,GenericArrayFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,FloatArrayFormatter,"
    
",1274,1275,1,1
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,IntArrayFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,Datetime64Formatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,ExtensionArrayFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,Datetime64TZFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,Timedelta64Formatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\format.py,EngFormatter,"
Formats float values according to engineering format.

Based on matplotlib.ticker.EngFormatter
",1809,1812,94,3
C:\Users\vaano\python_projects\pandas\pandas\io\formats\html.py,HTMLFormatter,"
Internal class for formatting output data in html.
This class is intended for shared functionality between
DataFrame.to_html() and DataFrame._repr_html_().
Any logic in common with other output formatting methods
should ideally be inherited from classes in format.py
and this class responsible for only producing html markup.
",26,32,325,6
C:\Users\vaano\python_projects\pandas\pandas\io\formats\html.py,NotebookFormatter,"
Internal class for formatting output data in html for display in Jupyter
Notebooks. This class is intended for functionality specific to
DataFrame._repr_html_() and DataFrame.to_html(notebook=True)
",569,572,197,3
C:\Users\vaano\python_projects\pandas\pandas\io\formats\latex.py,LatexFormatter,"
Used to render a DataFrame to a LaTeX tabular/longtable environment output.

Parameters
----------
formatter : `DataFrameFormatter`
column_format : str, default None
    The columns format as specified in `LaTeX table format
    <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl' for 3 columns
longtable : boolean, default False
    Use a longtable environment instead of tabular.

See Also
--------
HTMLFormatter
",14,28,420,14
C:\Users\vaano\python_projects\pandas\pandas\io\formats\printing.py,TableSchemaFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\formats\style.py,Styler,"
Helps style a DataFrame or Series according to the data with HTML and CSS.

Parameters
----------
data : Series or DataFrame
    Data to be styled - either a Series or DataFrame.
precision : int
    Precision to round floats to, defaults to pd.options.display.precision.
table_styles : list-like, default None
    List of {selector: (attr, value)} dicts; see Notes.
uuid : str, default None
    A unique identifier to avoid CSS collisions; generated automatically.
caption : str, default None
    Caption to attach to the table.
table_attributes : str, default None
    Items that show up in the opening ``<table>`` tag
    in addition to automatic (by default) id.
cell_ids : bool, default True
    If True, each cell will have an ``id`` attribute in their HTML tag.
    The ``id`` takes the form ``T_<uuid>_row<num_row>_col<num_col>``
    where ``<uuid>`` is the unique identifier, ``<num_row>`` is the row
    number and ``<num_col>`` is the column number.
na_rep : str, optional
    Representation for missing values.
    If ``na_rep`` is None, no special formatting is applied

    .. versionadded:: 1.0.0

Attributes
----------
env : Jinja2 jinja2.Environment
template : Jinja2 Template
loader : Jinja2 Loader

See Also
--------
DataFrame.style : Return a Styler object containing methods for building
    a styled HTML representation for the DataFrame.

Notes
-----
Most styling will be done by passing style functions into
``Styler.apply`` or ``Styler.applymap``. Style functions should
return values with strings containing CSS ``'attr: value'`` that will
be applied to the indicated cells.

If using in the Jupyter notebook, Styler has defined a ``_repr_html_``
to automatically render itself. Otherwise call Styler.render to get
the generated HTML.

CSS classes are attached to the generated HTML

* Index and Column names include ``index_name`` and ``level<k>``
  where `k` is its level in a MultiIndex
* Index label cells include

  * ``row_heading``
  * ``row<n>`` where `n` is the numeric position of the row
  * ``level<k>`` where `k` is the level in a MultiIndex

* Column label cells include
  * ``col_heading``
  * ``col<n>`` where `n` is the numeric position of the column
  * ``evel<k>`` where `k` is the level in a MultiIndex

* Blank cells include ``blank``
* Data cells include ``data``
",51,118,2310,67
C:\Users\vaano\python_projects\pandas\pandas\io\formats\style.py,MyStyler,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,Writer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,SeriesWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,FrameWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,JSONTableWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,JsonReader,"
JsonReader provides an interface for reading in a JSON file.

If initialized with ``lines=True`` and ``chunksize``, can be iterated over
``chunksize`` lines at a time. Otherwise, calling ``read`` reads in the
whole document.
",613,618,224,5
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,Parser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,SeriesParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\json\_json.py,FrameParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\sas\sas7bdat.py,_subheader_pointer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\sas\sas7bdat.py,_column,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\sas\sas7bdat.py,SAS7BDATReader,"
Read SAS files in SAS7BDAT format.

Parameters
----------
path_or_buf : path name or buffer
    Name of SAS file or file-like object pointing to SAS file
    contents.
index : column identifier, defaults to None
    Column to use as index.
convert_dates : boolean, defaults to True
    Attempt to convert dates to Pandas datetime values.  Note that
    some rarely used SAS date formats may be unsupported.
blank_missing : boolean, defaults to True
    Convert empty strings to missing values (SAS uses blanks to
    indicate missing character variables).
chunksize : int, defaults to None
    Return SAS7BDATReader object for iterations, returns chunks
    with given number of lines.
encoding : string, defaults to None
    String encoding.
convert_text : bool, defaults to True
    If False, text variables are left as raw bytes.
convert_header_text : bool, defaults to True
    If False, header text, including column names, are left as raw
    bytes.
",41,66,955,25
C:\Users\vaano\python_projects\pandas\pandas\io\sas\sas_constants.py,SASIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\io\sas\sas_xport.py,XportReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_core.py,PlotAccessor,"
Make plots of Series or DataFrame.

Uses the backend specified by the
option ``plotting.backend``. By default, matplotlib is used.

Parameters
----------
data : Series or DataFrame
    The object for which the method is called.
x : label or position, default None
    Only used if data is a DataFrame.
y : label, position or list of label, positions, default None
    Allows plotting of one column versus another. Only used if data is a
    DataFrame.
kind : str
    The kind of plot to produce:

    - 'line' : line plot (default)
    - 'bar' : vertical bar plot
    - 'barh' : horizontal bar plot
    - 'hist' : histogram
    - 'box' : boxplot
    - 'kde' : Kernel Density Estimation plot
    - 'density' : same as 'kde'
    - 'area' : area plot
    - 'pie' : pie plot
    - 'scatter' : scatter plot
    - 'hexbin' : hexbin plot.

figsize : a tuple (width, height) in inches
use_index : bool, default True
    Use index as ticks for x axis.
title : str or list
    Title to use for the plot. If a string is passed, print the string
    at the top of the figure. If a list is passed and `subplots` is
    True, print each item in the list above the corresponding subplot.
grid : bool, default None (matlab style default)
    Axis grid lines.
legend : bool or {'reverse'}
    Place legend on axis subplots.
style : list or dict
    The matplotlib line style per column.
logx : bool or 'sym', default False
    Use log scaling or symlog scaling on x axis.
    .. versionchanged:: 0.25.0

logy : bool or 'sym' default False
    Use log scaling or symlog scaling on y axis.
    .. versionchanged:: 0.25.0

loglog : bool or 'sym', default False
    Use log scaling or symlog scaling on both x and y axes.
    .. versionchanged:: 0.25.0

xticks : sequence
    Values to use for the xticks.
yticks : sequence
    Values to use for the yticks.
xlim : 2-tuple/list
ylim : 2-tuple/list
rot : int, default None
    Rotation for ticks (xticks for vertical, yticks for horizontal
    plots).
fontsize : int, default None
    Font size for xticks and yticks.
colormap : str or matplotlib colormap object, default None
    Colormap to select colors from. If string, load colormap with that
    name from matplotlib.
colorbar : bool, optional
    If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
    plots).
position : float
    Specify relative alignments for bar plot layout.
    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
    (center).
table : bool, Series or DataFrame, default False
    If True, draw a table using the data in the DataFrame and the data
    will be transposed to meet matplotlib's default layout.
    If a Series or DataFrame is passed, use passed data to draw a
    table.
yerr : DataFrame, Series, array-like, dict and str
    See :ref:`Plotting with Error Bars <visualization.errorbars>` for
    detail.
xerr : DataFrame, Series, array-like, dict and str
    Equivalent to yerr.
mark_right : bool, default True
    When using a secondary_y axis, automatically mark the column
    labels with ""(right)"" in the legend.
include_bool : bool, default is False
    If True, boolean values can be plotted.
backend : str, default None
    Backend to use instead of the backend specified in the option
    ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
    specify the ``plotting.backend`` for the whole session, set
    ``pd.options.plotting.backend``.

    .. versionadded:: 1.0.0

**kwargs
    Options to pass to matplotlib plotting method.

Returns
-------
:class:`matplotlib.axes.Axes` or numpy.ndarray of them
    If the backend is not the default matplotlib one, the return value
    will be the object returned by the backend.

Notes
-----
- See matplotlib documentation online for more on this subject
- If `kind` = 'bar' or 'barh', you can specify relative alignments
  for bar plot layout by `position` keyword.
  From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
  (center)
",543,657,3954,114
C:\Users\vaano\python_projects\pandas\pandas\plotting\_misc.py,_Options,"
Stores pandas plotting options.

Allows for parameter aliasing so you can just use parameter names that are
the same as the plot function parameters, but is stored in a canonical
format that makes it easy to breakdown into groups later.
",424,429,236,5
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\boxplot.py,BoxPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,TimeConverter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,TimeFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,PeriodConverter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,DatetimeConverter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,PandasAutoDateFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,PandasAutoDateLocator,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,MilliSecondLocator,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,TimeSeries_DateLocator,"
Locates the ticks along an axis controlled by a :class:`Series`.

Parameters
----------
freq : {var}
    Valid frequency specifier.
minor_locator : {False, True}, optional
    Whether the locator is for minor ticks (True) or not.
dynamic_mode : {True, False}, optional
    Whether the locator should work in dynamic mode.
base : {int}, optional
quarter : {int}, optional
month : {int}, optional
day : {int}, optional
",945,959,416,14
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,TimeSeries_DateFormatter,"
Formats the ticks along an axis controlled by a :class:`PeriodIndex`.

Parameters
----------
freq : {int, string}
    Valid frequency specifier.
minor_locator : {False, True}
    Whether the current formatter should apply to minor ticks (True) or
    major ticks (False).
dynamic_mode : {True, False}
    Whether the formatter works in dynamic mode or not.
",1038,1049,356,11
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\converter.py,TimeSeries_TimedeltaFormatter,"
Formats the ticks along an axis controlled by a :class:`TimedeltaIndex`.
",1106,1107,72,1
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,MPLPlot,"
Base class for assembling a pandas plot using matplotlib

Parameters
----------
data :
",44,49,86,5
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,PlanePlot,"
Abstract class for plotting on plane, currently scatter and hexbin.
",855,856,67,1
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,ScatterPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,HexBinPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,LinePlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,AreaPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,BarPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,BarhPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\core.py,PiePlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\hist.py,HistPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\plotting\_matplotlib\hist.py,KdePlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestFactorize,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestUnique,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestIsin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestValueCounts,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestDuplicated,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,GroupVarTestMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestGroupVarFloat64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestGroupVarFloat32,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestHashTable,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestRank,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestTseriesUtil,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,TestMode,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_algos.py,LikeNan,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_common.py,somecall,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_downstream.py,_CoordinateIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_errors.py,Foo,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_expressions.py,TestExpressions,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_join.py,TestIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_lib.py,TestMisc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_lib.py,TestIndexing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_multilevel.py,Base,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_multilevel.py,TestMultiLevel,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_multilevel.py,TestSorted,"
everything you wanted to test about sorting 
",2003,2004,43,1
C:\Users\vaano\python_projects\pandas\pandas\tests\test_nanops.py,TestnanopsDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_nanops.py,TestEnsureNumeric,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_nanops.py,TestNanvarFixedValues,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_nanops.py,TestNanskewFixedValues,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_nanops.py,TestNankurtFixedValues,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_nanops.py,TestDatetime64NaNOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_register_accessor.py,MyAccessor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_register_accessor.py,Bad,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_sorting.py,TestSorting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_sorting.py,TestMerge,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_sorting.py,TestSafeSort,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_strings.py,TestStringMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_take.py,TestTake,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\test_take.py,TestExtensionTake,"The take method found in pd.api.extensions
 ",422,422,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\api\test_api.py,Base,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\api\test_api.py,TestPDApi,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\api\test_api.py,TestApi,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\api\test_api.py,TestTesting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\api\test_types.py,TestTypes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetime64ArrayLikeComparisons,"Comparison tests for datetime64 vectors fully parametrized over
     DataFrame/Series/DatetimeIndex/DatetimeArray.  Ideally all comparison
     tests will eventually end up here.
 ",44,46,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetime64SeriesComparison,"TODO: moved from tests.series.test_operators; needs cleanup
 ",110,110,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetimeIndexComparisons,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetime64Arithmetic,"This class is intended for ""finished"" tests that are fully parametrized
     over DataFrame/Series/Index/DatetimeArray
 ",702,703,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetime64DateOffsetArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetime64OverflowHandling,"TODO: box + de-duplicate
 ",1449,1449,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestTimestampSeriesArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_datetime64.py,TestDatetimeIndexArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestNumericComparisons,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestNumericArraylikeArithmeticWithDatetimeLike,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestDivisionByZero,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestMultiplicationDivision,"__mul__, __rmul__, __div__, __rdiv__, __floordiv__, __rfloordiv__
    for non-timestamp/timedelta/period dtypes
 ",507,508,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestAdditionSubtraction,"__add__, __sub__, __radd__, __rsub__, __iadd__, __isub__
    for non-timestamp/timedelta/period dtypes
 ",745,746,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestUFuncCompat,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestObjectDtypeEquivalence,"Tests that arithmetic operations match operations executed elementwise
 ",1043,1043,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_numeric.py,TestNumericArithmeticUnsorted,"Tests in this class have been moved from type-specific test modules
     but not yet sorted, parametrized, and de-duplicated
 ",1090,1091,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_object.py,TestObjectComparisons,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_object.py,TestArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodArrayLikeComparisons,"Comparison tests for PeriodDtype vectors fully parametrized over
     DataFrame/Series/PeriodIndex/PeriodArray.  Ideally all comparison
     tests will eventually end up here.
 ",25,27,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodIndexComparisons,"TODO: parameterize over boxes
 ",44,44,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodSeriesComparisons,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodIndexSeriesComparisonConsistency,"
Test PeriodIndex and Period Series Ops consistency 
TODO: needs parametrization+de-duplication",319,320,50,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodFrameArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodIndexArithmetic,"---------------------------------------------------------------
    __add__/__sub__ with PeriodIndex
    PeriodIndex + other is defined for integers and timedelta-like others
    PeriodIndex - other is defined for integers, timedelta-like others,
      and PeriodIndex (with matching freq)
 ",462,466,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodSeriesArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_period.py,TestPeriodIndexSeriesMethods,"
Test PeriodIndex and Period Series Ops consistency 
",1093,1094,50,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestTimedelta64ArrayLikeComparisons,"Comparison tests for timedelta64[ns] vectors fully parametrized over
     DataFrame/Series/TimedeltaIndex/TimedeltaArray.  Ideally all comparison
     tests will eventually end up here.
 ",33,35,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestTimedelta64ArrayComparisons,"TODO: All of these need to be parametrized over box
 ",81,81,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestTimedelta64ArithmeticUnsorted,"Tests moved from type-specific test files but not
     yet sorted/parametrized/de-duplicated
 ",186,187,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestAddSubNaTMasking,"TODO: parametrize over boxes
 ",535,535,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestTimedeltaArraylikeAddSubOps,"Tests for timedelta64[ns] __add__, __sub__, __radd__, __rsub__
 ",602,602,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestTimedeltaArraylikeMulDivOps,"Tests for timedelta64[ns]
    __mul__, __rmul__, __div__, __rdiv__, __floordiv__, __rfloordiv__
 ",1474,1475,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arithmetic\test_timedelta64.py,TestTimedelta64ArrayLikeArithmetic,"Arithmetic tests for timedelta64[ns] vectors fully parametrized over
     DataFrame/Series/TimedeltaIndex/TimedeltaArray.  Ideally all arithmetic
     tests will eventually end up here.
 ",2081,2083,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_array.py,DecimalDtype2,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_array.py,DecimalArray2,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_array.py,TestArrayAnalytics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_boolean.py,TestLogicalOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_boolean.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_boolean.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimelike.py,SharedTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimelike.py,TestDatetimeArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimelike.py,TestTimedeltaArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimelike.py,TestPeriodArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimes.py,TestDatetimeArrayConstructor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimes.py,TestDatetimeArrayComparisons,"TODO: merge this into tests/arithmetic/test_datetime64 once it is
     sufficiently robust
 ",116,117,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimes.py,TestDatetimeArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimes.py,TestSequenceToDT64NS,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_datetimes.py,TestReductions,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_integer.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_integer.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_integer.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_integer.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_period.py,TestReductions,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_timedeltas.py,TestTimedeltaArrayConstructor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_timedeltas.py,TestTimedeltaArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\test_timedeltas.py,TestReductions,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\common.py,TestCategorical,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_algos.py,TestTake,"https://github.com/pandas-dev/pandas/issues/20664
 ",94,94,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_analytics.py,TestCategoricalAnalytics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_api.py,TestCategoricalAPI,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_api.py,TestCategoricalAPIWithFactor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_api.py,TestPrivateCategoricalAPI,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_constructors.py,TestCategoricalConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_dtypes.py,TestCategoricalDtypes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_indexing.py,TestCategoricalIndexingWithFactor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_indexing.py,TestCategoricalIndexing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_missing.py,TestCategoricalMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_operators.py,TestCategoricalOpsWithFactor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_operators.py,TestCategoricalOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_repr.py,TestCategoricalReprWithFactor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_repr.py,TestCategoricalRepr,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_sorting.py,TestCategoricalSort,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_subclass.py,TestCategoricalSubclassing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\categorical\test_warnings.py,TestCategoricalWarnings,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\interval\test_interval.py,TestAttributes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\interval\test_interval.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\interval\test_interval.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\interval\test_ops.py,TestOverlaps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_accessor.py,TestSeriesAccessor,"TODO: collect other Series accessor tests
 ",13,13,24,1
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_accessor.py,TestFrameAccessor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_arithmetics.py,TestSparseArrayArithmetics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_array.py,TestSparseArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_array.py,TestSparseArrayAnalytics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_array.py,TestAccessor,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_combine_concat.py,TestSparseArrayConcat,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_libsparse.py,TestSparseIndexUnion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_libsparse.py,TestSparseIndexIntersect,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_libsparse.py,TestSparseIndexCommon,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_libsparse.py,TestBlockIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_libsparse.py,TestIntIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\arrays\sparse\test_libsparse.py,TestSparseOperators,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_constructors.py,TestPandasDelegate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_constructors.py,TestNoNewAttributesMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_constructors.py,TestConstruction,"test certain constructor behaviours on dtype inference across Series,
    Index and DataFrame
 ",96,97,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_constructors.py,Delegator,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_constructors.py,Delegate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_constructors.py,T,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_conversion.py,TestToIterable,"test that we convert an iterable to python types
 ",14,14,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_ops.py,Ops,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_ops.py,TestTranspose,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\base\test_ops.py,TestIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestEvalNumexprPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestEvalNumexprPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestEvalPythonPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestEvalPythonPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestTypeCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestAlignment,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestOperationsNumExprPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestOperationsNumExprPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestOperationsPythonPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestOperationsPythonPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestMathPythonPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestMathPythonPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestMathNumExprPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestMathNumExprPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestScope,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\computation\test_eval.py,TestValidate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\config\test_config.py,TestConfig,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_common.py,TestPandasDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_dtypes.py,Base,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_dtypes.py,TestCategoricalDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_dtypes.py,TestDatetimeTZDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_dtypes.py,TestPeriodDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_dtypes.py,TestIntervalDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_dtypes.py,TestCategoricalDtypeParametrized,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_generic.py,TestABCClasses,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,TestInference,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,TestTypeInference,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,TestNumberScalar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,TestIsScalar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,A,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,DtypeList,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,DictLike,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,MockFile,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,HashableClass,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,UnhashableClass1,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,UnhashableClass2,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_inference.py,Dummy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_missing.py,TestIsNA,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_missing.py,TestNAObj,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\dtypes\test_missing.py,TestLibMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestGroupby,"
Groupby-specific tests are overridden because boolean only has 2
unique values, base tests uses 3 groups.
",235,237,105,2
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestNumericReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestBooleanReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_boolean.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_categorical.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_common.py,DummyDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_common.py,DummyArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_common.py,TestExtensionArrayDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,BaseDatetimeTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestDatetimeDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestGroupby,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_datetime.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_external_block.py,CustomBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestGroupby,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestNumericReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestBooleanReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_integer.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,BaseInterval,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestGrouping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestMissing,"Index.fillna only accepts scalar `value`, so we have to skip all
    non-scalar fill tests.
 ",119,120,65,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_interval.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,BaseNumPyTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestGroupby,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestArithmetics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestNumericReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestBooleanReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_numpy.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,BasePeriodTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestPeriodDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestGroupby,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_period.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,BaseSparseTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_sparse.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestNoReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestParsing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\test_string.py,TestGroupBy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\arrays.py,ArrowBoolDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\arrays.py,ArrowStringDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\arrays.py,ArrowExtensionArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\arrays.py,ArrowBoolArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\arrays.py,ArrowStringArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\test_bool.py,BaseArrowTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\test_bool.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\test_bool.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\test_bool.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\test_bool.py,TestReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\arrow\test_bool.py,TestReduceBoolean,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\base.py,BaseExtensionTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\casting.py,BaseCastingTests,"
Casting to and from ExtensionDtypes
",8,9,35,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\constructors.py,BaseConstructorsTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\dtype.py,BaseDtypeTests,"
Base class for ExtensionDtype classes
",12,13,37,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\getitem.py,BaseGetitemTests,"
Tests for ExtensionArray.__getitem__.
",10,11,37,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\groupby.py,BaseGroupbyTests,"
Groupby-specific tests.
",10,11,23,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\interface.py,BaseInterfaceTests,"
Tests that the basic interface is satisfied.
------------------------------------------------------------------------
    Interface
    ------------------------------------------------------------------------",13,14,44,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\io.py,BaseParsingTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\methods.py,BaseMethodsTests,"
Various Series and DataFrame methods.
",12,13,37,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\missing.py,BaseMissingTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\ops.py,BaseOpsUtil,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\ops.py,BaseArithmeticOpsTests,"
Various Series and DataFrame arithmetic ops methods.

Subclasses supporting various ops should set the class variables
to indicate that they support ops of that kind

* series_scalar_exc = TypeError
* frame_scalar_exc = TypeError
* series_array_exc = TypeError
* divmod_exc = TypeError
",54,63,285,9
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\ops.py,BaseComparisonOpsTests,"
Various Series and DataFrame comparison ops methods.
",130,131,52,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\printing.py,BasePrintingTests,"
Tests checking the formatting of your EA when printed.
",11,12,54,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\reduce.py,BaseReduceTests,"
Reduction specific tests. Generally these only
make sense for numeric/boolean operations.
",12,14,89,2
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\reduce.py,BaseNoReduceTests,"
we don't define any reductions 
",24,25,30,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\reduce.py,BaseNumericReduceTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\reduce.py,BaseBooleanReduceTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\reshaping.py,BaseReshapingTests,"
Tests for reshaping and concatenation.
",13,14,38,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\base\setitem.py,BaseSetitemTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\array.py,DecimalDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\array.py,DecimalArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,BaseDecimal,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,Reduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestNumericReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestBooleanReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestGroupby,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestSetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,DecimalArrayWithoutFromSequence,"
Helper class for testing error handling in _from_sequence.
",324,325,58,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\decimal\test_decimal.py,DecimalArrayWithoutCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\array.py,JSONDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\array.py,JSONArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,BaseJSON,"NumPy doesn't handle an array of equal-length UserDicts.
    The default assert_series_equal eventually does a
    Series.values, which raises. We work around it by
    converting the UserDicts to dicts.
 ",78,81,53,1
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestInterface,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestReshaping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestGetitem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestReduce,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestCasting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestGroupby,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestArithmeticOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\json\test_json.py,TestPrinting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\list\array.py,ListDtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\extension\list\array.py,ListArray,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_alter_axes.py,TestDataFrameAlterAxes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_alter_axes.py,TestIntervalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_alter_axes.py,Thing,"purposefully inherit from something unhashable",,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_alter_axes.py,Thing,"need to stabilize repr for KeyError (due to random order in sets)
 ",382,382,26,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_alter_axes.py,Thing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_analytics.py,TestDataFrameAnalytics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_api.py,TestDataFrameMisc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_apply.py,TestDataFrameApply,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_apply.py,TestInferOutputShape,"the user has supplied an opaque UDF where
    they are transforming the input that requires
    us to infer the output
 ",696,698,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_apply.py,TestDataFrameAggregate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_arithmetic.py,TestFrameComparisons,"Specifically _not_ flex-comparisons
 ",17,17,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_arithmetic.py,TestFrameFlexComparisons,"TODO: test_bool_flex_frame needs a better name
 ",156,156,31,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_arithmetic.py,TestFrameFlexArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_arithmetic.py,TestFrameArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_axis_select_reindex.py,TestDataFrameSelectReindex,"These are specific reindex-based tests; other indexing tests should go in
    test_indexing
 ",15,16,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_block_internals.py,TestDataFrameBlockInternals,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_combine_concat.py,TestDataFrameConcatCommon,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_combine_concat.py,TestDataFrameCombineFirst,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_combine_concat.py,TestDataFrameUpdate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,TestDataFrameConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,TestDataFrameConstructorWithDatetimeTZ,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,DummyContainer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,Iter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,CustomDict,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,Record,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_constructors.py,List,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_cumulative.py,TestDataFrameCumulativeOps,"---------------------------------------------------------------------
    Cumulative Operations - cumsum, cummax, ...
 ",16,17,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_dtypes.py,TestDataFrameDataTypes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_dtypes.py,TestDataFrameDatetimeWithTZ,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_missing.py,TestDataFrameMissingData,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_missing.py,TestDataFrameInterpolate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_mutate_columns.py,TestDataFrameMutateColumns,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_nonunique_indexes.py,TestDataFrameNonuniqueIndexes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_operators.py,TestDataFrameUnaryOperators,"__pos__, __neg__, __inv__
 ",15,15,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_operators.py,TestDataFrameLogicalOperators,"&, |, ^
 ",105,105,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_operators.py,TestDataFrameOperators,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_period.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestCompat,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameEval,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryWithMultiIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryNumExprPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryNumExprPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryPythonPandas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryPythonPython,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryStrings,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameEvalWithFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_query_eval.py,TestDataFrameQueryBacktickQuoting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_repr_info.py,TestDataFrameReprInfoEtc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_reshape.py,TestDataFrameReshape,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_subclass.py,TestDataFrameSubclassing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_subclass.py,CustomSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_subclass.py,CustomDataFrame,"
Subclasses pandas DF, fills DF with simulation results, adds some
custom plotting functions.
",23,25,92,2
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_subclass.py,A,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_timeseries.py,TestDataFrameTimeSeriesMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_timezones.py,TestDataFrameTimezones,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_to_csv.py,TestDataFrameToCSV,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\test_validate.py,TestDataFrameValidate,"
Tests for error handling related to data types of method arguments.
",12,13,67,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\indexing\test_categorical.py,TestDataFrameIndexingCategorical,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\indexing\test_datetime.py,TestDataFrameIndexingDatetimeWithTZ,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\indexing\test_indexing.py,TestDataFrameIndexing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\indexing\test_indexing.py,TestDataFrameIndexingUInt64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\indexing\test_where.py,TestDataFrameIndexingWhere,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_append.py,TestDataFrameAppend,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_asof.py,TestFrameAsof,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_clip.py,TestDataFrameClip,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_count.py,TestDataFrameCount,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_cov_corr.py,TestDataFrameCov,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_cov_corr.py,TestDataFrameCorr,"DataFrame.corr(), as opposed to DataFrame.corrwith
 ",63,63,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_cov_corr.py,TestDataFrameCorrWith,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_describe.py,TestDataFrameDescribe,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_diff.py,TestDataFrameDiff,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_isin.py,TestDataFrameIsIn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_nlargest.py,TestNLargestNSmallest,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_pct_change.py,TestDataFramePctChange,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_quantile.py,TestDataFrameQuantile,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_rank.py,TestRank,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_replace.py,TestDataFrameReplace,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_round.py,TestDataFrameRound,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_shift.py,TestDataFrameShift,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_sort_index.py,TestDataFrameSortIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_sort_values.py,TestDataFrameSortValues,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_to_dict.py,TestDataFrameToDict,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_to_records.py,TestDataFrameToRecords,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_to_records.py,DictLike,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_transpose.py,TestTranspose,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\frame\methods\test_truncate.py,TestDataFrameTruncate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\generic\test_frame.py,TestDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\generic\test_generic.py,Generic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\generic\test_generic.py,TestNDFrame,"tests that don't fit elsewhere
 ",611,611,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\generic\test_series.py,TestSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_bin_groupby.py,TestMoments,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_bin_groupby.py,TestReducer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_counting.py,TestCounting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_function.py,RaisingObjectException,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_function.py,RaisingObject,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_grouping.py,TestSelection,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_grouping.py,TestGrouping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_grouping.py,TestGetGroup,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_grouping.py,TestIteration,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\test_timegrouper.py,TestGroupBy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\aggregate\test_aggregate.py,TestNamedAggregationSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\aggregate\test_aggregate.py,TestNamedAggregationDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\aggregate\test_aggregate.py,TestLambdaMangling,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\groupby\aggregate\test_other.py,fn_class,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\common.py,Base,"
base class for index sub-class tests 
",32,33,36,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimelike.py,DatetimeLike,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_base.py,TestIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_base.py,TestMixedIntIndex,"Mostly the tests from common.py for which the results differ
    in py2 and py3 because ints and strings are uncomparable in py3
    (GH 13514)
 ",2421,2423,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_base.py,TestIndexUtils,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_base.py,ArrayLike,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_common.py,TestCommon,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_frozen.py,TestFrozenList,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_numeric.py,Numeric,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_numeric.py,TestFloat64Index,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_numeric.py,NumericInt,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_numeric.py,TestInt64Index,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\test_numeric.py,TestUInt64Index,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\categorical\test_category.py,TestCategoricalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\categorical\test_constructors.py,TestCategoricalIndexConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_astype.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_astype.py,TestToPeriod,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_constructors.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_constructors.py,TestTimeSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_datetime.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_datetimelike.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_date_range.py,TestTimestampEquivDateRange,"Older tests in TestTimeSeries constructed their `stamp` objects
    using `date_range` instead of the `Timestamp` constructor.
    TestTimestampEquivDateRange checks that these are equivalent in the
    pertinent cases.
 ",32,35,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_date_range.py,TestDateRanges,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_date_range.py,TestGenRangeGeneration,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_date_range.py,TestBusinessDateRange,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_date_range.py,TestCustomDateRange,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_formats.py,TestDatetimeIndexRendering,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_indexing.py,TestGetItem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_indexing.py,TestWhere,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_indexing.py,TestTake,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_indexing.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_misc.py,TestTimeSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_misc.py,TestDatetime64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_missing.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_ops.py,TestDatetimeIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_ops.py,TestBusinessDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_ops.py,TestCustomDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_partial_slicing.py,TestSlicing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_scalar_compat.py,TestDatetimeIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_scalar_compat.py,TestDateTimeIndexToJulianDate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_setops.py,TestDatetimeIndexSetOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_setops.py,TestBusinessDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_setops.py,TestCustomDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_shift.py,TestDatetimeIndexShift,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_timezones.py,FixedOffset,"
Fixed offset in minutes east from UTC.
",29,30,38,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_timezones.py,TestDatetimeIndexTimezones,"-------------------------------------------------------------
    DatetimeIndex.tz_convert
 ",50,51,30,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_timezones.py,TestDateRange,"
Tests for date_range with timezones
",1184,1185,35,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_timezones.py,TestToDatetime,"
Tests for the to_datetime constructor with timezones
",1236,1237,52,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestTimeConversionFormats,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestToDatetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestToDatetimeUnit,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestToDatetimeMisc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestGuessDatetimeFormat,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestToDatetimeInferFormat,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestDaysInMonth,"tests for issue 10154
 ",1767,1767,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestDatetimeParsingWrappers,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\datetimes\test_tools.py,TestOrigin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_astype.py,Base,"
Tests common to IntervalIndex with any subtype
",19,20,46,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_astype.py,TestIntSubtype,"
Tests specific to IntervalIndex with integer-like subtype
",76,77,57,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_astype.py,TestFloatSubtype,"
Tests specific to IntervalIndex with float subtype
",122,123,50,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_astype.py,TestDatetimelikeSubtype,"
Tests specific to IntervalIndex with datetime-like subtype
",177,178,58,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_base.py,TestBase,"
Tests specific to the shared common index tests; unrelated tests should be placed
in test_interval.py or the specific test file (e.g. test_astype.py)
",10,12,149,2
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_constructors.py,Base,"
Common tests for all variations of IntervalIndex construction. Input data
to be supplied in breaks format, then converted by the subclass method
get_kwargs_from_breaks to the expected format.
",33,36,191,3
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_constructors.py,TestFromArrays,"
Tests specific to IntervalIndex.from_arrays
",186,187,43,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_constructors.py,TestFromBreaks,"
Tests specific to IntervalIndex.from_breaks
",235,236,43,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_constructors.py,TestFromTuples,"
Tests specific to IntervalIndex.from_tuples
",267,268,43,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_constructors.py,TestClassConstructors,"
Tests specific to the IntervalIndex/Index constructors
",314,315,54,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_formats.py,TestIntervalIndexRendering,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_indexing.py,TestGetLoc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_indexing.py,TestGetIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_indexing.py,TestSliceLocs,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_interval.py,TestIntervalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_interval_range.py,TestIntervalRange,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_interval_tree.py,TestIntervalTree,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\interval\test_setops.py,TestIntervalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\multi\test_format.py,TestRepr,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_asfreq.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_astype.py,TestPeriodIndexAsType,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_constructors.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_constructors.py,TestSeriesPeriod,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_formats.py,TestPeriodIndexRendering,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_indexing.py,TestGetItem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_indexing.py,TestWhere,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_indexing.py,TestTake,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_indexing.py,TestIndexing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_ops.py,TestPeriodIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_partial_slicing.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_period.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_period_range.py,TestPeriodRange,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_scalar_compat.py,TestPeriodIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_setops.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_shift.py,TestPeriodIndexShift,"---------------------------------------------------------------
    PeriodIndex.shift is used by __add__ and __sub__
 ",10,11,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_tools.py,TestPeriodRepresentation,"
Wish to match NumPy units
",25,26,25,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_tools.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\period\test_tools.py,TestPeriodIndexConversion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\ranges\test_constructors.py,TestRangeIndexConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\ranges\test_range.py,TestRangeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_astype.py,TestTimedeltaIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_constructors.py,TestTimedeltaIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_formats.py,TestTimedeltaIndexRendering,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_indexing.py,TestGetItem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_indexing.py,TestWhere,"placeholder for symmetry with DatetimeIndex and PeriodIndex tests
 ",61,61,4,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_indexing.py,TestTake,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_indexing.py,TestTimedeltaIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_ops.py,TestTimedeltaIndexOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_partial_slicing.py,TestSlicing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_scalar_compat.py,TestVectorizedTimedelta,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_setops.py,TestTimedeltaIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_shift.py,TestTimedeltaIndexShift,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_timedelta.py,TestTimedeltaIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_timedelta.py,TestTimeSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_timedelta_range.py,TestTimedeltas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexes\timedeltas\test_tools.py,TestTimedeltas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\common.py,Base,"
indexing comprehensive base class 
",25,26,33,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_callable.py,TestIndexingCallable,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_categorical.py,TestCategoricalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_chaining_and_caching.py,TestCaching,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_chaining_and_caching.py,TestChaining,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_coercion.py,CoercionBase,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_coercion.py,TestSetitemCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_coercion.py,TestInsertIndexCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_coercion.py,TestWhereCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_coercion.py,TestFillnaSeriesCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_coercion.py,TestReplaceSeriesCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_datetime.py,TestDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_floats.py,TestFloatIndexers,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_iloc.py,TestiLoc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing.py,TestFancy,"
pure get/set item & fancy indexing 
",27,28,34,1
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing.py,TestMisc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing.py,TestSeriesNoneCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing.py,TestDataframeNoneCoercion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing.py,TO,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing_engines.py,TestNumericEngine,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing_engines.py,TestObjectEngine,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_indexing_slow.py,TestIndexingSlow,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_loc.py,TestLoc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_partial.py,TestPartialSetting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_scalar.py,TestScalar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\test_timedelta.py,TestTimedeltaIndexing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\interval\test_interval.py,TestIntervalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\interval\test_interval.py,TestIntervalIndexInsideMultiIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\interval\test_interval_new.py,TestIntervalIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_ix.py,TestMultiIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_loc.py,TestMultiIndexLoc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_multiindex.py,TestMultiIndexBasic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_partial.py,TestMultiIndexPartial,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_setitem.py,TestMultiIndexSetItem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_set_ops.py,TestMultiIndexSetOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_slice.py,TestMultiIndexSlicers,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\indexing\multiindex\test_sorted.py,TestMultiIndexSorted,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,TestBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,TestDatetimeBlock,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,TestBlockManager,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,TestIndexing,"Nosetests-style data-driven tests.
    
    This test applies different indexing routines to block managers and
    compares the outcome to the result of same operations on np.ndarray.
    
    NOTE: sparse (SparseBlock with fill_value != np.nan) fail a lot of tests
          and are disabled.
 ",824,830,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,TestBlockPlacement,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,DummyElement,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\internals\test_internals.py,TestCanHoldElement,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_clipboard.py,TestClipboard,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_common.py,CustomFSPath,"
For testing fspath on unknown objects
",21,22,37,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_common.py,TestCommonIOCapabilities,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_common.py,TestMMapWrapper,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_feather.py,TestFeather,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_gbq.py,TestToGBQIntegrationWithServiceAccountKeyPath,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_gcs.py,MockGCSFileSystem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_gcs.py,MockGCSFileSystem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_gcs.py,MockGCSFileSystem,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_html.py,TestReadHtml,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_html.py,UnseekableStringIO,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_html.py,MockFile,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_html.py,ErrorThread,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_parquet.py,Base,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_parquet.py,TestBasic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_parquet.py,TestParquetPyArrow,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_parquet.py,TestParquetFastParquet,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_pickle.py,TestCompression,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_pickle.py,TestProtocol,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_s3.py,TestS3URL,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,MixInBase,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,MySQLMixIn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,SQLiteMixIn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,SQLAlchemyMixIn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,PandasSQLTest,"
Base class with common private methods for SQLAlchemy and fallback cases.
",265,266,73,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_TestSQLApi,"
Base class to test the public API.

From this two classes are derived to run these tests for both the
sqlalchemy mode (`TestSQLApi`) and the fallback mode
(`TestSQLiteFallbackApi`).  These tests are run with sqlite3. Specific
tests for the different sql flavours are included in `_TestSQLAlchemy`.

Notes:
flavor can always be passed even in SQLAlchemy mode,
should be correctly ignored.

we don't use drop_table because that isn't part of the public api
",563,575,454,12
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestSQLApi,"
Test the public API as it would be used directly

Tests for `read_sql_table` are included here, as this is specific for the
sqlalchemy mode.
",947,951,140,4
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_EngineToConnMixin,"
A mixin that causes setup_connect to create a conn rather than an engine.
",1113,1114,73,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestSQLApiConn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestSQLiteFallbackApi,"
Test the public sqlite connection fallback API
",1143,1144,46,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_TestSQLAlchemy,"
Base class for testing the sqlalchemy backend.

Subclasses for specific database types are created below. Tests that
deviate for each flavor are overwritten there.
",1223,1227,163,4
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_TestSQLAlchemyConn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_TestSQLiteAlchemy,"
Test the sqlalchemy backend against an in-memory sqlite database.
",1829,1830,65,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_TestMySQLAlchemy,"
Test the sqlalchemy backend against an MySQL database.
",1878,1879,54,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,_TestPostgreSQLAlchemy,"
Test the sqlalchemy backend against an PostgreSQL database.
",1947,1948,59,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestMySQLAlchemy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestMySQLAlchemyConn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestPostgreSQLAlchemy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestPostgreSQLAlchemyConn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestSQLiteAlchemy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestSQLiteAlchemyConn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestSQLiteFallback,"
Test the fallback mode against an in-memory sqlite database.
",2104,2105,60,1
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestXSQLite,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,TestXMySQL,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,DummyException,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_sql.py,Temporary,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\test_stata.py,TestStata,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_readers.py,TestReaders,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_readers.py,TestExcelFileRead,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_writers.py,TestRoundTrip,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_writers.py,TestExcelWriter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_writers.py,TestExcelWriterEngineTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_writers.py,TestFSPath,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\excel\test_writers.py,DummyClass,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_console.py,MockEncoding,"
Used to add a side effect when accessing the 'encoding' property. If the
side effect is a str in nature, the value will be returned. Otherwise, the
side effect should be an exception that will be raised.
",9,12,203,3
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_eng_formatting.py,TestEngFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestDataFrameFormatting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestSeriesFormatting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestFloatArrayFormatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestRepr_timedelta64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestTimedelta64Formatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestDatetime64Formatter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestNaTFormatting,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestDatetimeIndexFormat,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestDatetimeIndexUnicode,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,TestStringRepTimestamp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_format.py,A,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_printing.py,TestFormattBase,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_printing.py,TestTableSchemaRepr,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_style.py,TestStyler,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_style.py,TestStylerMatplotlibDep,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_to_csv.py,TestToCSV,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\formats\test_to_latex.py,TestToLatex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_json_table_schema.py,TestBuildSchema,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_json_table_schema.py,TestTableSchemaType,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_json_table_schema.py,TestTableOrient,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_json_table_schema.py,TestTableOrientReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_normalize.py,TestJSONNormalize,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_normalize.py,TestNestedToRecord,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_pandas.py,TestPandasContainer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_pandas.py,BinaryThing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,TestUltraJSONTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,TestNumpyJSONTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,TestPandasJSONTests,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,O2,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,O1,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,Nested,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,DictTest,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\json\test_ujson.py,_TestObject,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\conftest.py,BaseParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\conftest.py,CParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\conftest.py,CParserHighMemory,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\conftest.py,CParserLowMemory,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\conftest.py,PythonParser,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_common.py,MyTextFileReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_common.py,MyCParserWrapper,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_common.py,InvalidBuffer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_common.py,Foo,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_common.py,NoSeekTellBuffer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_c_parser_only.py,NoNextBuffer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_dialect.py,InvalidDialect,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_network.py,TestS3,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_textreader.py,TestTextReader,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_unsupported.py,TestUnsupportedFeatures,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\parser\test_unsupported.py,NoNextBuffer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\pytables\test_compat.py,TestReadPyTablesHDF5,"
A group of tests which covers reading HDF5 files written by plain PyTables
(not written by pandas).

Was introduced for regression-testing issue 11188.
",45,49,151,4
C:\Users\vaano\python_projects\pandas\pandas\tests\io\pytables\test_store.py,TestHDFStore,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\sas\test_sas.py,TestSas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\sas\test_sas7bdat.py,TestSAS7BDAT,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\io\sas\test_xport.py,TestXport,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\common.py,TestPlotBase,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_boxplot_method.py,TestDataFramePlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_boxplot_method.py,TestDataFrameGroupByPlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_converter.py,TestRegistration,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_converter.py,TestDateTimeConverter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_converter.py,TestPeriodConverter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_converter.py,TestTimeDeltaConverter,"
Test timedelta converter
",357,358,24,1
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_converter.py,Axis,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_datetimelike.py,TestTSPlot,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_frame.py,TestDataFramePlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_groupby.py,TestDataFrameGroupByPlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_hist_method.py,TestSeriesPlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_hist_method.py,TestDataFramePlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_hist_method.py,TestDataFrameGroupByPlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_misc.py,TestSeriesPlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_misc.py,TestDataFramePlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\plotting\test_series.py,TestSeriesPlots,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_reductions.py,TestReductions,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_reductions.py,TestIndexReductions,"Note: the name TestIndexReductions indicates these tests
     were moved from a Index-specific test file, _not_ that these tests are
     intended long-term to be Index-specific
 ",173,175,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_reductions.py,TestSeriesReductions,"Note: the name TestSeriesReductions indicates these tests
     were moved from a series-specific test file, _not_ that these tests are
     intended long-term to be series-specific
 ",503,505,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_reductions.py,TestDatetime64SeriesReductions,"Note: the name TestDatetime64SeriesReductions indicates these tests
     were moved from a series-specific test file, _not_ that these tests are
     intended long-term to be series-specific
 ",932,934,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_reductions.py,TestCategoricalSeriesReductions,"Note: the name TestCategoricalSeriesReductions indicates these tests
     were moved from a series-specific test file, _not_ that these tests are
     intended long-term to be series-specific
 ",997,999,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_reductions.py,TestSeriesMode,"Note: the name TestSeriesMode indicates these tests
     were moved from a series-specific test file, _not_ that these tests are
     intended long-term to be series-specific
 ",1065,1067,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_stat_reductions.py,TestDatetimeLikeStatReductions,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reductions\test_stat_reductions.py,TestSeriesStatReductions,"Note: the name TestSeriesStatReductions indicates these tests
     were moved from a series-specific test file, _not_ that these tests are
     intended long-term to be series-specific
 ",84,86,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\resample\test_datetime_index.py,FnClass,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\resample\test_period_index.py,TestPeriodIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_concat.py,TestConcatAppendCommon,"
Test common dtype coercion rules between concat and append.
",42,43,59,1
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_concat.py,TestAppend,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_concat.py,TestConcatenate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_concat.py,CustomIterator1,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_concat.py,CustomIterator2,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_melt.py,TestMelt,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_melt.py,TestLreshape,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_melt.py,TestWideToLong,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_pivot.py,TestPivotTable,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_pivot.py,TestCrosstab,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_reshape.py,TestGetDummies,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_reshape.py,TestCategoricalReshape,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_union_categoricals.py,TestUnionCategoricals,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\test_util.py,TestCartesianProduct,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_join.py,TestJoin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge.py,TestMerge,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge.py,TestMergeDtypes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge.py,TestMergeCategorical,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge.py,TestMergeOnIndexes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge.py,NotADataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge_asof.py,TestAsOfMerge,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge_ordered.py,TestMergeOrdered,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_merge_ordered.py,NotADataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_multi.py,TestMergeMulti,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\reshape\merge\test_multi.py,TestJoinMultiMulti,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\interval\test_interval.py,TestInterval,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\interval\test_ops.py,TestOverlaps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_asfreq.py,TestFreqConversion,"
Test frequency conversion of date objects
",10,11,41,1
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_period.py,TestPeriodConstruction,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_period.py,TestPeriodMethods,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_period.py,TestPeriodProperties,"
Test properties such as year, month, weekday, etc....
",653,654,53,1
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_period.py,TestPeriodField,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_period.py,TestComparisons,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\period\test_period.py,TestArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_arithmetic.py,TestTimedeltaAdditionSubtraction,"
Tests for Timedelta methods:

    __add__, __radd__,
    __sub__, __rsub__
",17,21,74,4
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_arithmetic.py,TestTimedeltaMultiplicationDivision,"
Tests for Timedelta methods:

    __mul__, __rmul__,
    __div__, __rdiv__,
    __truediv__, __rtruediv__,
    __floordiv__, __rfloordiv__,
    __mod__, __rmod__,
    __divmod__, __rdivmod__
---------------------------------------------------------------
    Timedelta.__mul__, __rmul__",297,305,190,8
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_timedelta.py,TestTimedeltaArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_timedelta.py,TestTimedeltaComparison,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_timedelta.py,TestTimedeltas,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_timedelta.py,Other,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timedelta\test_timedelta.py,CustomClass,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_arithmetic.py,TestTimestampArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_comparisons.py,TestTimestampComparison,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_comparisons.py,Inf,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_rendering.py,TestTimestampRendering,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,TestTimestampProperties,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,TestTimestampConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,TestTimestamp,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,TestTimestampNsOperations,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,TestTimestampToJulianDate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,TestTimestampConversion,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,SubDatetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timestamp.py,SubDatetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_timezones.py,TestTimestampTZOperations,"--------------------------------------------------------------
    Timestamp.tz_localize
 ",20,21,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\scalar\timestamp\test_unary_ops.py,TestTimestampUnaryOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_alter_axes.py,TestSeriesAlterAxes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_alter_axes.py,MyIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_alter_axes.py,MyIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_analytics.py,TestSeriesAnalytics,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_api.py,TestSeriesMisc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_api.py,TestCategoricalSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_api.py,A,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_apply.py,TestSeriesApply,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_apply.py,TestSeriesAggregate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_apply.py,TestSeriesMap,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_apply.py,DictWithMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_apply.py,DictWithoutMissing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_arithmetic.py,TestSeriesFlexArithmetic,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_arithmetic.py,TestSeriesArithmetic,"Some of these may end up in tests/arithmetic, but are not yet sorted",51,51,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_arithmetic.py,TestSeriesFlexComparison,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_arithmetic.py,TestSeriesComparison,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_block_internals.py,TestSeriesBlockInternals,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_combine_concat.py,TestSeriesCombine,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_constructors.py,TestSeriesConstructors,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_constructors.py,Iter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_cumulative.py,TestSeriesCumulativeOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_datetime_values.py,TestSeriesDatetimeValues,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_dtypes.py,TestSeriesDtypes,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_duplicates.py,Foo,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_internals.py,TestSeriesInternals,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_io.py,TestSeriesToCSV,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_io.py,TestSeriesIO,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_io.py,SubclassedSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_io.py,SubclassedFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_missing.py,TestSeriesMissingData,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_missing.py,TestSeriesInterpolateData,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_operators.py,TestSeriesLogicalOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_operators.py,TestSeriesComparisons,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_operators.py,TestSeriesFlexComparisonOps,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_operators.py,TestSeriesOperators,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_operators.py,TestSeriesUnaryOps,"__neg__, __pos__, __inv__
 ",926,926,1,1
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_period.py,TestSeriesPeriod,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_repr.py,TestSeriesRepr,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_repr.py,TestCategoricalRepr,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_repr.py,County,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_subclass.py,TestSeriesSubclassing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_timeseries.py,TestTimeSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_timezones.py,TestSeriesTimezones,"-----------------------------------------------------------------
    Series.tz_localize
 ",19,20,34,1
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_ufunc.py,Dummy,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_ufunc.py,Thing,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\test_validate.py,TestSeriesValidate,"
Tests for error handling related to data types of method arguments.
",5,6,67,1
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_append.py,TestSeriesAppend,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_append.py,TestSeriesAppendWithDatetimeIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_argsort.py,TestSeriesArgsort,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_asof.py,TestSeriesAsof,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_clip.py,TestSeriesClip,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_count.py,TestSeriesCount,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_cov_corr.py,TestSeriesCov,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_cov_corr.py,TestSeriesCorr,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_describe.py,TestSeriesDescribe,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_diff.py,TestSeriesDiff,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_drop_duplicates.py,TestSeriesDropDuplicates,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_isin.py,TestSeriesIsIn,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_nlargest.py,TestSeriesNLargestNSmallest,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_pct_change.py,TestSeriesPctChange,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_quantile.py,TestSeriesQuantile,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_rank.py,TestSeriesRank,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_replace.py,TestSeriesReplace,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_round.py,TestSeriesRound,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_searchsorted.py,TestSeriesSearchSorted,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_shift.py,TestShift,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_sort_index.py,TestSeriesSortIndex,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_sort_values.py,TestSeriesSortValues,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_to_dict.py,TestSeriesToDict,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_truncate.py,TestTruncate,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\series\methods\test_value_counts.py,TestSeriesValueCounts,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\holiday\test_calendar.py,TestCalendar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\holiday\test_calendar.py,testCalendar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\holiday\test_federal.py,MLKCalendar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\holiday\test_federal.py,MemorialDay,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\holiday\test_holiday.py,TestCalendar,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_fiscal.py,TestFY5253LastOfMonth,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_fiscal.py,TestFY5253NearestEndMonth,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_fiscal.py,TestFY5253LastOfMonthQuarter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_fiscal.py,TestFY5253NearestEndMonthQuarter,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,WeekDay,"TODO: Remove: This is not used outside of tests
 ",74,74,7,1
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,Base,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestCommon,"exected value created by Base._get_offset
    are applied to 2011/01/01 09:00 (Saturday)
    used for .apply and .rollforward
 ",243,245,13,1
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestDateOffset,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestBusinessDay,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestBusinessHour,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestCustomBusinessHour,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestCustomBusinessDay,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,CustomBusinessMonthBase,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestCustomBusinessMonthEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestCustomBusinessMonthBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestWeek,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestWeekOfMonth,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestLastWeekOfMonth,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestSemiMonthEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestSemiMonthBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestOffsetNames,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestOffsetAliases,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestReprNames,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_offsets.py,TestDST,"
test DateOffset additions over Daylight Savings Time
",4137,4138,52,1
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestMonthBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestMonthEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBMonthBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBMonthEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestQuarterBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestQuarterEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBQuarterBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBQuarterEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestYearBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestYearEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestYearEndDiffMonth,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBYearBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBYearEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tseries\offsets\test_yqm_offsets.py,TestBYearEndLagged,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tslibs\test_array_to_datetime.py,SubDatetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tslibs\test_conversion.py,SubDatetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\tslibs\test_normalize_date.py,SubDatetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\util\test_assert_almost_equal.py,DictLikeObj,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\common.py,Base,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_api.py,TestApi,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_base_indexer.py,BadIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_base_indexer.py,CustomIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_base_indexer.py,CustomIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_base_indexer.py,CustomIndexer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,Dtype,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_object,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,Dtype_integer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_int8,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_int16,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_int32,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_int64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,Dtype_uinteger,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_uint8,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_uint16,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_uint32,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_uint64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,Dtype_float,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_float16,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_float32,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_float64,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_category,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,DatetimeLike,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_timedelta,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_datetime,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_dtypes.py,TestDtype_datetime64UTC,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_ewm.py,TestEWM,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_expanding.py,TestExpanding,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_grouper.py,TestGrouperGrouping,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_moments.py,TestMoments,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_moments.py,TestMomentsConsistency,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_pairwise.py,TestPairwise,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_rolling.py,TestRolling,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_timeseries_window.py,TestRollingTS,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tests\window\test_window.py,TestWindow,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\frequencies.py,_FrequencyInferer,"
Not sure if I can avoid the state machine here
",281,282,46,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\frequencies.py,_TimedeltaFrequencyInferer,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\holiday.py,Holiday,"
Class that defines a holiday with start/end dates and rules
for observance.
",125,127,75,2
C:\Users\vaano\python_projects\pandas\pandas\tseries\holiday.py,HolidayCalendarMetaClass,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\holiday.py,AbstractHolidayCalendar,"
Abstract interface to create holidays following certain rules.
",343,344,62,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\holiday.py,USFederalHolidayCalendar,"
US Federal Government Holiday Calendar based on rules specified by:
https://www.opm.gov/policy-data-oversight/
   snow-dismissal-procedures/federal-holidays/
",512,515,157,3
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,DateOffset,"
Standard kind of date increment used for a date range.

Works exactly like relativedelta in terms of the keyword args you
pass in, use of the keyword n is discouraged-- you would be better
off specifying n in the keywords you use, but regardless it is
there for you. n is needed for DateOffset subclasses.

DateOffset work as follows.  Each offset specify a set of dates
that conform to the DateOffset.  For example, Bday defines this
set to be the set of dates that are weekdays (M-F).  To test if a
date is in the set of a DateOffset dateOffset we can use the
onOffset method: dateOffset.onOffset(date).

If a date is not on a valid date, the rollback and rollforward
methods can be used to roll the date to the nearest valid date
before/after the date.

DateOffsets can be created to move dates forward a given number of
valid dates.  For example, Bday(2) can be added to a date to move
it two business days forward.  If the date does not start on a
valid date, first it is moved to a valid date.  Thus pseudo code
is:

def __add__(date):
  date = rollback(date) # does nothing if date is valid
  return date + <n number of periods>

When a date offset is created for a negative number of periods,
the date is first rolled forward.  The pseudo code is:

def __add__(date):
  date = rollforward(date) # does nothing is date is valid
  return date + <n number of periods>

Zero presents a problem.  Should it roll forward or back?  We
arbitrarily have it rollforward:

date + BDay(0) == BDay.rollforward(date)

Since 0 is a bit weird, we suggest avoiding its use.

Parameters
----------
n : int, default 1
    The number of time periods the offset represents.
normalize : bool, default False
    Whether to round the result of a DateOffset addition down to the
    previous midnight.
**kwds
    Temporal parameter that add to or replace the offset value.

    Parameters that **add** to the offset (like Timedelta):

    - years
    - months
    - weeks
    - days
    - hours
    - minutes
    - seconds
    - microseconds
    - nanoseconds

    Parameters that **replace** the offset value:

    - year
    - month
    - day
    - weekday
    - hour
    - minute
    - second
    - microsecond
    - nanosecond.

See Also
--------
dateutil.relativedelta.relativedelta : The relativedelta type is designed
    to be applied to an existing datetime an can replace specific components of
    that datetime, or represents an interval of time.

Examples
--------
>>> from pandas.tseries.offsets import DateOffset
>>> ts = pd.Timestamp('2017-01-01 09:10:11')
>>> ts + DateOffset(months=3)
Timestamp('2017-04-01 09:10:11')

>>> ts = pd.Timestamp('2017-01-01 09:10:11')
>>> ts + DateOffset(months=2)
Timestamp('2017-03-01 09:10:11')
",156,247,2727,91
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,SingleConstructorOffset,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,_CustomMixin,"
Mixin for classes that define and validate calendar, holidays,
and weekdays attributes.
",483,485,87,2
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BusinessMixin,"
Mixin to business types to provide related functions.
",502,503,53,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BusinessDay,"
DateOffset subclass representing possibly n business days.
",526,527,58,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BusinessHourMixin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BusinessHour,"
DateOffset subclass representing possibly n business hours.
",978,979,59,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,CustomBusinessDay,"
DateOffset subclass representing possibly n custom business days,
excluding holidays.

Parameters
----------
n : int, default 1
normalize : bool, default False
    Normalize start/end dates to midnight before generating date range.
weekmask : str, Default 'Mon Tue Wed Thu Fri'
    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.
holidays : list
    List/array of dates to exclude from the set of valid business days,
    passed to ``numpy.busdaycalendar``.
calendar : pd.HolidayCalendar or np.busdaycalendar
offset : timedelta, default timedelta(0)
",994,1009,570,15
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,CustomBusinessHour,"
DateOffset subclass representing possibly n custom business days.
",1072,1073,65,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,MonthOffset,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,MonthEnd,"
DateOffset of one month end.
",1138,1139,28,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,MonthBegin,"
DateOffset of one month at beginning.
",1147,1148,37,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BusinessMonthEnd,"
DateOffset increments between business EOM dates.
",1156,1157,49,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BusinessMonthBegin,"
DateOffset of one business month at beginning.
",1165,1166,46,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,_CustomBusinessMonth,"
DateOffset subclass representing custom business month(s).

Increments between %(bound)s of month dates.

Parameters
----------
n : int, default 1
    The number of months represented.
normalize : bool, default False
    Normalize start/end dates to midnight before generating date range.
weekmask : str, Default 'Mon Tue Wed Thu Fri'
    Weekmask of valid business days, passed to ``numpy.busdaycalendar``.
holidays : list
    List/array of dates to exclude from the set of valid business days,
    passed to ``numpy.busdaycalendar``.
calendar : pd.HolidayCalendar or np.busdaycalendar
    Calendar to integrate.
offset : timedelta, default timedelta(0)
    Time offset to apply.
",1174,1193,680,19
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,CustomBusinessMonthEnd,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,CustomBusinessMonthBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,SemiMonthOffset,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,SemiMonthEnd,"
Two DateOffset's per month repeating on the last
day of the month and day_of_month.

Parameters
----------
n : int
normalize : bool, default False
day_of_month : int, {1, 3,...,27}, default 15
",1392,1400,192,8
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,SemiMonthBegin,"
Two DateOffset's per month repeating on the first
day of the month and day_of_month.

Parameters
----------
n : int
normalize : bool, default False
day_of_month : int, {2, 3,...,27}, default 15
",1451,1459,193,8
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Week,"
Weekly offset.

Parameters
----------
weekday : int, default None
    Always generate specific day of week. 0 for Monday.
",1511,1517,121,6
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,_WeekOfMonthMixin,"
Mixin for methods common to WeekOfMonth and LastWeekOfMonth.
",1634,1635,60,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,WeekOfMonth,"
Describes monthly dates like ""the Tuesday of the 2nd week of each month"".

Parameters
----------
n : int
week : int {0, 1, 2, 3, ...}, default 0
    A specific integer for the week of the month.
    e.g. 0 is 1st week of month, 1 is the 2nd week, etc.
weekday : int {0, 1, ..., 6}, default 0
    A specific integer for the day of the week.

    - 0 is Monday
    - 1 is Tuesday
    - 2 is Wednesday
    - 3 is Thursday
    - 4 is Friday
    - 5 is Saturday
    - 6 is Sunday.
",1659,1677,475,18
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,LastWeekOfMonth,"
Describes monthly dates in last week of month like ""the last Tuesday of
each month"".

Parameters
----------
n : int, default 1
weekday : int {0, 1, ..., 6}, default 0
    A specific integer for the day of the week.

    - 0 is Monday
    - 1 is Tuesday
    - 2 is Wednesday
    - 3 is Thursday
    - 4 is Friday
    - 5 is Saturday
    - 6 is Sunday.
",1729,1745,350,16
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,QuarterOffset,"
Quarter representation - doesn't call super.
",1800,1801,44,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BQuarterEnd,"
DateOffset increments between business Quarter dates.

startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...
startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...
startingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, ...
",1870,1875,264,5
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BQuarterBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,QuarterEnd,"
DateOffset increments between business Quarter dates.

startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...
startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...
startingMonth = 3 corresponds to dates like 3/31/2007, 6/30/2007, ...
",1896,1901,264,5
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,QuarterBegin,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,YearOffset,"
DateOffset that just needs a month.
",1923,1924,35,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BYearEnd,"
DateOffset increments between business EOM dates.
",1982,1983,49,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,BYearBegin,"
DateOffset increments between business year begin dates.
",1993,1994,56,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,YearEnd,"
DateOffset increments between calendar year ends.
",2004,2005,49,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,YearBegin,"
DateOffset increments between calendar year begin dates.
",2014,2015,56,1
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,FY5253,"
Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.

It is used by companies that desire that their
fiscal year always end on the same day of the week.

It is a method of managing accounting periods.
It is a common calendar structure for some industries,
such as retail, manufacturing and parking industry.

For more information see:
http://en.wikipedia.org/wiki/4-4-5_calendar

The year may either:

- end on the last X day of the Y month.
- end on the last X day closest to the last day of the Y month.

X is a specific day of the week.
Y is a certain month of the year

Parameters
----------
n : int
weekday : int {0, 1, ..., 6}, default 0
    A specific integer for the day of the week.

    - 0 is Monday
    - 1 is Tuesday
    - 2 is Wednesday
    - 3 is Thursday
    - 4 is Friday
    - 5 is Saturday
    - 6 is Sunday.

startingMonth : int {1, 2, ... 12}, default 1
    The month in which the fiscal year ends.

variation : str, default ""nearest""
    Method of employing 4-4-5 calendar.

    There are two options:

    - ""nearest"" means year end is **weekday** closest to last day of month in year.
    - ""last"" means year end is final **weekday** of the final month in fiscal year.
",2028,2072,1213,44
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,FY5253Quarter,"
DateOffset increments between business quarter dates
for 52-53 week fiscal year (also known as a 4-4-5 calendar).

It is used by companies that desire that their
fiscal year always end on the same day of the week.

It is a method of managing accounting periods.
It is a common calendar structure for some industries,
such as retail, manufacturing and parking industry.

For more information see:
http://en.wikipedia.org/wiki/4-4-5_calendar

The year may either:

- end on the last X day of the Y month.
- end on the last X day closest to the last day of the Y month.

X is a specific day of the week.
Y is a certain month of the year

startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...
startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...
startingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, ...

Parameters
----------
n : int
weekday : int {0, 1, ..., 6}, default 0
    A specific integer for the day of the week.

    - 0 is Monday
    - 1 is Tuesday
    - 2 is Wednesday
    - 3 is Thursday
    - 4 is Friday
    - 5 is Saturday
    - 6 is Sunday.

startingMonth : int {1, 2, ..., 12}, default 1
    The month in which fiscal years end.

qtr_with_extra_week : int {1, 2, 3, 4}, default 1
    The quarter number that has the leap or 14 week when needed.

variation : str, default ""nearest""
    Method of employing 4-4-5 calendar.

    There are two options:

    - ""nearest"" means year end is **weekday** closest to last day of month in year.
    - ""last"" means year end is final **weekday** of the final month in fiscal year.
",2235,2287,1577,52
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Easter,"
DateOffset for the Easter holiday using logic defined in dateutil.

Right now uses the revised method which is valid in years 1583-4099.
",2453,2456,136,3
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Tick,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Day,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Hour,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Minute,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Second,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Milli,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Micro,,,,,
C:\Users\vaano\python_projects\pandas\pandas\tseries\offsets.py,Nano,,,,,
C:\Users\vaano\python_projects\pandas\pandas\util\testing.py,TestSubDict,,,,,
C:\Users\vaano\python_projects\pandas\pandas\util\testing.py,RNGContext,"
Context manager to set the numpy random number generator speed. Returns
to the original value upon exiting the context manager.

Parameters
----------
seed : int
    Seed for numpy.random.seed

Examples
--------

with RNGContext(42):
    np.random.randn()
",2495,2508,255,13
C:\Users\vaano\python_projects\pandas\pandas\util\testing.py,SubclassedSeries,,,,,
C:\Users\vaano\python_projects\pandas\pandas\util\testing.py,SubclassedDataFrame,,,,,
C:\Users\vaano\python_projects\pandas\pandas\util\testing.py,SubclassedCategorical,,,,,
C:\Users\vaano\python_projects\pandas\pandas\util\_decorators.py,Substitution,"
A decorator to take a function's docstring and perform string
substitution on it.

This decorator should be robust even if func.__doc__ is None
(for example, if -OO was passed to the interpreter)

Usage: construct a docstring.Substitution with a sequence or
dictionary suitable for performing substitution; then
decorate a suitable function with the constructed object. e.g.

sub_author_name = Substitution(author='Jason')

@sub_author_name
def some_function(x):
    ""%(author)s wrote this function""

# note that some_function.__doc__ is now ""Jason wrote this function""

One can also use positional arguments.

sub_first_last_names = Substitution('Edgar Allen', 'Poe')

@sub_first_last_names
def some_function(x):
    ""%s %s wrote the Raven""
",255,280,741,25
C:\Users\vaano\python_projects\pandas\pandas\util\_decorators.py,Appender,"
    A function decorator that will append an addendum to the docstring
    of the target function.

    This decorator should be robust even if func.__doc__ is None
    (for example, if -OO was passed to the interpreter).

    Usage: construct a docstring.Appender with a string to be joined to
    the original docstring. An optional 'join' parameter may be supplied
    which will be used to join the docstring and addendum. e.g.

    add_copyright = Appender(""Copyright (c) 2009"", join='
')

    @add_copyright
    def my_dog(has='fleas'):
        ""This docstring will have a copyright below""
        pass
    
",302,319,604,17
C:\Users\vaano\python_projects\pandas\pandas\util\_depr_module.py,_DeprecatedModule,"
Class for mocking deprecated modules.

Parameters
----------
deprmod : name of module to be deprecated.
deprmodto : name of module as a replacement, optional.
            If not given, the __module__ attribute will
            be used when needed.
removals : objects or methods in module that will no longer be
           accessible once module is removed.
moved : dict, optional
        dictionary of function name -> new location for moved
        objects
",12,25,457,13
C:\Users\vaano\python_projects\pandas\pandas\util\_doctools.py,TablePlotter,"
Layout some DataFrames in vertical/horizontal layout for explanation.
Used in merging.rst
",9,11,89,2
C:\Users\vaano\python_projects\pandas\pandas\_config\config.py,OptionError,"
Exception for pandas.options, backwards compatible with KeyError
checks",74,75,71,1
C:\Users\vaano\python_projects\pandas\pandas\_config\config.py,DictWrapper,"
provide attribute-style access to a nested dict
",182,183,47,1
C:\Users\vaano\python_projects\pandas\pandas\_config\config.py,CallableDynamicDoc,,,,,
C:\Users\vaano\python_projects\pandas\pandas\_config\config.py,option_context,"
Context manager to temporarily set options in the `with` statement context.

You need to invoke as ``option_context(pat, val, [(pat, val), ...])``.

Examples
--------

>>> with option_context('display.max_rows', 10, 'display.max_columns', 5):
...     ...
",383,392,254,9
C:\Users\vaano\python_projects\pandas\scripts\validate_docstrings.py,Docstring,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,GoodDocStrings,"
Collection of good doc strings.

This class contains a lot of docstrings that should pass the validation
script without any errors.
",17,21,131,4
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,BadGenericDocStrings,"
Everything here has a bad docstring
    
",309,310,35,1
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,BadSummaries,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,BadParameters,"
Everything here has a problem with its Parameters section.
",560,561,58,1
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,BadReturns,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,BadSeeAlso,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,BadExamples,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,TestValidator,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,TestApiItems,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,TestDocstringClass,,,,,
C:\Users\vaano\python_projects\pandas\scripts\tests\test_validate_docstrings.py,TestMainFunction,,,,,
C:\Users\vaano\python_projects\pandas\web\pandas_web.py,Preprocessors,"
Built-in context preprocessors.

Context preprocessors are functions that receive the context used to
render the templates, and enriches it with additional information.

The original context is obtained by parsing ``config.yml``, and
anything else needed just be added with context preprocessors.
",44,51,296,7
