fileName,className,classComment,commentStart,commentEnd,classCommentSymbolLength,classCommentLineLength
C:\Users\vaano\python_projects\pipenv\get-pipenv.py,CertInstallCommand,,,,,
C:\Users\vaano\python_projects\pipenv\setup.py,DebCommand,"
Support for setup.py deb
",51,52,24,1
C:\Users\vaano\python_projects\pipenv\setup.py,UploadCommand,"
Support setup.py upload.
",83,84,24,1
C:\Users\vaano\python_projects\pipenv\pipenv\cmdparse.py,ScriptEmptyError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\cmdparse.py,Script,"
Parse a script line (in Pipfile's [scripts] section).

This always works in POSIX mode, even on Windows.
",19,22,104,3
C:\Users\vaano\python_projects\pipenv\pipenv\environment.py,Environment,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\environment.py,PatchedUninstaller,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\environment.py,PipCommand,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipenvException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipenvCmdError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,JSONParseError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipenvUsageError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipenvFileError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipfileNotFound,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,LockfileNotFound,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,DeployException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipenvOptionsError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,SystemUsageError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,PipfileException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,SetupException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,VirtualenvException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,VirtualenvActivationException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,VirtualenvCreationException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,UninstallError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,InstallError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,CacheError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,DependencyConflict,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,ResolutionFailure,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\exceptions.py,RequirementError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\progress.py,Bar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\project.py,_LockFileEncoder,"
A specilized JSON encoder to convert loaded TOML data into a lock file.

This adds a few characteristics to the encoder:

* The JSON is always prettified with indents and spaces.
* TOMLKit's container elements are seamlessly encodable.
* The output is always UTF-8-encoded text, never binary, even on Python 2.
",65,72,310,7
C:\Users\vaano\python_projects\pipenv\pipenv\project.py,SourceNotFound,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\project.py,Project,"
docstring for Project
",132,133,21,1
C:\Users\vaano\python_projects\pipenv\pipenv\pyenv.py,Version,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\pyenv.py,PyenvError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\pyenv.py,Runner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\resolver.py,Entry,"
A resolved entry from a resolver run
",96,97,36,1
C:\Users\vaano\python_projects\pipenv\pipenv\shells.py,Shell,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\shells.py,Bash,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\shells.py,MsysBash,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\shells.py,CmderEmulatedShell,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\shells.py,CmderCommandPrompt,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\shells.py,CmderPowershell,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\utils.py,HackedPythonVersion,"
A Beautiful hack, which allows us to tell pip which version of Python we're using.
",226,227,82,1
C:\Users\vaano\python_projects\pipenv\pipenv\utils.py,Resolver,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\utils.py,PipCommand,"
Needed for pip-tools.
",420,421,21,1
C:\Users\vaano\python_projects\pipenv\pipenv\cli\options.py,PipenvGroup,"
Custom Group class provides formatted main help
",24,25,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\cli\options.py,State,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\cli\options.py,InstallState,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\crayons.py,ColoredString,"
Enhanced string for __len__ operations on Colored output.
",66,67,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\build_env.py,_Prefix,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\build_env.py,BuildEnvironment,"
Creates and manages an isolated environment to install build deps
    
",48,49,65,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\build_env.py,NoOpBuildEnvironment,"
A no-op drop-in replacement for BuildEnvironment
    
",199,200,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cache.py,Cache,"
An abstract class - provides cache directories for data from links


:param cache_dir: The root of the cache.
:param format_control: An object of FormatControl class to limit
    binaries being read from the cache.
:param allowed_formats: which formats of files the cache should store.
    ('binary' and 'source' are the only allowed values)
",26,34,341,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cache.py,SimpleWheelCache,"
A cache of wheels for future installs.
    
",123,124,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cache.py,EphemWheelCache,"
A SimpleWheelCache that creates it's own temporary cache directory
    
",174,175,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cache.py,WheelCache,"
Wraps EphemWheelCache and SimpleWheelCache into a single Cache

This Cache allows for gracefully degradation, using the ephem wheel cache
when a certain link is not found in the simple wheel cache first.
",192,196,203,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\configuration.py,Configuration,"
Handles management of configuration.

Provides an interface to accessing and managing configuration files.

This class converts provides an API that takes ""section.key-name"" style
keys and stores the value associated with it as ""key-name"" under the
section ""section"".

This allows for a clean interface wherein the both the section and the
key-name are preserved in an easy to manage form in the configuration files
and the data stored is also nice.
",69,80,449,11
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\download.py,MultiDomainBasicAuth,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\download.py,LocalFSAdapter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\download.py,SafeFileCache,"
A file based cache which is safe to use even when the target directory may
not be accessible or writable.
",260,262,105,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\download.py,InsecureHTTPAdapter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\download.py,PipSession,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\download.py,PipXmlrpcTransport,"
Provide a `xmlrpclib.Transport` implementation via a `PipSession`
object.
",807,809,73,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,PipError,"
Base pip exception
",16,17,18,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,ConfigurationError,"
General exception in configuration
",20,21,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,InstallationError,"
General exception during installation
",24,25,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,UninstallationError,"
General exception during uninstallation
",28,29,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,DistributionNotFound,"
Raised when a distribution cannot be found to satisfy a requirement
",32,33,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,RequirementsFileParseError,"
Raised when a general error occurs parsing a requirements file line.
",36,37,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,BestVersionAlreadyInstalled,"
Raised when the most up-to-date version of a package is already
installed.
",40,42,74,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,BadCommand,"
Raised when virtualenv or a command is not found
",45,46,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,CommandError,"
Raised when there is an error in command-line arguments
",49,50,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,PreviousBuildDirError,"
Raised when there's a previous conflicting build directory
",53,54,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,InvalidWheelFilename,"
Invalid wheel filename.
",57,58,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,UnsupportedWheel,"
Unsupported wheel.
",61,62,18,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,HashErrors,"
Multiple HashError instances rolled into one for reporting
",65,66,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,HashError,"
A failure to verify a package against known-good hashes

:cvar order: An int sorting hash exception classes by difficulty of
    recovery (lower being harder), so the user doesn't bother fretting
    about unpinned packages when he has deeper issues, like VCS
    dependencies, to deal with. Also keeps error reports in a
    deterministic order.
:cvar head: A section heading for display above potentially many
    exceptions of this kind
:ivar req: The InstallRequirement that triggered this error. This is
    pasted on after the exception is instantiated, because it's not
    typically available earlier.
",90,102,609,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,VcsHashUnsupported,"
A hash was provided for a version-control-system-based requirement, but
we don't have a method for hashing those.
",134,136,113,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,DirectoryUrlHashUnsupported,"
A hash was provided for a version-control-system-based requirement, but
we don't have a method for hashing those.
",143,145,113,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,HashMissing,"
A hash was needed for a requirement but is absent.
",152,153,50,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,HashUnpinned,"
A requirement had a hash specified but was not pinned to a specific
version.
",189,191,76,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,HashMismatch,"
Distribution file hash values don't match.

:ivar package_name: The name of the package that triggered the hash
    mismatch. Feel free to write to this after the exception is raise to
    improve its error message.
",198,203,215,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,UnsupportedPythonVersion,"
Unsupported python version according to Requires-Python package
metadata.
",254,256,73,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\exceptions.py,ConfigurationFileCouldNotBeLoaded,"
When there are errors while loading a configuration file
    
",259,260,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\index.py,_NotHTML,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\index.py,_NotHTTP,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\index.py,PackageFinder,"
This finds packages.

This is meant to match easy_install's technique for looking for
packages, by reading pages and looking for appropriate links.
",258,262,147,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\index.py,HTMLPage,"
Represents one page, along with its URL
",981,982,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\resolve.py,Resolver,"
Resolves which packages need to be installed/uninstalled to perform     the requested operation without breaking the requirements of any package.
    
",43,44,145,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\wheel.py,Wheel,"
A wheel file TODO: Maybe move the class into the models sub-package TODO: Maybe move the install code into this class
",668,669,12,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\wheel.py,WheelBuilder,"
Build wheels from a RequirementSet.
",848,849,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cli\base_command.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cli\base_command.py,RequirementCommand,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cli\parser.py,PrettyHelpFormatter,"
A prettier/less verbose help formatter for optparse.
",20,21,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cli\parser.py,UpdatingDefaultsHelpFormatter,"
Custom help formatter for use in ConfigOptionParser.

This is updates the defaults before expanding them, allowing
them to show up correctly in the help listing.
",99,103,161,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cli\parser.py,CustomOptionParser,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\cli\parser.py,ConfigOptionParser,"
Custom option parser which updates its defaults by checking the
configuration files and environmental variables
",133,135,111,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\check.py,CheckCommand,"
Verify installed packages have compatible dependencies.
",12,13,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\completion.py,CompletionCommand,"
A helper command to be used for command completion.
",49,50,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\configuration.py,ConfigurationCommand,"
Manage local and global configuration.

Subcommands:

list: List the active configuration (or from the file specified)
edit: Edit the configuration file in an editor
get: Get the value associated with name
set: Set the name=value
unset: Unset the value associated with name

If none of --user, --global and --venv are passed, a virtual
environment configuration file is used if one is active and the file
exists. Otherwise, all modifications happen on the to the user file by
default.
",16,30,484,14
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\download.py,DownloadCommand,"
Download packages from:

- PyPI (and other indexes) using requirement specifiers.
- VCS project urls.
- Local project directories.
- Local or remote source archives.

pip also supports downloading from ""requirements files"", which provide
an easy way to specify a whole environment to be downloaded.
",20,29,298,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\freeze.py,FreezeCommand,"
Output installed packages in requirements format.

packages are listed in a case-insensitive sorted order.
",15,18,106,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\hash.py,HashCommand,"
Compute a hash of a local package archive.

These can be used with --hash in a requirements file to do repeatable
installs.
",16,20,123,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\help.py,HelpCommand,"
Show help for commands
",9,10,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\install.py,InstallCommand,"
Install packages from:

- PyPI (and other indexes) using requirement specifiers.
- VCS project urls.
- Local project directories.
- Local or remote source archives.

pip also supports installing from ""requirements files"", which provide
an easy way to specify a whole environment to be installed.
",37,46,295,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\list.py,ListCommand,"
List installed packages, including editables.

Packages are listed in a case-insensitive sorted order.
",22,25,102,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\search.py,SearchCommand,"
Search for PyPI packages whose name or summary contains <query>.
",26,27,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\show.py,ShowCommand,"
Show information about one or more installed packages.

The output is in RFC-compliant mail header format.
",17,20,106,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\uninstall.py,UninstallCommand,"
Uninstall packages.

pip is able to uninstall most installed packages. Known exceptions are:

- Pure distutils packages installed with ``python setup.py install``, which
  leave behind no metadata to determine what files were installed.
- Script wrappers installed by ``python setup.py develop``.
",13,20,296,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\commands\wheel.py,WheelCommand,"
Build Wheel archives for your requirements and dependencies.

Wheel is a built-package format, and offers the advantage of not
recompiling your software during every install. For more details, see the
wheel docs: https://wheel.readthedocs.io/en/latest/

Requirements: setuptools>=0.8, and wheel.

'pip wheel' uses the bdist_wheel setuptools extension from the wheel
package to build individual wheels.
",22,32,401,10
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\models\candidate.py,InstallationCandidate,"
Represents a potential ""candidate"" for installation.
    
",13,14,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\models\format_control.py,FormatControl,"
Helper for managing formats from which a package can be installed.
    
",10,11,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\models\index.py,PackageIndex,"
Represents a Package Index and provides easier access to endpoints
    
",5,6,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\models\link.py,Link,"
Represents a parsed link from a Package Index's simple URL
    
",19,20,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\operations\freeze.py,FrozenRequirement,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\operations\prepare.py,DistAbstraction,"
Abstracts out the wheel vs non-wheel Resolver.resolve() logic.

The requirements for anything installable are as follows:
 - we must be able to determine the requirement name
   (or we can't correctly handle the non-upgrade case).
 - we must be able to generate a list of run-time dependencies
   without installing any additional packages (or we would
   have to either burn time by doing temporary isolated installs
   or alternatively violate pips 'don't start installing unless
   all requirements are available' rule - neither of which are
   desirable).
 - for packages with setup requirements, we must also be able
   to determine their requirements without installing additional
   packages (for the same reason as run-time dependencies)
 - we must be able to create a Distribution object exposing the
   above metadata.
",52,68,828,16
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\operations\prepare.py,IsWheel,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\operations\prepare.py,IsSDist,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\operations\prepare.py,Installed,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\operations\prepare.py,RequirementPreparer,"
Prepares a Requirement
    
",174,175,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\req\req_install.py,InstallRequirement,"
Represents something that may be installed later on, may have information
about where to fetch the relavant requirement and also contains logic for
installing the said requirement.
",59,62,180,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\req\req_set.py,RequirementSet,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\req\req_tracker.py,RequirementTracker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\req\req_uninstall.py,StashedUninstallPathSet,"
A set of file rename operations to stash files while
tentatively uninstalling them.
",187,189,83,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\req\req_uninstall.py,UninstallPathSet,"
A set of file paths to be removed in the uninstallation of a
requirement.
",292,294,73,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\req\req_uninstall.py,UninstallPthEntries,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\deprecation.py,PipDeprecationWarning,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\hashes.py,Hashes,"
A wrapper that builds multiple hashes at once and checks them against
known-good values
",35,37,87,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\hashes.py,MissingHashes,"
A workalike for Hashes used when we're missing a hash for a requirement

It computes the actual hash of the requirement and raises a HashMissing
exception showing it to the user.
",100,104,178,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\logging.py,BrokenStdoutLoggingError,"
Raised if BrokenPipeError occurs for the stdout stream while logging.
",34,35,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\logging.py,IndentingFormatter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\logging.py,ColorizedStreamHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\logging.py,BetterRotatingFileHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\logging.py,MaxLevelFilter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\misc.py,FakeFile,"
Wrap a list of lines in an object with readline() to make
ConfigParser happy.
",809,811,77,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\misc.py,StreamWrapper,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\misc.py,cached_property,"
A property that is only computed once per instance and then replaces
itself with an ordinary attribute. Deleting the attribute resets the
property.

Source: https://github.com/bottlepy/bottle/blob/0.11.5/bottle.py#L175
",875,880,218,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\models.py,KeyBasedCompareMixin,"
Provides comparision capabilities that is based on a key
    
",8,9,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\outdated.py,SelfCheckState,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\temp_dir.py,TempDirectory,"
Helper class that owns and cleans up a temporary directory.

This class can be used as a context manager or as an OO representation of a
temporary directory.

Attributes:
    path
        Location to the created temporary directory or None
    delete
        Whether the directory should be deleted when exiting
        (when used as a contextmanager)

Methods:
    create()
        Creates a temporary directory and stores its path in the path
        attribute.
    cleanup()
        Deletes the temporary directory and sets path attribute to None

When used as a context manager, a temporary directory is created on
entering the context and, if the delete attribute is True, on exiting the
context the created directory is deleted.
",17,39,734,22
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\temp_dir.py,AdjacentTempDirectory,"
Helper class that creates a temporary directory adjacent to a real one.

Attributes:
    original
        The original directory to create a temp directory for.
    path
        After calling create() or entering, contains the full
        path to the temporary directory.
    delete
        Whether the directory should be deleted when exiting
        (when used as a contextmanager)
",120,131,384,11
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,InterruptibleMixin,"
Helper to ensure that self.finish() gets called on keyboard interrupt.

This allows downloads to be interrupted without leaving temporary state
(like hidden cursors) behind.

This class is similar to the progress library's existing SigIntMixin
helper, but as of version 1.2, that helper has the following problems:

1. It calls sys.exit().
2. It discards the existing SIGINT handler completely.
3. It leaves its own handler in place even after an uninterrupted finish,
   which will have unexpected delayed effects if the user triggers an
   unrelated keyboard interrupt some time after a progress-displaying
   download has already completed, for example.
",67,81,656,14
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,SilentBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,BlueEmojiBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadProgressMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,WindowsMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,BaseDownloadProgressBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DefaultDownloadProgressBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadSilentBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadIncrementalBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadChargingBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadShadyBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadFillingSquaresBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadFillingCirclesBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadBlueEmojiProgressBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,DownloadProgressSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,RateLimiter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,SpinnerInterface,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,InteractiveSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\utils\ui.py,NonInteractiveSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\bazaar.py,Bazaar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\git.py,Git,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\mercurial.py,Mercurial,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\subversion.py,Subversion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\__init__.py,RemoteNotFoundError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\__init__.py,RevOptions,"
Encapsulates a VCS-specific revision to install, along with any VCS
install options.

Instances of this class should be treated as if immutable.
",37,41,144,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\__init__.py,VcsSupport,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_internal\vcs\__init__.py,VersionControl,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\appdirs.py,AppDirs,"
Convenience wrapper for getting application dirs.
",408,409,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distro.py,cached_property,"
A version of @property which caches the value.  On access, it calls the
underlying function and sets the value in `__dict__` so future accesses
will not re-call the property.
",540,543,174,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distro.py,LinuxDistribution,"
Provides information about a OS distribution.

This package creates a private module-global instance of this class with
default initialization arguments, that is used by the
`consolidated accessor functions`_ and `single source accessor functions`_.
By using default initialization arguments, that module-global instance
returns data about the current OS distribution (i.e. the distro this
package runs on).

Normally, it is not necessary to create additional instances of this class.
However, in situations where control is needed over the exact data sources
that are used, instances of this class can be created with a specific
distro release file, or a specific os-release file, or without invoking the
lsb_release command.
",555,569,726,14
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_TotalOrderingMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,AddressValueError,"
A Value Error related to the address.
",128,129,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,NetmaskValueError,"
A Value Error related to the netmask.
",132,133,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_IPAddressBase,"
The mother class.
",506,507,17,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_BaseAddress,"
A generic IP object.

This IP class contains the version independent methods which are
used by single IP addresses.
",663,667,115,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_BaseNetwork,"
A generic IP network object.

This IP class contains the version independent methods which are
used by networks.
",724,728,112,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_BaseV4,"
Base IPv4 object.

The following methods are used by IPv4 objects in both single IP
addresses and networks.
",1193,1197,107,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,IPv4Address,"
Represent and manipulate single IPv4 Addresses.
",1362,1363,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,IPv4Interface,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,IPv4Network,"
This class represents and manipulates 32-bit IPv4 network + addresses..

Attributes: [examples for IPv4Network('192.0.2.0/27')]
    .network_address: IPv4Address('192.0.2.0')
    .hostmask: IPv4Address('0.0.0.31')
    .broadcast_address: IPv4Address('192.0.2.32')
    .netmask: IPv4Address('255.255.255.224')
    .prefixlen: 27
",1563,1571,327,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_IPv4Constants,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_BaseV6,"
Base IPv6 object.

The following methods are used by IPv6 objects in both single IP
addresses and networks.
",1712,1716,107,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,IPv6Address,"
Represent and manipulate single IPv6 Addresses.
",1997,1998,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,IPv6Interface,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,IPv6Network,"
This class represents and manipulates 128-bit IPv6 networks.

Attributes: [examples for IPv6('2001:db8::1000/124')]
    .network_address: IPv6Address('2001:db8::1000')
    .hostmask: IPv6Address('::f')
    .broadcast_address: IPv6Address('2001:db8::100f')
    .netmask: IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0')
    .prefixlen: 124
",2264,2272,344,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\ipaddress.py,_IPv6Constants,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseBaseException,"
base exception class for all parsing runtime exceptions",237,238,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseException,"
Exception thrown when parse expressions don't match class;
supported attributes by name are:
- lineno - returns the line number of the exception text
- col - returns the column number of the exception text
- line - returns the line containing the exception text

Example::

    try:
        Word(nums).setName(""integer"").parseString(""ABC"")
    except ParseException as pe:
        print(pe)
        print(""column: {}"".format(pe.col))

prints::

   Expected integer (at char 0), (line:1, col:1)
    column: 1
",293,311,507,18
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseFatalException,"
user-throwable exception thrown when inconsistent parse content
is found; stops all parsing immediately
",386,388,103,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseSyntaxException,"
just like :class:`ParseFatalException`, but thrown internally
when an :class:`ErrorStop<And._ErrorStop>` ('-' operator) indicates
that parsing is to stop immediately because an unbacktrackable
syntax error has been found.
",391,395,221,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,RecursiveGrammarException,"
exception thrown by :class:`ParserElement.validate` if the
grammar could be improperly recursive
",412,414,96,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_ParseResultsWithOffset,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseResults,"
Structured parse results, to provide multiple means of access to
the parsed data:

   - as a list (``len(results)``)
   - by list index (``results[0], results[1]``, etc.)
   - by attribute (``results.<resultsName>`` - see :class:`ParserElement.setResultsName`)

Example::

    integer = Word(nums)
    date_str = (integer.setResultsName(""year"") + '/'
                    + integer.setResultsName(""month"") + '/'
                    + integer.setResultsName(""day""))
    # equivalent form:
    # date_str = integer(""year"") + '/' + integer(""month"") + '/' + integer(""day"")

    # parseString returns a ParseResults object
    result = date_str.parseString(""1999/12/31"")

    def test(s, fn=repr):
        print(""%s -> %s"" % (s, fn(eval(s))))
    test(""list(result)"")
    test(""result[0]"")
    test(""result['month']"")
    test(""result.day"")
    test(""'month' in result"")
    test(""'minutes' in result"")
    test(""result.dump()"", str)

prints::

    list(result) -> ['1999', '/', '12', '/', '31']
    result[0] -> '1999'
    result['month'] -> '12'
    result.day -> '31'
    'month' in result -> True
    'minutes' in result -> False
    result.dump() -> ['1999', '/', '12', '/', '31']
    - day: 31
    - month: 12
    - year: 1999
",432,473,1226,41
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParserElement,"
Abstract base level parser element class.
",1235,1236,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Token,"
Abstract :class:`ParserElement` subclass, for defining atomic
matching patterns.
",2557,2559,80,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Empty,"
An empty token, will always match.
    
",2565,2566,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,NoMatch,"
A token that will never match.
    
",2575,2576,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Literal,"
Token to exactly match a specified string.

Example::

    Literal('blah').parseString('blah')  # -> ['blah']
    Literal('blah').parseString('blahfooblah')  # -> ['blah']
    Literal('blah').parseString('bla')  # -> Exception: Expected ""blah""

For case-insensitive matching, use :class:`CaselessLiteral`.

For keyword matching (force word break before and after the matched string),
use :class:`Keyword` or :class:`CaselessKeyword`.
",2589,2601,433,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Keyword,"
Token to exactly match a specified string as a keyword, that is,
it must be immediately followed by a non-keyword character.  Compare
with :class:`Literal`:

 - ``Literal(""if"")`` will match the leading ``'if'`` in
   ``'ifAndOnlyIf'``.
 - ``Keyword(""if"")`` will not; it will only match the leading
   ``'if'`` in ``'if x=1'``, or ``'if(y==2)'``

Accepts two optional constructor arguments in addition to the
keyword string:

 - ``identChars`` is a string of characters that would be valid
   identifier characters, defaulting to all alphanumerics + ""_"" and
   ""$""
 - ``caseless`` allows case-insensitive matching, default is ``False``.

Example::

    Keyword(""start"").parseString(""start"")  # -> ['start']
    Keyword(""start"").parseString(""starting"")  # -> Exception

For case-insensitive matching, use :class:`CaselessKeyword`.
",2630,2653,828,23
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,CaselessLiteral,"
Token to match a specified string, ignoring case of letters.
Note: the matched results will always be in the case of the given
match string, NOT the case of the input text.

Example::

    OneOrMore(CaselessLiteral(""CMD"")).parseString(""cmd CMD Cmd10"") # -> ['CMD', 'CMD', 'CMD']

(Contrast with example for :class:`CaselessKeyword`.)
",2703,2712,333,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,CaselessKeyword,"
Caseless version of :class:`Keyword`.

Example::

    OneOrMore(CaselessKeyword(""CMD"")).parseString(""cmd CMD Cmd10"") # -> ['CMD', 'CMD']

(Contrast with example for :class:`CaselessLiteral`.)
",2726,2733,191,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,CloseMatch,"
A variation on :class:`Literal` which matches ""close"" matches,
that is, strings with at most 'n' mismatching characters.
:class:`CloseMatch` takes parameters:

 - ``match_string`` - string to be matched
 - ``maxMismatches`` - (``default=1``) maximum number of
   mismatches allowed to count as a match

The results from a successful parse will contain the matched text
from the input string and the following named results:

 - ``mismatches`` - a list of the positions within the
   match_string where mismatches were found
 - ``original`` - the original match_string used to compare
   against the input string

If ``mismatches`` is an empty list, then the match was an exact
match.

Example::

    patt = CloseMatch(""ATCATCGAATGGA"")
    patt.parseString(""ATCATCGAAXGGA"") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})
    patt.parseString(""ATCAXCGAAXGGA"") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)

    # exact match
    patt.parseString(""ATCATCGAATGGA"") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})

    # close match allowing up to 2 mismatches
    patt = CloseMatch(""ATCATCGAATGGA"", maxMismatches=2)
    patt.parseString(""ATCAXCGAAXGGA"") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})
",2739,2770,1343,31
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Word,"
Token for matching words composed of allowed character sets.
Defined with string containing all allowed initial characters, an
optional string containing allowed body characters (if omitted,
defaults to the initial character set), and an optional minimum,
maximum, and/or exact length.  The default value for ``min`` is
1 (a minimum value < 1 is not valid); the default values for
``max`` and ``exact`` are 0, meaning no maximum or exact
length restriction. An optional ``excludeChars`` parameter can
list characters that might be found in the input ``bodyChars``
string; useful to define a word of all printables except for one or
two characters, for instance.

:class:`srange` is useful for defining custom character set strings
for defining ``Word`` expressions, using range notation from
regular expression character sets.

A common mistake is to use :class:`Word` to match a specific literal
string, as in ``Word(""Address"")``. Remember that :class:`Word`
uses the string argument to define *sets* of matchable characters.
This expression would match ""Add"", ""AAA"", ""dAred"", or any other word
made up of the characters 'A', 'd', 'r', 'e', and 's'. To match an
exact literal string, use :class:`Literal` or :class:`Keyword`.

pyparsing includes helper strings for building Words:

 - :class:`alphas`
 - :class:`nums`
 - :class:`alphanums`
 - :class:`hexnums`
 - :class:`alphas8bit` (alphabetic characters in ASCII range 128-255
   - accented, tilded, umlauted, etc.)
 - :class:`punc8bit` (non-alphabetic characters in ASCII range
   128-255 - currency, symbols, superscripts, diacriticals, etc.)
 - :class:`printables` (any non-whitespace character)

Example::

    # a word composed of digits
    integer = Word(nums) # equivalent to Word(""0123456789"") or Word(srange(""0-9""))

    # a word with a leading capital, and zero or more lowercase
    capital_word = Word(alphas.upper(), alphas.lower())

    # hostnames are alphanumeric, with leading alpha, and '-'
    hostname = Word(alphas, alphanums+'-')

    # roman numeral (not a strict parser, accepts invalid mix of characters)
    roman = Word(""IVXLCDM"")

    # any string of non-whitespace characters, except for ','
    csv_value = Word(printables, excludeChars="","")
",2808,2859,2225,51
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Char,"
A short-cut class for defining ``Word(characters, exact=1)``,
when defining a match of any single character in a string of
characters.
",2973,2976,134,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Regex,"
Token for matching strings that match a given regular
expression. Defined with string specifying the regular expression in
a form recognized by the stdlib Python  `re module <https://docs.python.org/3/library/re.html>`_.
If the given regex contains named groups (defined using ``(?P<name>...)``),
these will be preserved as named parse results.

Example::

    realnum = Regex(r""[+-]?\d+\.\d*"")
    date = Regex(r'(?P<year>\d{4})-(?P<month>\d\d?)-(?P<day>\d\d?)')
    # ref: https://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
    roman = Regex(r""M{0,4}(CM|CD|D?{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})"")
",2984,2996,662,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,QuotedString,"
Token for matching strings that are delimited by quoting characters.

Defined with the following parameters:

    - quoteChar - string of one or more characters defining the
      quote delimiting string
    - escChar - character to escape quotes, typically backslash
      (default= ``None`` )
    - escQuote - special quote sequence to escape an embedded quote
      string (such as SQL's ``""""`` to escape an embedded ``""``)
      (default= ``None`` )
    - multiline - boolean indicating whether quotes can span
      multiple lines (default= ``False`` )
    - unquoteResults - boolean indicating whether the matched text
      should be unquoted (default= ``True`` )
    - endQuoteChar - string of one or more characters defining the
      end of the quote delimited string (default= ``None``  => same as
      quoteChar)
    - convertWhitespaceEscapes - convert escaped whitespace
      (``'\t'``, ``'\n'``, etc.) to actual whitespace
      (default= ``True`` )

Example::

    qs = QuotedString('""')
    print(qs.searchString('lsjdf ""This is the quote"" sldjf'))
    complex_qs = QuotedString('{{', endQuoteChar='}}')
    print(complex_qs.searchString('lsjdf {{This is the ""quote""}} sldjf'))
    sql_qs = QuotedString('""', escQuote='""""')
    print(sql_qs.searchString('lsjdf ""This is the quote with """"embedded"""" quotes"" sldjf'))

prints::

    [['This is the quote']]
    [['This is the ""quote""']]
    [['This is the quote with ""embedded"" quotes']]
",3097,3133,1453,36
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,CharsNotIn,"
Token for matching words composed of characters *not* in a given
set (will include whitespace in matched characters if not listed in
the provided exclusion set - see example). Defined with string
containing all disallowed characters, and an optional minimum,
maximum, and/or exact length.  The default value for ``min`` is
1 (a minimum value < 1 is not valid); the default values for
``max`` and ``exact`` are 0, meaning no maximum or exact
length restriction.

Example::

    # define a comma-separated-value as anything that is not a ','
    csv_value = CharsNotIn(',')
    print(delimitedList(csv_value).parseString(""dkls,lsdkjf,s12 34,@!#,213""))

prints::

    ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
",3248,3266,707,18
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,White,"
Special matching class for matching whitespace.  Normally,
whitespace is ignored by pyparsing grammars.  This class is included
when some whitespace structures are significant.  Define with
a string containing the whitespace characters to be matched; default
is ``"" \t\r\n""``.  Also takes optional ``min``,
``max``, and ``exact`` arguments, as defined for the
:class:`Word` class.
",3325,3332,380,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_PositionToken,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,GoToColumn,"
Token to advance to a specific column of input text; useful for
tabular report scraping.
",3402,3404,88,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,LineStart,"
Matches if current position is at the beginning of a line within
the parse string

Example::

    test = '''        AAA this line
    AAA and this line
      AAA but not this one
    B AAA and definitely not this one
    '''

    for t in (LineStart() + 'AAA' + restOfLine).searchString(test):
        print(t)

prints::

    ['AAA', ' this line']
    ['AAA', ' and this line']
",3428,3446,377,18
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,LineEnd,"
Matches if current position is at the end of a line within the
parse string
",3459,3461,75,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,StringStart,"
Matches if current position is at the beginning of the parse
string
",3479,3481,67,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,StringEnd,"
Matches if current position is at the end of the parse string
    
",3494,3495,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,WordStart,"
Matches if the current position is at the beginning of a Word,
and is not preceded by any character in a given set of
``wordChars`` (default= ``printables``). To emulate the
```` behavior of regular expressions, use
``WordStart(alphanums)``. ``WordStart`` will also match at
the beginning of the string being parsed, or at the beginning of
a line.
",3511,3518,348,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,WordEnd,"
Matches if the current position is at the end of a Word, and is
not followed by any character in a given set of ``wordChars``
(default= ``printables``). To emulate the ```` behavior of
regular expressions, use ``WordEnd(alphanums)``. ``WordEnd``
will also match at the end of the string being parsed, or at the end
of a line.
",3532,3538,326,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseExpression,"
Abstract subclass of ParserElement, for combining and
post-processing parsed tokens.
",3555,3557,84,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,And,"
Requires all given :class:`ParseExpression` s to be found in the given order.
Expressions may be separated by whitespace.
May be constructed using the ``'+'`` operator.
May also be constructed using the ``'-'`` operator, which will
suppress backtracking.

Example::

    integer = Word(nums)
    name_expr = OneOrMore(Word(alphas))

    expr = And([integer(""id""),name_expr(""name""),integer(""age"")])
    # more easily written as:
    expr = integer(""id"") + name_expr(""name"") + integer(""age"")
",3667,3681,489,14
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Or,"
Requires that at least one :class:`ParseExpression` is found. If
two expressions match, the expression that matches the longest
string will be used. May be constructed using the ``'^'``
operator.

Example::

    # construct Or using '^' operator

    number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
    print(number.searchString(""123 3.1416 789""))

prints::

    [['123'], ['3.1416'], ['789']]
",3750,3765,406,15
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,MatchFirst,"
Requires that at least one :class:`ParseExpression` is found. If
two expressions match, the first one listed is the one that will
match. May be constructed using the ``'|'`` operator.

Example::

    # construct MatchFirst using '|' operator

    # watch the order of expressions to match
    number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
    print(number.searchString(""123 3.1416 789"")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]

    # put more selective expression first
    number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
    print(number.searchString(""123 3.1416 789"")) #  Better -> [['123'], ['3.1416'], ['789']]
",3837,3852,651,15
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Each,"
Requires all given :class:`ParseExpression` s to be found, but in
any order. Expressions may be separated by whitespace.

May be constructed using the ``'&'`` operator.

Example::

    color = oneOf(""RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN"")
    shape_type = oneOf(""SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON"")
    integer = Word(nums)
    shape_attr = ""shape:"" + shape_type(""shape"")
    posn_attr = ""posn:"" + Group(integer(""x"") + ',' + integer(""y""))(""posn"")
    color_attr = ""color:"" + color(""color"")
    size_attr = ""size:"" + integer(""size"")

    # use Each (using operator '&') to accept attributes in any order
    # (shape and posn are required, color and size are optional)
    shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

    shape_spec.runTests('''
        shape: SQUARE color: BLACK posn: 100, 120
        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        color:GREEN size:20 shape:TRIANGLE posn:20,40
        '''
        )

prints::

    shape: SQUARE color: BLACK posn: 100, 120
    ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
    - color: BLACK
    - posn: ['100', ',', '120']
      - x: 100
      - y: 120
    - shape: SQUARE


    shape: CIRCLE size: 50 color: BLUE posn: 50,80
    ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
    - color: BLUE
    - posn: ['50', ',', '80']
      - x: 50
      - y: 80
    - shape: CIRCLE
    - size: 50


    color: GREEN size: 20 shape: TRIANGLE posn: 20,40
    ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
    - color: GREEN
    - posn: ['20', ',', '40']
      - x: 20
      - y: 40
    - shape: TRIANGLE
    - size: 20
",3911,3966,1730,55
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ParseElementEnhance,"
Abstract subclass of :class:`ParserElement`, for combining and
post-processing parsed tokens.
",4044,4046,93,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,FollowedBy,"
Lookahead matching of the given parse expression.
``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list. If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.

Example::

    # use FollowedBy to match a label only if it is followed by a ':'
    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

    OneOrMore(attr_expr).parseString(""shape: SQUARE color: BLACK posn: upper left"").pprint()

prints::

    [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
",4121,4141,805,20
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,PrecededBy,"
Lookbehind matching of the given parse expression.
``PrecededBy`` does not advance the parsing position within the
input string, it only verifies that the specified parse expression
matches prior to the current position.  ``PrecededBy`` always
returns a null token list, but if a results name is defined on the
given expression, it is returned.

Parameters:

 - expr - expression that must match prior to the current parse
   location
 - retreat - (default= ``None``) - (int) maximum number of characters
   to lookbehind prior to the current parse location

If the lookbehind expression is a string, Literal, Keyword, or
a Word or CharsNotIn with a specified exact or maximum length, then
the retreat parameter is not required. Otherwise, retreat must be
specified to give a maximum number of characters to look back from
the current parse position for a lookbehind match.

Example::

    # VB-style variable names with type prefixes
    int_var = PrecededBy(""#"") + pyparsing_common.identifier
    str_var = PrecededBy(""$"") + pyparsing_common.identifier
",4153,4178,1054,25
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,NotAny,"
Lookahead to disallow matching with the given parse expression.
``NotAny`` does *not* advance the parsing position within the
input string, it only verifies that the specified parse expression
does *not* match at the current position.  Also, ``NotAny`` does
*not* skip over leading whitespace. ``NotAny`` always returns
a null token list.  May be constructed using the '~' operator.

Example::

    AND, OR, NOT = map(CaselessKeyword, ""AND OR NOT"".split())

    # take care not to mistake keywords for identifiers
    ident = ~(AND | OR | NOT) + Word(alphas)
    boolean_term = Optional(NOT) + ident

    # very crude boolean expression - to support parenthesis groups and
    # operation hierarchy, use infixNotation
    boolean_expr = boolean_term + ZeroOrMore((AND | OR) + boolean_term)

    # integers that are followed by ""."" are actually floats
    integer = Word(nums) + ~Char(""."")
",4228,4249,888,21
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_MultipleMatch,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,OneOrMore,"
Repetition of one or more of the given expression.

Parameters:
 - expr - expression that must match one or more times
 - stopOn - (default= ``None``) - expression for a terminating sentinel
      (only required if the sentinel would ordinarily match the repetition
      expression)

Example::

    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

    text = ""shape: SQUARE posn: upper left color: BLACK""
    OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

    # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
    OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

    # could also be written as
    (attr_expr * (1,)).parseString(text).pprint()
",4310,4333,1061,23
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,ZeroOrMore,"
Optional repetition of zero or more of the given expression.

Parameters:
 - expr - expression that must match zero or more times
 - stopOn - (default= ``None``) - expression for a terminating sentinel
      (only required if the sentinel would ordinarily match the repetition
      expression)

Example: similar to :class:`OneOrMore`
",4345,4354,334,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_NullToken,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Optional,"
Optional matching of the given expression.

Parameters:
 - expr - expression that must match zero or more times
 - default (optional) - value to be returned if the optional expression is not found.

Example::

    # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
    zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
    zip.runTests('''
        # traditional ZIP code
        12345

        # ZIP+4 form
        12101-0001

        # invalid ZIP
        98765-
        ''')

prints::

    # traditional ZIP code
    12345
    ['12345']

    # ZIP+4 form
    12101-0001
    ['12101-0001']

    # invalid ZIP
    98765-
         ^
    FAIL: Expected end of text (at char 5), (line:1, col:6)
",4383,4418,734,35
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,SkipTo,"
Token for skipping over all undefined text until the matched
expression is found.

Parameters:
 - expr - target expression marking the end of the data to be skipped
 - include - (default= ``False``) if True, the target expression is also parsed
      (the skipped text and target expression are returned as a 2-element list).
 - ignore - (default= ``None``) used to define grammars (typically quoted strings and
      comments) that might contain false matches to the target expression
 - failOn - (default= ``None``) define expressions that are not allowed to be
      included in the skipped test; if found before the target expression is found,
      the SkipTo is not a match

Example::

    report = '''
        Outstanding Issues Report - 1 Jan 2000

           # | Severity | Description                               |  Days Open
        -----+----------+-------------------------------------------+-----------
         101 | Critical | Intermittent system crash                 |          6
          94 | Cosmetic | Spelling error on Login ('log|n')         |         14
          79 | Minor    | System slow when running too many reports |         47
        '''
    integer = Word(nums)
    SEP = Suppress('|')
    # use SkipTo to simply match everything up until the next SEP
    # - ignore quoted strings, so that a '|' character inside a quoted string does not match
    # - parse action will call token.strip() for each matched token, i.e., the description body
    string_data = SkipTo(SEP, ignore=quotedString)
    string_data.setParseAction(tokenMap(str.strip))
    ticket_expr = (integer(""issue_num"") + SEP
                  + string_data(""sev"") + SEP
                  + string_data(""desc"") + SEP
                  + integer(""days_open""))

    for tkt in ticket_expr.searchString(report):
        print tkt.dump()

prints::

    ['101', 'Critical', 'Intermittent system crash', '6']
    - days_open: 6
    - desc: Intermittent system crash
    - issue_num: 101
    - sev: Critical
    ['94', 'Cosmetic', ""Spelling error on Login ('log|n')"", '14']
    - days_open: 14
    - desc: Spelling error on Login ('log|n')
    - issue_num: 94
    - sev: Cosmetic
    ['79', 'Minor', 'System slow when running too many reports', '47']
    - days_open: 47
    - desc: System slow when running too many reports
    - issue_num: 79
    - sev: Minor
",4449,4505,2355,56
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Forward,"
Forward declaration of an expression to be defined later -
used for recursive grammars, such as algebraic infix notation.
When the expression is known, it is assigned to the ``Forward``
variable using the '<<' operator.

Note: take care when assigning to ``Forward`` not to overlook
precedence of operators.

Specifically, '|' has a lower precedence than '<<', so that::

    fwdExpr << a | b | c

will actually be evaluated as::

    (fwdExpr << a) | b | c

thereby leaving b and c out as parseable alternatives.  It is recommended that you
explicitly group the values inserted into the ``Forward``::

    fwdExpr << (a | b | c)

Converting to use the '<<=' operator instead will avoid this problem.

See :class:`ParseResults.pprint` for an example of a recursive
parser created using ``Forward``.
",4567,4592,798,25
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_ForwardNoRecurse,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,TokenConverter,"
Abstract subclass of :class:`ParseExpression`, for converting parsed results.
",4660,4661,77,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Combine,"
Converter to concatenate all matching tokens to a single string.
By default, the matching patterns must also be contiguous in the
input string; this can be disabled by specifying
``'adjacent=False'`` in the constructor.

Example::

    real = Word(nums) + '.' + Word(nums)
    print(real.parseString('3.1416')) # -> ['3', '.', '1416']
    # will also erroneously match the following
    print(real.parseString('3. 1416')) # -> ['3', '.', '1416']

    real = Combine(Word(nums) + '.' + Word(nums))
    print(real.parseString('3.1416')) # -> ['3.1416']
    # no match when there are internal spaces
    print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
",4668,4684,672,16
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Group,"
Converter to return the matched tokens as a list - useful for
returning tokens of :class:`ZeroOrMore` and :class:`OneOrMore` expressions.

Example::

    ident = Word(alphas)
    num = Word(nums)
    term = ident | num
    func = ident + Optional(delimitedList(term))
    print(func.parseString(""fn a,b,100""))  # -> ['fn', 'a', 'b', '100']

    func = ident + Group(Optional(delimitedList(term)))
    print(func.parseString(""fn a,b,100""))  # -> ['fn', ['a', 'b', '100']]
",4713,4726,470,13
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Dict,"
Converter to return a repetitive expression as a list, but also
as a dictionary. Each element can also be referenced using the first
token in the expression as its key. Useful for tabular report
scraping when the first column can be used as a item key.

Example::

    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

    text = ""shape: SQUARE posn: upper left color: light blue texture: burlap""
    attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

    # print attributes as plain groups
    print(OneOrMore(attr_expr).parseString(text).dump())

    # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
    result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
    print(result.dump())

    # access named fields as dict entries, or output as dict
    print(result['shape'])
    print(result.asDict())

prints::

    ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']
    [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
    - color: light blue
    - posn: upper left
    - shape: SQUARE
    - texture: burlap
    SQUARE
    {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}

See more examples at :class:`ParseResults` of accessing fields by results name.
",4735,4772,1486,37
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Suppress,"
Converter for ignoring the results of a parsed expression.

Example::

    source = ""a, b, c,d""
    wd = Word(alphas)
    wd_list1 = wd + ZeroOrMore(',' + wd)
    print(wd_list1.parseString(source))

    # often, delimiters that are useful during parsing are just in the
    # way afterward - use Suppress to keep them out of the parsed output
    wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
    print(wd_list2.parseString(source))

prints::

    ['a', ',', 'b', ',', 'c', ',', 'd']
    ['a', 'b', 'c', 'd']

(See also :class:`delimitedList`.)
",4803,4823,546,20
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,OnlyOnce,"
Wrapper for parse actions, to ensure they are only called once.
    
",4832,4833,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,pyparsing_common,"
Here are some common low-level expressions that may be useful in
jump-starting parser development:

 - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
   :class:`scientific notation<sci_real>`)
 - common :class:`programming identifiers<identifier>`
 - network addresses (:class:`MAC<mac_address>`,
   :class:`IPv4<ipv4_address>`, :class:`IPv6<ipv6_address>`)
 - ISO8601 :class:`dates<iso8601_date>` and
   :class:`datetime<iso8601_datetime>`
 - :class:`UUID<uuid>`
 - :class:`comma-separated list<comma_separated_list>`

Parse actions:

 - :class:`convertToInteger`
 - :class:`convertToFloat`
 - :class:`convertToDate`
 - :class:`convertToDatetime`
 - :class:`stripHTMLTags`
 - :class:`upcaseTokens`
 - :class:`downcaseTokens`

Example::

    pyparsing_common.number.runTests('''
        # any int or real number, returned as the appropriate type
        100
        -100
        +100
        3.14159
        6.02e23
        1e-12
        ''')

    pyparsing_common.fnumber.runTests('''
        # any int or real number, returned as float
        100
        -100
        +100
        3.14159
        6.02e23
        1e-12
        ''')

    pyparsing_common.hex_integer.runTests('''
        # hex numbers
        100
        FF
        ''')

    pyparsing_common.fraction.runTests('''
        # fractions
        1/2
        -3/4
        ''')

    pyparsing_common.mixed_integer.runTests('''
        # mixed fractions
        1
        1/2
        -3/4
        1-3/4
        ''')

    import uuid
    pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
    pyparsing_common.uuid.runTests('''
        # uuid
        12345678-1234-5678-1234-567812345678
        ''')

prints::

    # any int or real number, returned as the appropriate type
    100
    [100]

    -100
    [-100]

    +100
    [100]

    3.14159
    [3.14159]

    6.02e23
    [6.02e+23]

    1e-12
    [1e-12]

    # any int or real number, returned as float
    100
    [100.0]

    -100
    [-100.0]

    +100
    [100.0]

    3.14159
    [3.14159]

    6.02e23
    [6.02e+23]

    1e-12
    [1e-12]

    # hex numbers
    100
    [256]

    FF
    [255]

    # fractions
    1/2
    [0.5]

    -3/4
    [-0.75]

    # mixed fractions
    1
    [1]

    1/2
    [0.5]

    -3/4
    [-0.75]

    1-3/4
    [1.75]

    # uuid
    12345678-1234-5678-1234-567812345678
    [UUID('12345678-1234-5678-1234-567812345678')]
",5933,6075,2406,142
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_lazyclassproperty,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,unicode_set,"
A set of Unicode characters, for language-specific strings for
``alphas``, ``nums``, ``alphanums``, and ``printables``.
A unicode_set is defined by a list of ranges in the Unicode character
set, in a class attribute ``_ranges``, such as::

    _ranges = [(0x0020, 0x007e), (0x00a0, 0x00ff),]

A unicode set can also be defined using multiple inheritance of other unicode sets::

    class CJK(Chinese, Japanese, Korean):
        pass
",6243,6254,433,11
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,pyparsing_unicode,"
A namespace class for defining common language unicode_sets.
",6290,6291,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_UnboundedCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_ErrorStop,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_FB,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Latin1,"
Unicode set for Latin-1 Unicode Character Range
",6296,6297,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,LatinA,"
Unicode set for Latin-A Unicode Character Range
",6300,6301,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,LatinB,"
Unicode set for Latin-B Unicode Character Range
",6304,6305,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Greek,"
Unicode set for Greek Unicode Character Ranges
",6308,6309,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Cyrillic,"
Unicode set for Cyrillic Unicode Character Range
",6316,6317,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Chinese,"
Unicode set for Chinese Unicode Character Range
",6320,6321,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Japanese,"
Unicode set for Japanese Unicode Character Range, combining Kanji, Hiragana, and Katakana ranges
",6324,6325,96,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Korean,"
Unicode set for Korean Unicode Character Range
",6340,6341,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,CJK,"
Unicode set for combined Chinese, Japanese, and Korean (CJK) Unicode Character Range
",6344,6345,84,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Thai,"
Unicode set for Thai Unicode Character Range
",6348,6349,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Arabic,"
Unicode set for Arabic Unicode Character Range
",6352,6353,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Hebrew,"
Unicode set for Hebrew Unicode Character Range
",6356,6357,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Devanagari,"
Unicode set for Devanagari Unicode Character Range
",6360,6361,50,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,SimpleNamespace,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_FifoCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,_FifoCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Kanji,"
Unicode set for Kanji Unicode Character Range
",6328,6329,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Hiragana,"
Unicode set for Hiragana Unicode Character Range
",6332,6333,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pyparsing.py,Katakana,"
Unicode set for Katakana  Unicode Character Range
",6336,6337,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\retrying.py,Retrying,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\retrying.py,Attempt,"
An Attempt encapsulates a call to a target function that may end as a
normal return value from the function or an Exception depending on what
occurred during the execution.
",226,229,172,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\retrying.py,RetryError,"
A RetryError encapsulates the last Attempt instance right before giving up.
",259,260,75,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,_LazyDescr,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,MovedModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,_LazyModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,MovedAttribute,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,_SixMetaPathImporter,"
A meta path importer to import six.moves and its submodules.

This class implements a PEP302 finder and loader. It should be compatible
with Python 2.5 and all existing versions of Python3
",165,169,188,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,_MovedItems,"
Lazy loading of moved objects
",230,231,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Module_six_moves_urllib_parse,"
Lazy loading of moved objects in six.moves.urllib_parse
",323,324,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Module_six_moves_urllib_error,"
Lazy loading of moved objects in six.moves.urllib_error
",365,366,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Module_six_moves_urllib_request,"
Lazy loading of moved objects in six.moves.urllib_request
",385,386,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Module_six_moves_urllib_response,"
Lazy loading of moved objects in six.moves.urllib_response
",437,438,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Module_six_moves_urllib_robotparser,"
Lazy loading of moved objects in six.moves.urllib_robotparser
",458,459,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Module_six_moves_urllib,"
Create a six.moves.urllib namespace that resembles the Python 3 namespace
",476,477,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,Iterator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\six.py,X,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\adapter.py,CacheControlAdapter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\cache.py,BaseCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\cache.py,DictCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\controller.py,CacheController,"
An interface to see if request should cached or not.
    
",31,32,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\filewrapper.py,CallbackFileWrapper,"
Small wrapper around a fp object which will tee everything read into a
buffer, and when that file is closed it will execute a callback with the
contents of that buffer.

All attributes are proxied to the underlying file object.

This class uses members with a double underscore (__) leading prefix so as
not to accidentally shadow an attribute.
",5,13,344,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\heuristics.py,BaseHeuristic,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\heuristics.py,OneDayCache,"
Cache the response by providing an expires 1 day in the
future.
",55,57,63,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\heuristics.py,ExpiresAfter,"
Cache **all** requests for a defined time period.
",72,73,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\heuristics.py,LastModified,"
If there is no Expires header already, fall back on Last-Modified
using the heuristic from
http://tools.ietf.org/html/rfc7234#section-4.2.2
to calculate a reasonable value.

Firefox also does something like this per
https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ
http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397
Unlike mozilla we limit this to 24-hr.
",89,98,411,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\serialize.py,Serializer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\caches\file_cache.py,FileCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\cachecontrol\caches\redis_cache.py,RedisCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\big5prober.py,Big5Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,CharDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,EUCTWDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,EUCKRDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,GB2312DistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,Big5DistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,SJISDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\chardistribution.py,EUCJPDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\charsetgroupprober.py,CharSetGroupProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\charsetprober.py,CharSetProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\codingstatemachine.py,CodingStateMachine,"
A state machine to verify a byte sequence for a particular encoding. For
each byte the detector receives, it will feed that byte to every active
state machine available, one byte at a time. The state machine changes its
state based on its previous state and the byte it receives. There are 3
states in a state machine that are of interest to an auto-detector:

START state: This is the state to start with, or a legal byte sequence
             (i.e. a valid code point) for character has been identified.

ME state:  This indicates that the state machine identified a byte sequence
           that is specific to the charset it is designed for and that
           there is no other possible encoding which can contain this byte
           sequence. This will to lead to an immediate positive answer for
           the detector.

ERROR state: This indicates the state machine identified an illegal byte
             sequence for that encoding. This will lead to an immediate
             negative answer for this encoding. Detector will exclude this
             encoding from consideration from here on.
",34,53,1104,19
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\cp949prober.py,CP949Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\enums.py,InputState,"
This enum represents the different states a universal detector can be in.
",9,10,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\enums.py,LanguageFilter,"
This enum represents the different language filters we can apply to a
``UniversalDetector``.
",18,20,92,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\enums.py,ProbingState,"
This enum represents the different states a prober can be in.
",33,34,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\enums.py,MachineState,"
This enum represents the different states a state machine can be in.
",42,43,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\enums.py,SequenceLikelihood,"
This enum represents the likelihood of a character following the previous one.
",51,52,78,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\enums.py,CharacterCategory,"
This enum represents the different categories language models for
``SingleByteCharsetProber`` put characters into.

Anything less than CONTROL is considered a letter.
",66,70,166,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\escprober.py,EscCharSetProber,"
This CharSetProber uses a ""code scheme"" approach for detecting encodings,
whereby easily recognizable escape or shift sequences are relied on to
identify these encodings.
",36,39,170,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\eucjpprober.py,EUCJPProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\euckrprober.py,EUCKRProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\euctwprober.py,EUCTWProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\gb2312prober.py,GB2312Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\hebrewprober.py,HebrewProber,"
The prober is divided between two SBCharSetProbers and a HebrewProber,
all of which are managed, created, fed data, inquired and deleted by the
SBCSGroupProber. The two SBCharSetProbers identify that the text is in
fact some kind of Hebrew, Logical or Visual. The final decision about which
one is it is made by the HebrewProber by combining final-letter scores
with the scores of the two SBCharSetProbers to produce a final answer.
The SBCSGroupProber is responsible for stripping the original text of HTML
tags, English characters, numbers, low-ASCII punctuation characters, spaces
and new lines. It reduces any sequence of such characters to a single space.
The buffer fed to each prober in the SBCS group prober is pure text in
high-ASCII.
The two SBCharSetProbers (model probers) share the same language model:
Win1255Model.
The first SBCharSetProber uses the model normally as any other
SBCharSetProber does, to recognize windows-1255, upon which this model was
built. The second SBCharSetProber is told to make the pair-of-letter
lookup in the language model backwards. This in practice exactly simulates
a visual Hebrew model using the windows-1255 logical Hebrew model.
The HebrewProber is not using any language model. All it does is look for
final-letter evidence suggesting the text is either logical Hebrew or visual
Hebrew. Disjointed from the model probers, the results of the HebrewProber
alone are meaningless. HebrewProber always returns 0.00 as confidence
since it never identifies a charset by itself. Instead, the pointer to the
HebrewProber is passed to the model probers as a helper ""Name Prober"".
When the Group prober receives a positive identification from any prober,
it asks for the name of the charset identified. If the prober queried is a
Hebrew model prober, the model prober forwards the call to the
HebrewProber to make the final decision. In the HebrewProber, the
decision is made according to the final-letters scores maintained and Both
model probers scores. The answer is returned in the form of the name of the
charset identified, either ""windows-1255"" or ""ISO-8859-8""",129,129,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\jpcntx.py,JapaneseContextAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\jpcntx.py,SJISContextAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\jpcntx.py,EUCJPContextAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\latin1prober.py,Latin1Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\mbcharsetprober.py,MultiByteCharSetProber,"
MultiByteCharSetProber
",35,36,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\mbcsgroupprober.py,MBCSGroupProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\sbcharsetprober.py,SingleByteCharSetProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\sbcsgroupprober.py,SBCSGroupProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\sjisprober.py,SJISProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\universaldetector.py,UniversalDetector,"
The ``UniversalDetector`` class underlies the ``chardet.detect`` function
and coordinates all of the different charset probers.

To get a ``dict`` containing an encoding and its confidence, you can simply
run:

.. code::

        u = UniversalDetector()
        u.feed(some_bytes)
        u.close()
        detected = u.result
",52,64,326,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\chardet\utf8prober.py,UTF8Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansi.py,AnsiCodes,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansi.py,AnsiCursor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansi.py,AnsiFore,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansi.py,AnsiBack,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansi.py,AnsiStyle,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansitowin32.py,StreamWrapper,"
Wraps a stream (such as stdout), acting as a transparent proxy for all
attribute access apart from method 'write()', which is delegated to our
Converter instance.
",17,20,162,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\ansitowin32.py,AnsiToWin32,"
Implements a 'write()' method which, on Windows, will strip ANSI character
sequences from the text, and if outputting to a tty, will convert them into
win32 function calls.
",65,68,172,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\win32.py,CONSOLE_SCREEN_BUFFER_INFO,"
struct in wincon.h.
",22,23,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\winterm.py,WinColor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\winterm.py,WinStyle,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\colorama\winterm.py,WinTerm,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,ZipExtFile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,ZipFile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,CertificateError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,Container,"
A generic container for when multiple values need to be returned
",195,196,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,ChainMap,"
A ChainMap groups multiple dicts (or other mappings) together
to create a single, updateable view.

The underlying mappings are stored in a list.  That list is public and can
accessed or updated using the *maps* attribute.  There is no other state.

Lookups search the underlying mappings successively until a key is found.
In contrast, writes, updates, and deletions only operate on the first
mapping.
",519,528,402,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,OrderedDict,"
Dictionary that remembers insertion order
An inherited dict maps keys to values.
        The inherited dict provides __getitem__, __len__, __contains__, and get.
        The remaining methods are order-aware.
        Big-O running times for all methods are the same as for regular dictionaries.",650,651,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,ConvertingDict,"
A converting dictionary wrapper.
",918,919,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,ConvertingList,"
A converting list wrapper.
",955,956,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,ConvertingTuple,"
A converting tuple wrapper.
",978,979,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\compat.py,BaseConfigurator,"
The configurator base class which defines some useful defaults.
",990,991,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,_Cache,"
A simple cache mapping names and .dist-info paths to distributions
",46,47,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,DistributionPath,"
Represents a set of distributions installed on a path (typically sys.path).
",76,77,75,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,Distribution,"
A base class for distributions, whether installed or from indexes.
Either way, it must have some metadata, so that's all that's needed
for construction.
",318,321,152,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,BaseInstalledDistribution,"
This is the base class for installed distributions (whether PEP 376 or
legacy).
",475,477,79,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,InstalledDistribution,"
Created with the *path* of the ``.dist-info`` directory provided to the
constructor. It reads the metadata contained in ``pydist.json`` when it is
instantiated., or uses a passed in Metadata instance (useful for when
dry-run mode is being used).
",530,534,245,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,EggInfoDistribution,"
Created with the *path* of the ``.egg-info`` directory or file provided
to the constructor. It reads the metadata contained in the file itself, or
if the given path happens to be a directory, the metadata is read from the
file ``PKG-INFO`` under that directory.
",858,862,261,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\database.py,DependencyGraph,"
Represents a dependency graph between distributions.

The dependency relationships are stored in an ``adjacency_list`` that maps
distributions to a list of ``(other, label)`` tuples where  ``other``
is a distribution and the edge is labeled with ``label`` (i.e. the version
specifier, if such was provided). Also, for more efficient traversal, for
every distribution ``x``, a list of predecessors is kept in
``reverse_list[x]``. An edge from distribution ``a`` to
distribution ``b`` means that ``a`` depends on ``b``. If any missing
dependencies are found, they are stored in ``missing``, which is a
dictionary that maps distributions to a list of requirements that were not
provided by any other distributions.
",1082,1094,711,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\index.py,PackageIndex,"
This class represents a package index compatible with PyPI, the Python
Package Index.
",29,31,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,RedirectHandler,"
A class to work around a bug in some Python 3.2.x releases.
There's a bug in the base version for some 3.2.x
    (e.g. 3.2.2 on Ubuntu Oneiric). If a Location header
    returns e.g. /abc, it bails because it says the scheme ''
    is bogus, when actually it should use the request's
    URL for the scheme. See Python issue 13696.",56,57,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,Locator,"
A base class for locators - things that locate distributions.
",87,88,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,PyPIRPCLocator,"
This locator uses XML-RPC to locate distributions. It therefore
cannot be used with simple mirrors (that only mirror file content).
",405,407,131,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,PyPIJSONLocator,"
This locator uses PyPI's JSON interface. It's very limited in functionality
and probably not worth using.
",453,455,105,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,Page,"
This class represents a scraped HTML page.
",522,523,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,SimpleScrapingLocator,"
A locator which scrapes HTML pages to locate downloads for a distribution.
This runs multiple threads to do the I/O; performance is at least as good
as pip's PackageFinder, which works in an analogous fashion.
",580,583,209,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,DirectoryLocator,"
This class locates distributions in a directory tree.
",829,830,53,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,JSONLocator,"
This locator uses special extended metadata (not available on PyPI) and is
the basis of performant dependency resolution in distlib. Other locators
require archive downloads before dependencies can be determined! As you
might imagine, that can be slow.
",894,898,252,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,DistPathLocator,"
This locator finds installed distributions in a path. It can be useful for
adding to an :class:`AggregatingLocator`.
",932,934,116,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,AggregatingLocator,"
This class allows you to chain and/or merge a list of locators.
",960,961,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\locators.py,DependencyFinder,"
Locate dependencies for distributions.
",1062,1063,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\manifest.py,Manifest,"
A list of files built by on exploring the filesystem and filtered by
applying various patterns to what we find there.
",38,40,117,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\markers.py,Evaluator,"
This class is used to evaluate marker expessions.
",31,32,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\metadata.py,MetadataMissingError,"
A required metadata is missing
",29,30,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\metadata.py,MetadataConflictError,"
Attempt to read or write metadata fields that are conflictual.
",33,34,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\metadata.py,MetadataUnrecognizedVersionError,"
Unknown metadata version number.
",37,38,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\metadata.py,MetadataInvalidError,"
A metadata value is invalid",41,42,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\metadata.py,LegacyMetadata,"
The legacy metadata of a release.

Supports versions 1.0, 1.1 and 1.2 (auto-detected). You can
instantiate the class with one of these arguments (or none):
- *path*, the path to a metadata file
- *fileobj* give a file-like object with metadata as content
- *mapping* is a dict-like object
- *scheme* is a version scheme name
TODO document the mapping API and UNKNOWN default key",261,269,324,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\metadata.py,Metadata,"
The metadata of a release. This implementation uses 2.0 (JSON)
metadata where possible. If not possible, it wraps a LegacyMetadata
instance which handles the key-value metadata format.
",657,660,184,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\resources.py,ResourceCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\resources.py,ResourceBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\resources.py,Resource,"
A class representing an in-package resource, such as a data file. This is
not normally instantiated by user code, but rather by a
:class:`ResourceFinder` which manages the resource.
",79,82,181,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\resources.py,ResourceContainer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\resources.py,ResourceFinder,"
Resource finder for file system resources.
",120,121,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\resources.py,ZipResourceFinder,"
Resource finder for resources in .zip files.
",210,211,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\scripts.py,ScriptMaker,"
A class to copy or create scripts from source scripts or callable
specifications.
",83,85,81,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,cached_property,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,FileOperator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,ExportEntry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,Cache,"
A class implementing a cache for resources that need to live in the file system
e.g. shared libraries. This class was moved from resources to here because it
could be used by other modules, e.g. the wheel module.
",938,941,212,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,EventMixin,"
A very simple publish/subscribe system.
",982,983,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,Sequencer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,Progress,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,Transport,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,ServerProxy,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,CSVBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,CSVReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,CSVWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,Configurator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,SubprocessMixin,"
Mixin for running subprocesses and capturing their output
",1708,1709,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,HTTPSConnection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,HTTPSHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,HTTPSOnlyHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,HTTP,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,SafeTransport,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\util.py,HTTPS,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,UnsupportedVersionError,"
This is an unsupported version.
",26,27,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,Version,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,Matcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,NormalizedVersion,"
A rational version.

Good:
    1.2         # equivalent to ""1.2.0""
    1.2.0
    1.2a1
    1.2.3a2
    1.2.3b1
    1.2.3c1
    1.2.3.4
    TODO: fill this out

Bad:
    1           # minimum two numbers
    1.2a        # release level must have a release serial
    1.2.3b
",249,265,272,16
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,NormalizedMatcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,LegacyVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,LegacyMatcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,SemanticVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,SemanticMatcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\version.py,VersionScheme,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\wheel.py,Mounter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\wheel.py,Wheel,"
Class to build and install from Wheel files (PEP 427).
",137,138,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\__init__.py,DistlibException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\__init__.py,NullHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\shutil.py,Error,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\shutil.py,SpecialFileError,"
Raised when trying to do a kind of operation (e.g. copying) which is
not supported on a special file (e.g. a named pipe)
",48,50,120,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\shutil.py,ExecError,"
Raised when a command could not be executed
",52,53,43,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\shutil.py,ReadError,"
Raised when an archive cannot be read
",55,56,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\shutil.py,RegistryError,"
Raised when a registry operation with the archiving
and unpacking registries fails
",58,60,82,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,TarError,"
Base exception.
",328,329,15,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,ExtractError,"
General exception for extract errors.
",331,332,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,ReadError,"
Exception for unreadable tar archives.
",334,335,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,CompressionError,"
Exception for unavailable compression methods.
",337,338,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,StreamError,"
Exception for unsupported operations on stream-like TarFiles.
",340,341,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,HeaderError,"
Base exception for header errors.
",343,344,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,EmptyHeaderError,"
Exception for empty headers.
",346,347,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,TruncatedHeaderError,"
Exception for truncated headers.
",349,350,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,EOFHeaderError,"
Exception for end of file headers.
",352,353,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,InvalidHeaderError,"
Exception for invalid headers.
",355,356,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,SubsequentHeaderError,"
Exception for missing and invalid extended headers.
",358,359,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,_LowLevelFile,"
Low-level file object. Supports reading and writing.
It is used instead of a regular file object for streaming
access.
",365,368,118,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,_Stream,"
Class that serves as an adapter between TarFile and
a stream-like object.  The stream-like object only
needs to have a read() or write() method and is accessed
blockwise.  Use of gzip or bzip2 compression is possible.
A stream-like object could be for example: sys.stdin,
sys.stdout, a socket, a tape device etc.

_Stream is intended to be used only internally.
",389,397,361,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,_StreamProxy,"
Small proxy class that enables transparent compression
detection for the Stream interface (mode 'r|*').
",621,623,103,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,_BZ2Proxy,"
Small proxy class that enables external file object
support for ""r:bz2"" and ""w:bz2"" modes. This is actually
a workaround for a limitation in bz2 module's BZ2File
class which (unlike gzip.GzipFile) has no support for
a file object argument.
",645,650,239,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,_FileInFile,"
A thin wrapper around an existing file object that
provides a part of its data as an individual file
object.
",708,711,108,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,ExFileObject,"
File-like object for reading an archive member.
Is returned by TarFile.extractfile().
",783,785,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,TarInfo,"
Informational class which holds the details about an
archive member given by a tar header block.
TarInfo objects are returned by TarFile.getmember(),
TarFile.getmembers() and TarFile.gettarinfo() and are
usually created internally.
",924,929,231,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,TarFile,"
The TarFile Class provides an interface to tar archives.
    
",1581,1582,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py,TarIter,"
Iterator Class.

for tarinfo in TarFile(...):
    suite...
",2554,2558,58,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\constants.py,DataLossWarning,"
Raised when the current tree is unable to represent the input data
",2942,2943,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\constants.py,_ReparseException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,HTMLParser,"
HTML parser

Generates a tree structure from a stream of (possibly malformed) HTML.
",88,91,83,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,ParseError,"
Error in parsed document
",2790,2791,24,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,Decorated,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,Phase,"
Base class for helper object that implements each phase of processing
        
",447,448,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InitialPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,BeforeHtmlPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,BeforeHeadPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InHeadPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InHeadNoscriptPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,AfterHeadPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InBodyPhase,"http://www.whatwg.org/specs/web-apps/current-work/parsing-main-inbody
        the really-really-really-very crazy mode",931,932,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,TextPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InTablePhase,"http://www.whatwg.org/specs/web-apps/current-work/in-table",1687,1687,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InTableTextPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InCaptionPhase,"http://www.whatwg.org/specs/web-apps/current-work/in-caption
 ",1877,1877,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InColumnGroupPhase,"http://www.whatwg.org/specs/web-apps/current-work/in-column
 ",1948,1948,1,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InTableBodyPhase,"http://www.whatwg.org/specs/web-apps/current-work/in-table0
 ",2014,2014,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InRowPhase,"http://www.whatwg.org/specs/web-apps/current-work/in-row
 ",2112,2112,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InCellPhase,"http://www.whatwg.org/specs/web-apps/current-work/in-cell
 ",2201,2201,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InSelectPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InSelectInTablePhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InForeignContentPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,AfterBodyPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,InFramesetPhase,"http://www.whatwg.org/specs/web-apps/current-work/in-frameset
 ",2578,2578,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,AfterFramesetPhase,"http://www.whatwg.org/specs/web-apps/current-work/after3
 ",2635,2635,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,AfterAfterBodyPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\html5parser.py,AfterAfterFramesetPhase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\serializer.py,HTMLSerializer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\serializer.py,SerializeError,"
Error in serialized tree
",408,409,24,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_ihatexml.py,InfosetFilter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_inputstream.py,BufferedStream,"
Buffering for streams that do not have buffering of their own

The buffer is implemented as a list of chunks on the assumption that
joining many strings will be slow since it is O(n**2)
",58,62,185,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_inputstream.py,HTMLUnicodeInputStream,"
Provides a unicode stream of characters to the HTMLTokenizer.

This class takes care of character encoding and removing or replacing
incorrect byte-sequences and also provides column and line tracking.
",155,159,201,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_inputstream.py,HTMLBinaryInputStream,"
Provides a unicode stream of characters to the HTMLTokenizer.

This class takes care of character encoding and removing or replacing
incorrect byte-sequences and also provides column and line tracking.
",385,389,201,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_inputstream.py,EncodingBytes,"
String-like object with an associated position and various extra methods
If the position is ever greater than the string length then an exception is
raised
",585,588,155,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_inputstream.py,EncodingParser,"
Mini parser for detecting character encoding from meta elements
",689,690,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_inputstream.py,ContentAttrParser,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_tokenizer.py,HTMLTokenizer,"
This class takes care of tokenizing HTML.

* self.currentToken
  Holds the token that is currently being processed.

* self.state
  Holds a reference to the method to be invoked... XXX

* self.stream
  Points to HTMLInputStream object.
",22,32,235,10
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_utils.py,MethodDispatcher,"
Dict with 2 special properties:

On initiation, keys that are lists, sets or tuples are converted to
multiple keys so accessing any one of the items in the original
list-like object returns the matching value

md = MethodDispatcher({(""foo"", ""bar""):""baz""})
md[""foo""] == ""baz""

A default value which can be set through the default attribute.
",37,47,339,10
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\alphabeticalattributes.py,Filter,"
Alphabetizes attributes for elements
",20,21,36,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\base.py,Filter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\inject_meta_charset.py,Filter,"
Injects ``<meta charset=ENCODING>`` tag into head of document
",7,8,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\lint.py,Filter,"
Lints the token stream for errors

If it finds any errors, it'll raise an ``AssertionError``.
",13,16,93,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\optionaltags.py,Filter,"
Removes optional tags from the token stream
",7,8,43,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\sanitizer.py,Filter,"
Sanitizes token stream of XHTML+MathML+SVG and of inline style attributes
",708,709,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\filters\whitespace.py,Filter,"
Collapses whitespace except in pre, textarea, and script elements
",13,14,65,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\base.py,Node,"
Represents an item in the tree
",24,25,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\base.py,ActiveFormattingElements,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\base.py,TreeBuilder,"
Base treebuilder implementation

* documentClass - the class to use for the bottommost node of a document
* elementClass - the class to use for HTML Elements
* commentClass - the class to use for comments
* doctypeClass - the class to use for doctypes
",147,153,251,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\dom.py,AttrList,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\dom.py,NodeBuilder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\dom.py,TreeBuilder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree.py,Element,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree.py,Comment,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree.py,DocumentType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree.py,Document,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree.py,DocumentFragment,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree.py,TreeBuilder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree_lxml.py,DocumentType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree_lxml.py,Document,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree_lxml.py,TreeBuilder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree_lxml.py,Attributes,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree_lxml.py,Element,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treebuilders\etree_lxml.py,Comment,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\base.py,TreeWalker,"
Walks a tree yielding tokens

Tokens are dicts that all have a ``type`` field specifying the type of the
token.
",21,25,111,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\base.py,NonRecursiveTreeWalker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\dom.py,TreeWalker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\etree.py,TreeWalker,"
Given the particular ElementTree representation, this implementation,
to avoid using recursion, returns ""nodes"" as tuples with the following
content:

1. The current element

2. The index of the element relative to its parent

3. A stack of ancestor elements

4. A flag ""text"", ""tail"" or None to indicate if the current node is a
   text node; either the text or tail of the current element (1)
",19,31,394,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\etree_lxml.py,Root,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\etree_lxml.py,Doctype,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\etree_lxml.py,FragmentRoot,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\etree_lxml.py,FragmentWrapper,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\etree_lxml.py,TreeWalker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\treewalkers\genshi.py,TreeWalker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_trie\datrie.py,Trie,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_trie\py.py,Trie,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\html5lib\_trie\_base.py,Trie,"
Abstract base class for tries
",7,8,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\codec.py,Codec,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\codec.py,IncrementalEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\codec.py,IncrementalDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\codec.py,StreamWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\codec.py,StreamReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\core.py,IDNAError,"
Base exception for all IDNA-encoding related problems 
",17,18,53,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\core.py,IDNABidiError,"
Exception when bidirectional requirements are not satisfied 
",22,23,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\core.py,InvalidCodepoint,"
Exception when a disallowed or unallocated codepoint is used 
",27,28,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\idna\core.py,InvalidCodepointContext,"
Exception when the codepoint is not valid in the context it is used 
",32,33,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\linklockfile.py,LinkLockFile,"
Lock access to a file using atomic property of link(2).

>>> lock = LinkLockFile('somefile')
>>> lock = LinkLockFile('somefile', threaded=False)
",11,15,144,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\mkdirlockfile.py,MkdirLockFile,"
Lock file by creating a directory.
",13,14,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\pidlockfile.py,PIDLockFile,"
Lockfile implemented as a Unix PID file.

The lock file is a normal file named by the attribute `path`.
A lock's PID file contains a single line of text, containing
the process ID (PID) of the process that acquired the lock.

>>> lock = PIDLockFile('somefile')
>>> lock = PIDLockFile('somefile')
",26,34,295,8
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\sqlitelockfile.py,SQLiteLockFile,"
Demonstrate SQL-based locking.
",15,16,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\symlinklockfile.py,SymlinkLockFile,"
Lock access to a file using symlink(2).
",11,12,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,Error,"
Base class for other exceptions.

>>> try:
...   raise Error
... except Exception:
...   pass
",75,81,93,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,LockError,"
Base class for error arising from attempts to acquire the lock.

>>> try:
...   raise LockError
... except Error:
...   pass
",87,93,124,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,LockTimeout,"
Raised when lock creation fails within a user-defined period of time.

>>> try:
...   raise LockTimeout
... except LockError:
...   pass
",99,105,136,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,AlreadyLocked,"
Some other thread/process is locking the file.

>>> try:
...   raise AlreadyLocked
... except LockError:
...   pass
",110,116,115,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,LockFailed,"
Lock file creation failed for some other reason.

>>> try:
...   raise LockFailed
... except LockError:
...   pass
",121,127,114,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,UnlockError,"
Base class for errors arising from attempts to release the lock.

>>> try:
...   raise UnlockError
... except Error:
...   pass
",132,138,127,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,NotLocked,"
Raised when an attempt is made to unlock an unlocked file.

>>> try:
...   raise NotLocked
... except UnlockError:
...   pass
",144,150,125,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,NotMyLock,"
Raised when an attempt is made to unlock a file someone else locked.

>>> try:
...   raise NotMyLock
... except UnlockError:
...   pass
",155,161,135,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,_SharedBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\lockfile\__init__.py,LockBase,"
Base class for platform-specific lock classes.
",211,212,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,UnpackException,"
Deprecated.  Use Exception instead to catch all exception during unpacking.
",2,3,75,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,BufferFull,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,OutOfData,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,UnpackValueError,"
Deprecated.  Use ValueError instead.
",14,15,36,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,ExtraData,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,PackException,"
Deprecated.  Use Exception instead to catch all exception during packing.
",27,28,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,PackValueError,"
PackValueError is raised when type of input data is supported but it's value is unsupported.

Deprecated.  Use ValueError instead.
",31,34,130,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\exceptions.py,PackOverflowError,"
PackOverflowError is raised when integer value is out of range of msgpack support [-2**31, 2**32).

Deprecated.  Use ValueError instead.
",38,41,136,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\fallback.py,Unpacker,"
Streaming unpacker.

arguments:

:param file_like:
    File-like object having `.read(n)` method.
    If specified, unpacker reads serialized data from it and :meth:`feed()` is not usable.

:param int read_size:
    Used as `file_like.read(read_size)`. (default: `min(16*1024, max_buffer_size)`)

:param bool use_list:
    If true, unpack msgpack array to Python list.
    Otherwise, unpack to Python tuple. (default: True)

:param bool raw:
    If true, unpack msgpack raw to Python bytes (default).
    Otherwise, unpack to Python str (or unicode on Python 2) by decoding
    with UTF-8 encoding (recommended).
    Currently, the default is true, but it will be changed to false in
    near future.  So you must specify it explicitly for keeping backward
    compatibility.

    *encoding* option which is deprecated overrides this option.

:param callable object_hook:
    When specified, it should be callable.
    Unpacker calls it with a dict argument after unpacking msgpack map.
    (See also simplejson)

:param callable object_pairs_hook:
    When specified, it should be callable.
    Unpacker calls it with a list of key-value pairs after unpacking msgpack map.
    (See also simplejson)

:param str encoding:
    Encoding used for decoding msgpack raw.
    If it is None (default), msgpack raw is deserialized to Python bytes.

:param str unicode_errors:
    (deprecated) Used for decoding msgpack raw with *encoding*.
    (default: `'strict'`)

:param int max_buffer_size:
    Limits size of data waiting unpacked.  0 means system's INT_MAX (default).
    Raises `BufferFull` exception when it is insufficient.
    You should set this parameter when unpacking data from untrusted source.

:param int max_str_len:
    Limits max length of str. (default: 2**31-1)

:param int max_bin_len:
    Limits max length of bin. (default: 2**31-1)

:param int max_array_len:
    Limits max length of array. (default: 2**31-1)

:param int max_map_len:
    Limits max length of map. (default: 2**31-1)


example of streaming deserialize from file-like object::

    unpacker = Unpacker(file_like, raw=False)
    for o in unpacker:
        process(o)

example of streaming deserialize from socket::

    unpacker = Unpacker(raw=False)
    while True:
        buf = sock.recv(1024**2)
        if not buf:
            break
        unpacker.feed(buf)
        for o in unpacker:
            process(o)
",130,207,2397,77
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\fallback.py,Packer,"
MessagePack Packer

usage:

    packer = Packer()
    astream.write(packer.pack(a))
    astream.write(packer.pack(b))

Packer's constructor has some keyword arguments:

:param callable default:
    Convert user type to builtin type that Packer supports.
    See also simplejson's document.

:param bool use_single_float:
    Use single precision float type for float. (default: False)

:param bool autoreset:
    Reset buffer after each pack and return its content as `bytes`. (default: True).
    If set this to false, use `bytes()` to get content and `.reset()` to clear buffer.

:param bool use_bin_type:
    Use bin type introduced in msgpack spec 2.0 for bytes.
    It also enables str8 type for unicode.

:param bool strict_types:
    If set to true, types will be checked to be exact. Derived classes
    from serializeable types will not be serialized and will be
    treated as unsupported type and forwarded to default.
    Additionally tuples will not be serialized as lists.
    This is useful when trying to implement accurate serialization
    for python types.

:param str encoding:
    (deprecated) Convert unicode to bytes with this encoding. (default: 'utf-8')

:param str unicode_errors:
    Error handler for encoding unicode. (default: 'strict')
",677,715,1266,38
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\fallback.py,StringIO,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\msgpack\__init__.py,ExtType,"
ExtType represents ext type in msgpack.
",9,10,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,InvalidMarker,"
An invalid marker was found, users should refer to PEP 508.
",29,30,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,UndefinedComparison,"
An invalid operation was attempted on a value that doesn't support it.
",35,36,70,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,UndefinedEnvironmentName,"
A name was attempted to be used that does not exist inside of the
environment.
",41,43,78,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,Node,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,Variable,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,Value,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,Op,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\markers.py,Marker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\requirements.py,InvalidRequirement,"
An invalid requirement was found, users should refer to PEP 508.
",19,20,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\requirements.py,Requirement,"
Parse a requirement.

Parse a given requirement string into its parts, such as name, specifier,
URL, and extras. Raises InvalidRequirement on a badly-formed requirement
string.
TODO: Can we test whether something is contained within a requirement?
          If so how do we do that? Do we need to test against the _name_ of
          the thing as well as the version? What about the markers?
    TODO: Can we normalize the name and extra name?",79,84,176,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\specifiers.py,InvalidSpecifier,"
An invalid specifier was found, users should refer to PEP 440.
",16,17,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\specifiers.py,BaseSpecifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\specifiers.py,_IndividualSpecifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\specifiers.py,LegacySpecifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\specifiers.py,Specifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\specifiers.py,SpecifierSet,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\version.py,InvalidVersion,"
An invalid version was found, users should refer to PEP 440.
",34,35,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\version.py,_BaseVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\version.py,LegacyVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\version.py,Version,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\_compat.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\_structures.py,Infinity,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\packaging\_structures.py,NegativeInfinity,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\colorlog.py,LogFormatter,"
Log formatter with colour support
    
",41,42,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\envbuild.py,BuildEnvironment,"
Context manager to install build deps in a simple temporary environment

Based on code I wrote for pip, which is MIT licensed.
",26,29,126,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\wrappers.py,BackendUnavailable,"
Will be raised if the backend cannot be imported in the hook process.
",24,25,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\wrappers.py,UnsupportedOperation,"
May be raised by build_sdist if the backend indicates that it can't.
",28,29,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\wrappers.py,Pep517HookCaller,"
A wrapper around a source directory to be built with a PEP 517 backend.

source_dir : The path to the source directory, containing pyproject.toml.
backend : The build backend spec, as per PEP 517, from pyproject.toml.
",41,45,217,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\_in_process.py,BackendUnavailable,"
Raised if we cannot import the backend
",26,27,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\_in_process.py,_DummyException,"
Nothing should ever raise this exception
",159,160,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pep517\_in_process.py,GotUnsupportedOperation,"
For internal use when backend raises UnsupportedOperation
",163,164,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,PEP440Warning,"
Used when there is an issue with a version or specifier not complying with
PEP 440.
",119,121,83,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,ResolutionError,"
Abstract base for dependency resolution errors
",250,251,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,VersionConflict,"
An already-installed version conflicts with the requested version.

Should be initialized with the installed Distribution and the requested
Requirement.
",257,261,152,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,ContextualVersionConflict,"
A VersionConflict that accepts a third parameter, the set of the
requirements that required the installed Distribution.
",289,291,119,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,DistributionNotFound,"
A requested distribution was not found
",302,303,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,UnknownExtra,"
Distribution doesn't have an ""extra feature"" of the given name
",329,330,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,IMetadataProvider,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,IResourceProvider,"
An object that provides access to package resources
",524,525,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,WorkingSet,"
A collection of active distributions on sys.path (or a similar list)
",552,553,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,_ReqExtras,"
Map each requirement to the extras that demanded it.
",938,939,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,Environment,"
Searchable snapshot of distributions on a search path
",958,959,53,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,ExtractionError,"
An error occurred extracting a resource

The following attributes are available from instances of this exception:

manager
    The resource manager that raised this exception

cache_path
    The base directory for resource extraction

original_error
    The exception instance that caused extraction to fail
",1108,1120,307,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,ResourceManager,"
Manage resource extraction and packages
",1124,1125,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,NullProvider,"
Try to implement resources and metadata for arbitrary PEP 302 loaders
",1382,1383,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,EggProvider,"
Provider based on a virtual filesystem
",1485,1486,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,DefaultProvider,"
Provides access to package resources in the filesystem
",1507,1508,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,EmptyProvider,"
Provider that returns nothing for all requests
",1537,1538,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,ZipManifests,"
zip manifest builder
",1557,1558,20,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,MemoizedZipManifests,"
Memoized zipfile manifests.
",1584,1585,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,ZipProvider,"
Resource support for zips and eggs
",1604,1605,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,FileMetadata,"
Metadata handler for standalone PKG-INFO files

Usage::

    metadata = FileMetadata(""/path/to/PKG-INFO"")

This provider rejects all data and metadata requests except for PKG-INFO,
which is treated as existing, and will be the contents of the file at
the provided location.
",1779,1788,273,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,PathMetadata,"
Metadata provider for egg directories

Usage::

    # Development eggs:

    egg_info = ""/path/to/PackageName.egg-info""
    base_dir = os.path.dirname(egg_info)
    metadata = PathMetadata(base_dir, egg_info)
    dist_name = os.path.splitext(os.path.basename(egg_info))[0]
    dist = Distribution(basedir, project_name=dist_name, metadata=metadata)

    # Unpacked egg directories:

    egg_path = ""/path/to/PackageName-ver-pyver-etc.egg""
    metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))
    dist = Distribution.from_filename(egg_path, metadata=metadata)
",1818,1835,578,17
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,EggMetadata,"
Metadata provider for .egg files
",1843,1844,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,NoDists,"
>>> bool(NoDists())
False

>>> list(NoDists()('anything'))
[]
",1990,1995,61,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,EntryPoint,"
Object representing an advertised importable object
",2311,2312,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,Distribution,"
Wrap an actual or potential sys.path entry w/metadata
",2465,2466,53,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,EggInfoDistribution,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,DistInfoDistribution,"
Wrap an actual or potential sys.path entry
w/metadata, .dist-info style.
",2877,2879,72,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,RequirementParseError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,Requirement,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pkg_resources\__init__.py,PkgResourcesDeprecationWarning,"
Base class for warning about deprecations in ``pkg_resources``

This class is not derived from ``DeprecationWarning``, and as such is
visible by default.
",3166,3170,153,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,Bar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,ChargingBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,FillingSquaresBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,FillingCirclesBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,IncrementalBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,PixelBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\bar.py,ShadyBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\counter.py,Counter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\counter.py,Countdown,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\counter.py,Stack,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\counter.py,Pie,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\helpers.py,WriteMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\helpers.py,WritelnMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\helpers.py,SigIntMixin,"
Registers a signal handler that calls finish on SIGINT
",83,84,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\spinner.py,Spinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\spinner.py,PieSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\spinner.py,MoonSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\spinner.py,LineSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\spinner.py,PixelSpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\__init__.py,Infinite,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\progress\__init__.py,Progress,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pytoml\core.py,TomlError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pytoml\parser.py,_Source,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\pytoml\utils.py,_TimeZone,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\adapters.py,BaseAdapter,"
The Base Transport Adapter
",56,57,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\adapters.py,HTTPAdapter,"
The built-in HTTP Adapter for urllib3.

Provides a general-case interface for Requests sessions to contact HTTP and
HTTPS urls by implementing the Transport Adapter interface. This class will
usually be created by the :class:`Session <Session>` class under the
covers.

:param pool_connections: The number of urllib3 connection pools to cache.
:param pool_maxsize: The maximum number of connections to save in the pool.
:param max_retries: The maximum number of retries each connection
    should attempt. Note, this applies only to failed DNS lookups, socket
    connections and connection timeouts, never to requests where data has
    made it to the server. By default, Requests does not retry failed
    connections. If you need granular control over the conditions under
    which we retry a request, import urllib3's ``Retry`` class and pass
    that instead.
:param pool_block: Whether the connection pool should block for connections.

Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> a = requests.adapters.HTTPAdapter(max_retries=3)
  >>> s.mount('http://', a)
",85,109,1086,24
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\auth.py,AuthBase,"
Base class that all auth implementations derive from
",73,74,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\auth.py,HTTPBasicAuth,"
Attaches HTTP Basic Authentication to the given Request object.
",80,81,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\auth.py,HTTPProxyAuth,"
Attaches HTTP Proxy Authentication to a given Request object.
",101,102,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\auth.py,HTTPDigestAuth,"
Attaches HTTP Digest Authentication to the given Request object.
",109,110,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\cookies.py,MockRequest,"
Wraps a `requests.Request` to mimic a `urllib2.Request`.

The code in `cookielib.CookieJar` expects this interface in order to correctly
manage cookie policies, i.e., determine whether a cookie can be set, given the
domains of the request and the cookie.

The original request object is read-only. The client is responsible for collecting
the new headers via `get_new_headers()` and interpreting them appropriately. You
probably want `get_cookie_header`, defined below.
",26,35,469,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\cookies.py,MockResponse,"
Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.

...what? Basically, expose the parsed HTTP headers from the server response
the way `cookielib` expects to see them.
",98,102,179,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\cookies.py,CookieConflictError,"
There are two cookies that meet the criteria specified in the cookie jar.
Use .get and .set and include domain and path args in order to be more specific.
",166,168,154,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\cookies.py,RequestsCookieJar,"
Compatibility class; is a cookielib.CookieJar, but exposes a dict
interface.

This is the CookieJar we create by default for requests and sessions that
don't specify one, since some clients may expect response.cookies and
session.cookies to support dict operations.

Requests does not use the dict interface internally; it's just for
compatibility with external client code. All requests code should work
out of the box with externally provided instances of ``CookieJar``, e.g.
``LWPCookieJar`` and ``FileCookieJar``.

Unlike a regular CookieJar, this class is pickleable.

.. warning:: dictionary operations that are normally O(1) may be O(n).
",172,187,644,15
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,RequestException,"
There was an ambiguous exception that occurred while handling your
request.
",13,15,75,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,HTTPError,"
An HTTP error occurred.
",29,30,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,ConnectionError,"
A Connection error occurred.
",33,34,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,ProxyError,"
A proxy error occurred.
",37,38,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,SSLError,"
An SSL error occurred.
",41,42,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,Timeout,"
The request timed out.

Catching this error will catch both
:exc:`~requests.exceptions.ConnectTimeout` and
:exc:`~requests.exceptions.ReadTimeout` errors.
",45,50,154,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,ConnectTimeout,"
The request timed out while trying to connect to the remote server.

Requests that produced this error are safe to retry.
",54,57,121,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,ReadTimeout,"
The server did not send any data in the allotted amount of time.
",61,62,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,URLRequired,"
A valid URL is required to make a request.
",65,66,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,TooManyRedirects,"
Too many redirects.
",69,70,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,MissingSchema,"
The URL schema (e.g. http or https) is missing.
",73,74,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,InvalidSchema,"
See defaults.py for valid schemas.
",77,78,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,InvalidURL,"
The URL provided was somehow invalid.
",81,82,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,InvalidHeader,"
The header value provided was somehow invalid.
",85,86,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,InvalidProxyURL,"
The proxy URL provided is invalid.
",89,90,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,ChunkedEncodingError,"
The server declared chunked encoding but sent an invalid chunk.
",93,94,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,ContentDecodingError,"
Failed to decode response content
",97,98,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,StreamConsumedError,"
The content for this response was already consumed
",101,102,50,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,RetryError,"
Custom retries logic failed
",105,106,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,UnrewindableBodyError,"
Requests encountered an error when trying to rewind a body
Warnings",109,110,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,RequestsWarning,"
Base warning for Requests.
",115,116,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,FileModeWarning,"
A file was opened in text mode, but Requests determined its binary length.
",120,121,74,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\exceptions.py,RequestsDependencyWarning,"
An imported dependency doesn't match the expected version range.
",125,126,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\models.py,RequestEncodingMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\models.py,RequestHooksMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\models.py,Request,"
A user-created :class:`Request <Request>` object.

Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>
",199,224,1062,25
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\models.py,PreparedRequest,"
The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
containing the exact bytes that will be sent to the server.

Generated from either a :class:`Request <Request>` object or manually.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> r = req.prepare()
  <PreparedRequest [GET]>

  >>> s = requests.Session()
  >>> s.send(r)
  <Response [200]>
",273,288,410,15
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\models.py,Response,"
The :class:`Response <Response>` object, which contains a
server's response to an HTTP request.
",587,589,95,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\sessions.py,SessionRedirectMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\sessions.py,Session,"
A Requests session.

Provides cookie persistence, connection-pooling, and configuration.

Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  >>>     s.get('https://httpbin.org/get')
  <Response [200]>
",341,357,339,16
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\structures.py,CaseInsensitiveDict,"
A case-insensitive ``dict``-like object.

Implements all methods and operations of
``MutableMapping`` as well as dict's ``copy``. Also
provides ``lower_items``.

All keys are expected to be strings. The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys. However, querying and contains
testing is case insensitive::

    cid = CaseInsensitiveDict()
    cid['Accept'] = 'application/json'
    cid['aCCEPT'] == 'application/json'  # True
    list(cid) == ['Accept']  # True

For example, ``headers['content-encoding']`` will return the
value of a ``'Content-Encoding'`` response header, regardless
of how the header name was originally stored.

If the constructor, ``.update``, or equality comparison
operations are given keys that have equal ``.lower()``s, the
behavior is undefined.
",14,38,905,24
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\requests\structures.py,LookupDict,"
Dictionary lookup object.
",88,89,25,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connection.py,DummyConnection,"
Used to detect a failed ConnectionCls import.
",66,67,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connection.py,HTTPConnection,"
Based on httplib.HTTPConnection but provides an extra constructor
backwards-compatibility layer between older and newer Pythons.

Additional keyword parameters are used to configure attributes of the connection.
Accepted parameters include:

  - ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`
  - ``source_address``: Set the source address for the current connection.
  - ``socket_options``: Set specific options on the underlying socket. If not specified, then
    defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
    Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

    For example, if you wish to enable TCP Keep Alive in addition to the defaults,
    you might pass::

        HTTPConnection.default_socket_options + [
            (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
        ]

    Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
",71,91,994,20
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connection.py,HTTPSConnection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connection.py,VerifiedHTTPSConnection,"
Based on httplib.HTTPSConnection but wraps the socket with
SSL certification.
",264,266,77,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connection.py,BaseSSLError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connection.py,ConnectionError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connectionpool.py,ConnectionPool,"
Base class for all connection pools, such as
:class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.
",56,58,108,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connectionpool.py,HTTPConnectionPool,"
Thread-safe connection pool for one host.

:param host:
    Host used for this HTTP Connection (e.g. ""localhost""), passed into
    :class:`httplib.HTTPConnection`.

:param port:
    Port used for this HTTP Connection (None is equivalent to 80), passed
    into :class:`httplib.HTTPConnection`.

:param strict:
    Causes BadStatusLine to be raised if the status line can't be parsed
    as a valid HTTP/1.0 or 1.1 status line, passed into
    :class:`httplib.HTTPConnection`.

    .. note::
       Only works in Python 2. This parameter is ignored in Python 3.

:param timeout:
    Socket timeout in seconds for each individual connection. This can
    be a float or integer, which sets the timeout for the HTTP request,
    or an instance of :class:`urllib3.util.Timeout` which gives you more
    fine-grained control over request timeouts. After the constructor has
    been parsed, this is always a `urllib3.util.Timeout` object.

:param maxsize:
    Number of connections to save that can be reused. More than 1 is useful
    in multithreaded situations. If ``block`` is set to False, more
    connections will be created but they will not be saved once they've
    been used.

:param block:
    If set to True, no more than ``maxsize`` connections will be used at
    a time. When no free connections are available, the call will block
    until a connection has been released. This is a useful side effect for
    particular multithreaded situations where one does not want to use more
    than maxsize connections per host to prevent flooding.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param retries:
    Retry configuration to use by default with requests in this pool.

:param _proxy:
    Parsed proxy URL, should not be used directly, instead, see
    :class:`urllib3.connectionpool.ProxyManager`""

:param _proxy_headers:
    A dictionary with proxy headers, should not be used directly,
    instead, see :class:`urllib3.connectionpool.ProxyManager`""

:param \**conn_kw:
    Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
    :class:`urllib3.connection.HTTPSConnection` instances.
",96,152,2200,56
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\connectionpool.py,HTTPSConnectionPool,"
Same as :class:`.HTTPConnectionPool`, but HTTPS.

When Python is compiled with the :mod:`ssl` module, then
:class:`.VerifiedHTTPSConnection` is used, which *can* verify certificates,
instead of :class:`.HTTPSConnection`.

:class:`.VerifiedHTTPSConnection` uses one of ``assert_fingerprint``,
``assert_hostname`` and ``host`` in this order to verify connections.
If ``assert_hostname`` is False, no verification is done.

The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,
``ca_cert_dir``, and ``ssl_version`` are only used if :mod:`ssl` is
available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade
the connection socket into an SSL socket.
",737,751,667,14
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,HTTPError,"
Base exception used by this module.
",9,10,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,HTTPWarning,"
Base warning used by this module.
",14,15,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,PoolError,"
Base exception for errors caused within a pool.
",19,20,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,RequestError,"
Base exception for PoolErrors that have associated URLs.
",30,31,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,SSLError,"
Raised when SSL certificate fails in an HTTPS connection.
",41,42,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ProxyError,"
Raised when the connection to a proxy fails.
",46,47,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,DecodeError,"
Raised when automatic decoding based on Content-Type fails.
",51,52,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ProtocolError,"
Raised when something unexpected happens mid-request/response.
",56,57,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,MaxRetryError,"
Raised when the maximum number of retries is exceeded.

:param pool: The connection pool
:type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
:param string url: The requested Url
:param exceptions.Exception reason: The underlying error
",67,73,246,6
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,HostChangedError,"
Raised when an existing pool gets a request for a foreign host.
",86,87,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,TimeoutStateError,"
Raised when passing an invalid state to a timeout 
",95,96,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,TimeoutError,"
Raised when a socket timeout error occurs.

Catching this error will catch both :exc:`ReadTimeoutErrors
<ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
",100,104,178,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ReadTimeoutError,"
Raised when a socket timeout occurs while receiving data from a server
",109,110,70,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ConnectTimeoutError,"
Raised when a socket timeout occurs while connecting to a server
",116,117,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,NewConnectionError,"
Raised when we fail to establish a new connection. Usually ECONNREFUSED.
",121,122,72,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,EmptyPoolError,"
Raised when a pool runs out of connections and no more are allowed.
",126,127,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ClosedPoolError,"
Raised when a request enters a pool after the pool has been closed.
",131,132,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,LocationValueError,"
Raised when there is something wrong with a given URL input.
",136,137,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,LocationParseError,"
Raised when get_host or similar fails to parse the URL input.
",141,142,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ResponseError,"
Used as a container for an error reason supplied in a MaxRetryError.
",151,152,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,SecurityWarning,"
Warned when performing security reducing actions
",157,158,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,SubjectAltNameWarning,"
Warned when connecting to a host with a certificate missing a SAN.
",162,163,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,InsecureRequestWarning,"
Warned when making an unverified HTTPS request.
",167,168,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,SystemTimeWarning,"
Warned when system time is suspected to be wrong
",172,173,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,InsecurePlatformWarning,"
Warned when certain SSL configuration is not available on a platform.
",177,178,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,SNIMissingWarning,"
Warned when making a HTTPS request without SNI available.
",182,183,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,DependencyWarning,"
Warned when an attempt is made to import a module with missing optional
dependencies.
",187,189,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ResponseNotChunked,"
Response needs to be chunked in order to read it as chunks.
",195,196,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,BodyNotHttplibCompatible,"
Body should be httplib.HTTPResponse like (have an fp attribute which
returns raw chunks) for read_chunked().
",200,202,108,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,IncompleteRead,"
Response length doesn't match expected Content-Length

Subclass of http_client.IncompleteRead to allow int value
for `partial` to avoid creating large objects on streamed
reads.
",208,213,177,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,InvalidHeader,"
The header provided was somehow invalid.
",224,225,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,ProxySchemeUnknown,"
ProxyManager does not support the supplied scheme
TODO(t-8ch): Stop inheriting from AssertionError in v2.0.",229,230,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,HeaderParsingError,"
Raised by assert_header_parsing, but we convert it to a log.warning statement.
",238,239,78,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\exceptions.py,UnrewindableBodyError,"
urllib3 encountered an error when trying to rewind a body
",245,246,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\fields.py,RequestField,"
A data container for request body parameters.

:param name:
    The name of this request field.
:param data:
    The data/value body.
:param filename:
    An optional filename of the request field.
:param headers:
    An optional dict-like object of headers to initially use for the field.
",51,61,289,10
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\poolmanager.py,PoolManager,"
Allows for arbitrary requests while transparently keeping track of
necessary connection pools for you.

:param num_pools:
    Number of connection pools to cache before discarding the least
    recently used pool.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param \**connection_pool_kw:
    Additional parameters are used to create fresh
    :class:`urllib3.connectionpool.ConnectionPool` instances.

Example::

    >>> manager = PoolManager(num_pools=2)
    >>> r = manager.request('GET', 'http://google.com/')
    >>> r = manager.request('GET', 'http://google.com/mail')
    >>> r = manager.request('GET', 'http://yahoo.com/')
    >>> len(manager.pools)
    2
",123,146,725,23
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\poolmanager.py,ProxyManager,"
Behaves just like :class:`PoolManager`, but sends all requests through
the defined proxy, using the CONNECT method for HTTPS URLs.

:param proxy_url:
    The URL of the proxy to be used.

:param proxy_headers:
    A dictionary containing headers that will be sent to the proxy. In case
    of HTTP they are being sent with each request, while in the
    HTTPS/CONNECT case they are sent only once. Could be used for proxy
    authentication.

Example:
    >>> proxy = urllib3.ProxyManager('http://localhost:3128/')
    >>> r1 = proxy.request('GET', 'http://google.com/')
    >>> r2 = proxy.request('GET', 'http://httpbin.org/')
    >>> len(proxy.pools)
    1
    >>> r3 = proxy.request('GET', 'https://httpbin.org/')
    >>> r4 = proxy.request('GET', 'https://twitter.com/')
    >>> len(proxy.pools)
    3
",363,385,805,22
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\request.py,RequestMethods,"
Convenience mixin for classes who implement a :meth:`urlopen` method, such
as :class:`~urllib3.connectionpool.HTTPConnectionPool` and
:class:`~urllib3.poolmanager.PoolManager`.

Provides behavior for making common types of HTTP request methods and
decides which type of request field encoding to use.

Specifically,

:meth:`.request_encode_url` is for sending requests whose fields are
encoded in the URL (such as GET, HEAD, DELETE).

:meth:`.request_encode_body` is for sending requests whose fields are
encoded in the *body* of the request using multipart or www-form-urlencoded
(such as for POST, PUT, PATCH).

:meth:`.request` is for making any kind of request, it will look up the
appropriate encoding format and use one of the above two methods to make
the request.

Initializer parameters:

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.
",11,36,902,25
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\response.py,DeflateDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\response.py,GzipDecoderState,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\response.py,GzipDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\response.py,MultiDecoder,"
From RFC7231:
    If one or more encodings have been applied to a representation, the
    sender that applied the encodings MUST generate a Content-Encoding
    header field that lists the content codings in the order in which
    they were applied.
",94,99,249,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\response.py,HTTPResponse,"
HTTP Response container.

Backwards-compatible to httplib's HTTPResponse but the response ``body`` is
loaded and decoded on-demand when the ``data`` property is accessed.  This
class is also compatible with the Python standard library's :mod:`io`
module, and can hence be treated as a readable object in the context of that
framework.

Extra parameters for behaviour not present in httplib.HTTPResponse:

:param preload_content:
    If True, the response's body will be preloaded during construction.

:param decode_content:
    If True, will attempt to decode the body based on the
    'content-encoding' header.

:param original_response:
    When this HTTPResponse wrapper is generated from an httplib.HTTPResponse
    object, it's convenient to include the original for debug purposes. It's
    otherwise unused.

:param retries:
    The retries contains the last :class:`~urllib3.util.retry.Retry` that
    was used during the request.

:param enforce_content_length:
    Enforce content length checking. Body returned by server must match
    value of Content-Length header, if present. Otherwise, raise error.
",125,154,1116,29
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\_collections.py,RecentlyUsedContainer,"
Provides a thread-safe dict-like container which maintains up to
``maxsize`` keys while throwing away the least-recently-used keys beyond
``maxsize``.

:param maxsize:
    Maximum number of recent elements to retain.

:param dispose_func:
    Every time an item is evicted from the container,
    ``dispose_func(value)`` is called.  Callback which will get called
",29,39,363,10
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\_collections.py,HTTPHeaderDict,"
:param headers:
    An iterable of field-value pairs. Must not contain multiple field names
    when compared case-insensitively.

:param kwargs:
    Additional field-value pairs to pass in to ``dict.update``.

A ``dict`` like container for storing HTTP Headers.

Field names are stored and compared case-insensitively in compliance with
RFC 7230. Iteration provides the first case-sensitive key seen for each
case-insensitive pair.

Using ``__setitem__`` syntax overwrites fields that compare equal
case-insensitively in order to maintain ``dict``'s api. For fields that
compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
in a loop.

If multiple fields that are equal case-insensitively are passed to the
constructor or ``.update``, the behavior is undefined and some will be
lost.

>>> headers = HTTPHeaderDict()
>>> headers.add('Set-Cookie', 'foo=bar')
>>> headers.add('set-cookie', 'baz=quxx')
>>> headers['content-length'] = '7'
>>> headers['SET-cookie']
'foo=bar, baz=quxx'
>>> headers['Content-Length']
'7'
",103,133,1034,30
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\_collections.py,RLock,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\appengine.py,AppEnginePlatformWarning,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\appengine.py,AppEnginePlatformError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\appengine.py,AppEngineManager,"
Connection manager for Google App Engine sandbox applications.

This manager uses the URLFetch service directly instead of using the
emulated httplib, and is subject to URLFetch limitations as described in
the App Engine documentation `here
<https://cloud.google.com/appengine/docs/python/urlfetch>`_.

Notably it will raise an :class:`AppEnginePlatformError` if:
    * URLFetch is not available.
    * If you attempt to use this on App Engine Flexible, as full socket
      support is available.
    * If a request size is more than 10 megabytes.
    * If a response size is more than 32 megabtyes.
    * If you use an unsupported request method such as OPTIONS.

Beyond those cases, it will raise normal urllib3 errors.
",80,96,721,16
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\ntlmpool.py,NTLMConnectionPool,"
Implements an NTLM authentication version of an urllib3 connection pool
",19,20,71,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\pyopenssl.py,WrappedSocket,"
API-compatibility wrapper for Python OpenSSL's Connection-class.

Note: _makefile_refs, _drop() and _reuse() are needed for the garbage
collector of pypy.
",248,252,154,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\pyopenssl.py,PyOpenSSLContext,"
I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
for translating the interface of the standard library ``SSLContext`` object
to calls into PyOpenSSL.
",384,387,176,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\pyopenssl.py,UnsupportedExtension,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\securetransport.py,WrappedSocket,"
API-compatibility wrapper for Python's OpenSSL wrapped socket object.

Note: _makefile_refs, _drop(), and _reuse() are needed for the garbage
collector of PyPy.
",290,294,160,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\securetransport.py,SecureTransportContext,"
I am a wrapper class for the SecureTransport library, to translate the
interface of the standard library ``SSLContext`` object to calls into
SecureTransport.
",695,698,157,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\socks.py,SOCKSConnection,"
A plain-text HTTP connection that connects via a SOCKS proxy.
",60,61,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\socks.py,SOCKSHTTPSConnection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\socks.py,SOCKSHTTPConnectionPool,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\socks.py,SOCKSHTTPSConnectionPool,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\socks.py,SOCKSProxyManager,"
A version of the urllib3 ProxyManager that routes connections via the
defined SOCKS proxy.
",142,144,90,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\_securetransport\bindings.py,CFConst,"
A class object that acts as essentially a namespace for CoreFoundation
constants.
",501,503,81,2
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\contrib\_securetransport\bindings.py,SecurityConst,"
A class object that acts as essentially a namespace for Security constants.
",509,510,75,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,_LazyDescr,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,MovedModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,_LazyModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,MovedAttribute,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,_SixMetaPathImporter,"
A meta path importer to import six.moves and its submodules.

This class implements a PEP302 finder and loader. It should be compatible
with Python 2.5 and all existing versions of Python3
",165,169,188,4
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,_MovedItems,"
Lazy loading of moved objects
",230,231,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Module_six_moves_urllib_parse,"
Lazy loading of moved objects in six.moves.urllib_parse
",321,322,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Module_six_moves_urllib_error,"
Lazy loading of moved objects in six.moves.urllib_error
",361,362,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Module_six_moves_urllib_request,"
Lazy loading of moved objects in six.moves.urllib_request
",381,382,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Module_six_moves_urllib_response,"
Lazy loading of moved objects in six.moves.urllib_response
",431,432,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Module_six_moves_urllib_robotparser,"
Lazy loading of moved objects in six.moves.urllib_robotparser
",452,453,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Module_six_moves_urllib,"
Create a six.moves.urllib namespace that resembles the Python 3 namespace
",470,471,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,Iterator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\six.py,X,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\packages\ssl_match_hostname\_implementation.py,CertificateError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\util\queue.py,LifoQueue,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\util\retry.py,Retry,"
Retry configuration.

Each retry attempt will create a new Retry object with updated values, so
they can be safely reused.

Retries can be defined as a default for a pool::

    retries = Retry(connect=5, read=2, redirect=5)
    http = PoolManager(retries=retries)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', retries=Retry(10))

Retries can be disabled by passing ``False``::

    response = http.request('GET', 'http://example.com/', retries=False)

Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
retries are disabled, in which case the causing exception will be raised.

:param int total:
    Total number of retries to allow. Takes precedence over other counts.

    Set to ``None`` to remove this constraint and fall back on other
    counts. It's a good idea to set this to some sensibly-high value to
    account for unexpected edge cases and avoid infinite retry loops.

    Set to ``0`` to fail on the first retry.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int connect:
    How many connection-related errors to retry on.

    These are errors raised before the request is sent to the remote server,
    which we assume has not triggered the server to process the request.

    Set to ``0`` to fail on the first retry of this type.

:param int read:
    How many times to retry on read errors.

    These errors are raised after the request was sent to the server, so the
    request may have side-effects.

    Set to ``0`` to fail on the first retry of this type.

:param int redirect:
    How many redirects to perform. Limit this to avoid infinite redirect
    loops.

    A redirect is a HTTP response with a status code 301, 302, 303, 307 or
    308.

    Set to ``0`` to fail on the first retry of this type.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int status:
    How many times to retry on bad status codes.

    These are retries made on responses, where status code matches
    ``status_forcelist``.

    Set to ``0`` to fail on the first retry of this type.

:param iterable method_whitelist:
    Set of uppercased HTTP method verbs that we should retry on.

    By default, we only retry on methods which are considered to be
    idempotent (multiple requests with the same parameters end with the
    same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.

    Set to a ``False`` value to retry on any verb.

:param iterable status_forcelist:
    A set of integer HTTP status codes that we should force a retry on.
    A retry is initiated if the request method is in ``method_whitelist``
    and the response status code is in ``status_forcelist``.

    By default, this is disabled with ``None``.

:param float backoff_factor:
    A backoff factor to apply between attempts after the second try
    (most errors are resolved immediately by a second try without a
    delay). urllib3 will sleep for::

        {backoff factor} * (2 ** ({number of total retries} - 1))

    seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep
    for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer
    than :attr:`Retry.BACKOFF_MAX`.

    By default, backoff is disabled (set to 0).

:param bool raise_on_redirect: Whether, if the number of redirects is
    exhausted, to raise a MaxRetryError, or to return a response with a
    response code in the 3xx range.

:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
    whether we should raise an exception, or return a response,
    if status falls in ``status_forcelist`` range and retries have
    been exhausted.

:param tuple history: The history of the request encountered during
    each call to :meth:`~Retry.increment`. The list is in the order
    the requests occurred. Each list item is of class :class:`RequestHistory`.

:param bool respect_retry_after_header:
    Whether to respect Retry-After header on status codes defined as
    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

:param iterable remove_headers_on_redirect:
    Sequence of headers to remove from the request when a response
    indicating a redirect is returned before firing off the redirected
    request.
",29,147,4341,118
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\util\ssl_.py,SSLContext,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\util\timeout.py,Timeout,"
Timeout configuration.

Timeouts can be defined as a default for a pool::

    timeout = Timeout(connect=2.0, read=7.0)
    http = PoolManager(timeout=timeout)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', timeout=Timeout(10))

Timeouts can be disabled by setting all the parameters to ``None``::

    no_timeout = Timeout(connect=None, read=None)
    response = http.request('GET', 'http://example.com/, timeout=no_timeout)


:param total:
    This combines the connect and read timeouts into one; the read timeout
    will be set to the time leftover from the connect attempt. In the
    event that both a connect timeout and a total are specified, or a read
    timeout and a total are specified, the shorter timeout will be applied.

    Defaults to None.

:type total: integer, float, or None

:param connect:
    The maximum amount of time to wait for a connection attempt to a server
    to succeed. Omitting the parameter will default the connect timeout to
    the system default, probably `the global default timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout for connection attempts.

:type connect: integer, float, or None

:param read:
    The maximum amount of time to wait between consecutive
    read operations for a response from the server. Omitting
    the parameter will default the read timeout to the system
    default, probably `the global default timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout.

:type read: integer, float, or None

.. note::

    Many factors can affect the total amount of time for urllib3 to return
    an HTTP response.

    For example, Python's DNS resolver does not obey the timeout specified
    on the socket. Other factors that can affect total request time include
    high CPU load, high swap, the program running at a low priority level,
    or other behaviors.

    In addition, the read and total timeouts only measure the time between
    read operations on the socket connecting the client and the server,
    not the total amount of time for the request to return a complete
    response. For most requests, the timeout is raised because the server
    has not sent the first byte in the specified time. This is not always
    the case; if a server streams one byte every fifteen seconds, a timeout
    of 20 seconds will not trigger, even though the request will take
    several minutes to complete.

    If your goal is to cut off any request after a set amount of wall clock
    time, consider having a second ""watcher"" thread to cut off a slow
    request.
",19,88,2824,69
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\util\url.py,Url,"
Datastructure for representing an HTTP URL. Used as a return value for
:func:`parse_url`. Both the scheme and host are normalized as they are
both case-insensitive according to RFC 3986.
",15,18,186,3
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\urllib3\util\wait.py,NoWayToWaitForSocketError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\x_user_defined.py,Codec,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\x_user_defined.py,IncrementalEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\x_user_defined.py,IncrementalDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\x_user_defined.py,StreamWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\x_user_defined.py,StreamReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\__init__.py,Encoding,"
Reresents a character encoding such as UTF-8,
that can be used for decoding or encoding.

.. attribute:: name

    Canonical name of the encoding

.. attribute:: codec_info

    The actual implementation of the encoding,
    a stdlib :class:`~codecs.CodecInfo` object.
    See :func:`codecs.register`.
",110,122,301,12
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\__init__.py,IncrementalDecoder,"
�Push�-based decoder.

:param fallback_encoding:
    An :class:`Encoding` object or a label string.
    The encoding to use if :obj:`input` does note have a BOM.
:param errors: Type of error handling. See :func:`codecs.register`.
:raises: :exc:`~exceptions.LookupError` for an unknown encoding label.
",273,280,300,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\notpip\_vendor\webencodings\__init__.py,IncrementalEncoder,"
�Push�-based encoder.

:param encoding: An :class:`Encoding` object or a label string.
:param errors: Type of error handling. See :func:`codecs.register`.
:raises: :exc:`~exceptions.LookupError` for an unknown encoding label.

.. method:: encode(input, final=False)

    :param input: An Unicode string.
    :param final:
        Indicate that no more input is available.
        Must be :obj:`True` if this is the last call.
    :returns: A byte string.
",324,337,454,13
C:\Users\vaano\python_projects\pipenv\pipenv\patched\pipfile\api.py,PipfileParser,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\pipfile\api.py,Pipfile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\cache.py,CorruptCacheError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\cache.py,DependencyCache,"
Creates a new persistent dependency cache for the current Python version.
The cache file is written to the appropriate user cache dir for the
current platform, i.e.

    ~/.cache/pip-tools/depcache-pyX.Y.json

Where X.Y indicates the Python version.
",42,49,249,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\exceptions.py,PipToolsError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\exceptions.py,NoCandidateFound,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\exceptions.py,UnsupportedConstraint,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\exceptions.py,IncompatibleRequirements,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\io.py,FilePerms,"
The :class:`FilePerms` type is used to represent standard POSIX
filesystem permissions:

  * Read
  * Write
  * Execute

Across three classes of user:

  * Owning (u)ser
  * Owner's (g)roup
  * Any (o)ther user

This class assists with computing new permissions, as well as
working with numeric octal ``777``-style and ``rwx``-style
permissions. Currently it only considers the bottom 9 permission
bits; it does not support sticky bits or more advanced permission
systems.

Args:
    user (str): A string in the 'rwx' format, omitting characters
        for which owning user's permissions are not provided.
    group (str): A string in the 'rwx' format, omitting characters
        for which owning group permissions are not provided.
    other (str): A string in the 'rwx' format, omitting characters
        for which owning other/world permissions are not provided.

There are many ways to use :class:`FilePerms`:

>>> FilePerms(user='rwx', group='xrw', other='wxr')  # note character order
FilePerms(user='rwx', group='rwx', other='rwx')
>>> int(FilePerms('r', 'r', ''))
288
>>> oct(288)[-3:]  # XXX Py3k
'440'

See also the :meth:`FilePerms.from_int` and
:meth:`FilePerms.from_path` classmethods for useful alternative
ways to construct :class:`FilePerms` objects.
TODO: consider more than the lower 9 bits",54,93,1270,39
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\io.py,AtomicSaver,"
``AtomicSaver`` is a configurable `context manager`_ that provides
a writable :class:`file` which will be moved into place as long as
no exceptions are raised within the context manager's block. These
""part files"" are created in the same directory as the destination
path to ensure atomic move operations (i.e., no cross-filesystem
moves occur).

Args:
    dest_path (str): The path where the completed file will be
        written.
    overwrite (bool): Whether to overwrite the destination file if
        it exists at completion time. Defaults to ``True``.
    file_perms (int): Integer representation of file permissions
        for the newly-created file. Defaults are, when the
        destination path already exists, to copy the permissions
        from the previous file, or if the file did not exist, to
        respect the user's configured `umask`_, usually resulting
        in octal 0644 or 0664.
    part_file (str): Name of the temporary *part_file*. Defaults
        to *dest_path* + ``.part``. Note that this argument is
        just the filename, and not the full path of the part
        file. To guarantee atomic saves, part files are always
        created in the same directory as the destination path.
    overwrite_part (bool): Whether to overwrite the *part_file*,
        should it exist at setup time. Defaults to ``False``,
        which results in an :exc:`OSError` being raised on
        pre-existing part files. Be careful of setting this to
        ``True`` in situations when multiple threads or processes
        could be writing to the same part file.
    rm_part_on_exc (bool): Remove *part_file* on exception cases.
        Defaults to ``True``, but ``False`` can be useful for
        recovery in some cases. Note that resumption is not
        automatic and by default an :exc:`OSError` is raised if
        the *part_file* exists.

Practically, the AtomicSaver serves a few purposes:

  * Avoiding overwriting an existing, valid file with a partially
    written one.
  * Providing a reasonable guarantee that a part file only has one
    writer at a time.
  * Optional recovery of partial data in failure cases.

.. _context manager: https://docs.python.org/3/reference/compound_stmts.html#with
.. _umask: https://en.wikipedia.org/wiki/Umask
",307,352,2284,45
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\io.py,DummyFile,"TODO: raise ValueErrors on closed for all methods?
    TODO: enforce read/write
    ",569,570,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\io.py,_FilePermProperty,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\logging.py,LogContext,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\pip.py,PipCommand,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\resolver.py,RequirementSummary,"
Summary of a requirement's properties for comparison purposes.
",24,25,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\resolver.py,Resolver,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\writer.py,OutputWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\repositories\base.py,BaseRepository,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\repositories\local.py,LocalRequirementsRepository,"
The LocalRequirementsRepository proxied the _real_ repository by first
checking if a requirement can be satisfied by existing pins (i.e. the
result of a previous compile step).

In effect, if a requirement can be satisfied with a version pinned in the
requirements file, we prefer that version over the best match found in
PyPI.  This keeps updates to the requirements.txt down to a minimum.
",22,29,391,7
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\repositories\pypi.py,HashCache,"
Caches hashes of PyPI artifacts so we do not need to re-download them

Hashes are only cached when the URL appears to contain a hash in it and the cache key includes
the hash value returned from the server). This ought to avoid ssues where the location on the
server changes.
",49,54,275,5
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\repositories\pypi.py,PyPIRepository,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\_compat\contextlib.py,ExitStack,"
Context manager for dynamic management of a stack of exit callbacks

For example:

    with ExitStack() as stack:
        files = [stack.enter_context(open(fname)) for fname in filenames]
        # All opened files will automatically be closed at the end of
        # the with statement, even if attempts to open files later
        # in the list throw an exception
",11,20,365,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\piptools\_compat\tempfile.py,TemporaryDirectory,"
Create and return a temporary directory.  This has the same
behavior as mkdtemp but can be used as a context manager.  For
example:

    with TemporaryDirectory() as tmpdir:
        ...

Upon exiting the context, the directory and everything contained
in it are removed.
",11,20,270,9
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\errors.py,DatabaseFetchError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\errors.py,DatabaseFileNotFoundError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\errors.py,InvalidKeyError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\formatter.py,SheetReport,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\formatter.py,BasicReport,"
Basic report, intented to be used for terminals with < 80 columns
",138,139,65,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\formatter.py,JsonReport,"
Json report, for when the output is input for something else
",170,171,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\formatter.py,BareReport,"
Bare report, for command line tools
",178,179,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\patched\safety\safety.py,Vulnerability,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\appdirs.py,AppDirs,"
Convenience wrapper for getting application dirs.
",408,409,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cached_property.py,cached_property,"
A property that is only computed once per instance and then replaces itself
with an ordinary attribute. Deleting the attribute resets the property.
Source: https://github.com/bottlepy/bottle/commit/fa7733e075da0d790d809aa3d2f53071897e6f76
",18,21,238,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cached_property.py,threaded_cached_property,"
A cached_property version for use in environments where multiple threads
might concurrently try to access the property.
",50,52,119,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cached_property.py,cached_property_with_ttl,"
A property that is only computed once per instance and then replaces itself
with an ordinary attribute. Setting the ttl to a number expresses how long
the property will last before being timed out.
",77,80,197,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cached_property.py,threaded_cached_property_with_ttl,"
A cached_property version for use in environments where multiple threads
might concurrently try to access the property.
",136,138,119,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\delegator.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,DocoptLanguageError,"
Error in construction of usage-message by developer.
",18,19,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,DocoptExit,"
Exit in case user invoked program with incorrect arguments.
",23,24,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Pattern,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,ChildPattern,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,ParentPattern,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Argument,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Option,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Required,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Optional,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,AnyOptions,"
Marker/placeholder for [options] shortcut.
",249,250,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,OneOrMore,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Either,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,TokenStream,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\docopt.py,Dict,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,FixedTzOffset,"
Fixed offset in minutes east from UTC.
    
",505,506,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,TooManyFields,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,RepeatedNameError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,Parser,"
Encapsulate a format string that may be used to parse other strings.
    
",704,705,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,Result,"
The result of a parse() or search().

Fixed results may be looked up using `result[index]`.

Named results may be looked up using `result['name']`.

Named results may be tested for existence using `'name' in result`.
",1131,1138,216,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,Match,"
The result of a parse() or search() if no results are generated.

This class is only used to expose internal used regex match objects
to the user and use them for external Parser.evaluate_result calls.
",1158,1162,201,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\parse.py,ResultIterator,"
The result of a findall() operation.

Each element is a Result instance.
",1173,1176,72,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pipdeptree.py,Package,"
Abstract class for wrappers around objects that pip returns.

This class needs to be subclassed with implementations for
`render_as_root` and `render_as_branch` methods.
",138,142,169,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pipdeptree.py,DistPackage,"
Wrapper class for pkg_resources.Distribution instances

:param obj: pkg_resources.Distribution to wrap over
:param req: optional ReqPackage object to associate this
            DistPackage with. This is useful for displaying the
            tree in reverse
",175,181,256,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pipdeptree.py,ReqPackage,"
Wrapper class for Requirements instance

:param obj: The `Requirements` instance to wrap over
:param dist: optional `pkg_resources.Distribution` instance for
             this requirement
",230,235,187,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseBaseException,"
base exception class for all parsing runtime exceptions",237,238,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseException,"
Exception thrown when parse expressions don't match class;
supported attributes by name are:
- lineno - returns the line number of the exception text
- col - returns the column number of the exception text
- line - returns the line containing the exception text

Example::

    try:
        Word(nums).setName(""integer"").parseString(""ABC"")
    except ParseException as pe:
        print(pe)
        print(""column: {}"".format(pe.col))

prints::

   Expected integer (at char 0), (line:1, col:1)
    column: 1
",293,311,507,18
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseFatalException,"
user-throwable exception thrown when inconsistent parse content
is found; stops all parsing immediately
",386,388,103,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseSyntaxException,"
just like :class:`ParseFatalException`, but thrown internally
when an :class:`ErrorStop<And._ErrorStop>` ('-' operator) indicates
that parsing is to stop immediately because an unbacktrackable
syntax error has been found.
",391,395,221,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,RecursiveGrammarException,"
exception thrown by :class:`ParserElement.validate` if the
grammar could be improperly recursive
",412,414,96,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_ParseResultsWithOffset,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseResults,"
Structured parse results, to provide multiple means of access to
the parsed data:

   - as a list (``len(results)``)
   - by list index (``results[0], results[1]``, etc.)
   - by attribute (``results.<resultsName>`` - see :class:`ParserElement.setResultsName`)

Example::

    integer = Word(nums)
    date_str = (integer.setResultsName(""year"") + '/'
                    + integer.setResultsName(""month"") + '/'
                    + integer.setResultsName(""day""))
    # equivalent form:
    # date_str = integer(""year"") + '/' + integer(""month"") + '/' + integer(""day"")

    # parseString returns a ParseResults object
    result = date_str.parseString(""1999/12/31"")

    def test(s, fn=repr):
        print(""%s -> %s"" % (s, fn(eval(s))))
    test(""list(result)"")
    test(""result[0]"")
    test(""result['month']"")
    test(""result.day"")
    test(""'month' in result"")
    test(""'minutes' in result"")
    test(""result.dump()"", str)

prints::

    list(result) -> ['1999', '/', '12', '/', '31']
    result[0] -> '1999'
    result['month'] -> '12'
    result.day -> '31'
    'month' in result -> True
    'minutes' in result -> False
    result.dump() -> ['1999', '/', '12', '/', '31']
    - day: 31
    - month: 12
    - year: 1999
",432,473,1226,41
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParserElement,"
Abstract base level parser element class.
",1235,1236,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Token,"
Abstract :class:`ParserElement` subclass, for defining atomic
matching patterns.
",2557,2559,80,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Empty,"
An empty token, will always match.
    
",2565,2566,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,NoMatch,"
A token that will never match.
    
",2575,2576,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Literal,"
Token to exactly match a specified string.

Example::

    Literal('blah').parseString('blah')  # -> ['blah']
    Literal('blah').parseString('blahfooblah')  # -> ['blah']
    Literal('blah').parseString('bla')  # -> Exception: Expected ""blah""

For case-insensitive matching, use :class:`CaselessLiteral`.

For keyword matching (force word break before and after the matched string),
use :class:`Keyword` or :class:`CaselessKeyword`.
",2589,2601,433,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Keyword,"
Token to exactly match a specified string as a keyword, that is,
it must be immediately followed by a non-keyword character.  Compare
with :class:`Literal`:

 - ``Literal(""if"")`` will match the leading ``'if'`` in
   ``'ifAndOnlyIf'``.
 - ``Keyword(""if"")`` will not; it will only match the leading
   ``'if'`` in ``'if x=1'``, or ``'if(y==2)'``

Accepts two optional constructor arguments in addition to the
keyword string:

 - ``identChars`` is a string of characters that would be valid
   identifier characters, defaulting to all alphanumerics + ""_"" and
   ""$""
 - ``caseless`` allows case-insensitive matching, default is ``False``.

Example::

    Keyword(""start"").parseString(""start"")  # -> ['start']
    Keyword(""start"").parseString(""starting"")  # -> Exception

For case-insensitive matching, use :class:`CaselessKeyword`.
",2630,2653,828,23
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,CaselessLiteral,"
Token to match a specified string, ignoring case of letters.
Note: the matched results will always be in the case of the given
match string, NOT the case of the input text.

Example::

    OneOrMore(CaselessLiteral(""CMD"")).parseString(""cmd CMD Cmd10"") # -> ['CMD', 'CMD', 'CMD']

(Contrast with example for :class:`CaselessKeyword`.)
",2703,2712,333,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,CaselessKeyword,"
Caseless version of :class:`Keyword`.

Example::

    OneOrMore(CaselessKeyword(""CMD"")).parseString(""cmd CMD Cmd10"") # -> ['CMD', 'CMD']

(Contrast with example for :class:`CaselessLiteral`.)
",2726,2733,191,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,CloseMatch,"
A variation on :class:`Literal` which matches ""close"" matches,
that is, strings with at most 'n' mismatching characters.
:class:`CloseMatch` takes parameters:

 - ``match_string`` - string to be matched
 - ``maxMismatches`` - (``default=1``) maximum number of
   mismatches allowed to count as a match

The results from a successful parse will contain the matched text
from the input string and the following named results:

 - ``mismatches`` - a list of the positions within the
   match_string where mismatches were found
 - ``original`` - the original match_string used to compare
   against the input string

If ``mismatches`` is an empty list, then the match was an exact
match.

Example::

    patt = CloseMatch(""ATCATCGAATGGA"")
    patt.parseString(""ATCATCGAAXGGA"") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})
    patt.parseString(""ATCAXCGAAXGGA"") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)

    # exact match
    patt.parseString(""ATCATCGAATGGA"") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})

    # close match allowing up to 2 mismatches
    patt = CloseMatch(""ATCATCGAATGGA"", maxMismatches=2)
    patt.parseString(""ATCAXCGAAXGGA"") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})
",2739,2770,1343,31
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Word,"
Token for matching words composed of allowed character sets.
Defined with string containing all allowed initial characters, an
optional string containing allowed body characters (if omitted,
defaults to the initial character set), and an optional minimum,
maximum, and/or exact length.  The default value for ``min`` is
1 (a minimum value < 1 is not valid); the default values for
``max`` and ``exact`` are 0, meaning no maximum or exact
length restriction. An optional ``excludeChars`` parameter can
list characters that might be found in the input ``bodyChars``
string; useful to define a word of all printables except for one or
two characters, for instance.

:class:`srange` is useful for defining custom character set strings
for defining ``Word`` expressions, using range notation from
regular expression character sets.

A common mistake is to use :class:`Word` to match a specific literal
string, as in ``Word(""Address"")``. Remember that :class:`Word`
uses the string argument to define *sets* of matchable characters.
This expression would match ""Add"", ""AAA"", ""dAred"", or any other word
made up of the characters 'A', 'd', 'r', 'e', and 's'. To match an
exact literal string, use :class:`Literal` or :class:`Keyword`.

pyparsing includes helper strings for building Words:

 - :class:`alphas`
 - :class:`nums`
 - :class:`alphanums`
 - :class:`hexnums`
 - :class:`alphas8bit` (alphabetic characters in ASCII range 128-255
   - accented, tilded, umlauted, etc.)
 - :class:`punc8bit` (non-alphabetic characters in ASCII range
   128-255 - currency, symbols, superscripts, diacriticals, etc.)
 - :class:`printables` (any non-whitespace character)

Example::

    # a word composed of digits
    integer = Word(nums) # equivalent to Word(""0123456789"") or Word(srange(""0-9""))

    # a word with a leading capital, and zero or more lowercase
    capital_word = Word(alphas.upper(), alphas.lower())

    # hostnames are alphanumeric, with leading alpha, and '-'
    hostname = Word(alphas, alphanums+'-')

    # roman numeral (not a strict parser, accepts invalid mix of characters)
    roman = Word(""IVXLCDM"")

    # any string of non-whitespace characters, except for ','
    csv_value = Word(printables, excludeChars="","")
",2808,2859,2225,51
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Char,"
A short-cut class for defining ``Word(characters, exact=1)``,
when defining a match of any single character in a string of
characters.
",2973,2976,134,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Regex,"
Token for matching strings that match a given regular
expression. Defined with string specifying the regular expression in
a form recognized by the stdlib Python  `re module <https://docs.python.org/3/library/re.html>`_.
If the given regex contains named groups (defined using ``(?P<name>...)``),
these will be preserved as named parse results.

Example::

    realnum = Regex(r""[+-]?\d+\.\d*"")
    date = Regex(r'(?P<year>\d{4})-(?P<month>\d\d?)-(?P<day>\d\d?)')
    # ref: https://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
    roman = Regex(r""M{0,4}(CM|CD|D?{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})"")
",2984,2996,662,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,QuotedString,"
Token for matching strings that are delimited by quoting characters.

Defined with the following parameters:

    - quoteChar - string of one or more characters defining the
      quote delimiting string
    - escChar - character to escape quotes, typically backslash
      (default= ``None`` )
    - escQuote - special quote sequence to escape an embedded quote
      string (such as SQL's ``""""`` to escape an embedded ``""``)
      (default= ``None`` )
    - multiline - boolean indicating whether quotes can span
      multiple lines (default= ``False`` )
    - unquoteResults - boolean indicating whether the matched text
      should be unquoted (default= ``True`` )
    - endQuoteChar - string of one or more characters defining the
      end of the quote delimited string (default= ``None``  => same as
      quoteChar)
    - convertWhitespaceEscapes - convert escaped whitespace
      (``'\t'``, ``'\n'``, etc.) to actual whitespace
      (default= ``True`` )

Example::

    qs = QuotedString('""')
    print(qs.searchString('lsjdf ""This is the quote"" sldjf'))
    complex_qs = QuotedString('{{', endQuoteChar='}}')
    print(complex_qs.searchString('lsjdf {{This is the ""quote""}} sldjf'))
    sql_qs = QuotedString('""', escQuote='""""')
    print(sql_qs.searchString('lsjdf ""This is the quote with """"embedded"""" quotes"" sldjf'))

prints::

    [['This is the quote']]
    [['This is the ""quote""']]
    [['This is the quote with ""embedded"" quotes']]
",3097,3133,1453,36
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,CharsNotIn,"
Token for matching words composed of characters *not* in a given
set (will include whitespace in matched characters if not listed in
the provided exclusion set - see example). Defined with string
containing all disallowed characters, and an optional minimum,
maximum, and/or exact length.  The default value for ``min`` is
1 (a minimum value < 1 is not valid); the default values for
``max`` and ``exact`` are 0, meaning no maximum or exact
length restriction.

Example::

    # define a comma-separated-value as anything that is not a ','
    csv_value = CharsNotIn(',')
    print(delimitedList(csv_value).parseString(""dkls,lsdkjf,s12 34,@!#,213""))

prints::

    ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
",3248,3266,707,18
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,White,"
Special matching class for matching whitespace.  Normally,
whitespace is ignored by pyparsing grammars.  This class is included
when some whitespace structures are significant.  Define with
a string containing the whitespace characters to be matched; default
is ``"" \t\r\n""``.  Also takes optional ``min``,
``max``, and ``exact`` arguments, as defined for the
:class:`Word` class.
",3325,3332,380,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_PositionToken,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,GoToColumn,"
Token to advance to a specific column of input text; useful for
tabular report scraping.
",3402,3404,88,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,LineStart,"
Matches if current position is at the beginning of a line within
the parse string

Example::

    test = '''        AAA this line
    AAA and this line
      AAA but not this one
    B AAA and definitely not this one
    '''

    for t in (LineStart() + 'AAA' + restOfLine).searchString(test):
        print(t)

prints::

    ['AAA', ' this line']
    ['AAA', ' and this line']
",3428,3446,377,18
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,LineEnd,"
Matches if current position is at the end of a line within the
parse string
",3459,3461,75,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,StringStart,"
Matches if current position is at the beginning of the parse
string
",3479,3481,67,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,StringEnd,"
Matches if current position is at the end of the parse string
    
",3494,3495,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,WordStart,"
Matches if the current position is at the beginning of a Word,
and is not preceded by any character in a given set of
``wordChars`` (default= ``printables``). To emulate the
```` behavior of regular expressions, use
``WordStart(alphanums)``. ``WordStart`` will also match at
the beginning of the string being parsed, or at the beginning of
a line.
",3511,3518,348,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,WordEnd,"
Matches if the current position is at the end of a Word, and is
not followed by any character in a given set of ``wordChars``
(default= ``printables``). To emulate the ```` behavior of
regular expressions, use ``WordEnd(alphanums)``. ``WordEnd``
will also match at the end of the string being parsed, or at the end
of a line.
",3532,3538,326,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseExpression,"
Abstract subclass of ParserElement, for combining and
post-processing parsed tokens.
",3555,3557,84,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,And,"
Requires all given :class:`ParseExpression` s to be found in the given order.
Expressions may be separated by whitespace.
May be constructed using the ``'+'`` operator.
May also be constructed using the ``'-'`` operator, which will
suppress backtracking.

Example::

    integer = Word(nums)
    name_expr = OneOrMore(Word(alphas))

    expr = And([integer(""id""),name_expr(""name""),integer(""age"")])
    # more easily written as:
    expr = integer(""id"") + name_expr(""name"") + integer(""age"")
",3667,3681,489,14
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Or,"
Requires that at least one :class:`ParseExpression` is found. If
two expressions match, the expression that matches the longest
string will be used. May be constructed using the ``'^'``
operator.

Example::

    # construct Or using '^' operator

    number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
    print(number.searchString(""123 3.1416 789""))

prints::

    [['123'], ['3.1416'], ['789']]
",3750,3765,406,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,MatchFirst,"
Requires that at least one :class:`ParseExpression` is found. If
two expressions match, the first one listed is the one that will
match. May be constructed using the ``'|'`` operator.

Example::

    # construct MatchFirst using '|' operator

    # watch the order of expressions to match
    number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
    print(number.searchString(""123 3.1416 789"")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]

    # put more selective expression first
    number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
    print(number.searchString(""123 3.1416 789"")) #  Better -> [['123'], ['3.1416'], ['789']]
",3837,3852,651,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Each,"
Requires all given :class:`ParseExpression` s to be found, but in
any order. Expressions may be separated by whitespace.

May be constructed using the ``'&'`` operator.

Example::

    color = oneOf(""RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN"")
    shape_type = oneOf(""SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON"")
    integer = Word(nums)
    shape_attr = ""shape:"" + shape_type(""shape"")
    posn_attr = ""posn:"" + Group(integer(""x"") + ',' + integer(""y""))(""posn"")
    color_attr = ""color:"" + color(""color"")
    size_attr = ""size:"" + integer(""size"")

    # use Each (using operator '&') to accept attributes in any order
    # (shape and posn are required, color and size are optional)
    shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

    shape_spec.runTests('''
        shape: SQUARE color: BLACK posn: 100, 120
        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        color:GREEN size:20 shape:TRIANGLE posn:20,40
        '''
        )

prints::

    shape: SQUARE color: BLACK posn: 100, 120
    ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
    - color: BLACK
    - posn: ['100', ',', '120']
      - x: 100
      - y: 120
    - shape: SQUARE


    shape: CIRCLE size: 50 color: BLUE posn: 50,80
    ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
    - color: BLUE
    - posn: ['50', ',', '80']
      - x: 50
      - y: 80
    - shape: CIRCLE
    - size: 50


    color: GREEN size: 20 shape: TRIANGLE posn: 20,40
    ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
    - color: GREEN
    - posn: ['20', ',', '40']
      - x: 20
      - y: 40
    - shape: TRIANGLE
    - size: 20
",3911,3966,1730,55
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ParseElementEnhance,"
Abstract subclass of :class:`ParserElement`, for combining and
post-processing parsed tokens.
",4044,4046,93,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,FollowedBy,"
Lookahead matching of the given parse expression.
``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list. If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.

Example::

    # use FollowedBy to match a label only if it is followed by a ':'
    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

    OneOrMore(attr_expr).parseString(""shape: SQUARE color: BLACK posn: upper left"").pprint()

prints::

    [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
",4121,4141,805,20
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,PrecededBy,"
Lookbehind matching of the given parse expression.
``PrecededBy`` does not advance the parsing position within the
input string, it only verifies that the specified parse expression
matches prior to the current position.  ``PrecededBy`` always
returns a null token list, but if a results name is defined on the
given expression, it is returned.

Parameters:

 - expr - expression that must match prior to the current parse
   location
 - retreat - (default= ``None``) - (int) maximum number of characters
   to lookbehind prior to the current parse location

If the lookbehind expression is a string, Literal, Keyword, or
a Word or CharsNotIn with a specified exact or maximum length, then
the retreat parameter is not required. Otherwise, retreat must be
specified to give a maximum number of characters to look back from
the current parse position for a lookbehind match.

Example::

    # VB-style variable names with type prefixes
    int_var = PrecededBy(""#"") + pyparsing_common.identifier
    str_var = PrecededBy(""$"") + pyparsing_common.identifier
",4153,4178,1054,25
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,NotAny,"
Lookahead to disallow matching with the given parse expression.
``NotAny`` does *not* advance the parsing position within the
input string, it only verifies that the specified parse expression
does *not* match at the current position.  Also, ``NotAny`` does
*not* skip over leading whitespace. ``NotAny`` always returns
a null token list.  May be constructed using the '~' operator.

Example::

    AND, OR, NOT = map(CaselessKeyword, ""AND OR NOT"".split())

    # take care not to mistake keywords for identifiers
    ident = ~(AND | OR | NOT) + Word(alphas)
    boolean_term = Optional(NOT) + ident

    # very crude boolean expression - to support parenthesis groups and
    # operation hierarchy, use infixNotation
    boolean_expr = boolean_term + ZeroOrMore((AND | OR) + boolean_term)

    # integers that are followed by ""."" are actually floats
    integer = Word(nums) + ~Char(""."")
",4228,4249,888,21
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_MultipleMatch,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,OneOrMore,"
Repetition of one or more of the given expression.

Parameters:
 - expr - expression that must match one or more times
 - stopOn - (default= ``None``) - expression for a terminating sentinel
      (only required if the sentinel would ordinarily match the repetition
      expression)

Example::

    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

    text = ""shape: SQUARE posn: upper left color: BLACK""
    OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

    # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
    OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

    # could also be written as
    (attr_expr * (1,)).parseString(text).pprint()
",4310,4333,1061,23
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,ZeroOrMore,"
Optional repetition of zero or more of the given expression.

Parameters:
 - expr - expression that must match zero or more times
 - stopOn - (default= ``None``) - expression for a terminating sentinel
      (only required if the sentinel would ordinarily match the repetition
      expression)

Example: similar to :class:`OneOrMore`
",4345,4354,334,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_NullToken,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Optional,"
Optional matching of the given expression.

Parameters:
 - expr - expression that must match zero or more times
 - default (optional) - value to be returned if the optional expression is not found.

Example::

    # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
    zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
    zip.runTests('''
        # traditional ZIP code
        12345

        # ZIP+4 form
        12101-0001

        # invalid ZIP
        98765-
        ''')

prints::

    # traditional ZIP code
    12345
    ['12345']

    # ZIP+4 form
    12101-0001
    ['12101-0001']

    # invalid ZIP
    98765-
         ^
    FAIL: Expected end of text (at char 5), (line:1, col:6)
",4383,4418,734,35
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,SkipTo,"
Token for skipping over all undefined text until the matched
expression is found.

Parameters:
 - expr - target expression marking the end of the data to be skipped
 - include - (default= ``False``) if True, the target expression is also parsed
      (the skipped text and target expression are returned as a 2-element list).
 - ignore - (default= ``None``) used to define grammars (typically quoted strings and
      comments) that might contain false matches to the target expression
 - failOn - (default= ``None``) define expressions that are not allowed to be
      included in the skipped test; if found before the target expression is found,
      the SkipTo is not a match

Example::

    report = '''
        Outstanding Issues Report - 1 Jan 2000

           # | Severity | Description                               |  Days Open
        -----+----------+-------------------------------------------+-----------
         101 | Critical | Intermittent system crash                 |          6
          94 | Cosmetic | Spelling error on Login ('log|n')         |         14
          79 | Minor    | System slow when running too many reports |         47
        '''
    integer = Word(nums)
    SEP = Suppress('|')
    # use SkipTo to simply match everything up until the next SEP
    # - ignore quoted strings, so that a '|' character inside a quoted string does not match
    # - parse action will call token.strip() for each matched token, i.e., the description body
    string_data = SkipTo(SEP, ignore=quotedString)
    string_data.setParseAction(tokenMap(str.strip))
    ticket_expr = (integer(""issue_num"") + SEP
                  + string_data(""sev"") + SEP
                  + string_data(""desc"") + SEP
                  + integer(""days_open""))

    for tkt in ticket_expr.searchString(report):
        print tkt.dump()

prints::

    ['101', 'Critical', 'Intermittent system crash', '6']
    - days_open: 6
    - desc: Intermittent system crash
    - issue_num: 101
    - sev: Critical
    ['94', 'Cosmetic', ""Spelling error on Login ('log|n')"", '14']
    - days_open: 14
    - desc: Spelling error on Login ('log|n')
    - issue_num: 94
    - sev: Cosmetic
    ['79', 'Minor', 'System slow when running too many reports', '47']
    - days_open: 47
    - desc: System slow when running too many reports
    - issue_num: 79
    - sev: Minor
",4449,4505,2355,56
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Forward,"
Forward declaration of an expression to be defined later -
used for recursive grammars, such as algebraic infix notation.
When the expression is known, it is assigned to the ``Forward``
variable using the '<<' operator.

Note: take care when assigning to ``Forward`` not to overlook
precedence of operators.

Specifically, '|' has a lower precedence than '<<', so that::

    fwdExpr << a | b | c

will actually be evaluated as::

    (fwdExpr << a) | b | c

thereby leaving b and c out as parseable alternatives.  It is recommended that you
explicitly group the values inserted into the ``Forward``::

    fwdExpr << (a | b | c)

Converting to use the '<<=' operator instead will avoid this problem.

See :class:`ParseResults.pprint` for an example of a recursive
parser created using ``Forward``.
",4567,4592,798,25
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_ForwardNoRecurse,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,TokenConverter,"
Abstract subclass of :class:`ParseExpression`, for converting parsed results.
",4660,4661,77,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Combine,"
Converter to concatenate all matching tokens to a single string.
By default, the matching patterns must also be contiguous in the
input string; this can be disabled by specifying
``'adjacent=False'`` in the constructor.

Example::

    real = Word(nums) + '.' + Word(nums)
    print(real.parseString('3.1416')) # -> ['3', '.', '1416']
    # will also erroneously match the following
    print(real.parseString('3. 1416')) # -> ['3', '.', '1416']

    real = Combine(Word(nums) + '.' + Word(nums))
    print(real.parseString('3.1416')) # -> ['3.1416']
    # no match when there are internal spaces
    print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
",4668,4684,672,16
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Group,"
Converter to return the matched tokens as a list - useful for
returning tokens of :class:`ZeroOrMore` and :class:`OneOrMore` expressions.

Example::

    ident = Word(alphas)
    num = Word(nums)
    term = ident | num
    func = ident + Optional(delimitedList(term))
    print(func.parseString(""fn a,b,100""))  # -> ['fn', 'a', 'b', '100']

    func = ident + Group(Optional(delimitedList(term)))
    print(func.parseString(""fn a,b,100""))  # -> ['fn', ['a', 'b', '100']]
",4713,4726,470,13
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Dict,"
Converter to return a repetitive expression as a list, but also
as a dictionary. Each element can also be referenced using the first
token in the expression as its key. Useful for tabular report
scraping when the first column can be used as a item key.

Example::

    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

    text = ""shape: SQUARE posn: upper left color: light blue texture: burlap""
    attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

    # print attributes as plain groups
    print(OneOrMore(attr_expr).parseString(text).dump())

    # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
    result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
    print(result.dump())

    # access named fields as dict entries, or output as dict
    print(result['shape'])
    print(result.asDict())

prints::

    ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']
    [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
    - color: light blue
    - posn: upper left
    - shape: SQUARE
    - texture: burlap
    SQUARE
    {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}

See more examples at :class:`ParseResults` of accessing fields by results name.
",4735,4772,1486,37
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Suppress,"
Converter for ignoring the results of a parsed expression.

Example::

    source = ""a, b, c,d""
    wd = Word(alphas)
    wd_list1 = wd + ZeroOrMore(',' + wd)
    print(wd_list1.parseString(source))

    # often, delimiters that are useful during parsing are just in the
    # way afterward - use Suppress to keep them out of the parsed output
    wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
    print(wd_list2.parseString(source))

prints::

    ['a', ',', 'b', ',', 'c', ',', 'd']
    ['a', 'b', 'c', 'd']

(See also :class:`delimitedList`.)
",4803,4823,546,20
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,OnlyOnce,"
Wrapper for parse actions, to ensure they are only called once.
    
",4832,4833,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,pyparsing_common,"
Here are some common low-level expressions that may be useful in
jump-starting parser development:

 - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
   :class:`scientific notation<sci_real>`)
 - common :class:`programming identifiers<identifier>`
 - network addresses (:class:`MAC<mac_address>`,
   :class:`IPv4<ipv4_address>`, :class:`IPv6<ipv6_address>`)
 - ISO8601 :class:`dates<iso8601_date>` and
   :class:`datetime<iso8601_datetime>`
 - :class:`UUID<uuid>`
 - :class:`comma-separated list<comma_separated_list>`

Parse actions:

 - :class:`convertToInteger`
 - :class:`convertToFloat`
 - :class:`convertToDate`
 - :class:`convertToDatetime`
 - :class:`stripHTMLTags`
 - :class:`upcaseTokens`
 - :class:`downcaseTokens`

Example::

    pyparsing_common.number.runTests('''
        # any int or real number, returned as the appropriate type
        100
        -100
        +100
        3.14159
        6.02e23
        1e-12
        ''')

    pyparsing_common.fnumber.runTests('''
        # any int or real number, returned as float
        100
        -100
        +100
        3.14159
        6.02e23
        1e-12
        ''')

    pyparsing_common.hex_integer.runTests('''
        # hex numbers
        100
        FF
        ''')

    pyparsing_common.fraction.runTests('''
        # fractions
        1/2
        -3/4
        ''')

    pyparsing_common.mixed_integer.runTests('''
        # mixed fractions
        1
        1/2
        -3/4
        1-3/4
        ''')

    import uuid
    pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
    pyparsing_common.uuid.runTests('''
        # uuid
        12345678-1234-5678-1234-567812345678
        ''')

prints::

    # any int or real number, returned as the appropriate type
    100
    [100]

    -100
    [-100]

    +100
    [100]

    3.14159
    [3.14159]

    6.02e23
    [6.02e+23]

    1e-12
    [1e-12]

    # any int or real number, returned as float
    100
    [100.0]

    -100
    [-100.0]

    +100
    [100.0]

    3.14159
    [3.14159]

    6.02e23
    [6.02e+23]

    1e-12
    [1e-12]

    # hex numbers
    100
    [256]

    FF
    [255]

    # fractions
    1/2
    [0.5]

    -3/4
    [-0.75]

    # mixed fractions
    1
    [1]

    1/2
    [0.5]

    -3/4
    [-0.75]

    1-3/4
    [1.75]

    # uuid
    12345678-1234-5678-1234-567812345678
    [UUID('12345678-1234-5678-1234-567812345678')]
",5933,6075,2406,142
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_lazyclassproperty,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,unicode_set,"
A set of Unicode characters, for language-specific strings for
``alphas``, ``nums``, ``alphanums``, and ``printables``.
A unicode_set is defined by a list of ranges in the Unicode character
set, in a class attribute ``_ranges``, such as::

    _ranges = [(0x0020, 0x007e), (0x00a0, 0x00ff),]

A unicode set can also be defined using multiple inheritance of other unicode sets::

    class CJK(Chinese, Japanese, Korean):
        pass
",6243,6254,433,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,pyparsing_unicode,"
A namespace class for defining common language unicode_sets.
",6290,6291,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_UnboundedCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_ErrorStop,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_FB,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Latin1,"
Unicode set for Latin-1 Unicode Character Range
",6296,6297,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,LatinA,"
Unicode set for Latin-A Unicode Character Range
",6300,6301,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,LatinB,"
Unicode set for Latin-B Unicode Character Range
",6304,6305,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Greek,"
Unicode set for Greek Unicode Character Ranges
",6308,6309,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Cyrillic,"
Unicode set for Cyrillic Unicode Character Range
",6316,6317,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Chinese,"
Unicode set for Chinese Unicode Character Range
",6320,6321,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Japanese,"
Unicode set for Japanese Unicode Character Range, combining Kanji, Hiragana, and Katakana ranges
",6324,6325,96,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Korean,"
Unicode set for Korean Unicode Character Range
",6340,6341,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,CJK,"
Unicode set for combined Chinese, Japanese, and Korean (CJK) Unicode Character Range
",6344,6345,84,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Thai,"
Unicode set for Thai Unicode Character Range
",6348,6349,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Arabic,"
Unicode set for Arabic Unicode Character Range
",6352,6353,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Hebrew,"
Unicode set for Hebrew Unicode Character Range
",6356,6357,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Devanagari,"
Unicode set for Devanagari Unicode Character Range
",6360,6361,50,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,SimpleNamespace,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_FifoCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,_FifoCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Kanji,"
Unicode set for Kanji Unicode Character Range
",6328,6329,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Hiragana,"
Unicode set for Hiragana Unicode Character Range
",6332,6333,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pyparsing.py,Katakana,"
Unicode set for Katakana  Unicode Character Range
",6336,6337,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\scandir.py,GenericDirEntry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\scandir.py,Win32DirEntryPython,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\scandir.py,Dirent,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\scandir.py,PosixDirEntry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\semver.py,VersionInfo,"
:param int major: version when you make incompatible API changes.
:param int minor: version when you add functionality in
                  a backwards-compatible manner.
:param int patch: version when you make backwards-compatible bug fixes.
:param str prerelease: an optional prerelease string
:param str build: an optional build string
",77,83,338,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,_LazyDescr,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,MovedModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,_LazyModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,MovedAttribute,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,_SixMetaPathImporter,"
A meta path importer to import six.moves and its submodules.

This class implements a PEP302 finder and loader. It should be compatible
with Python 2.5 and all existing versions of Python3
",165,169,188,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,_MovedItems,"
Lazy loading of moved objects
",230,231,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Module_six_moves_urllib_parse,"
Lazy loading of moved objects in six.moves.urllib_parse
",323,324,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Module_six_moves_urllib_error,"
Lazy loading of moved objects in six.moves.urllib_error
",365,366,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Module_six_moves_urllib_request,"
Lazy loading of moved objects in six.moves.urllib_request
",385,386,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Module_six_moves_urllib_response,"
Lazy loading of moved objects in six.moves.urllib_response
",437,438,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Module_six_moves_urllib_robotparser,"
Lazy loading of moved objects in six.moves.urllib_robotparser
",458,459,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Module_six_moves_urllib,"
Create a six.moves.urllib namespace that resembles the Python 3 namespace
",476,477,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,Iterator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\six.py,X,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\exceptions.py,FrozenInstanceError,"
A frozen/immutable instance has been attempted to be modified.

It mirrors the behavior of ``namedtuples`` by using the same error message
and subclassing :exc:`AttributeError`.

.. versionadded:: 16.1.0
",5,11,203,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\exceptions.py,AttrsAttributeNotFoundError,"
An ``attrs`` function couldn't find an attribute that the user asked for.

.. versionadded:: 16.2.0
",19,22,99,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\exceptions.py,NotAnAttrsClassError,"
A non-``attrs`` class has been passed into an ``attrs`` function.

.. versionadded:: 16.2.0
",27,30,91,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\exceptions.py,DefaultAlreadySetError,"
A default has been set using ``attr.ib()`` and is attempted to be reset
using the decorator.

.. versionadded:: 17.1.0
",35,39,118,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\exceptions.py,UnannotatedAttributeError,"
A class with ``auto_attribs=True`` has an ``attr.ib()`` without a type
annotation.

.. versionadded:: 17.3.0
",44,48,108,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\exceptions.py,PythonTooOldError,"
An ``attrs`` feature requiring a more recent python version has been used.

.. versionadded:: 18.2.0
",53,56,100,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_InstanceOfValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_ProvidesValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_OptionalValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_InValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_IsCallableValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_DeepIterable,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\validators.py,_DeepMapping,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_compat.py,ReadOnlyDict,"
Best-effort read-only dict wrapper.
",38,39,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_make.py,_Nothing,"
Sentinel class to indicate the lack of a value when ``None`` is ambiguous.

``_Nothing`` is a singleton. There is only ever one of it.
",47,50,134,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_make.py,_ClassBuilder,"
Iteratively build *one* class.
",439,440,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_make.py,Attribute,"
*Read-only* representation of an attribute.

:attribute name: The name of the attribute.

Plus *all* arguments of :func:`attr.ib`.

For the version history of the fields, see :func:`attr.ib`.
",1676,1683,191,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_make.py,_CountingAttr,"
Intermediate representation of attributes that uses a counter to preserve
the order in which the attributes have been defined.

*Internal* data structure of the attrs library.  Running into is most
likely the result of a bug like a forgotten `@attr.s` decorator.
",1857,1862,262,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_make.py,Factory,"
Stores a factory callable.

If passed as the default value to :func:`attr.ib`, the factory is used to
generate a new value.

:param callable factory: A callable that takes either none or exactly one
    mandatory positional argument depending on *takes_self*.
:param bool takes_self: Pass the partially initialized instance that is
    being initialized as a positional argument.

.. versionadded:: 17.1.0  *takes_self*
",1970,1981,419,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\attr\_make.py,_AndValidator,"
Compose many validators to a single one.
",2055,2056,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\functools_lru_cache.py,_HashedSeq,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\weakref.py,finalize,"
Class for finalization of weakrefable objects

finalize(obj, func, *args, **kwargs) returns a callable finalizer
object which will be called when obj is garbage collected. The
first time the finalizer is called it evaluates func(*arg, **kwargs)
and returns the result. After this the finalizer is dead, and
calling it just returns None.

When the program exits any remaining finalizers for which the
atexit attribute is true will be run in reverse order of creation.
By default atexit is true.
",18,29,493,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\weakref.py,_Info,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\enum\__init__.py,_RouteClassAttributeToGetattr,"
Route attribute access on a class to __getattr__.

This is a descriptor, used to define attributes that act differently when
accessed through an instance and through a class.  Instance access remains
normal, but access to an attribute through a class will be routed to the
class's __getattr__ method; this is done by raising AttributeError.
",39,45,340,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\enum\__init__.py,_EnumDict,"
Track enum member order and ensure member names are not reused.

EnumMeta will use the names found in self._member_names as the
enumeration member names.
",95,99,153,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\enum\__init__.py,EnumMeta,"
Metaclass for Enum
",148,149,18,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\backports\enum\__init__.py,IntEnum,"
Enum where members are also (and must be) ints
",819,820,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,ValidationError,"
A simple class to store and query basic error information. 
",92,93,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,ErrorList,"
A list for :class:`~cerberus.errors.ValidationError` instances that
can be queried with the ``in`` keyword for a particular
:class:`~cerberus.errors.ErrorDefinition`. 
",194,197,166,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,ErrorTreeNode,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,ErrorTree,"
Base class for :class:`~cerberus.errors.DocumentErrorTree` and
:class:`~cerberus.errors.SchemaErrorTree`. 
",280,282,105,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,DocumentErrorTree,"
Implements a dict-like class to query errors by indexes following the
structure of a validated document. 
",330,332,104,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,SchemaErrorTree,"
Implements a dict-like class to query errors by indexes following the
structure of the used schema. 
",337,339,99,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,BaseErrorHandler,"
Base class for all error handlers.
Subclasses are identified as error-handlers with an instance-test. 
",344,346,101,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,ToyErrorHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,BasicErrorHandler,"
Models cerberus' legacy. Returns a :class:`dict`. When mangled
through :class:`str` a pretty-formatted representation of that
tree is returned.
",444,447,143,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\errors.py,SchemaErrorHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,_Abort,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,SchemaError,"
Raised when the validation schema is missing, has the wrong format or
contains errors. 
",28,30,86,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,DefinitionSchema,"
A dict-subclass for caching of validated schemas. 
",35,36,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,UnvalidatedSchema,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,SchemaValidationSchema,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,SchemaValidatorMixin,"
This validator mixin provides mechanics to validate schemas passed to a Cerberus
validator. 
",303,305,91,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,Registry,"
A registry to store and retrieve schemas and parts of it by a name
that can be used in validation schemas.

:param definitions: Optional, initial definitions.
:type definitions: any :term:`mapping` 
",464,469,197,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,SchemaRegistry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\schema.py,RulesSetRegistry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\utils.py,readonly_classproperty,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\validator.py,DocumentError,"
Raised when the target document is missing or has the wrong format 
",55,56,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\validator.py,_SchemaRuleTypeError,"
Raised when a schema (list) validation encounters a mapping.
Not supposed to be used outside this module. 
",61,63,105,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\validator.py,BareValidator,"
Validator class. Normalizes and/or validates any mapping against a
validation-schema which is provided as an argument at class instantiation
or upon calling the :meth:`~cerberus.Validator.validate`,
:meth:`~cerberus.Validator.validated` or
:meth:`~cerberus.Validator.normalized` method. An instance itself is
callable and executes a validation.

All instantiation parameters are optional.

There are the introspective properties :attr:`types`, :attr:`validators`,
:attr:`coercers`, :attr:`default_setters`, :attr:`rules`,
:attr:`normalization_rules` and :attr:`validation_rules`.

The attributes reflecting the available rules are assembled considering
constraints that are defined in the docstrings of rules' methods and is
effectively used as validation schema for :attr:`schema`.

:param schema: See :attr:`~cerberus.Validator.schema`.
               Defaults to :obj:`None`.
:type schema: any :term:`mapping`
:param ignore_none_values: See :attr:`~cerberus.Validator.ignore_none_values`.
                           Defaults to ``False``.
:type ignore_none_values: :class:`bool`
:param allow_unknown: See :attr:`~cerberus.Validator.allow_unknown`.
                      Defaults to ``False``.
:type allow_unknown: :class:`bool` or any :term:`mapping`
:param require_all: See :attr:`~cerberus.Validator.require_all`.
                    Defaults to ``False``.
:type require_all: :class:`bool`
:param purge_unknown: See :attr:`~cerberus.Validator.purge_unknown`.
                      Defaults to to ``False``.
:type purge_unknown: :class:`bool`
:param purge_readonly: Removes all fields that are defined as ``readonly`` in the
                       normalization phase.
:type purge_readonly: :class:`bool`
:param error_handler: The error handler that formats the result of
                      :attr:`~cerberus.Validator.errors`.
                      When given as two-value tuple with an error-handler
                      class and a dictionary, the latter is passed to the
                      initialization of the error handler.
                      Default: :class:`~cerberus.errors.BasicErrorHandler`.
:type error_handler: class or instance based on
                     :class:`~cerberus.errors.BaseErrorHandler` or
                     :class:`tuple`
",68,112,2267,44
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\validator.py,InspectedValidator,"
Metaclass for all validators 
",1526,1527,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_assorted.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_assorted.py,Mixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_assorted.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_customization.py,InheritedValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_customization.py,CustomValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_customization.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_customization.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_customization.py,NonvalidatingValidator,"
Skips schema validation to speed up initialization
",83,84,50,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_normalization.py,MyNormalizer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_validation.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_validation.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_validation.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_validation.py,CustomValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_validation.py,MyValidator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\cerberus\tests\test_validation.py,DocumentPathTester,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\big5prober.py,Big5Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,CharDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,EUCTWDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,EUCKRDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,GB2312DistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,Big5DistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,SJISDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\chardistribution.py,EUCJPDistributionAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\charsetgroupprober.py,CharSetGroupProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\charsetprober.py,CharSetProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\codingstatemachine.py,CodingStateMachine,"
A state machine to verify a byte sequence for a particular encoding. For
each byte the detector receives, it will feed that byte to every active
state machine available, one byte at a time. The state machine changes its
state based on its previous state and the byte it receives. There are 3
states in a state machine that are of interest to an auto-detector:

START state: This is the state to start with, or a legal byte sequence
             (i.e. a valid code point) for character has been identified.

ME state:  This indicates that the state machine identified a byte sequence
           that is specific to the charset it is designed for and that
           there is no other possible encoding which can contain this byte
           sequence. This will to lead to an immediate positive answer for
           the detector.

ERROR state: This indicates the state machine identified an illegal byte
             sequence for that encoding. This will lead to an immediate
             negative answer for this encoding. Detector will exclude this
             encoding from consideration from here on.
",34,53,1104,19
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\cp949prober.py,CP949Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\enums.py,InputState,"
This enum represents the different states a universal detector can be in.
",9,10,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\enums.py,LanguageFilter,"
This enum represents the different language filters we can apply to a
``UniversalDetector``.
",18,20,92,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\enums.py,ProbingState,"
This enum represents the different states a prober can be in.
",33,34,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\enums.py,MachineState,"
This enum represents the different states a state machine can be in.
",42,43,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\enums.py,SequenceLikelihood,"
This enum represents the likelihood of a character following the previous one.
",51,52,78,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\enums.py,CharacterCategory,"
This enum represents the different categories language models for
``SingleByteCharsetProber`` put characters into.

Anything less than CONTROL is considered a letter.
",66,70,166,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\escprober.py,EscCharSetProber,"
This CharSetProber uses a ""code scheme"" approach for detecting encodings,
whereby easily recognizable escape or shift sequences are relied on to
identify these encodings.
",36,39,170,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\eucjpprober.py,EUCJPProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\euckrprober.py,EUCKRProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\euctwprober.py,EUCTWProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\gb2312prober.py,GB2312Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\hebrewprober.py,HebrewProber,"
The prober is divided between two SBCharSetProbers and a HebrewProber,
all of which are managed, created, fed data, inquired and deleted by the
SBCSGroupProber. The two SBCharSetProbers identify that the text is in
fact some kind of Hebrew, Logical or Visual. The final decision about which
one is it is made by the HebrewProber by combining final-letter scores
with the scores of the two SBCharSetProbers to produce a final answer.
The SBCSGroupProber is responsible for stripping the original text of HTML
tags, English characters, numbers, low-ASCII punctuation characters, spaces
and new lines. It reduces any sequence of such characters to a single space.
The buffer fed to each prober in the SBCS group prober is pure text in
high-ASCII.
The two SBCharSetProbers (model probers) share the same language model:
Win1255Model.
The first SBCharSetProber uses the model normally as any other
SBCharSetProber does, to recognize windows-1255, upon which this model was
built. The second SBCharSetProber is told to make the pair-of-letter
lookup in the language model backwards. This in practice exactly simulates
a visual Hebrew model using the windows-1255 logical Hebrew model.
The HebrewProber is not using any language model. All it does is look for
final-letter evidence suggesting the text is either logical Hebrew or visual
Hebrew. Disjointed from the model probers, the results of the HebrewProber
alone are meaningless. HebrewProber always returns 0.00 as confidence
since it never identifies a charset by itself. Instead, the pointer to the
HebrewProber is passed to the model probers as a helper ""Name Prober"".
When the Group prober receives a positive identification from any prober,
it asks for the name of the charset identified. If the prober queried is a
Hebrew model prober, the model prober forwards the call to the
HebrewProber to make the final decision. In the HebrewProber, the
decision is made according to the final-letters scores maintained and Both
model probers scores. The answer is returned in the form of the name of the
charset identified, either ""windows-1255"" or ""ISO-8859-8""",129,129,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\jpcntx.py,JapaneseContextAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\jpcntx.py,SJISContextAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\jpcntx.py,EUCJPContextAnalysis,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\latin1prober.py,Latin1Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\mbcharsetprober.py,MultiByteCharSetProber,"
MultiByteCharSetProber
",35,36,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\mbcsgroupprober.py,MBCSGroupProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\sbcharsetprober.py,SingleByteCharSetProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\sbcsgroupprober.py,SBCSGroupProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\sjisprober.py,SJISProber,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\universaldetector.py,UniversalDetector,"
The ``UniversalDetector`` class underlies the ``chardet.detect`` function
and coordinates all of the different charset probers.

To get a ``dict`` containing an encoding and its confidence, you can simply
run:

.. code::

        u = UniversalDetector()
        u.feed(some_bytes)
        u.close()
        detected = u.result
",52,64,326,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\chardet\utf8prober.py,UTF8Prober,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,Context,"
The context is a special internal object that holds state relevant
for the script execution at every single level.  It's normally invisible
to commands unless they opt-in to getting access to it.

The context is useful as it can pass internal objects around and can
control special execution features such as reading data from
environment variables.

A context can be used as context manager in which case it will call
:meth:`close` on teardown.

.. versionadded:: 2.0
   Added the `resilient_parsing`, `help_option_names`,
   `token_normalize_func` parameters.

.. versionadded:: 3.0
   Added the `allow_extra_args` and `allow_interspersed_args`
   parameters.

.. versionadded:: 4.0
   Added the `color`, `ignore_unknown_options`, and
   `max_content_width` parameters.

:param command: the command class for this context.
:param parent: the parent context.
:param info_name: the info name for this invocation.  Generally this
                  is the most descriptive name for the script or
                  command.  For the toplevel script it is usually
                  the name of the script, for commands below it it's
                  the name of the script.
:param obj: an arbitrary object of user data.
:param auto_envvar_prefix: the prefix to use for automatic environment
                           variables.  If this is `None` then reading
                           from environment variables is disabled.  This
                           does not affect manually set environment
                           variables which are always read.
:param default_map: a dictionary (like object) with default values
                    for parameters.
:param terminal_width: the width of the terminal.  The default is
                       inherit from parent context.  If no context
                       defines the terminal width then auto
                       detection will be applied.
:param max_content_width: the maximum width for content rendered by
                          Click (this currently only affects help
                          pages).  This defaults to 80 characters if
                          not overridden.  In other words: even if the
                          terminal is larger than that, Click will not
                          format things wider than 80 characters by
                          default.  In addition to that, formatters might
                          add some safety mapping on the right.
:param resilient_parsing: if this flag is enabled then Click will
                          parse without any interactivity or callback
                          invocation.  Default values will also be
                          ignored.  This is useful for implementing
                          things such as completion support.
:param allow_extra_args: if this is set to `True` then extra arguments
                         at the end will not raise an error and will be
                         kept on the context.  The default is to inherit
                         from the command.
:param allow_interspersed_args: if this is set to `False` then options
                                and arguments cannot be mixed.  The
                                default is to inherit from the command.
:param ignore_unknown_options: instructs click to ignore options it does
                               not know and keeps them for later
                               processing.
:param help_option_names: optionally a list of strings that define how
                          the default help parameter is named.  The
                          default is ``['--help']``.
:param token_normalize_func: an optional function that is used to
                             normalize tokens (options, choices,
                             etc.).  This for instance can be used to
                             implement case insensitive behavior.
:param color: controls if the terminal supports ANSI colors or not.  The
              default is autodetection.  This is only needed if ANSI
              codes are used in texts that Click prints which is by
              default not the case.  This for instance would affect
              help output.
",134,211,4202,77
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,BaseCommand,"
The base command implements the minimal API contract of commands.
Most code will never use this as it does not implement a lot of useful
functionality but it can act as the direct subclass of alternative
parsing methods that do not depend on the Click parser.

For instance, this can be used to bridge Click and other systems like
argparse or docopt.

Because base commands do not implement a lot of the API that other
parts of Click take for granted, they are not supported for all
operations.  For instance, they cannot be used with the decorators
usually and they have no built-in callback system.

.. versionchanged:: 2.0
   Added the `context_settings` parameter.

:param name: the name of the command to use unless a group overrides it.
:param context_settings: an optional dictionary with defaults that are
                         passed to the context object.
",577,596,868,19
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,Command,"
Commands are the basic building block of command line interfaces in
Click.  A basic command handles command line parsing and might dispatch
more parsing to commands nested below it.

.. versionchanged:: 2.0
   Added the `context_settings` parameter.

:param name: the name of the command to use unless a group overrides it.
:param context_settings: an optional dictionary with defaults that are
                         passed to the context object.
:param callback: the callback to invoke.  This is optional.
:param params: the parameters to register with this command.  This can
               be either :class:`Option` or :class:`Argument` objects.
:param help: the help string to use for this command.
:param epilog: like the help string but it's printed at the end of the
               help page after everything else.
:param short_help: the short help to use for this command.  This is
                   shown on the command listing of the parent command.
:param add_help_option: by default each command registers a ``--help``
                        option.  This can be disabled by this parameter.
:param hidden: hide this command from help outputs.

:param deprecated: issues a message indicating that
                         the command is deprecated.
",768,792,1264,24
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,MultiCommand,"
A multi command is the basic implementation of a command that
dispatches to subcommands.  The most common version is the
:class:`Group`.

:param invoke_without_command: this controls how the multi command itself
                               is invoked.  By default it's only invoked
                               if a subcommand is provided.
:param no_args_is_help: this controls what happens if no arguments are
                        provided.  This option is enabled by default if
                        `invoke_without_command` is disabled or disabled
                        if it's enabled.  If enabled this will add
                        ``--help`` as argument if no arguments are
                        passed.
:param subcommand_metavar: the string that is used in the documentation
                           to indicate the subcommand place.
:param chain: if this is set to `True` chaining of multiple subcommands
              is enabled.  This restricts the form of commands in that
              they cannot have optional arguments but it allows
              multiple commands to be chained together.
:param result_callback: the result callback to attach to this multi
                        command.
",960,981,1223,21
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,Group,"
A group allows a command to have subcommands attached.  This is the
most common way to implement nesting in Click.

:param commands: a dictionary of commands.
",1206,1210,158,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,CommandCollection,"
A command collection is a multi command that merges multiple multi
commands together into one.  This is a straightforward implementation
that accepts a list of different multi commands as sources and
provides all the commands for each of them.
",1259,1263,243,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,Parameter,"
A parameter to a command comes in two versions: they are either
:class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
not supported by design as some of the internals for parsing are
intentionally not finalized.

Some settings are supported by both options and arguments.

.. versionchanged:: 2.0
   Changed signature for parameter callback to also be passed the
   parameter.  In Click 2.0, the old callback format will still work,
   but it will raise a warning to give you change to migrate the
   code easier.

:param param_decls: the parameter declarations for this option or
                    argument.  This is a list of flags or argument
                    names.
:param type: the type that should be used.  Either a :class:`ParamType`
             or a Python type.  The later is converted into the former
             automatically if supported.
:param required: controls if this is optional or not.
:param default: the default value if omitted.  This can also be a callable,
                in which case it's invoked when the default is needed
                without any arguments.
:param callback: a callback that should be executed after the parameter
                 was matched.  This is called as ``fn(ctx, param,
                 value)`` and needs to return the value.  Before Click
                 2.0, the signature was ``(ctx, value)``.
:param nargs: the number of arguments to match.  If not ``1`` the return
              value is a tuple instead of single value.  The default for
              nargs is ``1`` (except if the type is a tuple, then it's
              the arity of the tuple).
:param metavar: how the value is represented in the help page.
:param expose_value: if this is `True` then the value is passed onwards
                     to the command callback and stored on the context,
                     otherwise it's skipped.
:param is_eager: eager values are processed before non eager ones.  This
                 should not be set for arguments or it will inverse the
                 order of processing.
:param envvar: a string or list of strings that are environment variables
               that should be checked.
",1290,1330,2188,40
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,Option,"
Options are usually optional values on the command line and
have some extra features that arguments don't have.

All other parameters are passed onwards to the parameter constructor.

:param show_default: controls if the default value should be shown on the
                     help page. Normally, defaults are not shown. If this
                     value is a string, it shows the string instead of the
                     value. This is particularly useful for dynamic options.
:param show_envvar: controls if an environment variable should be shown on
                    the help page.  Normally, environment variables
                    are not shown.
:param prompt: if set to `True` or a non empty string then the user will be
               prompted for input.  If set to `True` the prompt will be the
               option name capitalized.
:param confirmation_prompt: if set then the value will need to be confirmed
                            if it was prompted for.
:param hide_input: if this is `True` then the input on the prompt will be
                   hidden from the user.  This is useful for password
                   input.
:param is_flag: forces this option to act as a flag.  The default is
                auto detection.
:param flag_value: which value should be used for this flag if it's
                   enabled.  This is set to a boolean automatically if
                   the option string contains a slash to mark two options.
:param multiple: if this is set to `True` then the argument is accepted
                 multiple times and recorded.  This is similar to ``nargs``
                 in how it works but supports arbitrary number of
                 arguments.
:param count: this flag makes an option increment an integer.
:param allow_from_autoenv: if this is enabled then the value of this
                           parameter will be pulled from an environment
                           variable in case a prefix is defined on the
                           context.
:param help: the help string.
:param hidden: hide this option from help outputs.
",1501,1537,2099,36
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\core.py,Argument,"
Arguments are positional parameters to a command.  They generally
provide fewer features than options but can have infinite ``nargs``
and are required by default.

All parameters are passed onwards to the parameter constructor.
",1794,1799,227,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,ClickException,"
An exception that Click can handle and show to the user.
",12,13,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,UsageError,"
An internal exception that signals a usage error.  This typically
aborts any further handling.

:param message: the error message to display.
:param ctx: optionally the context that caused this error.  Click will
            fill in the context automatically in some situations.
",44,50,278,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,BadParameter,"
An exception that formats out a standardized error message for a
bad parameter.  This is useful when thrown from a callback or type as
Click will attach contextual information to it (for instance, which
parameter it is).

.. versionadded:: 2.0

:param param: the parameter object that caused this error.  This can
              be left out, and Click will attach this info itself
              if possible.
:param param_hint: a string that shows up as parameter name.  This
                   can be used as alternative to `param` in cases
                   where custom validation should happen.  If it is
                   a string it's used as such, if it's a list then
                   each item is quoted and separated.
",74,89,728,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,MissingParameter,"
Raised if click required an option or argument but it was not
provided when invoking the script.

.. versionadded:: 4.0

:param param_type: a string that indicates the type of the parameter.
                   The default is to inherit the parameter type from
                   the given `param`.  Valid values are ``'parameter'``,
                   ``'option'`` or ``'argument'``.
",110,119,383,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,NoSuchOption,"
Raised if click attempted to handle an option that does not
exist.

.. versionadded:: 4.0
",157,161,89,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,BadOptionUsage,"
Raised if an option is generally supplied but the use of the option
was incorrect.  This is for instance raised if the number of arguments
for an option is not correct.

.. versionadded:: 4.0

:param option_name: the name of the option being used incorrectly.
",183,190,259,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,BadArgumentUsage,"
Raised if an argument is generally supplied but the use of the argument
was incorrect.  This is for instance raised if the number of values
for an argument is not correct.

.. versionadded:: 6.0
",198,203,194,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,FileError,"
Raised if a file cannot be opened.
",210,211,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,Abort,"
An internal signalling exception that signals Click to abort.
",225,226,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\exceptions.py,Exit,"
An exception that indicates that the application should exit with some
status code.

:param code: the status code to exit with.
",229,233,127,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\formatting.py,HelpFormatter,"
This class helps with formatting text-based help pages.  It's
usually just needed for very special internal cases, but it's also
exposed so that developers can write their own fancy outputs.

At present, it always writes into memory.

:param indent_increment: the additional increment for each level.
:param width: the width for the text.  This defaults to the terminal
              width clamped to a maximum of 78.
",90,99,417,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\parser.py,Option,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\parser.py,Argument,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\parser.py,ParsingState,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\parser.py,OptionParser,"
The option parser is an internal class that is ultimately used to
parse options and arguments.  It's modelled after optparse and brings
a similar but vastly simplified API.  It should generally not be used
directly as the high level Click classes wrap it for you.

It's not nearly as extensible as optparse or argparse as it does not
implement features that are implemented on a higher level (such as
types or defaults).

:param ctx: optionally the :class:`~click.Context` where this parser
            should go with.
",193,204,518,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\testing.py,EchoingStdin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\testing.py,Result,"
Holds the captured result of an invoked CLI script.
",74,75,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\testing.py,CliRunner,"
The CLI runner provides functionality to invoke a Click command line
script for unittesting purposes in a isolated environment.  This only
works in single-threaded systems without any concurrency as it changes the
global interpreter state.

:param charset: the character set for the input and output data.  This is
                UTF-8 by default and should not be changed currently as
                the reporting to Click only works in Python 2 properly.
:param env: a dictionary with environment variables for overriding.
:param echo_stdin: if this is set to `True`, then reading from stdin writes
                   to stdout.  This is useful for showing examples in
                   some circumstances.  Note that regular prompts
                   will automatically echo the input.
:param mix_stderr: if this is set to `False`, then stdout and stderr are
                   preserved as independent streams.  This is useful for
                   Unix-philosophy apps that have predictable stdout and
                   noisy stderr, such that each may be measured
                   independently
",119,137,1108,18
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,ParamType,"
Helper for converting values through types.  The following is
necessary for a valid type:

*   it needs a name
*   it needs to pass through None unchanged
*   it needs to convert from a string
*   it needs to convert its result type through unchanged
    (eg: needs to be idempotent)
*   it needs to be able to deal with param and context being `None`.
    This can be the case when the object is used with prompt
    inputs.
",12,23,425,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,CompositeParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,FuncParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,UnprocessedParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,StringParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,Choice,"
The choice type allows a value to be checked against a fixed set
of supported values. All of these values have to be strings.

You should only pass a list or tuple of choices. Other iterables
(like generators) may lead to surprising results.

See :ref:`choice-opts` for an example.

:param case_sensitive: Set to false to make choices case
    insensitive. Defaults to true.
",130,140,374,10
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,DateTime,"
The DateTime type converts date strings into `datetime` objects.

The format strings which are checked are configurable, but default to some
common (non-timezone aware) ISO 8601 formats.

When specifying *DateTime* formats, you should only pass a list or a tuple.
Other iterables, like generators, may lead to surprising results.

The format strings are processed using ``datetime.strptime``, and this
consequently defines the format strings which are allowed.

Parsing is tried using each format, in order, and the first format which
parses successfully is used.

:param formats: A list or tuple of date format strings, in the order in
                which they should be tried. Defaults to
                ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``,
                ``'%Y-%m-%d %H:%M:%S'``.
",187,205,790,18
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,IntParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,IntRange,"
A parameter that works similar to :data:`click.INT` but restricts
the value to fit into a range.  The default behavior is to fail if the
value falls outside the range, but it can also be silently clamped
between the two edges.

See :ref:`ranges` for an example.
",253,259,261,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,FloatParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,FloatRange,"
A parameter that works similar to :data:`click.FLOAT` but restricts
the value to fit into a range.  The default behavior is to fail if the
value falls outside the range, but it can also be silently clamped
between the two edges.

See :ref:`ranges` for an example.
",306,312,263,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,BoolParamType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,UUIDParameterType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,File,"
Declares a parameter to be a file for reading or writing.  The file
is automatically closed once the context tears down (after the command
finished working).

Files can be opened for reading or writing.  The special value ``-``
indicates stdin or stdout depending on the mode.

By default, the file is opened for reading text data, but it can also be
opened in binary mode or for writing.  The encoding parameter can be used
to force a specific encoding.

The `lazy` flag controls if the file should be opened immediately or upon
first IO. The default is to be non-lazy for standard input and output
streams as well as files opened for reading, `lazy` otherwise. When opening a
file lazily for reading, it is still opened temporarily for validation, but
will not be held open until first IO. lazy is mainly useful when opening
for writing to avoid creating the file until it is needed.

Starting with Click 2.0, files can also be opened atomically in which
case all writes go into a separate file in the same folder and upon
completion the file will be moved over to the original location.  This
is useful if a file regularly read by other users is modified.

See :ref:`file-args` for more information.
",378,402,1202,24
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,Path,"
The path type is similar to the :class:`File` type but it performs
different checks.  First of all, instead of returning an open file
handle it returns just the filename.  Secondly, it can perform various
basic checks about what the file or directory should be.

.. versionchanged:: 6.0
   `allow_dash` was added.

:param exists: if set to true, the file or directory needs to exist for
               this value to be valid.  If this is not required and a
               file does indeed not exist, then all further checks are
               silently skipped.
:param file_okay: controls if a file is a possible value.
:param dir_okay: controls if a directory is a possible value.
:param writable: if true, a writable check is performed.
:param readable: if true, a readable check is performed.
:param resolve_path: if this is true, then the path is fully resolved
                     before the value is passed onwards.  This means
                     that it's absolute and symlinks are resolved.  It
                     will not expand a tilde-prefix, as this is
                     supposed to be done by the shell only.
:param allow_dash: If this is set to `True`, a single dash to indicate
                   standard streams is permitted.
:param path_type: optionally a string type that should be used to
                  represent the path.  The default is `None` which
                  means the return value will be either bytes or
                  unicode depending on what makes most sense given the
                  input data Click deals with.
",459,487,1565,28
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\types.py,Tuple,"
The default behavior of Click is to apply a type on a value directly.
This works well in most cases, except for when `nargs` is set to a fixed
count and different types should be used for different items.  In this
case the :class:`Tuple` type can be used.  This type can only be used
if `nargs` is set to a fixed number.

For more information see :ref:`tuple-type`.

This can be selected by using a Python tuple literal as a type.

:param types: a list of types that should be used for the tuple items.
",564,575,502,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\utils.py,LazyFile,"
A lazy file works like a regular file but it does not fully open
the file but it does perform some basic checks early to see if the
filename parameter does make sense.  This is useful for safely opening
files for writing.
",71,75,221,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\utils.py,KeepOpenFile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\utils.py,PacifyFlushWrapper,"
This wrapper is used to catch and suppress BrokenPipeErrors resulting
from ``.flush()`` being called on broken pipe during the shutdown/final-GC
of the Python interpreter. Notably ``.flush()`` is always called on
``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any
other cleanup code, and the case where the underlying file is not a broken
pipe, all calls and attributes are proxied.
",420,426,402,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_compat.py,_NonClosingTextIOWrapper,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_compat.py,_FixupStream,"
The new io interface needs more from streams than streams
traditionally implement.  As such, this fix-up code is necessary in
some circumstances.

The forcing of readable and writable flags are there because some tools
put badly patched objects on sys (one such offender are certain version
of jupyter notebook).
",90,97,312,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_compat.py,_AtomicFile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_termui_impl.py,ProgressBar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_termui_impl.py,Editor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_textwrap.py,TextWrapper,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_winconsole.py,Py_buffer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_winconsole.py,_WindowsConsoleRawIOBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_winconsole.py,_WindowsConsoleReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_winconsole.py,_WindowsConsoleWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_winconsole.py,ConsoleStream,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click\_winconsole.py,WindowsChunkedWriter,"
Wraps a stream (such as stdout), acting as a transparent proxy for all
attribute access apart from method 'write()' which we wrap to write in
limited chunks due to a Windows limitation on binary console streams.
",205,208,211,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click_completion\core.py,CompletionConfiguration,"
A class to hold the completion configuration

Attributes
----------

complete_options : bool
    Wether to complete the options or not. By default, the options are only completed after the user has entered
    a first dash '-'. Change this value to True to always complete the options, even without first typing any
    character.
match_incomplete : func
    A function use to check whether a parameter match an incomplete argument typed by the user
",46,57,449,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click_completion\core.py,Shell,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click_completion\__init__.py,DocumentedChoice,"
The choice type allows a value to be checked against a fixed set of
supported values.  All of these values have to be strings. Each value may
be associated to a help message that will be display in the error message
and during the completion.

Parameters
----------
choices : dict or Enum
    A dictionary with the possible choice as key, and the corresponding help string as value
",48,57,381,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click_didyoumean\__init__.py,DYMMixin,"
Mixin class for click MultiCommand inherited classes
to provide git-like *did-you-mean* functionality when
a certain command is not registered.
",15,18,143,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click_didyoumean\__init__.py,DYMGroup,"
click Group to provide git-like
*did-you-mean* functionality when a certain
command is not found in the group.
",46,49,110,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\click_didyoumean\__init__.py,DYMCommandCollection,"
click CommandCollection to provide git-like
*did-you-mean* functionality when a certain
command is not found in the group.
",54,57,122,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansi.py,AnsiCodes,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansi.py,AnsiCursor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansi.py,AnsiFore,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansi.py,AnsiBack,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansi.py,AnsiStyle,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansitowin32.py,StreamWrapper,"
Wraps a stream (such as stdout), acting as a transparent proxy for all
attribute access apart from method 'write()', which is delegated to our
Converter instance.
",17,20,162,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\ansitowin32.py,AnsiToWin32,"
Implements a 'write()' method which, on Windows, will strip ANSI character
sequences from the text, and if outputting to a tty, will convert them into
win32 function calls.
",65,68,172,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\win32.py,CONSOLE_SCREEN_BUFFER_INFO,"
struct in wincon.h.
",22,23,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\winterm.py,WinColor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\winterm.py,WinStyle,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\colorama\winterm.py,WinTerm,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,ZipExtFile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,ZipFile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,CertificateError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,Container,"
A generic container for when multiple values need to be returned
",195,196,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,ChainMap,"
A ChainMap groups multiple dicts (or other mappings) together
to create a single, updateable view.

The underlying mappings are stored in a list.  That list is public and can
accessed or updated using the *maps* attribute.  There is no other state.

Lookups search the underlying mappings successively until a key is found.
In contrast, writes, updates, and deletions only operate on the first
mapping.
",519,528,402,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,OrderedDict,"
Dictionary that remembers insertion order
An inherited dict maps keys to values.
        The inherited dict provides __getitem__, __len__, __contains__, and get.
        The remaining methods are order-aware.
        Big-O running times for all methods are the same as for regular dictionaries.
        The internal self.__map dictionary maps keys to links in a doubly linked list.
        The circular doubly linked list starts and ends with a sentinel element.
        The sentinel element never gets deleted (this simplifies the algorithm).
Each link is stored as a list of length three:  [PREV, NEXT, KEY].",650,651,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,ConvertingDict,"
A converting dictionary wrapper.
",918,919,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,ConvertingList,"
A converting list wrapper.
",955,956,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,ConvertingTuple,"
A converting tuple wrapper.
",978,979,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\compat.py,BaseConfigurator,"
The configurator base class which defines some useful defaults.
",990,991,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,_Cache,"
A simple cache mapping names and .dist-info paths to distributions
",46,47,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,DistributionPath,"
Represents a set of distributions installed on a path (typically sys.path).
",76,77,75,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,Distribution,"
A base class for distributions, whether installed or from indexes.
Either way, it must have some metadata, so that's all that's needed
for construction.
",318,321,152,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,BaseInstalledDistribution,"
This is the base class for installed distributions (whether PEP 376 or
legacy).
",475,477,79,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,InstalledDistribution,"
Created with the *path* of the ``.dist-info`` directory provided to the
constructor. It reads the metadata contained in ``pydist.json`` when it is
instantiated., or uses a passed in Metadata instance (useful for when
dry-run mode is being used).
",530,534,245,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,EggInfoDistribution,"
Created with the *path* of the ``.egg-info`` directory or file provided
to the constructor. It reads the metadata contained in the file itself, or
if the given path happens to be a directory, the metadata is read from the
file ``PKG-INFO`` under that directory.
",858,862,261,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\database.py,DependencyGraph,"
Represents a dependency graph between distributions.

The dependency relationships are stored in an ``adjacency_list`` that maps
distributions to a list of ``(other, label)`` tuples where  ``other``
is a distribution and the edge is labeled with ``label`` (i.e. the version
specifier, if such was provided). Also, for more efficient traversal, for
every distribution ``x``, a list of predecessors is kept in
``reverse_list[x]``. An edge from distribution ``a`` to
distribution ``b`` means that ``a`` depends on ``b``. If any missing
dependencies are found, they are stored in ``missing``, which is a
dictionary that maps distributions to a list of requirements that were not
provided by any other distributions.
",1082,1094,711,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\index.py,PackageIndex,"
This class represents a package index compatible with PyPI, the Python
Package Index.
",29,31,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,RedirectHandler,"
A class to work around a bug in some Python 3.2.x releases.
There's a bug in the base version for some 3.2.x
    (e.g. 3.2.2 on Ubuntu Oneiric). If a Location header
    returns e.g. /abc, it bails because it says the scheme ''
    is bogus, when actually it should use the request's
    URL for the scheme. See Python issue 13696.",56,57,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,Locator,"
A base class for locators - things that locate distributions.
",87,88,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,PyPIRPCLocator,"
This locator uses XML-RPC to locate distributions. It therefore
cannot be used with simple mirrors (that only mirror file content).
",405,407,131,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,PyPIJSONLocator,"
This locator uses PyPI's JSON interface. It's very limited in functionality
and probably not worth using.
",453,455,105,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,Page,"
This class represents a scraped HTML page.
",522,523,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,SimpleScrapingLocator,"
A locator which scrapes HTML pages to locate downloads for a distribution.
This runs multiple threads to do the I/O; performance is at least as good
as pip's PackageFinder, which works in an analogous fashion.
",580,583,209,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,DirectoryLocator,"
This class locates distributions in a directory tree.
",829,830,53,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,JSONLocator,"
This locator uses special extended metadata (not available on PyPI) and is
the basis of performant dependency resolution in distlib. Other locators
require archive downloads before dependencies can be determined! As you
might imagine, that can be slow.
",894,898,252,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,DistPathLocator,"
This locator finds installed distributions in a path. It can be useful for
adding to an :class:`AggregatingLocator`.
",932,934,116,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,AggregatingLocator,"
This class allows you to chain and/or merge a list of locators.
",960,961,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\locators.py,DependencyFinder,"
Locate dependencies for distributions.
",1062,1063,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\manifest.py,Manifest,"
A list of files built by on exploring the filesystem and filtered by
applying various patterns to what we find there.
",38,40,117,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\markers.py,Evaluator,"
This class is used to evaluate marker expessions.
",31,32,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\metadata.py,MetadataMissingError,"
A required metadata is missing
",29,30,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\metadata.py,MetadataConflictError,"
Attempt to read or write metadata fields that are conflictual.
",33,34,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\metadata.py,MetadataUnrecognizedVersionError,"
Unknown metadata version number.
",37,38,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\metadata.py,MetadataInvalidError,"
A metadata value is invalid",41,42,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\metadata.py,LegacyMetadata,"
The legacy metadata of a release.

Supports versions 1.0, 1.1 and 1.2 (auto-detected). You can
instantiate the class with one of these arguments (or none):
- *path*, the path to a metadata file
- *fileobj* give a file-like object with metadata as content
- *mapping* is a dict-like object
- *scheme* is a version scheme name
TODO document the mapping API and UNKNOWN default key",263,271,324,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\metadata.py,Metadata,"
The metadata of a release. This implementation uses 2.0 (JSON)
metadata where possible. If not possible, it wraps a LegacyMetadata
instance which handles the key-value metadata format.
",659,662,184,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\resources.py,ResourceCache,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\resources.py,ResourceBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\resources.py,Resource,"
A class representing an in-package resource, such as a data file. This is
not normally instantiated by user code, but rather by a
:class:`ResourceFinder` which manages the resource.
",79,82,181,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\resources.py,ResourceContainer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\resources.py,ResourceFinder,"
Resource finder for file system resources.
",120,121,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\resources.py,ZipResourceFinder,"
Resource finder for resources in .zip files.
",210,211,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\scripts.py,ScriptMaker,"
A class to copy or create scripts from source scripts or callable
specifications.
",68,70,81,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,cached_property,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,FileOperator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,ExportEntry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,Cache,"
A class implementing a cache for resources that need to live in the file system
e.g. shared libraries. This class was moved from resources to here because it
could be used by other modules, e.g. the wheel module.
",942,945,212,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,EventMixin,"
A very simple publish/subscribe system.
",986,987,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,Sequencer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,Progress,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,Transport,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,ServerProxy,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,CSVBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,CSVReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,CSVWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,Configurator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,SubprocessMixin,"
Mixin for running subprocesses and capturing their output
",1712,1713,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,HTTPSConnection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,HTTPSHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,HTTPSOnlyHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,HTTP,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,SafeTransport,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\util.py,HTTPS,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,UnsupportedVersionError,"
This is an unsupported version.
",26,27,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,Version,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,Matcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,NormalizedVersion,"
A rational version.

Good:
    1.2         # equivalent to ""1.2.0""
    1.2.0
    1.2a1
    1.2.3a2
    1.2.3b1
    1.2.3c1
    1.2.3.4
    TODO: fill this out

Bad:
    1           # minimum two numbers
    1.2a        # release level must have a release serial
    1.2.3b
",249,265,272,16
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,NormalizedMatcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,LegacyVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,LegacyMatcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,SemanticVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,SemanticMatcher,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\version.py,VersionScheme,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\wheel.py,Mounter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\wheel.py,Wheel,"
Class to build and install from Wheel files (PEP 427).
",137,138,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\__init__.py,DistlibException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\__init__.py,NullHandler,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\shutil.py,Error,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\shutil.py,SpecialFileError,"
Raised when trying to do a kind of operation (e.g. copying) which is
not supported on a special file (e.g. a named pipe)
",48,50,120,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\shutil.py,ExecError,"
Raised when a command could not be executed
",52,53,43,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\shutil.py,ReadError,"
Raised when an archive cannot be read
",55,56,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\shutil.py,RegistryError,"
Raised when a registry operation with the archiving
and unpacking registries fails
",58,60,82,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,TarError,"
Base exception.
",328,329,15,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,ExtractError,"
General exception for extract errors.
",331,332,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,ReadError,"
Exception for unreadable tar archives.
",334,335,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,CompressionError,"
Exception for unavailable compression methods.
",337,338,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,StreamError,"
Exception for unsupported operations on stream-like TarFiles.
",340,341,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,HeaderError,"
Base exception for header errors.
",343,344,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,EmptyHeaderError,"
Exception for empty headers.
",346,347,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,TruncatedHeaderError,"
Exception for truncated headers.
",349,350,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,EOFHeaderError,"
Exception for end of file headers.
",352,353,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,InvalidHeaderError,"
Exception for invalid headers.
",355,356,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,SubsequentHeaderError,"
Exception for missing and invalid extended headers.
",358,359,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,_LowLevelFile,"
Low-level file object. Supports reading and writing.
It is used instead of a regular file object for streaming
access.
",365,368,118,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,_Stream,"
Class that serves as an adapter between TarFile and
a stream-like object.  The stream-like object only
needs to have a read() or write() method and is accessed
blockwise.  Use of gzip or bzip2 compression is possible.
A stream-like object could be for example: sys.stdin,
sys.stdout, a socket, a tape device etc.

_Stream is intended to be used only internally.
",389,397,361,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,_StreamProxy,"
Small proxy class that enables transparent compression
detection for the Stream interface (mode 'r|*').
",621,623,103,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,_BZ2Proxy,"
Small proxy class that enables external file object
support for ""r:bz2"" and ""w:bz2"" modes. This is actually
a workaround for a limitation in bz2 module's BZ2File
class which (unlike gzip.GzipFile) has no support for
a file object argument.
",645,650,239,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,_FileInFile,"
A thin wrapper around an existing file object that
provides a part of its data as an individual file
object.
",708,711,108,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,ExFileObject,"
File-like object for reading an archive member.
Is returned by TarFile.extractfile().
",783,785,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,TarInfo,"
Informational class which holds the details about an
archive member given by a tar header block.
TarInfo objects are returned by TarFile.getmember(),
TarFile.getmembers() and TarFile.gettarinfo() and are
usually created internally.
",924,929,231,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,TarFile,"
The TarFile Class provides an interface to tar archives.
    
",1581,1582,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\distlib\_backport\tarfile.py,TarIter,"
Iterator Class.

for tarinfo in TarFile(...):
    suite...
",2554,2558,58,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\dotenv\ipython.py,IPythonDotEnv,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\dotenv\main.py,DotEnv,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\codec.py,Codec,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\codec.py,IncrementalEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\codec.py,IncrementalDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\codec.py,StreamWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\codec.py,StreamReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\core.py,IDNAError,"
Base exception for all IDNA-encoding related problems 
",17,18,53,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\core.py,IDNABidiError,"
Exception when bidirectional requirements are not satisfied 
",22,23,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\core.py,InvalidCodepoint,"
Exception when a disallowed or unallocated codepoint is used 
",27,28,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\idna\core.py,InvalidCodepointContext,"
Exception when the codepoint is not valid in the context it is used 
",32,33,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\iso8601\iso8601.py,ParseError,"
Raised when there is a problem parsing a date string
",71,72,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\iso8601\iso8601.py,Utc,"
UTC Timezone

        
",84,85,12,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\iso8601\iso8601.py,FixedOffset,"
Fixed offset in hours and minutes from UTC

        
",102,103,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\asyncsupport.py,AsyncLoopContext,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\asyncsupport.py,AsyncLoopContextIterator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\bccache.py,Bucket,"
Buckets are used to store the bytecode for one template.  It's created
and initialized by the bytecode cache and passed to the loading functions.

The buckets get an internal checksum from the cache assigned and use this
to automatically reject outdated cache material.  Individual bytecode
cache subclasses don't have to care about cache invalidation.
",61,67,352,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\bccache.py,BytecodeCache,"
To implement your own bytecode cache you have to subclass this class
and override :meth:`load_bytecode` and :meth:`dump_bytecode`.  Both of
these methods are passed a :class:`~jinja2.bccache.Bucket`.

A very basic bytecode cache that saves the bytecode on the file system::

    from os import path

    class MyCache(BytecodeCache):

        def __init__(self, directory):
            self.directory = directory

        def load_bytecode(self, bucket):
            filename = path.join(self.directory, bucket.key)
            if path.exists(filename):
                with open(filename, 'rb') as f:
                    bucket.load_bytecode(f)

        def dump_bytecode(self, bucket):
            filename = path.join(self.directory, bucket.key)
            with open(filename, 'wb') as f:
                bucket.write_bytecode(f)

A more advanced version of a filesystem based bytecode cache is part of
Jinja2.
",118,144,914,26
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\bccache.py,FileSystemBytecodeCache,"
A bytecode cache that stores bytecode on the filesystem.  It accepts
two arguments: The directory where the cache items are stored and a
pattern string that is used to build the filename.

If no directory is specified a default cache directory is selected.  On
Windows the user's temp directory is used, on UNIX systems a directory
is created for the user in the system temp directory.

The pattern can be used to have multiple separate caches operate on the
same directory.  The default pattern is ``'__jinja2_%s.cache'``.  ``%s``
is replaced with the cache key.

>>> bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')

This bytecode cache supports clearing of the cache using the clear method.
",196,211,706,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\bccache.py,MemcachedBytecodeCache,"
This class implements a bytecode cache that uses a memcache cache for
storing the information.  It does not enforce a specific memcache library
(tummy's memcache or cmemcache) but will accept any class that provides
the minimal interface required.

Libraries compatible with this class:

-   `werkzeug <http://werkzeug.pocoo.org/>`_.contrib.cache
-   `python-memcached <https://www.tummy.com/Community/software/python-memcached/>`_
-   `cmemcache <http://gijsbert.org/cmemcache/>`_

(Unfortunately the django cache interface is not compatible because it
does not support storing binary data, only unicode.  You can however pass
the underlying cache client to the bytecode cache which is available
as `django.core.cache.cache._client`.)

The minimal interface for the client passed to the constructor is this:

.. class:: MinimalClientInterface

    .. method:: set(key, value[, timeout])

        Stores the bytecode in the cache.  `value` is a string and
        `timeout` the timeout of the key.  If timeout is not provided
        a default timeout or no timeout should be assumed, if it's
        provided it's an integer with the number of seconds the cache
        item should exist.

    .. method:: get(key)

        Returns the value for the cache key.  If the item does not
        exist in the cache the return value must be `None`.

The other arguments to the constructor are the prefix for all keys that
is added before the actual cache key and the timeout for the bytecode in
the cache system.  We recommend a high (or no) timeout.

This bytecode cache does not support clearing of used items in the cache.
The clear method is a no-operation function.

.. versionadded:: 2.7
   Added support for ignoring memcache errors through the
   `ignore_memcache_errors` parameter.
",292,335,1785,43
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,MacroRef,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,Frame,"
Holds compile time information for us.
",131,132,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,VisitorExit,"
Exception used by the `UndeclaredNameVisitor` to signal a stop.
",193,194,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,DependencyFinderVisitor,"
A visitor that collects filter and test calls.
",197,198,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,UndeclaredNameVisitor,"
A visitor that checks if a name is accessed without being
declared.  This is different from the frame visitor as it will
not stop at closure frames.
",216,219,148,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,CompilerExit,"
Raised if the compiler encountered a situation where it just
doesn't make sense to further process the code.  Any block that
raises such an exception is not further processed.
",238,241,175,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\compiler.py,CodeGenerator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\debug.py,TracebackFrameProxy,"
Proxies a traceback frame.
",37,38,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\debug.py,ProcessedTraceback,"
Holds a Jinja preprocessed traceback for printing or reraising.
",81,82,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\debug.py,_PyObject,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\debug.py,_Traceback,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\debug.py,_PyObject,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\environment.py,Environment,"
The core component of Jinja is the `Environment`.  It contains
important shared variables like configuration, filters, tests,
globals and others.  Instances of this class may be modified if
they are not shared and if no template was loaded so far.
Modifications on environments after the first template was loaded
will lead to surprising effects and undefined behavior.

Here are the possible initialization parameters:

    `block_start_string`
        The string marking the beginning of a block.  Defaults to ``'{%'``.

    `block_end_string`
        The string marking the end of a block.  Defaults to ``'%}'``.

    `variable_start_string`
        The string marking the beginning of a print statement.
        Defaults to ``'{{'``.

    `variable_end_string`
        The string marking the end of a print statement.  Defaults to
        ``'}}'``.

    `comment_start_string`
        The string marking the beginning of a comment.  Defaults to ``'{#'``.

    `comment_end_string`
        The string marking the end of a comment.  Defaults to ``'#}'``.

    `line_statement_prefix`
        If given and a string, this will be used as prefix for line based
        statements.  See also :ref:`line-statements`.

    `line_comment_prefix`
        If given and a string, this will be used as prefix for line based
        comments.  See also :ref:`line-statements`.

        .. versionadded:: 2.2

    `trim_blocks`
        If this is set to ``True`` the first newline after a block is
        removed (block, not variable tag!).  Defaults to `False`.

    `lstrip_blocks`
        If this is set to ``True`` leading spaces and tabs are stripped
        from the start of a line to a block.  Defaults to `False`.

    `newline_sequence`
        The sequence that starts a newline.  Must be one of ``'\r'``,
        ``'\n'`` or ``'\r\n'``.  The default is ``'\n'`` which is a
        useful default for Linux and OS X systems as well as web
        applications.

    `keep_trailing_newline`
        Preserve the trailing newline when rendering templates.
        The default is ``False``, which causes a single newline,
        if present, to be stripped from the end of the template.

        .. versionadded:: 2.7

    `extensions`
        List of Jinja extensions to use.  This can either be import paths
        as strings or extension classes.  For more information have a
        look at :ref:`the extensions documentation <jinja-extensions>`.

    `optimized`
        should the optimizer be enabled?  Default is ``True``.

    `undefined`
        :class:`Undefined` or a subclass of it that is used to represent
        undefined values in the template.

    `finalize`
        A callable that can be used to process the result of a variable
        expression before it is output.  For example one can convert
        ``None`` implicitly into an empty string here.

    `autoescape`
        If set to ``True`` the XML/HTML autoescaping feature is enabled by
        default.  For more details about autoescaping see
        :class:`~jinja2.utils.Markup`.  As of Jinja 2.4 this can also
        be a callable that is passed the template name and has to
        return ``True`` or ``False`` depending on autoescape should be
        enabled by default.

        .. versionchanged:: 2.4
           `autoescape` can now be a function

    `loader`
        The template loader for this environment.

    `cache_size`
        The size of the cache.  Per default this is ``400`` which means
        that if more than 400 templates are loaded the loader will clean
        out the least recently used template.  If the cache size is set to
        ``0`` templates are recompiled all the time, if the cache size is
        ``-1`` the cache will not be cleaned.

        .. versionchanged:: 2.8
           The cache size was increased to 400 from a low 50.

    `auto_reload`
        Some loaders load templates from locations where the template
        sources may change (ie: file system or database).  If
        ``auto_reload`` is set to ``True`` (default) every time a template is
        requested the loader checks if the source changed and if yes, it
        will reload the template.  For higher performance it's possible to
        disable that.

    `bytecode_cache`
        If set to a bytecode cache object, this object will provide a
        cache for the internal Jinja bytecode so that templates don't
        have to be parsed if they were not changed.

        See :ref:`bytecode-cache` for more information.

    `enable_async`
        If set to true this enables async template execution which allows
        you to take advantage of newer Python features.  This requires
        Python 3.6 or later.
",114,234,4719,120
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\environment.py,Template,"
The central template object.  This class represents a compiled template
and is used to evaluate it.

Normally the template object is generated from an :class:`Environment` but
it also has a constructor that makes it possible to create a template
instance directly using the constructor.  It takes the same arguments as
the environment constructor but it's not possible to specify a loader.

Every template object has a few methods and members that are guaranteed
to exist.  However it's important that a template object should be
considered immutable.  Modifications on the object are not supported.

Template objects created from the constructor rather than an environment
do have an `environment` attribute that points to a temporary environment
that is probably shared with other templates created with the constructor
and compatible settings.

>>> template = Template('Hello {{ name }}!')
>>> template.render(name='John Doe') == u'Hello John Doe!'
True
>>> stream = template.stream(name='John Doe')
>>> next(stream) == u'Hello John Doe!'
True
>>> next(stream)
Traceback (most recent call last):
    ...
StopIteration
",890,917,1120,27
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\environment.py,TemplateModule,"
Represents an imported template.  All the exported names of the
template are available as attributes on this object.  Additionally
converting it into an unicode- or bytestrings renders the contents.
",1139,1142,198,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\environment.py,TemplateExpression,"
The :meth:`jinja2.Environment.compile_expression` method returns an
instance of this object.  It encapsulates the expression-like access
to the template with an expression it wraps.
",1172,1175,181,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\environment.py,TemplateStream,"
A template stream works pretty much like an ordinary python generator
but it can buffer multiple items to reduce the number of total iterations.
Per default the output is unbuffered which means that for every unbuffered
instruction in the template one unicode string is yielded.

If buffering is enabled with a buffer size of 5, five items are combined
into a new unicode string.  This is mainly useful if you are streaming
big templates to a client via WSGI which flushes after each iteration.
",1191,1199,494,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,TemplateError,"
Baseclass for all template errors.
",15,16,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,TemplateNotFound,"
Raised if a template does not exist.
",45,46,36,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,TemplatesNotFound,"
Like :class:`TemplateNotFound` but raised if multiple templates
are selected.  This is a subclass of :class:`TemplateNotFound`
exception, so just catching the base exception will catch both.

.. versionadded:: 2.2
",65,70,213,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,TemplateSyntaxError,"
Raised to tell the user that there is a problem with the template.
",81,82,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,TemplateAssertionError,"
Like a template syntax error, but covers cases where something in the
template caused an error at compile time that wasn't necessarily caused
by a syntax error.  However it's a direct subclass of
:exc:`TemplateSyntaxError` and has the same attributes.
",120,124,251,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,TemplateRuntimeError,"
A generic runtime error in the template engine.  Under some situations
Jinja may raise this exception.
",128,130,102,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,UndefinedError,"
Raised if a template tries to operate on :class:`Undefined`.
",134,135,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,SecurityError,"
Raised if a template tries to do something insecure if the
sandbox is enabled.
",138,140,78,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\exceptions.py,FilterArgumentError,"
This error is raised if a filter was called with inappropriate
arguments
",144,146,72,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,ExtensionRegistry,"
Gives the extension an unique identifier.
",35,36,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,Extension,"
Extensions can be used to add extra functionality to the Jinja template
system at the parser level.  Custom extensions are bound to an environment
but may not store environment specific data on `self`.  The reason for
this is that an extension can be bound to another environment (for
overlays) by creating a copy and reassigning the `environment` attribute.

As extensions are created by the environment they cannot accept any
arguments for configuration.  One may want to work around that by using
a factory function, but that is not possible as extensions are identified
by their import name.  The correct way to configure the extension is
storing the configuration values on the environment.  Because this way the
environment ends up acting as central configuration storage the
attributes may clash which is why extensions have to ensure that the names
they choose for configuration are not too generic.  ``prefix`` for example
is a terrible name, ``fragment_cache_prefix`` on the other hand is a good
name as includes the name of the extension (fragment cache).
",44,60,1066,16
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,InternationalizationExtension,"
This extension adds gettext support to Jinja2.
",159,160,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,ExprStmtExtension,"
Adds a `do` tag to Jinja2 that works like the print statement just
that it doesn't print the return value.
",407,409,106,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,LoopControlExtension,"
Adds break and continue to the template engine.
",419,420,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,WithExtension,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,AutoEscapeExtension,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\ext.py,_CommentFinder,"
Helper class to find comments in a token stream.  Can only
find comments for gettext calls forwards.  Once the comment
from line 4 is found, a comment for line 1 will not return a
usable value.
",506,510,193,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\idtracking.py,Symbols,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\idtracking.py,RootVisitor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\idtracking.py,FrameSymbolVisitor,"
A visitor for `Frame.inspect`.
",204,205,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\lexer.py,Failure,"
Class that raises a `TemplateSyntaxError` if called.
Used by the `Lexer` to specify known errors.
",220,222,97,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\lexer.py,Token,"
Token class.
",233,234,12,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\lexer.py,TokenStreamIterator,"
The iterator for tokenstreams.  Iterate over the stream
until the eof token is reached.
",276,278,87,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\lexer.py,TokenStream,"
A token stream is an iterable that yields :class:`Token`\s.  The
parser however does not iterate over it but calls :meth:`next` to go
one token ahead.  The current active token is stored as :attr:`current`.
",297,300,206,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\lexer.py,Lexer,"
Class that implements a lexer for a given environment. Automatically
created by the environment class, usually you don't have to do that.

Note that the lexer is not automatically bound to an environment.
Multiple environments can share the same lexer.
",413,418,252,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,BaseLoader,"
Baseclass for all loaders.  Subclass this and override `get_source` to
implement a custom loading mechanism.  The environment provides a
`get_template` method that calls the loader's `load` method to get the
:class:`Template` object.

A very basic example for a loader that looks up templates on the file
system could look like this::

    from jinja2 import BaseLoader, TemplateNotFound
    from os.path import join, exists, getmtime

    class MyLoader(BaseLoader):

        def __init__(self, path):
            self.path = path

        def get_source(self, environment, template):
            path = join(self.path, template)
            if not exists(path):
                raise TemplateNotFound(template)
            mtime = getmtime(path)
            with file(path) as f:
                source = f.read().decode('utf-8')
            return source, path, lambda: mtime == getmtime(path)
",38,62,896,24
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,FileSystemLoader,"
Loads templates from the file system.  This loader can find templates
in folders on the file system and is the preferred way to load them.

The loader takes the path to the templates as string, or if multiple
locations are wanted a list of them which is then looked up in the
given order::

>>> loader = FileSystemLoader('/path/to/templates')
>>> loader = FileSystemLoader(['/path/to/templates', '/other/path'])

Per default the template encoding is ``'utf-8'`` which can be changed
by setting the `encoding` parameter to something else.

To follow symbolic links, set the *followlinks* parameter to ``True``::

>>> loader = FileSystemLoader('/path/to/templates', followlinks=True)

.. versionchanged:: 2.8+
   The *followlinks* parameter was added.
",139,158,749,19
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,PackageLoader,"
Load templates from python eggs or packages.  It is constructed with
the name of the python package and the path to the templates in that
package::

    loader = PackageLoader('mypackage', 'views')

If the package path is not given, ``'templates'`` is assumed.

Per default the template encoding is ``'utf-8'`` which can be changed
by setting the `encoding` parameter to something else.  Due to the nature
of eggs it's only possible to reload templates if the package was loaded
from the file system and not a zip file.
",206,218,519,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,DictLoader,"
Loads a template from a python dict.  It's passed a dict of unicode
strings bound to template names.  This loader is useful for unittesting:

>>> loader = DictLoader({'index.html': 'source here'})

Because auto reloading is rarely useful this is disabled per default.
",271,277,267,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,FunctionLoader,"
A loader that is passed a function which does the loading.  The
function receives the name of the template and has to return either
an unicode string with the template source, a tuple in the form ``(source,
filename, uptodatefunc)`` or `None` if the template does not exist.

>>> def load_template(name):
...     if name == 'index.html':
...         return '...'
...
>>> loader = FunctionLoader(load_template)

The `uptodatefunc` is a function that is called if autoreload is enabled
and has to return `True` if the template is still up to date.  For more
details have a look at :meth:`BaseLoader.get_source` which has the same
return value.
",293,308,641,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,PrefixLoader,"
A loader that is passed a dict of loaders where each loader is bound
to a prefix.  The prefix is delimited from the template by a slash per
default, which can be changed by setting the `delimiter` argument to
something else::

    loader = PrefixLoader({
        'app1':     PackageLoader('mypackage.app1'),
        'app2':     PackageLoader('mypackage.app2')
    })

By loading ``'app1/index.html'`` the file from the app1 package is loaded,
by loading ``'app2/index.html'`` the file from the second.
",323,335,501,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,ChoiceLoader,"
This loader works like the `PrefixLoader` just that no prefix is
specified.  If a template could not be found by one loader the next one
is tried.

>>> loader = ChoiceLoader([
...     FileSystemLoader('/path/to/user/templates'),
...     FileSystemLoader('/path/to/system/templates')
... ])

This is useful if you want to allow users to override builtin templates
from a different location.
",377,388,389,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,_TemplateModule,"
Like a normal module but with support for weak references
",418,419,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\loaders.py,ModuleLoader,"
This loader loads templates from precompiled templates.

Example usage:

>>> loader = ChoiceLoader([
...     ModuleLoader('/path/to/compiled/templates'),
...     FileSystemLoader('/path/to/templates')
... ])

Templates can be precompiled with :meth:`Environment.compile_templates`.
",422,432,281,10
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\meta.py,TrackingCodeGenerator,"
We abuse the code generator for introspection.
",18,19,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nativetypes.py,NativeCodeGenerator,"
A code generator which avoids injecting ``to_string()`` calls around the
internal code Jinja uses to render templates.
",35,37,118,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nativetypes.py,NativeTemplate,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nativetypes.py,NativeEnvironment,"
An environment that renders templates to native Python types.
",217,218,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Impossible,"
Raised if the node could not perform a requested action.
",56,57,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,NodeType,"
A metaclass for nodes that handles the field and attribute
inheritance.  fields and attributes from the parent class are
automatically forwarded to the child.
",60,63,158,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,EvalContext,"
Holds evaluation time information.  Custom attributes can be attached
to it in extensions.
",77,79,90,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Node,"
Baseclass for all Jinja2 nodes.  There are a number of nodes available
of different types.  There are four major types:

-   :class:`Stmt`: statements
-   :class:`Expr`: expressions
-   :class:`Helper`: helper nodes
-   :class:`Template`: the outermost wrapper node

All nodes have fields and attributes.  Fields may be other nodes, lists,
or arbitrary values.  Fields are passed to the constructor as regular
positional arguments, attributes as keyword arguments.  Each node has
two attributes: `lineno` (the line number of the node) and `environment`.
The `environment` attribute is set at the end of the parsing process for
all nodes automatically.
",108,122,651,14
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Stmt,"
Base node for all statements.
",276,277,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Helper,"
Nodes that exist in a specific context only.
",281,282,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Template,"
Node that represents a template.  This must be the outermost node that
is passed to the compiler.
",286,288,97,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Output,"
A node that holds multiple expressions which are then printed out.
This is used both for the `print` statement and the regular template data.
",293,295,141,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Extends,"
Represents an extends statement.
",300,301,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,For,"
The for loop.  `target` is the target for the iteration (usually a
:class:`Name` or :class:`Tuple`), `iter` the iterable.  `body` is a list
of nodes that are used as loop-body, and `else_` a list of nodes for the
`else` block.  If no else node exists it has to be an empty list.

For filtered nodes an expression can be stored as `test`, otherwise `None`.
",305,311,355,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,If,"
If `test` is true, `body` is rendered, else `else_`.
",316,317,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Macro,"
A macro definition.  `name` is the name of the macro, `args` a list of
arguments and `defaults` a list of defaults if there are any.  `body` is
a list of nodes for the macro body.
",321,324,179,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,CallBlock,"
Like a macro without a name but a call instead.  `call` is called with
the unnamed macro as `caller` argument this node holds.
",329,331,126,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,FilterBlock,"
Node for filter sections.
",336,337,25,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,With,"
Specific node for with statements.  In older versions of Jinja the
with statement was implemented on the base of the `Scope` node instead.

.. versionadded:: 2.9.3
",341,345,163,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Block,"
A node that represents a block.
",350,351,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Include,"
A node that represents the include tag.
",355,356,39,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Import,"
A node that represents the import tag.
",360,361,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,FromImport,"
A node that represents the from import tag.  It's important to not
pass unsafe names to the name attribute.  The compiler translates the
attribute lookups directly into getattr calls and does *not* use the
subscript callback of the interface.  As exported variables may not
start with double underscores (which the parser asserts) this is not a
problem for regular Jinja code, but if this node is used in an extension
extra care must be taken.

The list of names may contain tuples if aliases are wanted.
",365,374,504,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,ExprStmt,"
A statement that evaluates an expression and discards the result.
",379,380,65,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Assign,"
Assigns an expression to a target.
",384,385,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,AssignBlock,"
Assigns a block to a target.
",389,390,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Expr,"
Baseclass for all expressions.
",394,395,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,BinExpr,"
Baseclass for all binary expressions.
",416,417,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,UnaryExpr,"
Baseclass for all unary expressions.
",435,436,36,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Name,"
Looks up a name or stores a value in a name.
The `ctx` of the node can be one of the following values:

-   `store`: store a value in the name
-   `load`: load that name
-   `param`: like `store` but if the name was defined as function parameter.
",454,460,246,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,NSRef,"
Reference to a namespace value assignment
",469,470,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Literal,"
Baseclass for literals.
",481,482,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Const,"
All constant values.  The parser will return this node for simple
constants such as ``42`` or ``""foo""`` but it can be used to store more
complex values such as lists too.  Only constants with a safe
representation (objects where ``eval(repr(x)) == x`` is true).
",486,490,261,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,TemplateData,"
A constant template string.
",516,517,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Tuple,"
For loop unpacking and some other things like multiple arguments
for subscripts.  Like for :class:`Name` `ctx` specifies if the tuple
is used for loading the names or storing.
",529,532,175,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,List,"
Any list literal such as ``[1, 2, 3]``
",547,548,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Dict,"
Any dict literal such as ``{1: 2, 3: 4}``.  The items must be a list of
:class:`Pair` nodes.
",556,558,92,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Pair,"
A key, value pair for dicts.
",567,568,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Keyword,"
A key, value pair for keyword arguments where key is a string.
",576,577,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,CondExpr,"
A conditional expression (inline if expression).  (``{{
foo if bar else baz }}``)
",585,587,81,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Filter,"
This node applies a filter on an expression.  `name` is the name of
the filter, the rest of the fields are the same as for :class:`Call`.

If the `node` of a filter is `None` the contents of the last buffer are
filtered.  Buffers are created by macros and filter blocks.
",622,627,270,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Test,"
Applies a test on an expression.  `name` is the name of the test, the
rest of the fields are the same as for :class:`Call`.
",670,672,123,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Call,"
Calls an expression.  `args` is a list of arguments, `kwargs` a list
of keyword arguments (list of :class:`Keyword` nodes), and `dyn_args`
and `dyn_kwargs` has to be either `None` or a node that is used as
node for dynamic positional (``*args``) or keyword (``**kwargs``)
arguments.
",693,698,282,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Getitem,"
Get an attribute or item from an expression and prefer the item.
",703,704,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Getattr,"
Get an attribute or item from an expression that is a ascii-only
bytestring and prefer the attribute.
",721,723,101,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Slice,"
Represents a slice object.  This must only be used as argument for
:class:`Subscript`.
",741,743,86,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Concat,"
Concatenates the list of expressions provided after converting them to
unicode.
",756,758,79,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Compare,"
Compares an expression with some other expressions.  `ops` must be a
list of :class:`Operand`\s.
",767,769,96,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Operand,"
Holds an operator and an expression.
",786,787,36,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Mul,"
Multiplies the left with the right node.
",796,797,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Div,"
Divides the left by the right node.
",801,802,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,FloorDiv,"
Divides the left by the right node and truncates conver the
result into an integer by truncating.
",806,808,97,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Add,"
Add the left to the right node.
",813,814,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Sub,"
Subtract the right from the left node.
",818,819,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Mod,"
Left modulo right.
",823,824,18,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Pow,"
Left to the power of right.
",828,829,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,And,"
Short circuited AND.
",833,834,20,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Or,"
Short circuited OR.
",842,843,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Not,"
Negate the expression.
",851,852,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Neg,"
Make the expression negative.
",856,857,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Pos,"
Make the expression positive (noop for most expressions)
",861,862,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,EnvironmentAttribute,"
Loads an attribute from the environment object.  This is useful for
extensions that want to call a callback stored on the environment.
",869,871,134,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,ExtensionAttribute,"
Returns the attribute of an extension bound to the environment.
The identifier is the identifier of the :class:`Extension`.

This node is usually constructed by calling the
:meth:`~jinja2.ext.Extension.attr` method on an extension.
",876,881,231,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,ImportedName,"
If created with an import name the import name is returned on node
access.  For example ``ImportedName('cgi.escape')`` returns the `escape`
function from the cgi module on evaluation.  Imports are optimized by the
compiler so there is no need to assign them to local variables.
",886,890,277,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,InternalName,"
An internal name in the compiler.  You cannot create these nodes
yourself but the parser provides a
:meth:`~jinja2.parser.Parser.free_identifier` method that creates
a new identifier for you.  This identifier is not available from the
template and is not threated specially by the compiler.
",895,900,290,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,MarkSafe,"
Mark the wrapped expression as safe (wrap it as `Markup`).
",909,910,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,MarkSafeIfAutoescape,"
Mark the wrapped expression as safe (wrap it as `Markup`) but
only if autoescaping is active.

.. versionadded:: 2.5
",918,922,116,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,ContextReference,"
Returns the current template context.  It can be used like a
:class:`Name` node, with a ``'load'`` ctx and will return the
current :class:`~jinja2.runtime.Context` object.

Here an example that assigns the current template name to a
variable named `foo`::

    Assign(Name('foo', ctx='store'),
           Getattr(ContextReference(), 'name'))
",936,945,341,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Continue,"
Continue a loop.
",949,950,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Break,"
Break a loop.
",953,954,13,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,Scope,"
An artificial scope.
",957,958,20,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,OverlayScope,"
An overlay scope for extensions.  This is a largely unoptimized scope
that however can be used to introduce completely arbitrary variables into
a sub scope from a dictionary or dictionary like object.  The `context`
field has to evaluate to a dictionary object.

Example usage::

    OverlayScope(context=self.call_method('get_context'),
                 body=[...])

.. versionadded:: 2.10
",962,973,390,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,EvalContextModifier,"
Modifies the eval context.  For each option that should be modified,
a :class:`Keyword` has to be added to the :attr:`options` list.

Example to change the `autoescape` setting::

    EvalContextModifier(options=[Keyword('autoescape', Const(True))])
",978,984,249,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\nodes.py,ScopedEvalContextModifier,"
Modifies the eval context and reverts it later.  Works exactly like
:class:`EvalContextModifier` but will only modify the
:class:`~jinja2.nodes.EvalContext` for nodes in the :attr:`body`.
",989,992,187,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\optimizer.py,Optimizer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\parser.py,Parser,"
This is the central parsing class Jinja2 uses.  It's passed to
extensions and can be used to parse expressions or statements.
",33,35,125,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,TemplateReference,"
The `self` in templates.
",81,82,24,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,ContextMeta,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,Context,"
The template context holds the variables of a template.  It stores the
values passed to the template and also the names the template exports.
Creating instances is neither supported nor useful as it's created
automatically at various stages of the template evaluation and should not
be created by hand.

The context is immutable.  Modifications on :attr:`parent` **must not**
happen and modifications on :attr:`vars` are allowed from generated
template code only.  Template filters and global functions marked as
:func:`contextfunction`\s get the active context passed as first argument
and are allowed to access the context read-only.

The template context supports read only dict operations (`get`,
`keys`, `values`, `items`, `iterkeys`, `itervalues`, `iteritems`,
`__getitem__`, `__contains__`).  Additionally there is a :meth:`resolve`
method that doesn't fail with a `KeyError` but returns an
:class:`Undefined` object for missing variables.
",134,151,946,17
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,BlockReference,"
One block on a template reference.
",325,326,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,LoopContextBase,"
A loop context for dynamic iteration.
",352,353,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,LoopContext,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,LoopContextIterator,"
The iterator for a loop context.
",461,462,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,Macro,"
Wraps a macro function.
",483,484,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,Undefined,"
The default undefined type.  This undefined type can be printed and
iterated over, but every other access will raise an :exc:`jinja2.exceptions.UndefinedError`:

>>> foo = Undefined(name='foo')
>>> str(foo)
''
>>> not foo
True
>>> foo + 42
Traceback (most recent call last):
  ...
jinja2.exceptions.UndefinedError: 'foo' is undefined
",592,604,333,12
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,DebugUndefined,"
An undefined that returns the debug info when printed.

>>> foo = DebugUndefined(name='foo')
>>> str(foo)
'{{ foo }}'
>>> not foo
True
>>> foo + 42
Traceback (most recent call last):
  ...
jinja2.exceptions.UndefinedError: 'foo' is undefined
",759,770,241,11
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,StrictUndefined,"
An undefined that barks on print and iteration as well as boolean
tests and all kinds of comparisons.  In other words: you can do nothing
with it except checking if it's defined using the `defined` test.

>>> foo = StrictUndefined(name='foo')
>>> str(foo)
Traceback (most recent call last):
  ...
jinja2.exceptions.UndefinedError: 'foo' is undefined
>>> not foo
Traceback (most recent call last):
  ...
jinja2.exceptions.UndefinedError: 'foo' is undefined
>>> foo + 42
Traceback (most recent call last):
  ...
jinja2.exceptions.UndefinedError: 'foo' is undefined
",786,803,562,17
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\runtime.py,LoggingUndefined,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\sandbox.py,_MagicFormatMapping,"
This class implements a dummy wrapper to fix a bug in the Python
standard library for string formatting.

See https://bugs.python.org/issue13598 for information about why
this is necessary.
",107,112,189,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\sandbox.py,SandboxedEnvironment,"
The sandboxed environment.  It works like the regular environment but
tells the compiler to generate sandboxed code.  Additionally subclasses of
this environment may override the methods that tell the runtime what
attributes or functions are safe to access.

If the template tries to access insecure code a :exc:`SecurityError` is
raised.  However also other exceptions may occur during the rendering so
the caller has to ensure that all exceptions are caught.
",236,244,460,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\sandbox.py,ImmutableSandboxedEnvironment,"
Works exactly like the regular `SandboxedEnvironment` but does not
permit modifications on the builtin mutable objects `list`, `set`, and
`dict` by using the :func:`modifies_known_mutable` function.
",431,434,198,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\sandbox.py,SandboxedFormatterMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\sandbox.py,SandboxedFormatter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\sandbox.py,SandboxedEscapeFormatter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\utils.py,LRUCache,"
A simple LRU Cache implementation.
this is fast for small capacities (something below 1000) but doesn't
    scale.  But as long as it's only used as storage for templates this
    won't do any harm.",307,308,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\utils.py,Cycler,"
A cycle helper for templates.
",574,575,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\utils.py,Joiner,"
A joining helper for templates.
",602,603,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\utils.py,Namespace,"
A namespace object that can hold arbitrary attributes.  It may be
initialized from a dictionary or with keyword argments.
",616,618,121,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\visitor.py,NodeVisitor,"
Walks the abstract syntax tree and call visitor functions for every
node found.  The visitor functions may return values which will be
forwarded by the `visit` method.

Per default the visitor functions for the nodes are ``'visit_'`` +
class name of the node.  So a `TryFinally` node visit function would
be `visit_TryFinally`.  This behavior can be changed by overriding
the `get_visitor` function.  If no visitor function exists for a node
(return value `None`) the `generic_visit` visitor is used instead.
",15,24,508,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\visitor.py,NodeTransformer,"
Walks the abstract syntax tree and allows modifications of nodes.

The `NodeTransformer` will walk the AST and use the return value of the
visitor functions to replace or remove the old node.  If the return
value of the visitor function is `None` the node will be removed
from the previous location otherwise it's replaced with the return
value.  The return value may be the original node in which case no
replacement takes place.
",48,56,430,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\jinja2\_compat.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\markupsafe\__init__.py,Markup,"
A string that is ready to be safely inserted into an HTML or XML
document, either because it was escaped or because it was marked
safe.

Passing an object to the constructor converts it to text and wraps
it to mark it safe without escaping. To escape the text, use the
:meth:`escape` class method instead.

>>> Markup('Hello, <em>World</em>!')
Markup('Hello, <em>World</em>!')
>>> Markup(42)
Markup('42')
>>> Markup.escape('Hello, <em>World</em>!')
Markup('Hello &lt;em&gt;World&lt;/em&gt;!')

This implements the ``__html__()`` interface that some frameworks
use. Passing an object that implements ``__html__()`` will wrap the
output of that method, marking it safe.

>>> class Foo:
...     def __html__(self):
...         return '<a href=""/foo"">foo</a>'
...
>>> Markup(Foo())
Markup('<a href=""/foo"">foo</a>')

This is a subclass of the text type (``str`` in Python 3,
``unicode`` in Python 2). It has the same methods as that type, but
all methods escape their arguments and return a ``Markup`` instance.

>>> Markup('<em>%s</em>') % 'foo & bar'
Markup('<em>foo &amp; bar</em>')
>>> Markup('<em>Hello</em> ') + '<foo>'
Markup('<em>Hello</em> &lt;foo&gt;')
",32,66,1157,34
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\markupsafe\__init__.py,_MagicFormatMapping,"
This class implements a dummy wrapper to fix a bug in the Python
standard library for string formatting.

See http://bugs.python.org/issue13598 for information about why
this is necessary.
",228,233,188,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\markupsafe\__init__.py,_MarkupEscapeHelper,"
Helper for Markup.__mod__
",294,295,25,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\markupsafe\__init__.py,EscapeFormatter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\orderedmultidict\itemlist.py,itemnode,"
Dictionary key:value items wrapped in a node to be members of itemlist, the
doubly linked list defined below.
",20,22,109,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\orderedmultidict\itemlist.py,itemlist,"
Doubly linked list of itemnodes.

This class is used as the key:value item storage of orderedmultidict.
Methods below were only added as needed for use with orderedmultidict, so
some otherwise common list methods may be missing.
",34,39,228,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\orderedmultidict\orderedmultidict.py,omdict,"
Ordered Multivalue Dictionary.

A multivalue dictionary is a dictionary that can store multiple values per
key. An ordered multivalue dictionary is a multivalue dictionary that
retains the order of insertions and deletions.

Internally, items are stored in a doubly linked list, self._items. A
dictionary, self._map, is also maintained and stores an ordered list of
linked list node references, one for each value associated with that key.

Standard dict methods interact with the first value associated with a given
key. This means that omdict retains method parity with dict, and a dict
object can be replaced with an omdict object and all interaction will
behave identically. All dict methods that retain parity with omdict are:

  get(), setdefault(), pop(), popitem(),
  clear(), copy(), update(), fromkeys(), len()
  __getitem__(), __setitem__(), __delitem__(), __contains__(),
  items(), keys(), values(), iteritems(), iterkeys(), itervalues(),

Optional parameters have been added to some dict methods, but because the
added parameters are optional, existing use remains unaffected. An optional
<key> parameter has been added to these methods:

  items(), values(), iteritems(), itervalues()

New methods have also been added to omdict. Methods with 'list' in their
name interact with lists of values, and methods with 'all' in their name
interact with all items in the dictionary, including multiple items with
the same key.

The new omdict methods are:

  load(), size(), reverse(),
  getlist(), add(), addlist(), set(), setlist(), setdefaultlist(),
  poplist(), popvalue(), popvalues(), popitem(), poplistitem(),
  allitems(), allkeys(), allvalues(), lists(), listitems(),
  iterallitems(), iterallkeys(), iterallvalues(), iterlists(),
    iterlistitems()

Explanations and examples of the new methods above can be found in the
function comments below and online at

  https://github.com/gruns/orderedmultidict

Additional omdict information and documentation can also be found at the
above url.
",94,141,2006,47
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,InvalidMarker,"
An invalid marker was found, users should refer to PEP 508.
",29,30,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,UndefinedComparison,"
An invalid operation was attempted on a value that doesn't support it.
",35,36,70,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,UndefinedEnvironmentName,"
A name was attempted to be used that does not exist inside of the
environment.
",41,43,78,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,Node,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,Variable,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,Value,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,Op,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\markers.py,Marker,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\requirements.py,InvalidRequirement,"
An invalid requirement was found, users should refer to PEP 508.
",19,20,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\requirements.py,Requirement,"
Parse a requirement.

Parse a given requirement string into its parts, such as name, specifier,
URL, and extras. Raises InvalidRequirement on a badly-formed requirement
string.
TODO: Can we test whether something is contained within a requirement?
          If so how do we do that? Do we need to test against the _name_ of
          the thing as well as the version? What about the markers?
    TODO: Can we normalize the name and extra name?",79,84,176,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\specifiers.py,InvalidSpecifier,"
An invalid specifier was found, users should refer to PEP 440.
",16,17,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\specifiers.py,BaseSpecifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\specifiers.py,_IndividualSpecifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\specifiers.py,LegacySpecifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\specifiers.py,Specifier,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\specifiers.py,SpecifierSet,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\version.py,InvalidVersion,"
An invalid version was found, users should refer to PEP 440.
",34,35,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\version.py,_BaseVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\version.py,LegacyVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\version.py,Version,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\_compat.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\_structures.py,Infinity,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\packaging\_structures.py,NegativeInfinity,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\actions\init.py,PipCmd,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\add.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\clean.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\freeze.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\init.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\install.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\lock.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\options.py,Project,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\options.py,Option,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\options.py,ArgumentGroup,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\remove.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\sync.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\upgrade.py,Command,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\cli\_base.py,BaseCommand,"
A CLI command.
    
",13,14,14,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\reporters.py,StdOutReporter,"
Simple reporter that prints things to stdout.
    
",37,38,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\_pip.py,_PipCommand,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\_pip.py,WheelBuildError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\_pip.py,RequirementUninstaller,"
A context manager to remove a package for the inner block.

This uses `UninstallPathSet` to control the workflow. If the inner block
exits correctly, the uninstallation is committed, otherwise rolled back.
",225,229,205,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\_pip.py,NoopInstaller,"
An installer.

This class is not designed to be instantiated by itself, but used as a
common interface for subclassing.

An installer has two methods, `prepare()` and `install()`. Neither takes
arguments, and should be called in that order to prepare an installation
operation, and to actually install things.
",276,284,309,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\_pip.py,EditableInstaller,"
Installer to handle editable.
    
",293,294,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\internals\_pip.py,WheelInstaller,"
Installer by building a wheel.

The wheel is built during `prepare()`, and installed in `install()`.
",309,312,100,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\caches.py,HashCache,"
Caches hashes of PyPI artifacts so we do not need to re-download them.

Hashes are only cached when the URL appears to contain a hash in it and the
cache key includes the hash value returned from the server). This ought to
avoid ssues where the location on the server changes.
",24,29,276,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\caches.py,CorruptCacheError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\caches.py,_JSONCache,"
A persistent cache backed by a JSON file.

The cache file is written to the appropriate user cache dir for the
current platform, i.e.

    ~/.cache/pip-tools/depcache-pyX.Y.json

Where X.Y indicates the Python version.
",103,111,218,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\caches.py,DependencyCache,"
Cache the dependency of cancidates.
    
",206,207,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\caches.py,RequiresPythonCache,"
Cache a candidate's Requires-Python information.
    
",212,213,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\lockers.py,AbstractLocker,"
Helper class to produce a new lock file for a project.

This is not intended for instantiation. You should use one of its concrete
subclasses instead. The class contains logic to:

* Prepare a project for locking
* Perform the actually resolver invocation
* Convert resolver output into lock file format
* Update the project to have the new lock file
",82,91,350,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\lockers.py,BasicLocker,"
Basic concrete locker.

This takes a project, generates a lock file from its Pipfile, and sets
the lock file property to the project.
",167,171,133,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\lockers.py,PinReuseLocker,"
A specialized locker to handle re-locking based on existing pins.

See :class:`.providers.PinReuseProvider` for more information.
",180,183,129,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\lockers.py,EagerUpgradeLocker,"
A specialized locker to handle the ""eager"" upgrade strategy.

See :class:`.providers.EagerUpgradeProvider` for more
information.
",200,204,128,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\metadata.py,MetaSet,"
Representation of a ""metadata set"".

This holds multiple metadata representaions. Each metadata representation
includes a marker, and a specifier set of Python versions required.
",24,28,178,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\projects.py,ProjectFile,"
A file in the Pipfile project.
    
",52,53,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\projects.py,Project,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\providers.py,BasicProvider,"
Provider implementation to interface with `requirementslib.Requirement`.
    
",20,21,72,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\providers.py,PinReuseProvider,"
A provider that reuses preferred pins if possible.

This is used to implement ""add"", ""remove"", and ""only-if-needed upgrade"",
where already-pinned candidates in Pipfile.lock should be preferred.
",128,132,193,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\providers.py,EagerUpgradeProvider,"
A specialized provider to handle an ""eager"" upgrade strategy.

An eager upgrade tries to upgrade not only packages specified, but also
their dependencies (recursively). This contrasts to the ""only-if-needed""
default, which only promises to upgrade the specified package, and
prevents touching anything else if at all possible.

The provider is implemented as to keep track of all dependencies of the
specified packages to upgrade, and free their pins when it has a chance.
",149,158,472,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\synchronizers.py,Synchronizer,"
Helper class to install packages from a project's lock file.
    
",127,128,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\passa\models\synchronizers.py,Cleaner,"
Helper class to clean packages not in a project's lock file.
    
",202,203,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_Flavour,"
A flavour implements a particular (platform-specific) set of path
semantics.
",192,194,76,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_WindowsFlavour,"Reference for Windows paths can be found at
    http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx",258,259,1,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_PosixFlavour,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_Accessor,"
An accessor implements a particular (system-specific or not) way of
accessing paths on the filesystem.
",531,533,102,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_NormalAccessor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_Selector,"
A selector matches a specific glob pattern part against the children
of a given path.
",626,628,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_TerminatingSelector,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_PreciseSelector,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_WildcardSelector,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_RecursiveWildcardSelector,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,_PathParents,"
This object provides sequence-like access to the logical ancestors
of a path.  Don't try to construct it yourself.
",758,760,114,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,PurePath,"
PurePath represents a filesystem path and offers operations which
don't imply any actual filesystem I/O.  Depending on your system,
instantiating a PurePath will return either a PurePosixPath or a
PureWindowsPath object.  You can also instantiate either of these classes
directly, regardless of your system.
",787,792,307,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,PurePosixPath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,PureWindowsPath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,Path,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,PosixPath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,WindowsPath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,FILETIME,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pathlib2\__init__.py,BY_HANDLE_FILE_INFORMATION,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\colorlog.py,LogFormatter,"
Log formatter with colour support
    
",41,42,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\envbuild.py,BuildEnvironment,"
Context manager to install build deps in a simple temporary environment

Based on code I wrote for pip, which is MIT licensed.
",26,29,126,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\wrappers.py,BackendUnavailable,"
Will be raised if the backend cannot be imported in the hook process.
",24,25,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\wrappers.py,UnsupportedOperation,"
May be raised by build_sdist if the backend indicates that it can't.
",28,29,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\wrappers.py,Pep517HookCaller,"
A wrapper around a source directory to be built with a PEP 517 backend.

source_dir : The path to the source directory, containing pyproject.toml.
backend : The build backend spec, as per PEP 517, from pyproject.toml.
",41,45,217,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\_in_process.py,BackendUnavailable,"
Raised if we cannot import the backend
",26,27,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\_in_process.py,_DummyException,"
Nothing should ever raise this exception
",159,160,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pep517\_in_process.py,GotUnsupportedOperation,"
For internal use when backend raises UnsupportedOperation
",163,164,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\ANSI.py,term,"
This class is an abstract, generic terminal.
This does nothing. This is a placeholder that
provides a common base class for other terminals
such as an ANSI terminal. 
",183,187,165,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\ANSI.py,ANSI,"
This class implements an ANSI (VT100) terminal.
It is a stream filter that recognizes ANSI terminal
escape sequences and maintains the state of a screen object. 
",194,197,160,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\exceptions.py,ExceptionPexpect,"
Base class for all exceptions raised by this module.
    
",7,8,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\exceptions.py,EOF,"
Raised when EOF is read from a child.
This usually means the child has exited.
",30,32,78,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\exceptions.py,TIMEOUT,"
Raised when a read time exceeds the timeout. 
",35,36,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\expect.py,Expecter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\expect.py,searcher_string,"
This is a plain string search helper for the spawn.expect_any() method.
This helper class is for speed. For more powerful regex patterns
see the helper class, searcher_re.

Attributes:

    eof_index     - index of EOF, or -1
    timeout_index - index of TIMEOUT, or -1

After a successful match by the search() method the following attributes
are available:

    start - index into the buffer, first byte of match
    end   - index into the buffer, first byte after match
    match - the matching string itself
",126,141,511,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\expect.py,searcher_re,"
This is regular expression string search helper for the
spawn.expect_any() method. This helper class is for powerful
pattern matching. For speed, see the helper class, searcher_string.

Attributes:

    eof_index     - index of EOF, or -1
    timeout_index - index of TIMEOUT, or -1

After a successful match by the search() method the following attributes
are available:

    start - index into the buffer, first byte of match
    end   - index into the buffer, first byte after match
    match - the re.match object returned by a successful re.search
",221,236,552,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\fdpexpect.py,fdspawn,"
This is like pexpect.spawn but allows you to supply your own open file
descriptor. For example, you could use it to read through a file looking
for patterns, or to control a modem or serial device. 
",32,35,197,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\FSM.py,ExceptionFSM,"
This is the FSM Exception class.
",88,89,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\FSM.py,FSM,"
This is a Finite State Machine (FSM).
    
",98,99,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\popen_spawn.py,PopenSpawn,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\pty_spawn.py,spawn,"
This is the main class interface for Pexpect. Use this class to start
and control child applications. 
",30,32,101,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\pxssh.py,ExceptionPxssh,"
Raised for pxssh exceptions.
    
",33,34,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\pxssh.py,pxssh,"
This class extends pexpect.spawn to specialize setting up SSH
connections. This adds methods for login, logout, and expecting the shell
prompt. It does various tricky things to handle many situations in the SSH
login process. For example, if the session is your first login, then pxssh
automatically accepts the remote certificate; or if you have public key
authentication setup then pxssh won't wait for the password prompt.

pxssh uses the shell prompt to synchronize output from the remote host. In
order to make this more robust it sets the shell prompt to something more
unique than just $ or #. This should work on most Borne/Bash or Csh style
shells.

Example that runs a few commands on a remote server and prints the result::

    from pexpect import pxssh
    import getpass
    try:
        s = pxssh.pxssh()
        hostname = raw_input('hostname: ')
        username = raw_input('username: ')
        password = getpass.getpass('password: ')
        s.login(hostname, username, password)
        s.sendline('uptime')   # run a command
        s.prompt()             # match the prompt
        print(s.before)        # print everything before the prompt.
        s.sendline('ls -l')
        s.prompt()
        print(s.before)
        s.sendline('df')
        s.prompt()
        print(s.before)
        s.logout()
    except pxssh.ExceptionPxssh as e:
        print(""pxssh failed on login."")
        print(e)

Example showing how to specify SSH options::

    from pexpect import pxssh
    s = pxssh.pxssh(options={
                        ""StrictHostKeyChecking"": ""no"",
                        ""UserKnownHostsFile"": ""/dev/null""})
    ...

Note that if you have ssh-agent running while doing development with pxssh
then this can lead to a lot of confusion. Many X display managers (xdm,
gdm, kdm, etc.) will automatically start a GUI agent. You may see a GUI
dialog box popup asking for a password during development. You should turn
off any key agents during testing. The 'force_password' attribute will turn
off public key authentication. This will only work if the remote SSH server
is configured to allow password logins. Example of using 'force_password'
attribute::

        s = pxssh.pxssh()
        s.force_password = True
        hostname = raw_input('hostname: ')
        username = raw_input('username: ')
        password = getpass.getpass('password: ')
        s.login (hostname, username, password)

`debug_command_string` is only for the test suite to confirm that the string
generated for SSH is correct, using this will not allow you to do
anything other than get a string back from `pxssh.pxssh.login()`.
",53,116,2633,63
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\replwrap.py,REPLWrapper,"
Wrapper for a REPL.

:param cmd_or_spawn: This can either be an instance of :class:`pexpect.spawn`
  in which a REPL has already been started, or a str command to start a new
  REPL process.
:param str orig_prompt: The prompt to expect at first.
:param str prompt_change: A command to change the prompt to something more
  unique. If this is ``None``, the prompt will not be changed. This will
  be formatted with the new and continuation prompts as positional
  parameters, so you can use ``{}`` style formatting to insert them into
  the command.
:param str new_prompt: The more unique prompt to expect after the change.
:param str extra_init_cmd: Commands to do extra initialisation, such as
  disabling pagers.
",18,32,714,14
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\screen.py,screen,"
This object maintains the state of a virtual text screen as a
rectangular array. This maintains a virtual cursor position and handles
scrolling as characters are added. This supports most of the methods needed
by an ANSI text screen. Row and column indexes are 1-based (not zero-based,
like arrays).

Characters are represented internally using unicode. Methods that accept
input characters, when passed 'bytes' (which in Python 2 is equivalent to
'str'), convert them from the encoding specified in the 'encoding'
parameter to the constructor. Methods that return screen contents return
unicode strings, with the exception of __str__() under Python 2. Passing
``encoding=None`` limits the API to only accept unicode input, so passing
bytes in will raise :exc:`TypeError`.
",71,84,772,13
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\spawnbase.py,_NullCoder,"
Pass bytes through unchanged.
",14,15,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\spawnbase.py,SpawnBase,"
A base class providing the backwards-compatible spawn API for Pexpect.

This should not be instantiated directly: use :class:`pexpect.spawn` or
:class:`pexpect.fdpexpect.fdspawn`.
",24,28,179,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pexpect\_async.py,PatternWaiter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pip_shims\shims.py,_shims,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pip_shims\shims.py,BaseFunc,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\lockfiles.py,_LockFileEncoder,"
A specilized JSON encoder to convert loaded data into a lock file.

This adds a few characteristics to the encoder:

* The JSON is always prettified with indents and spaces.
* The output is always UTF-8-encoded text, never binary, even on Python 2.
",17,23,248,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\lockfiles.py,Lockfile,"
Representation of a Pipfile.lock.
    
",68,69,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\pipfiles.py,Pipfile,"
Representation of a Pipfile.
    
",32,33,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\base.py,ValidationError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\base.py,DataView,"
A ""view"" to a data.

Validates the input mapping on creation. A subclass is expected to
provide a `__SCHEMA__` class attribute specifying a validator schema.
",31,35,157,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\base.py,DataViewCollection,"
A homogeneous collection of data views.

Subclasses are expected to assign a class attribute `item_class` to specify
the type of items it contains. This class will be used to coerce return
values when accessed. The item class should conform to the `DataView`
protocol.

You should not instantiate an instance from this class, but from one of its
subclasses instead.
",71,80,365,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\base.py,DataViewMapping,"
A mapping of data views.

The keys are primitive values, while values are instances of `item_class`.
",102,105,100,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\base.py,DataViewSequence,"
A sequence of data views.

Each entry is an instance of `item_class`.
",125,128,69,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\hashes.py,Hash,"
A hash.
    
",5,6,7,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\packages.py,Package,"
A package requirement specified in a Pipfile.

This is the base class of variants appearing in either `[packages]` or
`[dev-packages]` sections of a Pipfile.
",7,11,157,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\scripts.py,Script,"
Parse a script line (in Pipfile's [scripts] section).

This always works in POSIX mode, even on Windows.
",10,13,104,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\sections.py,PackageCollection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\sections.py,ScriptCollection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\sections.py,SourceCollection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\sections.py,Requires,"
Representation of the `[requires]` section in a Pipfile.
    
",21,22,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\sections.py,Meta,"
Representation of the `_meta` section in a Pipfile.lock.
    
",57,58,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\plette\models\sources.py,Source,"
Information on a ""simple"" Python package index.

This could be PyPI, or a self-hosted index server, etc. The server
specified by the `url` attribute is expected to provide the ""simple""
package API.
",7,12,197,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\ptyprocess\ptyprocess.py,PtyProcess,"
This class represents a process running in a pseudoterminal.

The main constructor is the :meth:`spawn` classmethod.
",129,132,116,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\ptyprocess\ptyprocess.py,PtyProcessUnicode,"
Unicode wrapper around a process running in a pseudoterminal.

This class exposes a similar interface to :class:`PtyProcess`, but its read
methods return unicode, and its :meth:`write` accepts unicode.
",794,798,201,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\ptyprocess\ptyprocess.py,FileNotFoundError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\ptyprocess\ptyprocess.py,TimeoutError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\ptyprocess\util.py,PtyProcessError,"
Generic error class for this package.
",71,72,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\exceptions.py,InvalidPythonVersion,"
Raised when parsing an invalid python version
",6,7,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\pythonfinder.py,Finder,"
A cross-platform Finder for locating python and other executables.

Searches for python and other specified binaries starting in *path*, if supplied,
but searching the bin path of ``sys.executable`` if *system* is ``True``, and then
searching in the ``os.environ['PATH']`` if *global_search* is ``True``.  When *global_search*
is ``False``, this search operation is restricted to the allowed locations of
*path* and *system*.
",26,33,425,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\mixins.py,BasePath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\mixins.py,BaseFinder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\path.py,SystemPath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\path.py,PathEntry,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\path.py,VersionPath,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\python.py,PythonFinder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\python.py,PythonVersion,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\python.py,VersionMap,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\models\windows.py,WindowsFinder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\_vendor\pep514tools\environment.py,Environment,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\_vendor\pep514tools\_registry.py,PythonWrappedDict,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pythonfinder\_vendor\pep514tools\_registry.py,RegistryAccessor,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pytoml\core.py,TomlError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pytoml\parser.py,_Source,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\pytoml\utils.py,_TimeZone,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\adapters.py,BaseAdapter,"
The Base Transport Adapter
",56,57,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\adapters.py,HTTPAdapter,"
The built-in HTTP Adapter for urllib3.

Provides a general-case interface for Requests sessions to contact HTTP and
HTTPS urls by implementing the Transport Adapter interface. This class will
usually be created by the :class:`Session <Session>` class under the
covers.

:param pool_connections: The number of urllib3 connection pools to cache.
:param pool_maxsize: The maximum number of connections to save in the pool.
:param max_retries: The maximum number of retries each connection
    should attempt. Note, this applies only to failed DNS lookups, socket
    connections and connection timeouts, never to requests where data has
    made it to the server. By default, Requests does not retry failed
    connections. If you need granular control over the conditions under
    which we retry a request, import urllib3's ``Retry`` class and pass
    that instead.
:param pool_block: Whether the connection pool should block for connections.

Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> a = requests.adapters.HTTPAdapter(max_retries=3)
  >>> s.mount('http://', a)
",85,109,1086,24
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\auth.py,AuthBase,"
Base class that all auth implementations derive from
",73,74,52,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\auth.py,HTTPBasicAuth,"
Attaches HTTP Basic Authentication to the given Request object.
",80,81,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\auth.py,HTTPProxyAuth,"
Attaches HTTP Proxy Authentication to a given Request object.
",101,102,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\auth.py,HTTPDigestAuth,"
Attaches HTTP Digest Authentication to the given Request object.
",109,110,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\cookies.py,MockRequest,"
Wraps a `requests.Request` to mimic a `urllib2.Request`.

The code in `cookielib.CookieJar` expects this interface in order to correctly
manage cookie policies, i.e., determine whether a cookie can be set, given the
domains of the request and the cookie.

The original request object is read-only. The client is responsible for collecting
the new headers via `get_new_headers()` and interpreting them appropriately. You
probably want `get_cookie_header`, defined below.
",26,35,469,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\cookies.py,MockResponse,"
Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.

...what? Basically, expose the parsed HTTP headers from the server response
the way `cookielib` expects to see them.
",98,102,179,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\cookies.py,CookieConflictError,"
There are two cookies that meet the criteria specified in the cookie jar.
Use .get and .set and include domain and path args in order to be more specific.
",166,168,154,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\cookies.py,RequestsCookieJar,"
Compatibility class; is a cookielib.CookieJar, but exposes a dict
interface.

This is the CookieJar we create by default for requests and sessions that
don't specify one, since some clients may expect response.cookies and
session.cookies to support dict operations.

Requests does not use the dict interface internally; it's just for
compatibility with external client code. All requests code should work
out of the box with externally provided instances of ``CookieJar``, e.g.
``LWPCookieJar`` and ``FileCookieJar``.

Unlike a regular CookieJar, this class is pickleable.

.. warning:: dictionary operations that are normally O(1) may be O(n).
",172,187,644,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,RequestException,"
There was an ambiguous exception that occurred while handling your
request.
",13,15,75,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,HTTPError,"
An HTTP error occurred.
",29,30,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,ConnectionError,"
A Connection error occurred.
",33,34,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,ProxyError,"
A proxy error occurred.
",37,38,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,SSLError,"
An SSL error occurred.
",41,42,22,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,Timeout,"
The request timed out.

Catching this error will catch both
:exc:`~requests.exceptions.ConnectTimeout` and
:exc:`~requests.exceptions.ReadTimeout` errors.
",45,50,154,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,ConnectTimeout,"
The request timed out while trying to connect to the remote server.

Requests that produced this error are safe to retry.
",54,57,121,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,ReadTimeout,"
The server did not send any data in the allotted amount of time.
",61,62,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,URLRequired,"
A valid URL is required to make a request.
",65,66,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,TooManyRedirects,"
Too many redirects.
",69,70,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,MissingSchema,"
The URL schema (e.g. http or https) is missing.
",73,74,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,InvalidSchema,"
See defaults.py for valid schemas.
",77,78,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,InvalidURL,"
The URL provided was somehow invalid.
",81,82,37,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,InvalidHeader,"
The header value provided was somehow invalid.
",85,86,46,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,InvalidProxyURL,"
The proxy URL provided is invalid.
",89,90,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,ChunkedEncodingError,"
The server declared chunked encoding but sent an invalid chunk.
",93,94,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,ContentDecodingError,"
Failed to decode response content
",97,98,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,StreamConsumedError,"
The content for this response was already consumed
",101,102,50,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,RetryError,"
Custom retries logic failed
",105,106,27,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,UnrewindableBodyError,"
Requests encountered an error when trying to rewind a body
Warnings",109,110,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,RequestsWarning,"
Base warning for Requests.
",115,116,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,FileModeWarning,"
A file was opened in text mode, but Requests determined its binary length.
",120,121,74,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\exceptions.py,RequestsDependencyWarning,"
An imported dependency doesn't match the expected version range.
",125,126,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\models.py,RequestEncodingMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\models.py,RequestHooksMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\models.py,Request,"
A user-created :class:`Request <Request>` object.

Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>
",199,224,1062,25
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\models.py,PreparedRequest,"
The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
containing the exact bytes that will be sent to the server.

Generated from either a :class:`Request <Request>` object or manually.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> r = req.prepare()
  <PreparedRequest [GET]>

  >>> s = requests.Session()
  >>> s.send(r)
  <Response [200]>
",273,288,410,15
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\models.py,Response,"
The :class:`Response <Response>` object, which contains a
server's response to an HTTP request.
",587,589,95,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\sessions.py,SessionRedirectMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\sessions.py,Session,"
A Requests session.

Provides cookie persistence, connection-pooling, and configuration.

Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  >>>     s.get('https://httpbin.org/get')
  <Response [200]>
",341,357,339,16
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\structures.py,CaseInsensitiveDict,"
A case-insensitive ``dict``-like object.

Implements all methods and operations of
``MutableMapping`` as well as dict's ``copy``. Also
provides ``lower_items``.

All keys are expected to be strings. The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys. However, querying and contains
testing is case insensitive::

    cid = CaseInsensitiveDict()
    cid['Accept'] = 'application/json'
    cid['aCCEPT'] == 'application/json'  # True
    list(cid) == ['Accept']  # True

For example, ``headers['content-encoding']`` will return the
value of a ``'Content-Encoding'`` response header, regardless
of how the header name was originally stored.

If the constructor, ``.update``, or equality comparison
operations are given keys that have equal ``.lower()``s, the
behavior is undefined.
",14,38,905,24
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requests\structures.py,LookupDict,"
Dictionary lookup object.
",88,89,25,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,RequirementError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,MissingParameter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,FileCorruptException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,LockfileCorruptException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,PipfileCorruptException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,PipfileNotFound,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\exceptions.py,FileExistsError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\utils.py,PathAccessError,"
An amalgamation of KeyError, IndexError, and TypeError,
representing what can occur when looking up a path in a nested
object.
",344,347,126,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\cache.py,CorruptCacheError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\cache.py,DependencyCache,"
Creates a new persistent dependency cache for the current Python version.
The cache file is written to the appropriate user cache dir for the
current platform, i.e.

    ~/.cache/pip-tools/depcache-pyX.Y.json

Where X.Y indicates the Python version.
",52,59,249,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\cache.py,HashCache,"
Caches hashes of PyPI artifacts so we do not need to re-download them.

Hashes are only cached when the URL appears to contain a hash in it and the
cache key includes the hash value returned from the server). This ought to
avoid ssues where the location on the server changes.
",190,195,276,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\cache.py,_JSONCache,"
A persistent cache backed by a JSON file.

The cache file is written to the appropriate user cache dir for the
current platform, i.e.

    ~/.cache/pip-tools/depcache-pyX.Y.json

Where X.Y indicates the Python version.
",236,244,218,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\cache.py,RequiresPythonCache,"
Cache a candidate's Requires-Python information.
    
",339,340,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\dependencies.py,AbstractDependency,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\dependencies.py,PipCommand,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\lockfile.py,Lockfile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\markers.py,PipenvMarkers,"
System-level requirements - see PEP508 for more detail
",38,39,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\pipfile.py,PipfileLoader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\pipfile.py,Pipfile,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\project.py,ProjectFile,"
A file in the Pipfile project.
    
",48,49,30,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\project.py,Project,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\requirements.py,Line,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\requirements.py,NamedRequirement,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\requirements.py,FileRequirement,"
File requirements for tar.gz installable files or wheels or setup.py
containing directories.
",1358,1360,92,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\requirements.py,VCSRequirement,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\requirements.py,Requirement,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\resolvers.py,ResolutionError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\resolvers.py,DependencyResolver,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,BuildEnv,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,HookCaller,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,ScandirCloser,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,Analyzer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,BaseRequirement,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,Extra,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\setup_info.py,SetupInfo,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\url.py,URI,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\requirementslib\models\vcs.py,VCSRepository,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\providers.py,AbstractProvider,"
Delegate class to provide requirment interface for the resolver.
    
",2,3,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\reporters.py,BaseReporter,"
Delegate class to provider progress reporting for the resolver.
    
",2,3,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,NoVersionsAvailable,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,RequirementsConflicted,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,Criterion,"
Internal representation of possible resolution results of a package.

This holds two attributes:

* `information` is a collection of `RequirementInformation` pairs. Each
  pair is a requirement contributing to this criterion, and the candidate
  that provides the requirement.
* `candidates` is a collection containing all possible candidates deducted
  from the union of contributing requirements. It should never be empty.
",25,34,424,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,ResolutionError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,ResolutionImpossible,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,ResolutionTooDeep,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,Resolution,"
Stateful resolution object.

This is designed as a one-off object that holds information to kick start
the resolution process, and holds the results afterwards.
",92,96,160,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\resolvers.py,Resolver,"
The thing that performs the actual resolution work.
    
",255,256,51,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\resolvelib\structs.py,DirectedGraph,"
A graph structure with directed edges.
    
",2,3,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\shellingham\nt.py,PROCESSENTRY32,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\shellingham\_core.py,ShellDetectionFailure,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\shellingham\posix\proc.py,ProcFormatError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\shellingham\posix\ps.py,PsNotAvailable,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\decoder.py,TomlDecodeError,"
Base toml Exception / Error.
",51,52,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\decoder.py,InlineTableDict,"
Sentinel subclass of dict for inline tables.
",576,577,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\decoder.py,TomlDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\decoder.py,DynamicInlineTableDict,"
Concrete sentinel subclass for inline tables.
It is a subclass of _dict which is passed in dynamically at load
time

It is also a subclass of InlineTableDict
",589,594,157,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\encoder.py,TomlEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\encoder.py,TomlPreserveInlineDictEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\encoder.py,TomlArraySeparatorEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\ordered.py,TomlOrderedDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\ordered.py,TomlOrderedEncoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\toml\tz.py,TomlTz,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\container.py,Container,"
A container for items within a TOMLDocument.
",20,21,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,TOMLKitError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,ParseError,"
This error occurs when the parser encounters a syntax error
in the TOML being parsed. The error references the line and
location within the line where the error was encountered.
",8,11,177,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,MixedArrayTypesError,"
An array was found that had two or more element types.
",37,38,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidNumberError,"
A numeric field was improperly specified.
",48,49,41,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidDateTimeError,"
A datetime field was improperly specified.
",59,60,42,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidDateError,"
A date field was improperly specified.
",70,71,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidTimeError,"
A date field was improperly specified.
",81,82,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidNumberOrDateError,"
A numeric or date field was improperly specified.
",92,93,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidUnicodeValueError,"
A unicode code was improperly specified.
",103,104,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,UnexpectedCharError,"
An unexpected character was found during parsing.
",114,115,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,EmptyKeyError,"
An empty key was found during parsing.
",125,126,38,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,EmptyTableNameError,"
An empty table name was found during parsing.
",136,137,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InvalidCharInStringError,"
The string being parsed contains an invalid character.
",147,148,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,UnexpectedEofError,"
The TOML being parsed ended before the end of a statement.
",158,159,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,InternalParserError,"
An error that indicates a bug in the parser.
",169,170,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,NonExistentKey,"
A non-existent key was used.
",184,185,28,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\exceptions.py,KeyAlreadyPresent,"
An already present key was used.
",195,196,32,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,StringType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,BoolType,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Trivia,"
Trivia information (aka metadata).
",144,145,34,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,KeyType,"
The type of a Key.

Keys can be bare (unquoted), or quoted using basic (""), or literal (')
quotes following the same escaping rules as single-line StringType.
",165,169,158,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Key,"
A key value.
",178,179,12,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Item,"
An item within a TOML document.
",226,227,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Whitespace,"
A whitespace literal.
",274,275,21,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Comment,"
A comment literal.
",312,313,18,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Integer,"
An integer literal.
",330,331,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Float,"
A float literal.
",397,398,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Bool,"
A boolean literal.
",464,465,18,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,DateTime,"
A datetime literal.
",489,490,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Date,"
A date literal.
",558,559,15,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Time,"
A time literal.
",601,602,15,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Array,"
An array literal
",635,636,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Table,"
A table literal.
",736,737,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,InlineTable,"
An inline table literal.
",909,910,24,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,String,"
A string literal.
",1050,1051,17,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,AoT,"
An array of table literal
",1094,1095,25,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\items.py,Null,"
A null item.
",1157,1158,12,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\parser.py,Parser,"
Parser for TOML documents.
",52,53,26,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\source.py,_State,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\source.py,_StateHandler,"
State preserver for the Parser.
",50,51,31,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\source.py,Source,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\toml_char.py,TOMLChar,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\toml_document.py,TOMLDocument,"
A TOML document.
",5,6,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\toml_file.py,TOMLFile,"
Represents a TOML file.
",8,9,23,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\tomlkit\_compat.py,timezone,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connection.py,DummyConnection,"
Used to detect a failed ConnectionCls import.
",67,68,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connection.py,HTTPConnection,"
Based on httplib.HTTPConnection but provides an extra constructor
backwards-compatibility layer between older and newer Pythons.

Additional keyword parameters are used to configure attributes of the connection.
Accepted parameters include:

  - ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`
  - ``source_address``: Set the source address for the current connection.
  - ``socket_options``: Set specific options on the underlying socket. If not specified, then
    defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
    Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

    For example, if you wish to enable TCP Keep Alive in addition to the defaults,
    you might pass::

        HTTPConnection.default_socket_options + [
            (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
        ]

    Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
",72,92,994,20
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connection.py,HTTPSConnection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connection.py,VerifiedHTTPSConnection,"
Based on httplib.HTTPSConnection but wraps the socket with
SSL certification.
",269,271,77,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connection.py,BaseSSLError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connection.py,ConnectionError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connectionpool.py,ConnectionPool,"
Base class for all connection pools, such as
:class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.
",57,59,108,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connectionpool.py,HTTPConnectionPool,"
Thread-safe connection pool for one host.

:param host:
    Host used for this HTTP Connection (e.g. ""localhost""), passed into
    :class:`httplib.HTTPConnection`.

:param port:
    Port used for this HTTP Connection (None is equivalent to 80), passed
    into :class:`httplib.HTTPConnection`.

:param strict:
    Causes BadStatusLine to be raised if the status line can't be parsed
    as a valid HTTP/1.0 or 1.1 status line, passed into
    :class:`httplib.HTTPConnection`.

    .. note::
       Only works in Python 2. This parameter is ignored in Python 3.

:param timeout:
    Socket timeout in seconds for each individual connection. This can
    be a float or integer, which sets the timeout for the HTTP request,
    or an instance of :class:`urllib3.util.Timeout` which gives you more
    fine-grained control over request timeouts. After the constructor has
    been parsed, this is always a `urllib3.util.Timeout` object.

:param maxsize:
    Number of connections to save that can be reused. More than 1 is useful
    in multithreaded situations. If ``block`` is set to False, more
    connections will be created but they will not be saved once they've
    been used.

:param block:
    If set to True, no more than ``maxsize`` connections will be used at
    a time. When no free connections are available, the call will block
    until a connection has been released. This is a useful side effect for
    particular multithreaded situations where one does not want to use more
    than maxsize connections per host to prevent flooding.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param retries:
    Retry configuration to use by default with requests in this pool.

:param _proxy:
    Parsed proxy URL, should not be used directly, instead, see
    :class:`urllib3.connectionpool.ProxyManager`""

:param _proxy_headers:
    A dictionary with proxy headers, should not be used directly,
    instead, see :class:`urllib3.connectionpool.ProxyManager`""

:param \**conn_kw:
    Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
    :class:`urllib3.connection.HTTPSConnection` instances.
",97,153,2200,56
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\connectionpool.py,HTTPSConnectionPool,"
Same as :class:`.HTTPConnectionPool`, but HTTPS.

When Python is compiled with the :mod:`ssl` module, then
:class:`.VerifiedHTTPSConnection` is used, which *can* verify certificates,
instead of :class:`.HTTPSConnection`.

:class:`.VerifiedHTTPSConnection` uses one of ``assert_fingerprint``,
``assert_hostname`` and ``host`` in this order to verify connections.
If ``assert_hostname`` is False, no verification is done.

The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,
``ca_cert_dir``, ``ssl_version``, ``key_password`` are only used if :mod:`ssl`
is available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade
the connection socket into an SSL socket.
",740,754,681,14
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,HTTPError,"
Base exception used by this module.
",9,10,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,HTTPWarning,"
Base warning used by this module.
",14,15,33,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,PoolError,"
Base exception for errors caused within a pool.
",19,20,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,RequestError,"
Base exception for PoolErrors that have associated URLs.
",30,31,56,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,SSLError,"
Raised when SSL certificate fails in an HTTPS connection.
",41,42,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ProxyError,"
Raised when the connection to a proxy fails.
",46,47,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,DecodeError,"
Raised when automatic decoding based on Content-Type fails.
",51,52,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ProtocolError,"
Raised when something unexpected happens mid-request/response.
",56,57,62,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,MaxRetryError,"
Raised when the maximum number of retries is exceeded.

:param pool: The connection pool
:type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
:param string url: The requested Url
:param exceptions.Exception reason: The underlying error
",67,73,246,6
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,HostChangedError,"
Raised when an existing pool gets a request for a foreign host.
",86,87,63,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,TimeoutStateError,"
Raised when passing an invalid state to a timeout 
",95,96,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,TimeoutError,"
Raised when a socket timeout error occurs.

Catching this error will catch both :exc:`ReadTimeoutErrors
<ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
",100,104,178,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ReadTimeoutError,"
Raised when a socket timeout occurs while receiving data from a server
",109,110,70,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ConnectTimeoutError,"
Raised when a socket timeout occurs while connecting to a server
",116,117,64,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,NewConnectionError,"
Raised when we fail to establish a new connection. Usually ECONNREFUSED.
",121,122,72,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,EmptyPoolError,"
Raised when a pool runs out of connections and no more are allowed.
",126,127,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ClosedPoolError,"
Raised when a request enters a pool after the pool has been closed.
",131,132,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,LocationValueError,"
Raised when there is something wrong with a given URL input.
",136,137,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,LocationParseError,"
Raised when get_host or similar fails to parse the URL input.
",141,142,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ResponseError,"
Used as a container for an error reason supplied in a MaxRetryError.
",151,152,68,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,SecurityWarning,"
Warned when performing security reducing actions
",157,158,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,SubjectAltNameWarning,"
Warned when connecting to a host with a certificate missing a SAN.
",162,163,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,InsecureRequestWarning,"
Warned when making an unverified HTTPS request.
",167,168,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,SystemTimeWarning,"
Warned when system time is suspected to be wrong
",172,173,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,InsecurePlatformWarning,"
Warned when certain SSL configuration is not available on a platform.
",177,178,69,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,SNIMissingWarning,"
Warned when making a HTTPS request without SNI available.
",182,183,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,DependencyWarning,"
Warned when an attempt is made to import a module with missing optional
dependencies.
",187,189,85,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ResponseNotChunked,"
Response needs to be chunked in order to read it as chunks.
",195,196,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,BodyNotHttplibCompatible,"
Body should be httplib.HTTPResponse like (have an fp attribute which
returns raw chunks) for read_chunked().
",200,202,108,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,IncompleteRead,"
Response length doesn't match expected Content-Length

Subclass of http_client.IncompleteRead to allow int value
for `partial` to avoid creating large objects on streamed
reads.
",208,213,177,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,InvalidHeader,"
The header provided was somehow invalid.
",224,225,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,ProxySchemeUnknown,"
ProxyManager does not support the supplied scheme
TODO(t-8ch): Stop inheriting from AssertionError in v2.0.",229,230,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,HeaderParsingError,"
Raised by assert_header_parsing, but we convert it to a log.warning statement.
",238,239,78,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\exceptions.py,UnrewindableBodyError,"
urllib3 encountered an error when trying to rewind a body
",245,246,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\fields.py,RequestField,"
A data container for request body parameters.

:param name:
    The name of this request field. Must be unicode.
:param data:
    The data/value body.
:param filename:
    An optional filename of the request field. Must be unicode.
:param headers:
    An optional dict-like object of headers to initially use for the field.
:param header_formatter:
    An optional callable that is used to encode and format the headers. By
    default, this is :func:`format_header_param_html5`.
",128,141,479,13
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\poolmanager.py,PoolManager,"
Allows for arbitrary requests while transparently keeping track of
necessary connection pools for you.

:param num_pools:
    Number of connection pools to cache before discarding the least
    recently used pool.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param \**connection_pool_kw:
    Additional parameters are used to create fresh
    :class:`urllib3.connectionpool.ConnectionPool` instances.

Example::

    >>> manager = PoolManager(num_pools=2)
    >>> r = manager.request('GET', 'http://google.com/')
    >>> r = manager.request('GET', 'http://google.com/mail')
    >>> r = manager.request('GET', 'http://yahoo.com/')
    >>> len(manager.pools)
    2
",126,149,725,23
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\poolmanager.py,ProxyManager,"
Behaves just like :class:`PoolManager`, but sends all requests through
the defined proxy, using the CONNECT method for HTTPS URLs.

:param proxy_url:
    The URL of the proxy to be used.

:param proxy_headers:
    A dictionary containing headers that will be sent to the proxy. In case
    of HTTP they are being sent with each request, while in the
    HTTPS/CONNECT case they are sent only once. Could be used for proxy
    authentication.

Example:
    >>> proxy = urllib3.ProxyManager('http://localhost:3128/')
    >>> r1 = proxy.request('GET', 'http://google.com/')
    >>> r2 = proxy.request('GET', 'http://httpbin.org/')
    >>> len(proxy.pools)
    1
    >>> r3 = proxy.request('GET', 'https://httpbin.org/')
    >>> r4 = proxy.request('GET', 'https://twitter.com/')
    >>> len(proxy.pools)
    3
",368,390,805,22
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\request.py,RequestMethods,"
Convenience mixin for classes who implement a :meth:`urlopen` method, such
as :class:`~urllib3.connectionpool.HTTPConnectionPool` and
:class:`~urllib3.poolmanager.PoolManager`.

Provides behavior for making common types of HTTP request methods and
decides which type of request field encoding to use.

Specifically,

:meth:`.request_encode_url` is for sending requests whose fields are
encoded in the URL (such as GET, HEAD, DELETE).

:meth:`.request_encode_body` is for sending requests whose fields are
encoded in the *body* of the request using multipart or www-form-urlencoded
(such as for POST, PUT, PATCH).

:meth:`.request` is for making any kind of request, it will look up the
appropriate encoding format and use one of the above two methods to make
the request.

Initializer parameters:

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.
",11,36,902,25
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\response.py,DeflateDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\response.py,GzipDecoderState,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\response.py,GzipDecoder,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\response.py,MultiDecoder,"
From RFC7231:
    If one or more encodings have been applied to a representation, the
    sender that applied the encodings MUST generate a Content-Encoding
    header field that lists the content codings in the order in which
    they were applied.
",118,123,249,5
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\response.py,HTTPResponse,"
HTTP Response container.

Backwards-compatible to httplib's HTTPResponse but the response ``body`` is
loaded and decoded on-demand when the ``data`` property is accessed.  This
class is also compatible with the Python standard library's :mod:`io`
module, and can hence be treated as a readable object in the context of that
framework.

Extra parameters for behaviour not present in httplib.HTTPResponse:

:param preload_content:
    If True, the response's body will be preloaded during construction.

:param decode_content:
    If True, will attempt to decode the body based on the
    'content-encoding' header.

:param original_response:
    When this HTTPResponse wrapper is generated from an httplib.HTTPResponse
    object, it's convenient to include the original for debug purposes. It's
    otherwise unused.

:param retries:
    The retries contains the last :class:`~urllib3.util.retry.Retry` that
    was used during the request.

:param enforce_content_length:
    Enforce content length checking. Body returned by server must match
    value of Content-Length header, if present. Otherwise, raise error.
",152,181,1116,29
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\response.py,BrotliDecoder,"Supports both 'brotlipy' and 'Brotli' packages
        since they share an import name. The top branches
        are for 'brotlipy' and bottom branches for 'Brotli'",100,102,19,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\_collections.py,RecentlyUsedContainer,"
Provides a thread-safe dict-like container which maintains up to
``maxsize`` keys while throwing away the least-recently-used keys beyond
``maxsize``.

:param maxsize:
    Maximum number of recent elements to retain.

:param dispose_func:
    Every time an item is evicted from the container,
    ``dispose_func(value)`` is called.  Callback which will get called
",29,39,363,10
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\_collections.py,HTTPHeaderDict,"
:param headers:
    An iterable of field-value pairs. Must not contain multiple field names
    when compared case-insensitively.

:param kwargs:
    Additional field-value pairs to pass in to ``dict.update``.

A ``dict`` like container for storing HTTP Headers.

Field names are stored and compared case-insensitively in compliance with
RFC 7230. Iteration provides the first case-sensitive key seen for each
case-insensitive pair.

Using ``__setitem__`` syntax overwrites fields that compare equal
case-insensitively in order to maintain ``dict``'s api. For fields that
compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
in a loop.

If multiple fields that are equal case-insensitively are passed to the
constructor or ``.update``, the behavior is undefined and some will be
lost.

>>> headers = HTTPHeaderDict()
>>> headers.add('Set-Cookie', 'foo=bar')
>>> headers.add('set-cookie', 'baz=quxx')
>>> headers['content-length'] = '7'
>>> headers['SET-cookie']
'foo=bar, baz=quxx'
>>> headers['Content-Length']
'7'
",103,133,1034,30
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\_collections.py,RLock,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\appengine.py,AppEnginePlatformWarning,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\appengine.py,AppEnginePlatformError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\appengine.py,AppEngineManager,"
Connection manager for Google App Engine sandbox applications.

This manager uses the URLFetch service directly instead of using the
emulated httplib, and is subject to URLFetch limitations as described in
the App Engine documentation `here
<https://cloud.google.com/appengine/docs/python/urlfetch>`_.

Notably it will raise an :class:`AppEnginePlatformError` if:
    * URLFetch is not available.
    * If you attempt to use this on App Engine Flexible, as full socket
      support is available.
    * If a request size is more than 10 megabytes.
    * If a response size is more than 32 megabtyes.
    * If you use an unsupported request method such as OPTIONS.

Beyond those cases, it will raise normal urllib3 errors.
",80,96,721,16
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\ntlmpool.py,NTLMConnectionPool,"
Implements an NTLM authentication version of an urllib3 connection pool
",19,20,71,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\pyopenssl.py,WrappedSocket,"
API-compatibility wrapper for Python OpenSSL's Connection-class.

Note: _makefile_refs, _drop() and _reuse() are needed for the garbage
collector of pypy.
",254,258,154,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\pyopenssl.py,PyOpenSSLContext,"
I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
for translating the interface of the standard library ``SSLContext`` object
to calls into PyOpenSSL.
",401,404,176,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\pyopenssl.py,UnsupportedExtension,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\securetransport.py,WrappedSocket,"
API-compatibility wrapper for Python's OpenSSL wrapped socket object.

Note: _makefile_refs, _drop(), and _reuse() are needed for the garbage
collector of PyPy.
",313,317,160,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\securetransport.py,SecureTransportContext,"
I am a wrapper class for the SecureTransport library, to translate the
interface of the standard library ``SSLContext`` object to calls into
SecureTransport.
",744,747,157,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\socks.py,SOCKSConnection,"
A plain-text HTTP connection that connects via a SOCKS proxy.
",73,74,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\socks.py,SOCKSHTTPSConnection,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\socks.py,SOCKSHTTPConnectionPool,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\socks.py,SOCKSHTTPSConnectionPool,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\socks.py,SOCKSProxyManager,"
A version of the urllib3 ProxyManager that routes connections via the
defined SOCKS proxy.
",155,157,90,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\_securetransport\bindings.py,CFConst,"
A class object that acts as essentially a namespace for CoreFoundation
constants.
",501,503,81,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\contrib\_securetransport\bindings.py,SecurityConst,"
A class object that acts as essentially a namespace for Security constants.
",509,510,75,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,_LazyDescr,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,MovedModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,_LazyModule,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,MovedAttribute,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,_SixMetaPathImporter,"
A meta path importer to import six.moves and its submodules.

This class implements a PEP302 finder and loader. It should be compatible
with Python 2.5 and all existing versions of Python3
",165,169,188,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,_MovedItems,"
Lazy loading of moved objects
",230,231,29,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Module_six_moves_urllib_parse,"
Lazy loading of moved objects in six.moves.urllib_parse
",321,322,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Module_six_moves_urllib_error,"
Lazy loading of moved objects in six.moves.urllib_error
",361,362,55,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Module_six_moves_urllib_request,"
Lazy loading of moved objects in six.moves.urllib_request
",381,382,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Module_six_moves_urllib_response,"
Lazy loading of moved objects in six.moves.urllib_response
",431,432,58,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Module_six_moves_urllib_robotparser,"
Lazy loading of moved objects in six.moves.urllib_robotparser
",452,453,61,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Module_six_moves_urllib,"
Create a six.moves.urllib namespace that resembles the Python 3 namespace
",470,471,73,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,Iterator,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,metaclass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\six.py,X,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\builder.py,URIBuilder,"
Object to aid in building up a URI Reference from parts.

.. note::

    This object should be instantiated by the user, but it's recommended
    that it is not provided with arguments. Instead, use the available
    method to populate the fields.
",22,29,247,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,RFC3986Exception,"
Base class for all rfc3986 exception classes.
",8,9,45,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,InvalidAuthority,"
Exception when the authority string is invalid.
",14,15,47,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,InvalidPort,"
Exception when the port is invalid.
",24,25,35,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,ResolutionError,"
Exception to indicate a failure to resolve a URI.
",33,34,49,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,ValidationError,"
Exception raised during Validation of a URI.
",42,43,44,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,MissingComponentError,"
Exception raised when a required component is missing.
",48,49,54,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,UnpermittedComponentError,"
Exception raised when a component has an unpermitted value.
",67,68,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,PasswordForbidden,"
Exception raised when a URL has a password in the userinfo section.
",85,86,67,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,InvalidComponentsError,"
Exception raised when one or more components are invalid.
",99,100,57,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\exceptions.py,MissingDependencyError,"
Exception raised when an IRI is encoded without the 'idna' module.
",118,119,66,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\iri.py,IRIReference,"
Immutable object representing a parsed IRI Reference.

Can be encoded into an URIReference object via the procedure
specified in RFC 3987 Section 3.1

 .. note::
    The IRI submodule is a new interface and may possibly change in
    the future. Check for changes to the interface when upgrading.
",33,41,296,8
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\parseresult.py,ParseResultMixin,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\parseresult.py,ParseResult,"
Implementation of urlparse compatibility class.

This uses the URIReference logic to handle compatibility with the
urlparse.ParseResult class.
",69,73,142,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\parseresult.py,ParseResultBytes,"
Compatibility shim for the urlparse.ParseResultBytes object.
",202,203,60,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\uri.py,URIReference,"
Immutable object representing a parsed URI Reference.

.. note::

    This class is not intended to be directly instantiated by the user.

This object exposes attributes for the following components of a
URI:

- scheme
- authority
- path
- query
- fragment

.. attribute:: scheme

    The scheme that was parsed for the URI Reference. For example,
    ``http``, ``https``, ``smtp``, ``imap``, etc.

.. attribute:: authority

    Component of the URI that contains the user information, host,
    and port sub-components. For example,
    ``google.com``, ``127.0.0.1:5000``, ``username@[::1]``,
    ``username:password@example.com:443``, etc.

.. attribute:: path

    The path that was parsed for the given URI Reference. For example,
    ``/``, ``/index.php``, etc.

.. attribute:: query

    The query component for a given URI Reference. For example, ``a=b``,
    ``a=b%20c``, ``a=b+c``, ``a=b,c=d,e=%20f``, etc.

.. attribute:: fragment

    The fragment component of a URI. For example, ``section-3.1``.

This class also provides extra attributes for easier access to information
like the subcomponents of the authority component.

.. attribute:: userinfo

    The user information parsed from the authority.

.. attribute:: host

    The hostname, IPv4, or IPv6 adddres parsed from the authority.

.. attribute:: port

    The port parsed from the authority.
",26,81,1364,55
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\validators.py,Validator,"
Object used to configure validation of all objects in rfc3986.

.. versionadded:: 1.0

Example usage::

     >>> from rfc3986 import api, validators
     >>> uri = api.uri_reference('https://github.com/')
     >>> validator = validators.Validator().require_presence_of(
     ...    'scheme', 'host', 'path',
     ... ).allow_schemes(
     ...    'http', 'https',
     ... ).allow_hosts(
     ...    '127.0.0.1', 'github.com',
     ... )
     >>> validator.validate(uri)
     >>> invalid_uri = rfc3986.uri_reference('imap://mail.google.com')
     >>> validator.validate(invalid_uri)
     Traceback (most recent call last):
     ...
     rfc3986.exceptions.MissingComponentError: ('path was required but
     missing', URIReference(scheme=u'imap', authority=u'mail.google.com',
     path=None, query=None, fragment=None), ['path'])
",22,45,829,23
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\rfc3986\_mixin.py,URIMixin,"
Mixin with all shared methods for URIs and IRIs.
",11,12,48,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\packages\ssl_match_hostname\_implementation.py,CertificateError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\util\queue.py,LifoQueue,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\util\retry.py,Retry,"
Retry configuration.

Each retry attempt will create a new Retry object with updated values, so
they can be safely reused.

Retries can be defined as a default for a pool::

    retries = Retry(connect=5, read=2, redirect=5)
    http = PoolManager(retries=retries)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', retries=Retry(10))

Retries can be disabled by passing ``False``::

    response = http.request('GET', 'http://example.com/', retries=False)

Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
retries are disabled, in which case the causing exception will be raised.

:param int total:
    Total number of retries to allow. Takes precedence over other counts.

    Set to ``None`` to remove this constraint and fall back on other
    counts. It's a good idea to set this to some sensibly-high value to
    account for unexpected edge cases and avoid infinite retry loops.

    Set to ``0`` to fail on the first retry.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int connect:
    How many connection-related errors to retry on.

    These are errors raised before the request is sent to the remote server,
    which we assume has not triggered the server to process the request.

    Set to ``0`` to fail on the first retry of this type.

:param int read:
    How many times to retry on read errors.

    These errors are raised after the request was sent to the server, so the
    request may have side-effects.

    Set to ``0`` to fail on the first retry of this type.

:param int redirect:
    How many redirects to perform. Limit this to avoid infinite redirect
    loops.

    A redirect is a HTTP response with a status code 301, 302, 303, 307 or
    308.

    Set to ``0`` to fail on the first retry of this type.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int status:
    How many times to retry on bad status codes.

    These are retries made on responses, where status code matches
    ``status_forcelist``.

    Set to ``0`` to fail on the first retry of this type.

:param iterable method_whitelist:
    Set of uppercased HTTP method verbs that we should retry on.

    By default, we only retry on methods which are considered to be
    idempotent (multiple requests with the same parameters end with the
    same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.

    Set to a ``False`` value to retry on any verb.

:param iterable status_forcelist:
    A set of integer HTTP status codes that we should force a retry on.
    A retry is initiated if the request method is in ``method_whitelist``
    and the response status code is in ``status_forcelist``.

    By default, this is disabled with ``None``.

:param float backoff_factor:
    A backoff factor to apply between attempts after the second try
    (most errors are resolved immediately by a second try without a
    delay). urllib3 will sleep for::

        {backoff factor} * (2 ** ({number of total retries} - 1))

    seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep
    for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer
    than :attr:`Retry.BACKOFF_MAX`.

    By default, backoff is disabled (set to 0).

:param bool raise_on_redirect: Whether, if the number of redirects is
    exhausted, to raise a MaxRetryError, or to return a response with a
    response code in the 3xx range.

:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
    whether we should raise an exception, or return a response,
    if status falls in ``status_forcelist`` range and retries have
    been exhausted.

:param tuple history: The history of the request encountered during
    each call to :meth:`~Retry.increment`. The list is in the order
    the requests occurred. Each list item is of class :class:`RequestHistory`.

:param bool respect_retry_after_header:
    Whether to respect Retry-After header on status codes defined as
    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

:param iterable remove_headers_on_redirect:
    Sequence of headers to remove from the request when a response
    indicating a redirect is returned before firing off the redirected
    request.
",29,147,4341,118
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\util\ssl_.py,SSLContext,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\util\timeout.py,Timeout,"
Timeout configuration.

Timeouts can be defined as a default for a pool::

    timeout = Timeout(connect=2.0, read=7.0)
    http = PoolManager(timeout=timeout)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', timeout=Timeout(10))

Timeouts can be disabled by setting all the parameters to ``None``::

    no_timeout = Timeout(connect=None, read=None)
    response = http.request('GET', 'http://example.com/, timeout=no_timeout)


:param total:
    This combines the connect and read timeouts into one; the read timeout
    will be set to the time leftover from the connect attempt. In the
    event that both a connect timeout and a total are specified, or a read
    timeout and a total are specified, the shorter timeout will be applied.

    Defaults to None.

:type total: integer, float, or None

:param connect:
    The maximum amount of time to wait for a connection attempt to a server
    to succeed. Omitting the parameter will default the connect timeout to
    the system default, probably `the global default timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout for connection attempts.

:type connect: integer, float, or None

:param read:
    The maximum amount of time to wait between consecutive
    read operations for a response from the server. Omitting
    the parameter will default the read timeout to the system
    default, probably `the global default timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout.

:type read: integer, float, or None

.. note::

    Many factors can affect the total amount of time for urllib3 to return
    an HTTP response.

    For example, Python's DNS resolver does not obey the timeout specified
    on the socket. Other factors that can affect total request time include
    high CPU load, high swap, the program running at a low priority level,
    or other behaviors.

    In addition, the read and total timeouts only measure the time between
    read operations on the socket connecting the client and the server,
    not the total amount of time for the request to return a complete
    response. For most requests, the timeout is raised because the server
    has not sent the first byte in the specified time. This is not always
    the case; if a server streams one byte every fifteen seconds, a timeout
    of 20 seconds will not trigger, even though the request will take
    several minutes to complete.

    If your goal is to cut off any request after a set amount of wall clock
    time, consider having a second ""watcher"" thread to cut off a slow
    request.
",19,88,2824,69
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\util\url.py,Url,"
Data structure for representing an HTTP URL. Used as a return value for
:func:`parse_url`. Both the scheme and host are normalized as they are
both case-insensitive according to RFC 3986.
",26,29,187,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\urllib3\util\wait.py,NoWayToWaitForSocketError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\cmdparse.py,ScriptEmptyError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\cmdparse.py,Script,"
Parse a script line (in Pipfile's [scripts] section).

This always works in POSIX mode, even on Windows.
",24,27,104,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,TemporaryDirectory,"
Create and return a temporary directory.  This has the same
behavior as mkdtemp but can be used as a context manager.  For
example:

    with TemporaryDirectory() as tmpdir:
        ...

Upon exiting the context, the directory and everything contained
in it are removed.
",156,165,270,9
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,ResourceWarning,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,FileNotFoundError,"
No such file or directory
",79,80,25,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,PermissionError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,TimeoutError,"
Timeout expired.
",91,92,16,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,IsADirectoryError,"
The command does not work on directories
",98,99,40,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\compat.py,FileExistsError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\contextmanagers.py,FakeClass,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\misc.py,StreamWrapper,"
This wrapper class will wrap a provided stream and supply an interface
for compatibility.
",726,728,89,2
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\misc.py,_StreamProvider,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\misc.py,WindowsError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\path.py,_TrackedTempfileWrapper,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\spin.py,DummySpinner,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\spin.py,VistirSpinner,"
A spinner class for handling spinners on windows and posix.
",183,184,59,1
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,Py_buffer,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,CONSOLE_CURSOR_INFO,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,_WindowsConsoleRawIOBase,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,_WindowsConsoleReader,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,_WindowsConsoleWriter,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,ConsoleStream,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\_winconsole.py,WindowsChunkedWriter,"
Wraps a stream (such as stdout), acting as a transparent proxy for all
attribute access apart from method 'write()' which we wrap to write in
limited chunks due to a Windows limitation on binary console streams.
",283,286,211,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\backports\functools.py,partialmethod,"
Method descriptor with partial application of the given arguments
and keywords.
Supports wrapping existing descriptors and handles non-descriptor
callables as instance methods.
",10,14,176,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\backports\surrogateescape.py,NotASurrogateError,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\backports\tempfile.py,_TemporaryFileCloser,"
A separate object allowing proper closing of a temporary file's
underlying file object, without adding a __del__ method to the
temporary file.
",74,77,142,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\vistir\backports\tempfile.py,_TemporaryFileWrapper,"
Temporary file wrapper
This class provides a wrapper around files opened for
temporary use.  In particular, it seeks to automatically
remove the file when it is no longer needed.
",120,124,178,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\yarg\exceptions.py,YargException,,,,,
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\yarg\exceptions.py,HTTPError,"
A catchall HTTPError exception to handle HTTP errors
when using :meth:`yarg.get`.

This exception is also loaded at :class:`yarg.HTTPError`
for ease of access.

:member: status_code
",34,41,181,7
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\yarg\package.py,Package,"
A PyPI package.

:param pypi_dict: A dictionary retrieved from the PyPI server.
",37,40,79,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\yarg\parse.py,Package,"
A PyPI package generated from the RSS feed information.

:param pypi_dict: A dictionary retrieved from the PyPI server.
",99,102,119,3
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\yarg\release.py,Release,"
A release file from PyPI.

:param release_id: A release id.
:param pypi_dict: A dictionary of a release file.
",30,34,109,4
C:\Users\vaano\python_projects\pipenv\pipenv\vendor\yaspin\core.py,Yaspin,"
Implements a context manager that spawns a thread
to write spinner frames into a tty (stdout) during
context execution.
When Python finds its output attached to a terminal,
    it sets the sys.stdout.encoding attribute to the terminal's encoding.
    The print statement's handler will automatically encode unicode
    arguments into bytes.
    
    In Py2 when piping or redirecting output, Python does not detect
    the desired character set of the output, it sets sys.stdout.encoding
    to None, and print will invoke the default ""ascii"" codec.
    
    Py3 invokes ""UTF-8"" codec by default.
    
    Thats why in Py2, output should be encoded manually with desired
    encoding in order to support pipes and redirects.",33,36,119,3
C:\Users\vaano\python_projects\pipenv\tests\integration\conftest.py,_Pipfile,,,,,
C:\Users\vaano\python_projects\pipenv\tests\integration\conftest.py,_PipenvInstance,"
An instance of a Pipenv Project...
",279,280,34,1
C:\Users\vaano\python_projects\pipenv\tests\integration\conftest.py,VirtualEnv,,,,,
C:\Users\vaano\python_projects\pipenv\tests\integration\test_install_twists.py,TestDirectDependencies,"
Ensure dependency_links are parsed and installed.

This is needed for private repo dependencies.
",67,70,96,3
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\setup.py,UploadCommand,"
Support setup.py upload.
",19,20,24,1
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\app.py,Package,"
Package represents a collection of releases from one or more directories
",42,43,72,1
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\app.py,Artifact,"
Represents an artifact for download
",89,90,35,1
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\serve.py,ServerHandler,,,,,
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\serve.py,Handler,,,,,
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\serve.py,SecureWSGIServer,,,,,
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\serve.py,Server,"
HTTP server running a WSGI application in its own thread.
",81,82,57,1
C:\Users\vaano\python_projects\pipenv\tests\pytest-pypi\pytest_pypi\serve.py,SecureServer,,,,,
C:\Users\vaano\python_projects\pipenv\tests\unit\test_utils.py,TestUtils,"
Test utility functions in pipenv
",141,142,32,1
C:\Users\vaano\python_projects\pipenv\tests\unit\test_vendor.py,TestPipfileParser,,,,,
