"class","comment"
"BlBeaconTaskSignal","I am a ${class:Beacon}$ signal.I am emitted by ${class:BlBeaconLoggingTask}$.I inform about scheduling and executing of ${class:BLTask}$."
"BlSpaceRenderSignal","BlSpaceRenderSignal is used to record the start and end times of space rendering.  These can then be analysed and spaces that are slow, and thus are significantly impacting the frame rate, identified.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	space:		<Object>    Implementation Points"
"BlElementAddedToSuperParentEvent","Is sent by an element after it or any of its parents is added to another element as a child.Note: I am not sent when element is re-attached!"
"BlSpaceCloseRequest","I am a space close request sent by a windowing system asking a user application to handle a click on a window close button.Close request can allow us to implement a dialog question asking if use actually want to close a window. If window indeed should be closed an event handler of close request should ask space explicitely:[[[space close]]]After that space sents an actual BlSpaceClosedEvent that indicates that windows was indeed closed"
"BlSpaceShownEvent","I am sent by a space after it is shown.Example:[[[space := BlSpace new.space	addEventHandlerOn: BlSpaceShownEvent	do: [ self inform: 'Space shown' ].space show]]]Note:Behaves as SDL_WINDOWEVENT_SHOWN"
"BlGestureRotationEvent",""
"BlKeyUpEvent",""
"BlMouseLeaveEvent","The mouse leave event is fired when the pointer of a pointing device (usually a mouse) is moved out of an element.Mouse leave and mouse out are similar but differ in that mouse leave does not bubble and mouse out does.This means that mouse leave is fired when the pointer has exited the element and all of its descendants, whereas mouse out is fired when the pointer leaves the element or leaves one of the element's descendants (even if the pointer is still within the element).https://developer.mozilla.org/en-US/docs/Web/Events/mouseleave"
"BlUniverseResumed","Emitted when the Universe has been resumed."
"BlSingularMatrixError","I am signaled when matrix is singular and therefore can not be used for mathematical operations such as inverse"
"BlAffineTransformationLeftCenterOrigin","I am a relative transformation origin which is attached to the left center of an element."
"BlBackgroundExactResizer",""
"BlEqualizer",""
"BlSelectionHandler","I am a helper class intended to help developer implement drag-based selection.May be used to implement text selection or desktop like selection behaviour"
"BlAliasCursor",""
"BlProgressCursor",""
"BlZoomOutCursor",""
"BlScalableElement","I'm a helper element that transforms its #contentElement in order to exactly #scaleTo:  my size.!! Example:[[[	| content scalable |		content := BlElement new 		size: 20@20;		background: Color red.		scalable := BlScalableElement new.	scalable scaleStrategy: (BlScalableFixedStrategy zoom: 2). ""set custom zoom level""	scalable scaleStrategy: (BlScalableFitWidthStrategy new). ""Fit horizontally""	scalable scaleStrategy: (BlScalableFitHeightStrategy new). ""Fit vertically""	scalable scaleStrategy: (BlScalableFitAllStrategy new). ""Fit vertically and horizontally at the same time""	scalable constraintsDo: [ :c |		c horizontal matchParent.		c vertical matchParent ].	scalable contentElement: content.	scalable]]]"
"BlLeftAlignment","I represent left alignment.See BlLayoutAlignment for more info."
"BlVerticalCoordinateAlignment","I am a copy of class BlHorizontalCoordinateAlignment. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	coordinate:		<Object>	relativeAlignment:		<Object>    Implementation Points"
"BlElementChanges","! Element change logger and processorI log changes of various element properties during one frame. "
"BlDropShadowEffect",""
"BlEventErrorHandler",""
"BlExtentMeasurementSpec","I represent a measurement specification of element's width and height.I am used by Layouts"
"BlFocusabilityBlock",""
"BlGeomExactResizer","I am an exact geometry resizer.I make sure that geometry has a concrete size independent from its owner element"
"BlHostRendererFormSurface","I represent a form surface to be used by host renderer and host space.When used, rendering happens in a Form and than can be displayed in a morphic window"
"BlKeyboardBuffer","I log all key press events and allow users to detect what keys are pressed at any time.I allow ===BlKeyboardProcessor=== to sent key still pressed event every frame if there is at least one pressed key"
"BlLayoutLeftToRight","I am a concrete left-to-right direction"
"BlMatrixDecomposition2D","I am a decomposition of 2D matrix.https://drafts.csswg.org/css-transforms/#interpolation-of-2d-matrices"
"BlObjectPool","I represent a pool of objects"
"BlColorPaint","I am a concrete type of BlPaint that is just represented as a Color.Color paint is transparent then and only then when underlying color's alpha channel is 0"
"BlAttributeRope","I am a special type of rope that can contain a set of attributes.I am able to add attributes to any type of rope by decorating it with attribute rope, it means that I am not a leaf rope"
"BlScalableMaxDecorator","I allow users to specify a maximum scale value of the content inside of scalable element.Deafult max scale is set to 1.0"
"BlEmptyEventRecorder","I simply ignore all events (play a role event recorder in a space)"
"BlSplineOverScrollerNoneMode",""
"BlTask",""
"BlTransformation","I represent an element transformation and support both 2D and 3D transformations.For optimization purposes I use 2D matrix if 3D transformation was not requested. As soon as I'm transformed in 3D all further transformation will also happen with the help of 3D matrix."
"BlConnectionPointShape",""
"BlScrollerConstants",""
"BlParallelUniverseTryToRunDeferredActionsSignal","Is sent when a universe tries to run deferred actions"
"BlElementEvent","I am a root class of all element events that are sent by ==BlElement== as a reaction to various changes, for example position or extent.See ==BlElementEventExamples== for related examples."
"BlResizerResizedEvent","I am sent by an element with applied Resizer Listener after the resizing target was resized"
"BlSpaceMinimizedEvent",""
"BlGestureRotationBeginEvent",""
"BlKeyboardEvent",""
"BlMouseDownEvent",""
"BlUniverseEventsArrived","Emitted when new events arrive from the OS to be processed by Universe"
"BlChildrenSortedByPerimeter","I sort a collection of children by perimeter in ascending order."
"BlAffineTransformationOrigin","I represent an origin of the affine transformation.I can be very useful when users want to rotate / scale or shear an element about its center or one of the corners"
"BlPaintBackgroundBuilder",""
"BlElementEventListener",""
"BlResizerTopRightListener",""
"BlCursor","I represent the cursor used in the space.There are two general types of a cursor: ${class:BlNamedCursor} and ${class:BlStaticCursor}"
"BlNoDropCursor",""
"BlWaitCursor",""
"BlPannableElement",""
"BlHorizontalEndAlignment",""
"BlTopAlignment",""
"BlElementChangeRecord",""
"BlShadowEffect","I represent an abstract shadow effect applied on an element."
"BlSingleErrorHandler",""
"BlEventTraversalForwardingStep","The event is being manually forwarded to other dispatchers"
"BlFocusabilityAfter",""
"BlStadium","A stadium is a geometric figure consisting of a rectangle with top and bottom lengths a whose ends are capped off with semicircles of radius r."
"BlHostRendererSurface","I am a mediator between host space and host renderer"
"BlKeyCombinationConverterDNF","I transform composite key combination formula into a DNF (https://en.wikipedia.org/wiki/Disjunctive_normal_form)"
"BlLayoutCommonConstraintsAxis",""
"BlMatrix3D","I represent a matrix used for 3D affine transformations.https://en.wikipedia.org/wiki/Transformation_matrix#Examples_in_3D_computer_graphicsMy components are named according to mathematical convention: |  a11  a12  a13  a14  |                 |    sx     shy0  shz0   wx  | |  a21  a22  a23  a24  |       =>     |  shx0    sy     shz1   wy  | |  a31  a32  a33  a34  |                 |  shx1  shy1    sz      wz  | |  a41  a42  a43  a44  |                 |     x         y         z        w    |"
"BlMouseOtherButton","I represent all other mouse buttons that are not primary, middle or context.Nowadays there can be any number of mouse buttons, we have to support them"
"BlOvershootingSplineBasedScroller",""
"BlRay","A ray is a line with an endpoint that extends infinitely in one direction.I consist of a starting ===#point=== and a direction ===#vector==="
"BlScalableFixedStrategy","I allow users to set a custom zoom level of content element within scalable element"
"BlSpace","I am the logical representation of a window in Bloc regardless the current Host in use.!! Gracefully closing the image when a space is closedA common use-case is to shutdown Pharo when some particular space is closed. To do so we provide ${class:BlSpaceShutdownOnCloseListener} which can be added to any space as an event handler. It listens to ${class:BlSpaceClosedEvent} which is sent after a space is closed. See the listener class for configuration options."
"BlSplineOverScrollerMode",""
"BlStrokeLineRoundJoin","Rounds the outside edge with a circle the diameter of the stroke.See BlStrokeLineJoin for other types"
"BlRealTime","I am a just a traditional real time.[[[	| aTime |	aTime := BlTime real.	aTime now]]]"
"BlRectangleShape",""
"BlFocusChain","I represent a path of elements to the actual focused element.Even if  ""parent <-> child"" connection between elements is lost due to removing we still have all the necessary information to send FocusOut events.I am used by ${class:BlFocusProcessor}$ to properly send events"
"BlParallelUniverseSpaceDispatchAddedToSceneSignal","Is sent after we let children know that they were added to the scene graph"
"BlFocusOutEvent",""
"BlOvershootingScrollerRunEvent","I am sent by an overshooting scroller when it is run"
"BlSpaceResizedEvent",""
"BlGesturePinchEvent","Is sent periodically during the pinch gesture."
"BlGestureHoldEvent","Touch surface for extended period of time.Purposes/real world use cases: - to learn or get info about an item - to select and then drag or move (app icons)"
"BlClickEvent","The click event is fired when a pointing device button (a mouse's primary button) is pressed and released on a single element.The order of fired events: - Mouse Down - Mouse Up - Click"
"BlTouchUpEvent",""
"BlChildrenReversed","I reverse an underlying collection of children.${example:BlChildrenSubsetExamples>>#reversedChildrenFromElement}$"
"BlShearTransformation",""
"BlCompositeBackgroundBuilder","I am a BlBackground builder."
"BlEventHandler","I am a scriptable event handler that allows users to assign a valuable action to the event of chosen type.Example:[[[BlEventHandler	on: BlClickEvent	do: [ :anEvent | self inform: 'Click!' ]]]]"
"BlResizerTopLeftListener",""
"BlBoundsCache",""
"BlHelpCursor",""
"BlTextCursor",""
"BlOverlayElement","Overlay element relocates and resizes itself to have exactly the same bounds as some reference element.[[[element := BlElement new.overlay := BlOverlayElement on: element.container addChild: overlay.]]]"
"BlHorizontalCoordinateRightAlignment","The coordinate is measured from the right side of the outer bounds"
"BlVerticalAlignment",""
"BlElementExtentChange","I represent an extent change and notify a corresponding BlElementExtentChangedEvent"
"BlOverlayAboveEffect",""
"BlErrorHandler","I am responsible for error handling that occur in the ${class:BlElement}$"
"BlEventTraversalBubblingStep","The event is propagating back up through the target's ancestors in reverse order, starting with the parent, and eventually reaching the containing Root.This is known as bubbling, and occurs only if BlEvent>>#canBePropagated is true. Event listeners registered for this phase are triggered during this process."
"BlFocusSearchDirectionForward",""
"BlSigmoid",""
"BlHostPulseLoop","I am the Bloc main loop.I indicate to the Universe that is time to synchronize the state of the elements. A pulse is fired every 16ms (if possible) to obtain 60 frames per second (fps) maximum.  This may be delayed if there are background processes wanting to run (to ensure that background calculation of UI elements can complete).  See ${method:name=BlPulseLoop>>#wait} for details of how the loop time is regulated.The opened spaces listen the pulse to be synchronized and to update their state when it is needed."
"BlKeyCombinationVisitor","I am a visitor for ===BlKeyCombination=== composition tree.See my subclasses for all available visitors.Example:	result := keyCombination accept: visitor"
"BlIgnoredLayoutConstraintsHorizontal",""
"BlMatrix","I represent a transformation Matrix and define common API of 2D and 3D matrices"
"BlMousePrimaryButton","I am a primary mouse button. In most cases is bound to the left button."
"BlOverScrollNeverMode",""
"BlPoint4D",""
"BlScalableFitHeightStrategy","I make sure that content element fits vertically within scalable element.It makes sense to use me if scalable element has fixed or matching parent vertical size but fits content horizontally."
"BlSignalAnalysis","BlSignalAnalysis provides summary information and various views into a log of the main Bloc signals, i.e.:- ${class:name=BlPulseStatSignal}$- ${class:name=CurrentProcessSignal}$!!Live Signal AnalysisTo start an in-memory logger (before the event to be analysed occurs :-)):[[[BlSignalAnalysis startDefaultSampling.]]]If the expected number of events is large the circular buffer size can be increased, e.g.:[[[CircularMemoryLogger entryCount: 15000.]]]Once the event that is of interest has occurred:[[[BlSignalAnalysis stopAndInspect.]]]!!Saving Logging to DiskIf the system is remote, or the UI is locking up as part of the issue, it is also possible to save information to disk for later analysis:[[[BlSignalAnalysis startDefaultSampling.CircularMemoryLogger startAutoSaving.]]]Will save a snapshot of the logger each minute.  The log file can then be inspected with (substituting the appropriate file name):[[[BlSignalAnalysis gtInspectFile: 'CircularMemoryLogger.stgz']]] !!Internal Representation and Key Implementation Points.!!!Instance Variables	logger:		<SignalLogger>	pairs:		<Array>	slow:		<Array>	unfinished:		<Array>	triggerDuration:	<Duration>"
"BlSpaceFrameUnknownPhase",""
"BlStrokeLineBevelJoin","Cuts the outside edge off where a circle the diameter of the stroke intersects the stroke.See BlStrokeLineJoin for other types"
"BlTime","I encapsulate a concept of time and play a role of a time provider for Animations or other parts of the system that compute durations or how much time passed since some action.Bloc components must not directly rely on system time or hardcode it in any place because it prevents us from simulating spaces. The use of me makes system exemplifiable"
"BlThreeSegmentPolylineShape",""
"BrStencilDynamicExecutor",""
"TBlTransformable","I define an interface that transformable objects should implement in order to support affine transformations"
"BlParallelUniverseOpenSpaceRequestSignal","Is signalled when someone requests a universe to open a space."
"BlFocusEvent",""
"BlElementSelectionAcquiredEvent","Is sent when element gets inside of mouse selection rectangle or when the overlapping rectangle formed by element's bounds and selection rectangle changes.Text containing elements should react on this event and select a corresponding portion of text within selection rectangle"
"BlSpaceMouseLeaveEvent",""
"BlGesturePinchBeginEvent","Is sent right before the begin of a pinch gesture"
"BlGestureSwipeEvent",""
"BlDragStartEvent",""
"BlTouchDownEvent",""
"BlChildrenAccountedByLayout","I represent a subset of children that are accounted (not ignored) by layout.${example:BlChildrenSubsetExamples>>#accountedByLayoutChildrenFromElement}$"
"BlRotationTransformation","Specifies a rotation by the angle specified in the parameter about the origin of the element, as defined by the transformation #origin property. For example, rotate(90deg) would cause elements to appear rotated one-quarter of a turn in the clockwise direction.Corresponds to SVG rotate() functionhttps://drafts.csswg.org/css-transforms/#valdef-transform-rotate"
"BlTransparentBackground","I am a special case of transparent background.It is recommended to refer my unique instance since I am stateless and my superclass is immutable"
"BlEventDelegator","I delegate all events of type ==eventClass== or ones that inherit from it to the event target.I hold a strong reference to the event target"
"BlResizerLeftListener",""
"BlBorderBuilder","I am a BlBorder builder.BlBorder builder	paint: Color red;	width: 10;	build"
"BlGrabbingCursor",""
"BlResizeTopLeftCursor",""
"BlElement","! Welcome to BlocI am the root class of all visual elements in Bloc and can be composed out of other elements that we will refer to as ==children==. !! Visual propertiesBeing a root class and a core element I let users to configure a few esential visual properties such as background, border, opacity, size and a few more. In this part we will go through each of them.!!! Background${class:BlBackground}$describes how an element should be filled, e.g. its background.${class:BlBackgroundExamples}$ gives a detailed insight in the world of bloc backgrounds.!!! Border${class:BlBorder}$ is a visual property that defines how the outline of the element should be rendered. It also influences ==stroked bounds== of the element.${class:BlBorderExamples}$ provides more detailed information about a border.!!! OpacityOpacity defines how transparent an element is. It does not influence event propagation.${class:BlOpacityExamples}$ shows in details how opacity affects the element.!! CompositionTo be in-line with Bloc design we prefer composition over iheritance. Thus it is better to have tiny bloc elements with small and simple api and clear responsibilities that can later be composed into a more sophisticated graphical scene. In this paragraph we will learn the basic composition aspects and corresponding API.The composition relation between parent and children is 1:N meaning that an element can have at most one parent. Therefore by design it is only possible to add an element to just one element. Trying to add an element that is already a child to some other element results in ${class:BlAlreadyAddedAsChildError}$ Bloc elements provide a set of methods to add and remove children.!!! Adding childrenThere are four ways to add some given element as a direct child to another element.The most commonly used way to add a child is to use ${method:BlElement>>#addChild:}$ which adds a given element as the last child in the collection of children.[[[| parent child |parent := BlElement new size: 100@100; background: Color veryVeryLightGray.child := BlElement new size: 50@50; background: Color red lighter.parent addChild: child]]]Users may also choose to add an element as the first child, for that purpose Bloc provides ${method:BlElement>>#addChildFirst:}$.!!Geometry and boundsEvery element is responsible for drawing itself. At the same time, every element has a ${class:BlGeometry}$ that defines the bounds and the clipping.See ${class:BlGeometryVisualAndLayoutBoundsExamples}$ for concrete details.!!TutorialYou can learn Bloc following a memory game tutorial: ${icebergFile:path=feenkcom/Bloc/doc/tutorial-memory-game/00-memory-game.pillar}$."
"BlHorizontalCoordinateEndAlignment",""
"BlMiddleAlignment","I represent middle alignment.See BlLayoutAlignment for more info."
"BlElementLocalBounds",""
"BlNullEffect",""
"BlGlobalElevation","I represent a global element elevation given in Space coordinate system."
"BlEventHandlerAnnouncementDeliveryCondition",""
"BlFocusSearchDirectionRelative",""
"BlRectangle","I am a rectangular geometry with support of rounded corners.I can play a role of a square if both width and height are equal. In this case can be created using a predefined factory method:	BlRectangle length: 20 ""creates a square with side length of 20""	In order to explicitely create a rectangle use extent:	BlRectangle extent: 50@30 ""create a rectangle with width 50 and height 30"""
"BlHeadlessHost","I am a fallback host that is chosen if there are no other available and supported hosts."
"BlSingleKeyCombination","I represent a key combination that consists of one distinct key.I am play a role of a leaf in ===BlKeyCombination=== composition tree.Public API and Key Messages- key: initialize me with a given Key- key return an instance of Key that I represent as combination Examples:	BlSingleKeyCombination key: Key arrowUp		BlSingleKeyCombination new		key: Key arrowUp Internal Representation and Key Implementation Points.    Instance Variables	key:		<Key>    Implementation Points	#matches: returns true if key is pressed, which does not enforce the fact that there should be only one pressed key at a time		#match: return 1 if I match any pressed key and 0 otherwise"
"BlLayoutCommonConstraints","I represent  layout constraints common to all layout.I am responsible for storing and validating layout constraints. All my properties are meant to be immutable, so I always return an actual reference when requested.I provide a way to support layout specific constraints with help of association layout class -> layout specific constraints. It is guaranteed that I can be used by any kind of layout.I am used by BlElement and play a role of its layout constraints. Layouts referer to me in order to query layout constraints.Public API and Key Messages- at: return constraints specific for a layout- margin return element's margin- padding return element's padding   BlCommonConstraints new	maxHeight: 200;	minWidth: 50 Internal Representation and Key Implementation Points.    Instance Variables	constraints:		<Dictionary>	margin:			<BlInset>	maxHeight:		<Number>	maxWidth:		<Number>	minHeight:		<Number>	minWidth:		<Number>	padding:		<BlInset>    Implementation Points"
"BlLayoutMatchParentResizer",""
"BlMouseNamedButton","I am a root class of all mouse buttons with a name, e.g. ""primary"", ""secondary"" or ""middle"""
"BlOverScrollAlwaysMode",""
"BlPoint2D",""
"BlScalableStrategy","I am a scale strategy used to determine a neccessary scale factor of a content element within scalable element.Concrete implementations should override #scale:within: and return a number that represents a scale factor along both x and y axes."
"BlSelectionTree","I represent an augmented search binary tree to store intervals  described in Cormen et al. (2009, Section 14.3: Interval trees, pp. 348–354)[1]I am used by ${class:BlCompositeSelection}$I do not allow overlapping intervals to be stored in the same tree. Before every insertions I find overlapping and neighbouring intervals, merge them and replace all merged intervals with a single one.For example if tree contains the following intervals: [1,2] [5, 10] and user inserts a new one [3,4] then resulting tree will only consist of a single [1,10] interval.Both insertions and deletion have logarithmic complexity O(logN) where N is current amount of intervals stored.[1] Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2009), Introduction to Algorithms (3rd ed.), MIT Press and McGraw-Hill, ISBN 978-0-262-03384-8"
"BlSpaceFrameLayoutPhase",""
"BlStrokeLineSquareCap","Extends the stroke beyond the length of the path with a sharp 90-degree angle.See BlStrokeLineCap for other types"
"BlTaskAtTask","BlTaskAtTask is the object added to the queue by BlTaskAtQueue.  It stores the valuable and scheduled execution time.!!Internal Representation and Key Implementation Points.!!!Instance Variables	scheduledTime:		<DateAndTime>	valuable:				<Object>"
"BlLineShape",""
"BrStencilExecutor",""
"TBlSpaceProperties","I define interface for accessing space properties such as title, extent, borderless, fullscreen, position.I must be implemented by all host spaces for window specific implementation.By using this Trait in both Space and HostSpace we make sure that they have the same uniform API"
"BlParallelUniverseHostStartRequestSignal","I am sent when a universe requests a host to start"
"BlBaseFocusEvent",""
"BlElementRemovedEvent","Is sent by an element after it is removed from the parent.Note: I am not sent when element is detached!Example:[[[| child parent |child := BlElement new.child when: BlElementRemovedEvent do: [ self inform: 'Removed from parent' ].parent := BlElement new.parent addChild: child.parent removeChild: child]]]"
"BlSpaceFocusOutEvent","Is sent to the space when a window loses focus"
"BlGestureEvent","I am root class of all higher level gesture events.The structure is based on the following gesture specification:https://developer.mozilla.org/en-US/Apps/Fundamentals/User_input_methods/Touch_Gestures_and_Events"
"BlGestureSwipeBeginEvent",""
"BlDragLeaveEvent",""
"BlTextInputEvent","I am an event that it is fired when the user types some text.I usually represent a single character, but I can be composed of multiples code points, specially for complex writing systems as Chinese."
"BlChildrenRope","I am a holder that uses an ${class:BlCollectionRope}$ to store children of bloc elements.Internally I maintain one single ${class:BlCollectionRope}$ intance. When children are added or removed I add or remove them from the wrapped rope. !!ExamplesExamples are provided by the class ${class:BlChildrenRopeExamples}$"
"BlPerspectiveTransformation",""
"BlImageBackground","I am a special image type background given as Form.Note: I am never #isTransparent even if all Form pixels are transparent. The reason for this is the fact that ther is no fast way to detect if a Form is completly transparent without checking all pixels.!! Examples Examples are provided by the class ${class:BlImageBackgroundExamples}$."
"BlTouchProcessor",""
"BlResizerBottomListener",""
"BlUniverseEventListener",""
"BlDefaultCursor",""
"BlResizeRowCursor",""
"BlDropFilesEvent",""
"BlHorizontalCenterAlignment",""
"BlRelativeAlignment",""
"BlElementBoundsInParent",""
"BlClipOutInsetsEffect",""
"BlElementPolarToCartesianTransformation","(Proof of concept)I allow elements to define their position in polar coordinates[[[| container |container := BlElement new.container size: 200@200.container relocate: 300@170.container clipChildren: false.(0 to: 200 by: 200 / 72.0) with: (0 to: 720 by: 10)	do: [ :aRadius :anAngleInDegrees |		container addChild: (BlElement new			""define position of an element in Polar coordinates (R, phi)""			relocate: aRadius @ anAngleInDegrees;			""set transform from polar to cartesian coordinates""			transformation: BlElementPolarToCartesianTransformation new;			size: 3@3;			background: Color gray;			yourself) ].container]]]"
"BlEventDispatcherChain","I am a chain of BlEventDispatcher"
"BlFocusSearchDirectionRight",""
"BlPolygon","Example:BlPolygon vertices: { 	10@50.	50@20.	150@40.	180@150.	80@140}"
"BlHeadlessHostSpace","I am a fallback host space that is chosen if there are no other available and supported hosts."
"BlAlternativeCombination","I represent an alternative ""OR"" combination of multiple distinct keys. (disjunction)I am very useful to support shortcuts that treat different keyboard keys as identical.For example there might be two SHIFT keys: SHIFT_L (left shift) and SHIFT_R (right shift). In most cases for the end user there should be no difference between those two.Here is an example of how to unify two shifts:BlAlternativeCombination new	key: Key leftShift;	key: Key rightShift;	yourselfUnified meta (cmd):BlAlternativeCombination new	with: (BlSingleKeyCombination key: Key leftMeta);	with: (BlSingleKeyCombination key: Key rightMeta);	yourself"
"BlLayoutConstraints","I represent layout constraints and I am a superclass of all layout constraints.Layouts that require additional properties must subclass be and add an extension method to ===BlLayoutCommonConstraints===Since some constraints are also axis dependent (horizontal or vertical) I provide access to them through #horizontal and #vertical.See ===BlLayoutConstraintsAxis=== to learn more about axis-dependent constraints"
"BlLayoutFitContentLimitedResizer",""
"BlMiscProperties",""
"BlOutskirtsOutside",""
"BlPathCache","I am responsible for caching backend specific geometry path of the element.Geometry path is created with the help of backend-specific path builder by BlGeometry"
"BlConcatenationRopeIterator","I am a special iterator used to iterate over concatenation rope"
"BlMultipleSelection","I am just a collection of independent text selections that may overlap."
"BlSpaceFrameHostValidationPhase","I make sure that a host space is valid and re-create it if needed"
"BlStrokeLineButtCap","Ends the stroke with a sharp 90-degree angleThis is the initial value.See BlStrokeLineCap for other types"
"BlTaskAction",""
"BlCompositeShape",""
"BrValuableStencil","I am a special type of stencil whose ===#create=== method can be dynamically defined with the help of a valuable object.To get a Statefull version of the Stencil users can provide a collection of ===#arguments=== that will be passed to the valuable in the same order as in argument collection."
"TBlEventTarget","I implement a basic infrastructure of event management.Any object that needs to be able to handle events should use me."
"BlParallelUniverseHostSpaceCreatedSignal","Is sent after a host space was created and assigned to the space"
"BlImmutableObjectChangeError",""
"BlElementPositionChangedEvent","Is sent when element's position within its parent changes.Note: position may change even if an element has no parent"
"BlSpaceExposeEvent",""
"BlSpaceTasksEndEvent",""
"BlGestureBaseSwipeEvent",""
"BlDragEnterEvent",""
"BlMouseUpEvent",""
"BlChildrenLinkedList","I am a holder that uses a ${class:LinkedList}$ to store children of bloc elements.Internally I maintain one single ${class:LinkedList}$ instance. When children are added or removed I add or remove them from the wrapped list. !!ExamplesExamples are provided by the class ${class:BlChildrenLinkedListExamples}$"
"BlAffineCompositeTransformation",""
"BlBackground","! BackgroundI represent a background of the ${class:BlElement}$. """"I am immutable and can not be changed once created."""" To modify the background, create a new instance and set it by sending ${method:BlElement>>#background:}$!! Types of backgroundThere are multiple pre-built types of background: - paint background ${class:BlPaintBackground}$ which allows users to use any ${class:BlPaint}$ as a background - image background ${class:BlImageBackground}$ to use a bitmap ${class:Form}$ - composite background ${class:BlCompositeBackground}$ letting users to compose different types of background into one more complex background - transparent background ${class:BlTransparentBackground}$ as a special type of background that Background can be instantiated and composed directly or with the help of ==BlBackgroundBuilder==.See ==BlBackgroundBuilder== for the related examples."
"BlKeyboardProcessor",""
"BlResizerListener","I am an abstract listener associated with a specific resizer element (e.g., bottom right). My subclasses define the specific behavior.An element with applied Resizer Listener sends ==BlResizerResizedEvent== after the resizing target was resized"
"BlShortcutHandler","I am a special type of event handler designed to handle keyboard events in order to detect when it is time to perform a shortcut action.All defined shortcuts are stored in ===BlShortcutRegistry=== which can be accessed using #shortcutRegistry.I am a part of ===BlSimpleEventDispatcher=== which is a default event dispatcher in ===BlElement==="
"BlCopyCursor",""
"BlResizeLeftCursor",""
"BlDragSession",""
"BlCompositeAlignment",""
"BlNullRightAlignment",""
"BlElementBoundsInChild",""
"BlClipOutEffect",""
"BlElementCompositeTransformation","I am a composite transformation that consists of other element transformations, either absolute, local or composite"
"BlDirectEventDispatcher","I am an event dispatcher that directly dispatches events to the registered event handlers.I do not support event bubbling. If you need events to be dispatched through a composition tree you might want to use ${class:BlBubblingEventDispatcher}$.Example:[[[BlDirectEventDispatcher on: BlElement new]]]"
"BlFocusSearchDirectionDown",""
"BlLine","I define a geometry of a straight line"
"BlHandlerAnnouncerRegistry",""
"BlInsets","I am an immutable version of Margin.I represent a margin (for now of rectangle-based operations). From that perspective I represent a surface. This means that my width and height are the sum of the right and left distances and bottom top distances.I provide several creation methods but usually four points are necessary to fully specify my instances. "
"BlOnceLayout","I am a Layout decorator that makes other layouts to be computed only once.Example:[[[	| aLayout |			aLayout := BlOnceLayout on: BlGridLayout new.	aLayout isStopped. ""false""	"".... after layout is done....""	aLayout isStopped. ""true""]]]"
"BlLayoutResizer",""
"BlMeasurementUnspecifiedMode","I represent a concrete implementation of ""unspecified"" measurement mode.For more information see class comment of BlMeasurementMode"
"BlOutskirtsCentered",""
"BlImagePatternPaint",""
"BlAttributeRopeIterator","I am a special iterator used to iterate over attribute rope"
"BlEmptySelection","I am an empty selection"
"BlSpaceFrameDrawingValidationPhase",""
"BlSplineOverScrollerSplineStep",""
"BlRepeatedTaskAction",""
"BlVector3D","I represent a 3D Euclidean vectorhttps://en.wikipedia.org/wiki/Euclidean_vectorInstance creation:	vector := (2, 3, 5)"
"Bloc","I represent bloc setting that can be customised from Menu > Settings.I allow users to: - manually select preferable BlHost"
"TBlDrawingCache","I add support of drawing cache to any element.Simple use me in a class definition and implement explicitly required methods from private accessing protocol"
"BlParallelUniverseRunDeferredActionSignal","Is sent when a universe performed a deferred action"
"BlAlreadyAddedAsChildError","I am signalled when user tries to add an ${class:BlElement}$, that is already added to some other element as its child, to some other element."
"BlElementExtentChangedEvent","Is sent when element's extent in local coordinates changes."
"BlSpaceDragCancelEvent",""
"BlSpaceLayoutEndEvent",""
"BlGestureScrollEndEvent",""
"BlBaseDragEvent",""
"BlMouseOverEvent","The mouse over event is fired when a pointing device is moved onto the element that has the listener attached or onto one of its children.Similar to mouse enter, it differs in that it bubbles and that it is sent when the pointer is moved from one of its descendants' physical space to its own physical space.https://developer.mozilla.org/en-US/docs/Web/Events/mouseover"
"BlChildrenCollection","I am an abstract collection of bloc elements that can be mutated. I am used by a ${class:BlElement}$ to store its children.I provide a data structure independent API for adding and removing children. I assume an index-based way of working with children. My subclasses wrap concrete data structures for storing the actual children. Bloc elements work with children only in terms of the API that I provide. Hence, I only provide a minimum API needed to work with children, instead of the full collection API.I allow elements to optimize working with children for different scenarious. For example, an array for storing children optimises for accessing fast accesses at any position. A linked list optimize for fast adding and removing. A rope uses a balanced binary tree to support fast adding, removing and accessing, with the disadvantage of taking more memory.!!APIThe following subclasses can be used to store children: - ${class:BlChildrenArray}$: stores children using an ${class:Array}$ - ${class:BlChildrenLinkedList}$: stores children using a ${class:LinkedList}$  - ${class:BlChildrenOrderedCollection}$: stores children using a ${class:OrderedCollection}$- ${class:BlChildrenRope}$: stores children using a ${class:BlCollectionRope}$Subclasses need to provide the implementation for methods adding and removing children."
"BlOnActionHandler",""
"BlAffineTransformationRightCenterOrigin","I am a relative transformation origin which is attached to the right center of an element."
"BlFocusProcessor",""
"BlOverlayListener","I am an event listener that overlay element adds to the reference element in order to relocate and resize itself according to that element"
"BlSpaceEventListener",""
"BlCellCursor",""
"BlResizeBottomRightCursor",""
"BlDragDelegate","Drag delegate provides drag items when a visual element lifts.Drag gesture fails if there are no drag items"
"BlZoomableElement","I am an extended version of a scalable element with zoom support"
"BlNullHorizontalAlignment",""
"BlElementBounds","I represent rectangular bounds in a context of a reference element.I define an api to convert element bounds from one coordinate system to other coordinate systems.Reference element always corresponds to an element which was used to compute bounds"
"BlBlurAboveEffect",""
"BlElementAbsoluteTransformation","I represent an absolute transformation defined only by transformation matrix"
"BlTaskErrorHandler",""
"BlFocusSearchDirection","I represent an abstract direction in which the next focusable element should be searched"
"BlCircle",""
"BlHandlerAnnouncementSubscription",""
"BlHostSurfaceRenderer",""
"BlLayout","!Bloc layoutI am the superclass for layouts in Bloc and I define the API that a concrete layout needs to implement.I am attached to a bloc element and define the visual structure of that bloc element. Tipically this includes the position of child elements within the parent, or the size of the parent element. !!Layout constraintsI support a set of attributes (refered to as constraints in Bloc) which define the visual properties of the layout. A small set of constraints, like padding, margin or minimal and maximum dimensions, are common among all the layouts. Each layout has a dedicated constraint objects, instance of ${class:BlLayoutCommonConstraints}$, that contain these common constraints. Each type of layout can further define its own specific constraints by creating a subclass of ${class:BlLayoutConstraints}$. TODO: constraints API!!Layout phase in a frameLayouting of elements is a phase executed by a space during every frame. Every frame, the space goes through several phases (${method:BlSpaceFrame>>#initializePhases}$). Phases are modeled as subclasses of ${class:BlSpaceFramePhase}$ and are executed once per frame. One of them, ${class:BlSpaceFrameLayoutPhase}$, consists in layouting the elements contained in the space. This is done after events and tasks have been executed, but before the drawing phase.Layouting should to be executed during a frame when various properties like, width, height or position change in any element contained by the space. However, an important aspect in Bloc, is that when one of these properties changes, layouting is not performed immediately. Instead, a layout request is issued by the element whose property changed using the message ${method:BlElement>>#requestLayout:}$. This has the advantage that if no element request layout, this phase can be skipped. Also it does not matter if layout is requeste one or 1000 time; only one layout phase is performed improving performance. Hence, in Bloc layout is not executed immediately after a property like the width of an element changes. Instead layout is requested and perfomed, if needed, during every frame. When needing to test layouts, however, it is necessary to apply a layout immediately, instead of waiting for a frame to end. That can be done using the messafe ${method:BlElement>>#forceLayout}$; this should not be used outside of tests, as it bypasses the normal layouting system from Bloc.In a space where all elements have no event handlers for layout events, elements are going to be layouted exactly once during the layouting phase. However, often elements need to reach and perform actions, when for example their position or extent changes. They can react by requesting another layout. A tipical example is deadling with edges. An edge can be layouted only after the position of the elements that it connects is known. Hence, often the layout needs to be applied twice, or more, during the layouting phase. The space only allows layout requests during the layouting phase a limited number of times (${method:BlSpace>>#computeLayout}$) to avoid blocking rendering due to infinite recursions caused by layout requests, or void spending too much time on layouts in a frame. More technical details can be found in the method ${method:BlSpace>>#doLayout}$, the main entry point for executing the layout phase in a space.!!Performing a layoutThe space starts the layouting process on the root element of that space. Performing the layout on an element consists in executing three main steps:	- measuring bounds: determine the bounds of the element according to its layout;	- applying the layout: determine the position of children within the element;	- commiting changes: raise layout events like position or extent changed.TODO: why three separate steps?!!!Measuring boundsThis is the first step when performing a layout on an element and consists in determening the measured bounds of that element. Each element can decide how it wants to be measured (${method:BlElement>>#onMeasure:}$). By default ${class:BlElement}$ delegates the measuring to its layout. Layouts should override ${method:BlLayout>>#measure:with:}$ to implement the actual measuring. Normally layouts follow a top to bottom approach: they measure the current element and then asks its children to do the measuring.Each element has real bounds (${BlElement>>#bounds}$) and measured bounds (${BlElement>>#measuredBounds}$). The real bounds contain the actual position and extent of an element that users of that element should rely on. The measured bounds are used during layouting to hold the new extent of an element. The measuring phase changes only the extent in the measured bounds. After the entire layout phase is completed the real bounds and measured bounds will have the same value. The measured bounds act like a temporary cache for the new bounds of an element. They were introduced to avoid changing the real extent of element while layouting of children is still being performed. (TODO: explain why position is sometime changed in the measured bounds)!!!Applying the layout!!!Commiting changesTODO	- Space starts the measurement process from the root element; after measurement it tell children to measure themselves, etc	- measurement; top to bottom though all the composition of elements.		- this step find the size of an element and sets measuredExtent (or position sometimes)	- space starts the layout step		- as we know the size of each child we compute the actual position for each child		- changes the real extent to measured extent and the real position to the computed layout position	- Elements announce events for position and extent changed		Without event handlers the layout process is going to happen only once.	For example when nodes change the position edges should be updated.	!!Layout eventsTODO!!Layout APII define an api of a layout. Concrete implementations should focus on measure:with: and layout:in:	"
"BlLayoutHorizontal","I am a concrete horizontal orientation"
"BlMeasurementAtMostMode","I represent a concrete implementation of ""at most"" measurement mode.For more information see class comment of BlMeasurementMode"
"BlSynchronizedObjectPool",""
"BlLinearGradientPaint",""
"BlSubRope","I a special type of rope used to represent a sub rope for the case when rebuilding the whole binary tree does not make since, so I just decorate an original rope limiting its access by using an offset and allowed length"
"BlSelection","I represent a text selection defined as interval [from...to]"
"BlSpaceFramePhase","I represent a frame phase.Each phase knows about its start time and send a corresponding event once the phase is completed."
"BlSplineOverScrollerBallisticStep",""
"BlDelayedTaskAction",""
"BlVector","I represent an abstract dimension-less vector.My subclasses implement API for concrete spaces (2D, 3D, etc).I define basic vector function such as:	- length	- negated	- normalized	Instance creation examples:Create a 2D vector:	BlVector x: 10 y: 20	or	(10, 20)	Create a 3D vector:	BlVector x: 10 y: 20 z: 30	or	(10, 20, 30)"
"BlVisibilityHidden","I am a concrete visibility type - ""hidden"".Once set, element should not be rendered but should participate in layout and take space."
"TBlAlignable","I add alignment api in both axis simultaneously.My users are layout related classes"
"BlParallelUniverseSignal",""
"BlTaskAtErrorSignal","BlTaskAtErrorSignal is used when BlTaskAtQueue encounters an error during execution.- If the error occurs while evaluating a task the task is set.- In all cases a message and the exception is set. !!Internal Representation and Key Implementation Points.!!!Instance Variables	exception:		<Error>	the exception encountered during execution	message:			<String>	a message about where the error was encountered	task:				<Object>	the task being evaluated when the error was encountered"
"BlElementBackgroundChangedEvent","Is sent when element's background changes.Example:[[[| element |element := BlElement new.element when: BlElementBackgroundChangedEvent do: [ self inform: 'Background changed' ].element background: Color blue]]]"
"BlSpaceClosedEvent","I am sent by a space after it is removed from the space manager and its root element is removed from the scene graph.However, the event is send before the host containing the space is stoped (if this is the last space).This event should be used for implementing actions when a space is closed. Example:[[[space := BlSpace new.space	addEventHandlerOn: BlSpaceClosedEvent	do: [ self inform: 'Space closed' ].space close]]]"
"BlSpaceStepEvent",""
"BlGestureBaseScrollEvent",""
"BlShortcutEvent","Is sent by Keyboard processor to currently focused element in order to allow it to detect if any shortcuts are triggered based on currently pressed key stored in a buffer.Public API and Key Messages- buffer return a ===BlKeyboardBuffer=== that knows what keys are pressed at the moment. Internal Representation and Key Implementation Points.    Instance Variables	buffer:		<BlKeyboardBuffer>    Implementation PointsI must be set to ===consumed=== if there was a matching shortcut."
"BlMouseMoveEvent","The mouse move event is fired when a pointing device (usually a mouse) is moved while over an element.https://developer.mozilla.org/en-US/docs/Web/Events/mousemove"
"BlUniverseSuspended","Emitted when the Universe has been suspended."
"BlExternalForm","An ExternalForm is a specialized Form whose pixel-data is stored in memory that the user provides a pointer to.  This can simply be memory on the C heap, or (the motivating use-case...) it can be a pointer that is temporarily ""mapped"" from GPU memory by an API such as OpenCL.NOTE: This is a copy of original ExternalForm implementationIMPORTANT: Moved form FFI to SDL2 because is not needed there anymore but OSWindow-SDL2 package uses it.The user is responsible for both releasing the image-memory, as well as destroying the surface handle (perhaps the latter should be handled by automatic finalization).Example usage:| extent form ptr |extent := 400@300.form := ExternalForm extent: extent depth: 32.ptr := ExternalAddress gcallocate: (extent x * extent y * 4).form setManualSurfacePointer: ptr.Display displayScaledOn: form.form displayAt: 0@0.form destroySurface."
"BlAffineTransformationNormalizedPositionOrigin","I allow users to provide a fixed normalized location (top left is 0@0 and bottom right is 1@1, negative and larger values are allowed) that should be used as transformation origin"
"BlBackgroundMatchResizer",""
"BlWidthEqualizer",""
"BlVisualSelectionHandler","I extend selection handler in the sense that I add a visual selection rectangle that resizes itself during mouse drag.I simulate Desktop behaviour of most OS"
"BlAllScrollCursor",""
"BlResizeBottomCursor",""
"BlStaticCursor",""
"BlScrollableElement",""
"BlRightAlignment","I represent right alignment.See BlLayoutAlignment for more info."
"BlVerticalCoordinateBottomAlignment",""
"BlElementEffect","I am the abstract root class for effects.I define the default drawing strategy (before & after).My subclasses can be composed as a chain of effects.I can influence the bounds of my owner (used to clip my owner)."
"BlSimpleShadowEffect","I am very simple shadow effect. I just render a plain flat colored geometry of an element on which I am applied with an offset."
"BlIdleErrorHandler",""
"BlFocusFinder","I am a focus finder.I am responsible for finding the next focusable element in a given direction from provided focused element"
"BlGeometry","The geometry is used to define the geometry to be drawn and the interaction area."
"BlGeomMatchResizer","I am a match geometry resizer.I make sure that geometry is always as big as its owner element and resizes together with it"
"BlHostRendererOpenGLSurface","I represent an OpenGL surface to be used by host renderer and host space.When used, rendering happens using OpenGL context and than can be displayed in a native window"
"BlKeyboardKey","!! Code generationInstance creation methods for the english alphabet are generated using the following script[[[			($A to: $Z) do: [ :c | BlKeyboardKey class compile: c asString uncapitalized, '	<return: #', BlKeyboardKey name, '>	^ self named: #', c asString classified: 'keys - letters' ].#(zero one two three four five six seven eight nine) withIndexDo: [ :n :i | BlKeyboardKey class compile: n asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #''', (i - 1) asString, '''' classified: 'keys - digits' ].(1 to: 12) do: [ :n | BlKeyboardKey class compile: 'F', n asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #F', n asString classified: 'keys - functions' ].#(Return Tab Space Delete Escape CapsLock Function Backspace) do: [ :n | BlKeyboardKey class compile: n uncapitalized asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #', n asString classified: 'keys - special' ].#(VolumeUp VolumeDown Mute) do: [ :n | BlKeyboardKey class compile: n uncapitalized asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #', n asString classified: 'keys - sound' ].#(PageUp PageDown ArrowLeft ArrowRight ArrowUp ArrowDown Home) do: [ :n | BlKeyboardKey class compile: n uncapitalized asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #', n asString classified: 'keys - navigation' ].#(MetaLeft MetaRight ShiftLeft ShiftRight ControlLeft ControlRight AltLeft AltRight) do: [ :n | BlKeyboardKey class compile: n uncapitalized asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #', n asString classified: 'keys - modifiers' ].#(Minus Equal LeftBracket RightBracket Quote Semicolon Backslash Comma Slash Period Grave) do: [ :n | BlKeyboardKey class compile: n uncapitalized asString, '	<return: #', BlKeyboardKey name, '>	^ self named: #', n asString classified: 'keys - symbols' ].]]]"
"BlLayoutRightToLeft","I am a concrete right-to-left direction"
"BlMatrixDecomposition3D","I am a decomposition of 3D matrix"
"BlArrayObjectPool",""
"BlTransparentPaint","I am a special transparent case of a color paint.Most of the elements have transparent backgrounds or stroke.It is prefereable to refer my unique instance, since I am stateless"
"BlCollectionRope","I am a special rope that is able to hold arbitrary items in a collection data structure.My recommended maximum length (size) is defined in BrRope class>>#combineLength"
"BlScalableMinDecorator","I allow users to specify a minimum scale value of the content inside of scalable element.Deafult min scale is set to 1.0"
"BlMemoryEventRecorder","I record events in a collection"
"BlSplineOverScrollerScrollMode",""
"BlBeaconLoggingTask","I use ${class:Beacon}$ to log when a ${class:BlTask}$ is scheduled and executed..I emit ${class:BlBeaconTaskSignal}$.I should be instantiated using ${method:BlBeaconLoggingTask class>>#subtask:}$."
"BlTransformationBuilder","I a transformation builder and allow users to create and modify complex transformation chains.Example of a builder that appends new transformations to existing ones:element transform	inherit;	origin: (BlAffineTransformationPositionOrigin position: 0@0);	translateBy: (BlVector x: 100 y: 100 z: 0);	scaleBy: (BlVector x: 2 y: 0.5 z: 1);	apply"
"BlVisibility","I represent a visibility type and can be	""gone"" - element is not visible and does not take any space in layout	""hidden"" - element is not visible but participates in layout	""visible"" - normal visiblityVisibility is independent from opacity, which is just a visual property.Invisible (gone or hidden) elements don't receive event, while transparent (opacity = 0) do receive.If you want to make element transparent and preserve ability to handle events set opacity to zero:==element opacity: 0=="
"BlWeakRef",""
"BlPulseStatSignal","${class:BlPulseStatSignal}$ records some basic statistics about the Bloc main loop and is emitted each time a pulse is fired.  See ${class:BlPulseLoop}$ for more details and ${method:name=BlPulseLoop>>#wait}$ for a description of milliSecs.${method:BlPulseStatSignal>>#sampleCount}$ is the number of pulses fired in this sample.${method:BlPulseStatSignal>>#l2}$ is the number of times milliSecs <= 2.${method:BlPulseStatSignal>>#min}$ is the minimum value of millliSecs in the sample set.${method:BlPulseStatSignal>>#max}$ is the maximum value of milliSecs in the sample set.${method:BlPulseStatSignal>>#lowPriorityDelayCount}$ is the number of times a minimum delay of half the normal period is forced (to give low priority processes CPU time).!!!Using BlPulseStatSignal${method:BlPulseLoop>>#wait}$ calls ${method:name=BlPulseStatSignal class>>#duration:delayForced:}$ each time it waits.  A signal is then emitted every sampleCount times.Normally the signals are caputred using ${class:name=CircularMemoryLogger}$ or ${class:name=MemoryLogger}$.If ${method:BlPulseStatSignal>>#lowPriorityDelayCount}$ is consistently 3 or less it suggests that low priority processes are not being starved of CPU time.If ${method:BlPulseStatSignal>>#min}$ is consistently above about 5ms it suggests that the Bloc Main Loop is not stressed.  Conversely, min having values less than 0 consistently suggests that the system is not keeping up with the display requirements (low priority processes will still get some CPU time, but will be quite sluggish).!!Internal Representation and Key Implementation Points.!!!Instance Variables	l2:						<Integer>	lowPriorityDelayCount:		<Integer>	max:					<Integer>	min:		<Integer>	sampleCount:		<Integer>"
"BlElementAddedToParentEvent","Is sent by an element after it is added to the parent.Note: I am not sent when element is re-attached!Example:[[[| child parent |child := BlElement new.child when: BlElementAddedToParentEvent do: [ self inform: 'Added to parent' ].parent := BlElement new.parent addChild: child.]]]"
"BlSpaceEvent",""
"BlSpaceScaledEvent","I am sent by a windowing system when a resolution of the window changes"
"BlGestureRotationEndEvent",""
"BlKeyDownEvent",""
"BlMouseEnterEvent","The mouse enter event is fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.Similar to mouse over, it differs in that it doesn't bubble and that it isn't sent when the pointer is moved from one of its descendants' physical space to its own physical space.With deep hierarchies, the amount of mouse enter events sent can be quite huge and cause significant performance problems. In such cases, it is better to listen for mouse over events.https://developer.mozilla.org/en-US/docs/Web/Events/mouseenter"
"BlUniverseEventsCleared","Emitted when all of the event loop's events have been processed and control flow is about to be taken away from the Universe."
"BlShortcutRegistry","I am a shortcut registry and contain a collection of ===BlShortcut==="
"BlAffineTransformationCenterOrigin","I am a relative transformation origin which is attached to the center of an element."
"BlBackgroundResizer","I am an abstract background resizer.My main responsibility is to adapt background to element's size.My subclasses must implement adapt:to:"
"BlDragHandler",""
"BlScrollableElementEventHandler",""
"BlNamedCursor",""
"BlNotAllowedCursor",""
"BlZoomInCursor",""
"BlPlaneElement","Plane element represents a flat, two-dimensional surface that extends infinitely far.By definition I do not clip my children"
"BlHorizontalStartAlignment",""
"BlVerticalCenterAlignment",""
"BlElementChangeRecordWithContext",""
"BlGaussianShadowEffect","I use gaussian blur to produce a smooth shadow in a form of element's geometry.The use of gaussian shadow is quite expensive in terms of rendering. Therefore I implement a drawing cache of the blurred shadow itself"
"BlDrawingErrorHandler","I handle errors happened during rendering phase.To not completely break the UI thread we should catch the error and prevent the element from further rendering"
"BlEventTraversalTargetStep","The event has arrived at the event's target. Event listeners registered for this phase are called at this time. If BlEvent>>#canBePropagated  is false, processing the event is finished after this phase is complete."
"BlFocusabilityBefore",""
"BlGeometryResizer","I am an abstract geometry resizer.My main responsibility is to adapt geometry path to element's size.Every time element's size changes I adapt a given geometry path to an element.My subclasses must implement adapt:to:"
"BlHostRendererBufferSurface","I represent a pixel buffer surface to be used by host renderer and host space.When used, rendering happens in a pixel buffer and than can be displayed in a native window"
"BlKeyModifiers",""
"BlLayoutDirection","I represent an abstract layout direction.There are left-to-right (LTR) and right-to-left (RTL) languages. Language direction influences the alignement of elments within layouts.I do not have any logic and can only used as direction flag. Layouts that have direction specific logic should impelment their own object oriented mechanism"
"BlMatrixDecomposition","I represent a matrix decomposition in components.For example in case of 2D matrix they are:	- translation	- scale	- rotation angle	- top left 2x2 minor of original matrix	3D (4x4) matrices are decomposed as follows:	- translation	- scale	- skew	- perspective	- quaternion"
"BlMouseDragState",""
"BlPaint","I am a root class of all Paints in Bloc.Paints are used for background, border, text fill or stroke.All paints are meant to be immutable"
"BlRope","Rope is a data structure for storing text. It is an alternative to array or buffer-based data structures. A rope is a tree of concatenation nodes representing character strings. In addition to concatenation nodes, depending on implementation, a rope may include subset nodes, reverse nodes or other custom types of nodes. A rope allows text editors to manipulate large pieces of text and makes text operations such as random access, insertion and deletion very efficient. However, to maintain high efficiency a rope must be re-balanced otherwise it may lose its binary search tree properties and operations become inefficient.If all operations are implemented in a non-destructive way, a rope becomes a persistent data structure. To enforce that, any modification should return a new node instance with applied changes. A root node of the returned rope, in this case, does not necessarily have the same type as the one that was modified. From a text editor perspective, persistence makes it easier to implement undo/redo commands and helps to prevent multithreading issues when it comes to text styling.A rope is a binary tree having leaf nodes that contain a short string. Each node has a weight value equal to the length of its string plus the sum of all leaf nodes' weight in its left subtree, namely the weight of a node is the total string length in its left subtree for a non-leaf node, or the string length of itself for a leaf node. Thus a node with two children divides the whole string into two parts: the left subtree stores the first part of the string. The right subtree stores the second part and its weight is the sum of the left child's weight and the length of its contained string.The binary tree can be seen as several levels of nodes. The bottom level contains all the nodes that contain a string. Higher levels have fewer and fewer nodes. The top level consists of a single ""root"" node. The rope is built by putting the nodes with short strings in the bottom level, then attaching a random half of the nodes to parent nodes in the next level.I can be enumerated with the help of ${class:BlRopeIterator}$.https://en.wikipedia.org/wiki/Rope_(data_structure)"
"BlScalableStrategyDecorator","I am a decorator of a scalable strategy and allow users to have a deeper customization of scalable element's behaviour"
"BlSpaceEventRecorder","I am used to record space events coming from the host window"
"BlSplineOverScrollerFlingMode",""
"BlStrokeStyle",""
"BlSimulatedTime","I am a simulated time that must be progressed manually by setting ===#date:=== directly or by advancing the clock by a duration.[[[	| aTime |	aTime := BlTime simulated.	aTime date: (DateAndTime year: 2018 month: 3 day: 31).	aTime wait: 2 seconds. ""progress clock by 2 seconds""	aTime now]]]"
"BlPointShape",""
"BlParentChain",""
"BlParallelUniverseSpaceRootAssignedSignal","Is sent after a space is attached to the root"
"BlFocusTransferEvent",""
"BlPulseEvent",""
"BlSpaceMaximizedEvent",""
"BlGestureBaseRotationEvent",""
"BlGestureTapEvent","Briefly touch surface with fingertip.Purposes/real world use cases: - primary action - selecting - submitting - option menu: in touchpads using 2 fingers"
"BlDoubleClickEvent",""
"BlUniverseEvent","I am an event that is sent to the universe by the host to control the Universe's lifecycle"
"BlChildrenSortedByElevation","I sort a collection of children by elevation in ascending order.${example:BlChildrenSubsetExamples>>#sortedByElevationFromElement}$"
"BlTranslationTransformation","Specifies a translation by the vector (x, y, z).Corresponds to SVG translate() functionhttps://drafts.csswg.org/css-transforms/#valdef-transform-translate"
"BlImageBackgroundBuilder",""
"BlEventListener",""
"BlResizerTopListener",""
"BlCornerRadii","I define the shape of the corner of a rectangle geometry (BlRectangle).If corner radius is zero, the corner is square, not rounded. The radius also causes the element's background to be rounded .Negative values are not allowed.@see BlRectangle"
"BlMoveCursor",""
"BlVerticalTextCursor",""
"BlResizerElement","I am an overlay that provides the mechanism of resizing a referenceElement. I have eight resizing elements for which the dragging logic are defined in the ==BlResizerListener== hierarchy.Users might want to specify that I should ==preventMouseEvents== in order to still allow the user to interact with the ==referenceElement== even when I am active."
"BlHorizontalCoordinateStartAlignment",""
"BlBottomAlignment",""
"BlElementPositionChange","I represent a position change and notify a corresponding BlElementPositionChangedEvent"
"BlOverlayBelowEffect",""
"BlCompositeErrorHandler",""
"BlEventTraversalCapturingStep","The event is being propagated through the target's ancestor objects.This process starts with the Space, then Root, then the Element, and so on through the elements until the target's parent is reached. Event listeners registered for capture mode when EventTarget addEventFilter: was called are triggered during this phase."
"BlFocusability",""
"BlSquare",""
"BlHostRenderer","Host renderer is resposible for the overall rendering logic"
"BlKeyCombinationConverterCNF","I transform composite key combination formula into a CNF (https://en.wikipedia.org/wiki/Conjunctive_normal_form)"
"BlIgnoredLayoutConstraintsVertical",""
"BlMatrix2D","I represent a matrix used for 2D affine transformations.https://en.wikipedia.org/wiki/Matrix_(mathematics)My components are named according to mathematical convention: |  a11  a12  |                 |   sx     shy  | |  a21  a22  |       =>     |  shx    sy    | |  a31  a32  |                 |    x        y     |"
"BlMouseSecondaryButton","I am a secondary mouse button. In most cases is bound to the right button and used to invoke a contextual menu"
"BlOvershootingScroller","I encapsulate animated smooth scrolling in both X and Y directions with the ability to overshoot the bounds of a scrolling operation.For each axis I contain a separate spline based overshooting scroller (BlOvershootingSplineBasedScroller).! Scrolling modesThere are two types of smooth scroll modes: fling and smooth scroll. !! FlingThe goal of Fling is to simulate physics and gravity so that it could be used for finger-based scrolling. Fling's behaviour is implemented based on spline approximation and supports overshooting distance. !! Smooth scrollIs a simple smooth animated scroll without support of the overshooting and that relies on an interpolator to compute scroll delta"
"BlQuaternion","Unit quaternions, also known as versors, provide a convenient mathematical notation for representing orientations and rotations of objects in three dimensions. Compared to Euler angles they are simpler to compose and avoid the problem of gimbal lock. Compared to rotation matrices they are more compact, more numerically stable, and may be more efficient. Quaternions have applications in computer graphics, computer vision, robotics, navigation, molecular dynamics, flight dynamics,[1] orbital mechanics of satellites[2] and crystallographic texture analysis.[3]When used to represent rotation, unit quaternions are also called rotation quaternions. When used to represent an orientation (rotation relative to a reference coordinate system), they are called orientation quaternions or attitude quaternions.https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Using_quaternion_rotations"
"BlScalableFitWidthStrategy","I make sure that content element fits horizontally within scalable element.It makes sense to use me if scalable element has fixed or matching parent horizontal size but fits content vertically."
"BlSmoothScroller",""
"BlSpaceManager","I am a Universe space manager.I contain Bloc spaces, can add or remove them. I am also responsible for sending pulses(tick) messages to spaces I know.I am used by Universe in order to provide support of multiple spaces within the Universe.- addSpace: add a space- removeSpace: remove a given space- clear close all spaces- pulse send pulse message to all spaces   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	spaces:		<Object>    Implementation Points"
"BlStrokeLineMiterJoin","Extends the stroke to where the edges on each side bisect.This is the initial value.See BlStrokeLineJoin for other types"
"BlFastForwardedTime","I am a time with an ability to manipulate its speed, make it run faster or go slower.[[[	| aTime |	aTime := BlTime fastForwarded.	aTime speed: 0.5. ""slow down""	aTime speed: 2. ""speed up""	aTime now]]]"
"BlTwoSegmentPolylineShape",""
"BrStencilValuableExecutor",""
"ManifestBloc","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BlParallelUniverseSpaceAddedSignal","Is sent when a space was added to the space manager in a universe"
"BlFocusInEvent","The ===BlFocusInEvent=== event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the ===BlFocusEvent=== event, in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling)."
"BlElementSelectionLostEvent","Is sent when element is no longer within mouse selection rectangle"
"BlSpaceMovedEvent",""
"BlGesturePinchEndEvent","Is sent right after the end of a pinch gesture"
"BlGestureDoubleTapEvent","Rapidly touch surface twice with fingertip.Purposes/real world use cases: - to double jump in games - to zoom in/out"
"BlDropEvent",""
"BlTouchMoveEvent",""
"BlChildrenIgnoredByLayout","I represent a subset of children that are ignored by layout.${example:BlChildrenSubsetExamples>>#ignoredByLayoutFromElement}$"
"BlScalingTransformation","Specifies a scale operation by the (x,y,z) scaling vector.For example, scale(1, 1) would leave an element unchanged, while scale(2, 2) would cause it to appear twice as long in both the X and Y axes, or four times its typical geometric size.Corresponds to SVG scale() functionhttps://drafts.csswg.org/css-transforms/#valdef-transform-scale"
"BlBackgroundBuilder",""
"BlEventFilter",""
"BlResizerRightListener",""
"BlBounds","I am mutable implementation of Rectangle which stores coordinates as Numbers and not Points.I am very usefull for chainable bounds transformations and may be transformed in-place by BlMatrix2D and BlMatrix3D"
"BlHandCursor",""
"BlResizeTopRightCursor",""
"BlDragView",""
"BlHorizontalCoordinateLeftAlignment","The coordinate is measured from the left side of the outer bounds"
"BlStartAlignment",""
"BlElementChange","I represent a single element property change.I log all changes in a linked list in order to simplify debugging process"
"BlOverlayEffect",""
"BlRelativeElevation","I am the most commonly used elevation given in relative to the parent. It allows us to construct independent complex reusable visual components with support of inner elevation (a pyramid of elements).Note: Relative elevation can be negative!"
"BlEventTraversalStep","I describe which phase the event flow is currently being evaluated."
"BlFocusSearchDirectionBackward",""
"BlShapeGeometry",""
"BlHostEventFetcher","I am the abstract class for event queue management"
"BlKeyCombinationBuilder","I am helper builder class used to create composite ===BlKeyCombination===Public API and Key Messages- build finish combination creation and return result- control add compulsory control key combination that alternatively matches both left and right control keys- shift analog to control but adds shift- meta analog to control but adds meta- key: add compulsory combination consisting of a single Key(advanced) cnf - resulting formula will be transformed to CNF (default)(https://en.wikipedia.org/wiki/Conjunctive_normal_form)(advanced) dnf - resulting formula will be transformed to DNF (https://en.wikipedia.org/wiki/Disjunctive_normal_form)Example:   BlKeyCombinationBuilder new	meta;	shift;	key: Key arrowUp;	build"
"BlLayoutConstraintsAxis",""
"BlLocalClipboard",""
"BlMouseMiddleButton","I am a middle mouse button. Often can be triggered by mouse wheel click"
"BlOverScrollIfContentScrollsMode",""
"BlPoint3D","I am a 3D geometric point that usually represents the x, y, z coordinates.I can also represent a relative magnitude vector's x, y, z magnitudes.Example:point3D := 5 @ 10 @ 20. "" x = 5; y = 10; z = 20"""
"BlScalableFitAllStrategy","I make sure that content element fits within scalable element in both width and height by taking the smallest side into account.It makes sense to use me if scalable element has fixed or match parent size, both horizontally and vertically"
"BlShortcut","I represent a keyboard shortcut that can be registered to any arbitrary ===BlElement===I consist of an Action that is evaluated when a Shortcut is triggered and ===BlKeyCombination=== that describes when shortcut should be triggered. A combination is a logical formula expression that is composed of various key combinations such as alternative, compulsory or single key. See subclasses of ===BlKeyCombination===.Additionally, shortcut may provide its optional textual description and name.All shortcuts of an element are stored in ===BlShortcutRegistry=== and matched / triggered by ===BlShortcutHandler===A shortcut can be added or removed from the element by using #addShortcut: or #removeShortcut: methods.#shortcuts message can be sent to an element in order to access a list of all registered shortcuts.Public API and Key Messages- combination: get /set shortcut's key combination- action: get / set action should be executed when shortcut is triggered- description: get / set shortcut's description text- name: get / set a name of a shortcutExample of a shortcut that is triggered when user presses shift + meta + arrowLeft:   BlShortcut new	combination: (BlKeyCombination builder shift; meta; key: Key arrowLeft; build);	action: [ :aShortcut | self inform: 'Triggered ', aShortcut combination asString ] Internal Representation and Key Implementation Points.    Instance Variables	action:		<Object>	combination:		<BlKeyCombination>	description:		<Object>	name:		<Object>"
"BlSpaceFrameTaskPhase",""
"BlStrokeLineJoin","I specify the shape to be used at the corners of paths or basic shapes when they are stroked.https://www.w3.org/TR/SVG/painting.html#StrokeLinejoinPropertyPossible types are: - bevel: BlStrokeLineBevelJoin - miter: BlStrokeLineMiterJoin - round: BlStrokeLineRoundJoinEvaluate to see a visual preview:=== BlStrokeLineJoin new inspect ==="
"BlTaskQueue",""
"BlPolylineShape",""
"BrStencilDefaultExecutor",""
"TBlHostSpace","I define the public API needed to be used by the Universe and the Spaces.I define the public API that Host Spaces must provide.This API is mostly used by  the Universe and the Host-Independent Spaces.An Host Space is an  actual screen area provided by the underlying Host.This area is typically an host-specific window."
"BlParallelUniverseHostStartedSignal","I am sent when a universe started a host"
"BlBlurEvent",""
"BlElementScrolledEvent",""
"BlSpaceMouseEnterEvent",""
"BlGestureBasePinchEvent","Touch surface with 2 fingers and bring them closer to each other.Purposes/real world use cases: - zoom out - zoom in"
"BlGestureSwipeEndEvent",""
"BlDragOverEvent",""
"BlTouchEvent",""
"BlChildrenSubset","I capture a subset of children from a ${class:BlElement}$ instance.I am an abstract class. My subclasses define the actual order and criteria for filtering children and iterating over the set of children.I exist to explicitly capture and combine various ways of filtering and iterating over children. For example, ${class:BlChildrenReversed}$ indicates that the user wants to explicitly iterate over elements in reverse order; ${class:BlChildrenAccountedByLayout}$ indicates that only should children taken into account by layout should be included. The example below shows a scenario of combining multiple ways to iterate over children. By having an explicit object for each operation, the composition of operations can be inspected.${example:BlChildrenSubsetExamples>>#childrenWithMultipleCombinedSubsets}$I do not enforce a lazy API. Subclasses can perform the filtering immediately or when iteration over children is required. I aim to maintain the composition of subsets while optimizing for speed whenever possible.!!APIInstances of me are created by calling the factory method ${method:BlChildrenSubset class>>#on:}$ on a subclass with an instance of ${class:BlChildren}$ as parameter.Subclasses need to override the method ${method:BlChildrenSubset>>#subsetFrom:}$ to filter the elements from the given ${class:BlChildren}$ instance. This can perform no filtering, filter elements, or also change the order of elements.!! Implementation detailsInternally the result of ${method:BlChildrenSubset>>#subsetFrom:}$ is stored into an instance variable. This result is then used when accessing or iterating over elements. This decision was taken to allow iterators to perform work when the iterator is created and ensure a faster iteration.To preserve the composition of iterators I hold a reference to the initial ${class:BlChildren}$ instance."
"BlReflectionTransformation","Irepresent a reflection affine transformation.In mathematics, a reflection (also spelled reflexion)[1] is a mapping from a Euclidean space to itself that is an isometry with a hyperplane as a set of fixed points; this set is called the axis (in dimension 2) or plane (in dimension 3) of reflection. The image of a figure by a reflection is its mirror image in the axis or plane of reflection. For example the mirror image of the small Latin letter p for a reflection with respect to a vertical axis would look like q. Its image by reflection in a horizontal axis would look like b. A reflection is an involution: when applied twice in succession, every point returns to its original location, and every geometrical object is restored to its original state.I am similar to ""flip"" css filter.Example:	BlReflectionTransformation horizontal - creates a reflection in Y axis	BlReflectionTransformation vertical - creates a reflection in X axis"
"BlPaintBackground","I am a background that uses a ===BlPaint===. A paint can be either a simple color or a type of gradient.!! ExamplesExamples are provided by the class ${class:BlPaintBackgroundExamples}$."
"BlBasicEventHandler",""
"BlResizerBottomRightListener",""
"BlBorder","I represent the border of a BlElement.Example:BlBorder builder	paint: Color red;	width: 10;	build"
"BlGrabCursor",""
"BlResizeTopCursor",""
"BlDropHandler",""
"BlHorizontalCoordinateAlignment",""
"BlEndAlignment",""
"BlElementBoundsInSpace","I represent bounds in space"
"BlCompositeEffect",""
"BlElevation","I represent an element elevation given in the same units as width and height.Elevation allows us to achieve very advanced rendering effects that is not possible with z-index.Taking elevation into account forces us to have a separate composition rendering tree which is different from an element's structure tree.Note: Elevation is not influenced by transformation matrix!"
"BlEventDispatcherEmptyChain","I am an empty chain that does not dispatch events.Basically, I implement a null object pattern and used as next or previous element in dispatcher chain if there is none"
"BlFocusSearchDirectionUp",""
"BlPolyline","Example:BlPolyline vertices: { 	10@50.	50@20.	150@40.	180@150.	80@140}"
"BlHost","I am the abstract class for a Host.I define an environment that can be used to provide actual screen spaces and rendering.An Host can be compared to a driver that communicate with native multimedia API."
"BlCompulsoryCombination","I represent a compulsory ""AND"" combination of multiple distinct keys. (conjunction)I am useful when there is a need to create a key combination that should be matched when all subcombinations are matching.Example of a key combination that matches then and only then when both ""arrowLeft"" and ""W"" are pressed:BlCompulsoryCombination new	key: Key arrowLeft;	key: Key w;	yourselfUnified meta (cmd):BlCompulsoryCombination new	with: (BlSingleKeyCombination key: Key arrowLeft);	with: (BlSingleKeyCombination key: Key w);	yourself"
"BlIgnoredLayoutConstraints",""
"BlLayoutFitContentResizer",""
"BlMouseButton","I identify a mouse button being pressed or released by the user.I am used by BlMouseEvent"
"BlOverScrollMode",""
"BlPoint",""
"BlSubRopeIterator","I am a special iterator used to iterate over sub-rope"
"BlSelectionNode","I represent a single node within interval tree ===BlTextSelectionTree===.I am a binary node with ===selection=== playing a role of a key (lowest value) and value. Additionally I cache the highest interval value of a subtree including my own interval."
"BlSpaceFrameIdlePhase",""
"BlStrokeLineRoundCap","Adds a radius that smooths out the start and end points, which is controlled by the stroke width.See BlStrokeLineCap for other types"
"BlTaskAtQueue","BlTaskAtQueue provides a reasonably efficient mechanism to scheduled tasks to be executed at a specified time.The queue executes tasks within a single pharo process at #userSchedulingPriority, so tasks should be kept as short as possible, typically queueing the task up at a more appropriate place, e.g. one of the TaskIt background queues or within the UI process.!!Public API and Key Messages- start : 	Start the reader process - stop : 		Stop the reader process- schedule:at: 	Schedule the supplied valuable to be executed at the specified time !!Internal Representation and Key Implementation Points.!!!Instance Variables	executorProcess:		<Process>	queue:						<SharedPriorityUniqueQueue>	scheduleSemaphore:		<Semaphore>!!!Implementation Points- Assumes that there is only one reader of the queue."
"BlCurveShape",""
"BrStencilBuilder",""
"TBlScrollable",""
"BlParallelUniverseHostSpaceShownSignal","Is sent after a host space is shown"
"BlEvent","The specific announcement superclass for the context of Bloc."
"BlElementPositionInSpaceChangedEvent","Is sent when elemen't position in space coordinates changes.Position in space may change even if element's #position is still the same. It can happen when any of its parents moves."
"BlSpaceFocusInEvent","Is sent to the space when a window receives focus"
"BlUIEvent",""
"BlGestureSwipeAbortEvent",""
"BlDragEvent",""
"BlMouseWheelEvent",""
"BlChildrenOrderedCollection","I am a holder that uses an ${class:OrderedCollection}$ to store children of bloc elements.Internally I maintain one single ${class:OrderedCollection}$ instance. When children are added or removed I add or remove them from the wrapped collection. !!ExamplesExamples are provided by the class ${class:BlChildrenOrderedCollectionExamples}$"
"BlMatrixTransformation","I am an affine transformation that is directly defined by transformation matrix"
"BlCompositeBackground","I provide composition ability of multiple ===BlBackground===.I am useful when an Element should have both paint and image backgrounds.Note: composed backgrounds are rendered in the same order they are defined in a composition. So for example if I was created as follows:BlCompositeBackground withAll: {	BlPaintBackground paint: Color red.	BlImageBackground image: PolymorphSystemSettings pharoLogoForm} then image background will appear on top of paint background.It is more convenient to create a composite background using ===BlBackgroundBuilder===Opacity example:	BlCompositeBackground new		opacity: 0.5;		withAll: {			BlPaintBackground paint: Color red.			BlImageBackground image: PolymorphSystemSettings pharoLogoForm		} "
"BlMouseProcessor","I am an event processor.I convert basic events to more complex events.For example, i generate events like click, dbl click, drag&drop, ... from mouse down, mouse up, and mouse move events.Mouse actions are blocked during drag"
"BlResizerBottomLeftListener",""
"BlSpaceShutdownOnCloseListener","! Shutdown pharo when space is closedWhen added to a ${class: BlSpace} I will shutdown Pharo as soon as that space is closed.I can be configured to save the image before quitting by setting ${method:BlSpaceShutdownOnCloseListener>>#shouldSave:} to ==true==.Example: [[[space := BlSpace new.space title: 'Close me'.space extent: 200@200.space addEventHandler: BlSpaceShutdownOnCloseListener new.space show]]"
"BlCrosshairCursor",""
"BlResizeRightCursor",""
"BlDragboard","I manage the dragged values that can be exported in clipboard.I am not really used for the moment."
"BlHorizontalAlignment",""
"BlNullVerticalAlignment",""
"BlElementBoundsInLocal",""
"BlClipOutGeometryEffect","TODO needs some work to use it in dropdown to reveal the same toggle"
"BlElementLocalTransformation","I represent a local element's transformation defined by a composition of affine transformations.Transformation matrix is computed lazily up-on request for #matrix."
"BlBubblingEventDispatcher",""
"BlFocusSearchDirectionLeft",""
"BlMultiPolygon",""
"BlHandlerArrayRegistry",""
"BlKeyCombination","I represent an abstract key combination which is the most important part of ===BlShortcut===.I define an event matching API that allows ===BlShortcutHandler=== to find the most appropriate shortcut for currently pressed keys.I have support of Visitor pattern. See ===BlKeyCombinationVisitor===See ===BlKeyCombinationExamples=== for related examples."
"BlIgnoredLayout","Ignore me :)"
"BlLayoutExactResizer",""
"BlMeasurementSpec",""
"BlOutskirtsInside",""
"BlParallelUniverse","I am a parallel Universe. There can exist multiple parallel universes"
"BlCollectionRopeIterator","I am a special iterator used to iterate over collection rope"
"BlMonotoneSelection","I represent a text selection defined as interval [from...to].Monotone selection can not be empty"
"BlSpaceFrameEventPhase",""
"BlStrokeLineCap","I specifiy the shape to be used at the end of open subpaths when they are stroked.https://www.w3.org/TR/SVG/painting.html#StrokeLinecapPropertyPossible types are: - butt: BlStrokeLineButtCap - round: BlStrokeLineRoundCap - square: BlStrokeLineSquareCapEvaluate to see a visual preview:=== BlStrokeLineCap new inspect ==="
"BlScrollFlinger",""
"BlVectorShape",""
"BrStencil","From the Oxford Dictionary:Stencil - a thin sheet of card, plastic, or metal with a pattern or letters cut out of it, used to produce the cut design on the surface below by the application of ink or paint through the holes.In Brick I play a role of an abstract factory to create predefined objects. The most common use case for a stencil is to produce widgets, hence create visual elements. Stencils are intended to be reusable.The idea behind a stencil as concept is to help developers reduce the use of block closures used with scripting API. The reason for that is the fact that block closures can not be recompiled while in a debugger, which makes system less debuggable and live programmable.The only essential Stencil API is ===#create=== method, developers should implement it in their stencil subclasses. Note, that ===#create=== has zero arguments which by default makes Stencil stateless. It is also possible to implement a statefull Stencil. Let us formalise the both types: Stateless Stencil - A stencil that does not have any parameters and the result of #create method is always identical. Two stateless stencils are equal then and only then when their type is the same. Stateful Stencil - A parametrizable stencil whose result of a #create method depends on configuration. Two stencils of the same type configured differently are not considered to be equal.While subclassing is being the preferable way of creating Stencils we still want to provide the support of block closures that play a role of a stencil. Any Valuable object can be converted to so the ValuableStencil by sending ===#asStencil=== convertion method to the object that implements it.For example the following code creates a Stateless stencil that creates a simple visual element out of BlockClosure:[[[| aStencil anElement |aStencil := [ BlElement new background: Color gray ] asStencil.anElement := aStencil create.]]]Users can additionally provide Stencil arguments to achive a Stateful Stencil:[[[| aStencil anElement |aStencil := [ :aColor | BlElement new background: aColor ] asStencil.aStencil arguments: { Color gray }.anElement := aStencil create.]]]"
"TBlEventHandler","I define an API of an abstract event handler"
"BlParallelUniverseSpaceSignal",""
"BlBaselineUnsupported","I am signalled whem #baseline is requested from an element that does not support baseline alignement"
"BlElementLayoutChangedEvent","Is sent when element's layout changes.Example:[[[| element |element := BlElement new.element when: BlElementLayoutChangedEvent do: [ self inform: 'Layout changed' ].element layout: BlBasicLayout new]]]"
"BlSpaceDragLiftEvent",""
"BlSpaceRenderEndEvent",""
"BlGestureScrollEvent",""
"BlDragEndEvent",""
"BlMouseStillDownEvent",""
"BlChildrenArray","I am a holder that uses an immutable array to store children of bloc elements.Every time a child is added or removed I create a new internal array to store children. I optimize the method ${method:BlChildrenArray>>#asArray}$ to directly return the internal array instead of creating a new one. In combination with other iterators that use this method (like ${class:BlChildrenReversed}$) it can reduce the number of arrays created during layout operations, expecially for graph layouts.!!ExamplesExamples are provided by the class ${class:BlChildrenArrayExamples}$"
"BlAffineTransformation","In geometry, an affine transformation, affine map or an affinity (from the Latin, affinis, ""connected with"") is a function between affine spaces which preserves points, straight lines and planes. Also, sets of parallel lines remain parallel after an affine transformation. An affine transformation does not necessarily preserve angles between lines or distances between points, though it does preserve ratios of distances between points lying on a straight line.Examples of affine transformations include translation, scaling, homothety, similarity transformation, reflection, rotation, shear mapping, and compositions of them in any combination and sequence.https://en.wikipedia.org/wiki/Affine_transformation"
"BlAffineTransformationTopLeftOrigin","I am a relative transformation origin which is attached to the top left of an element."
"BlGestureProcessor",""
"BlPullHandler","I add an ability to drag (pull) any arbitrary element within its direct parent by requesting position change.Note, that some layout do not allow elements to have custom positions which means I have no effect.Example:[[[| element |		element := BlElement new.element background: Color red.element size: 75@75.element addEventHandler: BlPullHandler new.	]]]"
"BlSharedEventDistributor","I share ${class:BlEvent}$ instances (element events) among a given elements.!! ExampleIn the following example, ${class:BlMouseOverEvent}$, ${class:BlMouseOutEvent}$, and ${class:BlClickEvent}$ are shared between the two graphical elements. If you hover a mouse over any element, both elements get darker. If you click on any of two elements, both elements randomly change their background color.${example:BlSharedEventDistributorExamples>>#example|codeExpanded=false|previewExpanded=true}$"
"BlContextMenuCursor",""
"BlResizeColumnCursor",""
"BlDragItem","I represent a model object and embody a drag preview and item provider"
"BlElementAlignment","I represent alignment layout property.I calculate needed horizontal and vertical translation of BlElement to be aligned to the left, middle or to the right within allowed bounds.I may be used by layout strategies that support alignment, for example Frame LayoutPublic API and Key Messages- horizontalTranslationFor: elementBounds in: allowedBounds calculate horizontal translation- verticalTranslationFor: elementBounds in: allowedBounds calculate vertical translation- #new to create instances. Internal Representation and Key Implementation Points.both element and allowed bounds should be in element's parent coordinate system"
"BlNullLeftAlignment",""
"BlElementComputedBounds","I am a special type of element bounds with an ability to be in-place converted between coordinate systems (local <-> parent <-> global <-> window)"
"BlBlurBelowEffect",""
"BlElementDynamicTransformation","I am dynamic element transformation in the sense that my transformation matrix may actually depend on some element properties such as #extent or #position.It means that matrix computation is performed only when requested taking owner element into account.This also means that the matrix dimension (2D or 3D) should be determined dynamically based on inner transformations"
"BlEventDispatcher",""
"BlFocusSearchDirectionAbsolute",""
"BlEllipse","I am an ellipse geometry.I can play a role of a circle if both width and height are equal. In this case can be created using a predefined factory method:	BlEllipse radius: 20 ""creates a circle with radius 20""	BlEllipse diameter: 40 ""creates a circle with diameter 40 or radius 20""	In order to explicitely create an ellipse use extent:	BlEllipse extent: 50@30 ""create an ellipse with width 50 and height 30"""
"BlHandlerRegistry","I am an event handler registry used by dispatchers in order to manage event handlers.Example:[[[| registry |""one can use announcer based registry""registry := BlHandlerAnnouncerRegistry new.""or registry based on plain array""registry := BlHandlerArrayRegistry new.registry add: (BlEventHandler on: BlClickEvent do: [ self inform: 'Click' ] ).registry add: (BlEventHandler on: BlMouseDownEvent do: [ self inform: 'Mouse down' ] ).registry add: (BlEventHandler on: BlMouseUpEvent do: [ self inform: 'Mouse up' ] ).registry dispatchEvent: BlClickEvent new.registry dispatchEvent: BlMouseDownEvent new.registry dispatchEvent: BlMouseUpEvent new.]]]"
"BlHeadlessBufferSurfaceRenderer",""
"BlBasicLayout","I am a very basic layout that supports very simple measurement and positions elements according to their #position attribute, which means that I never change actual location (position) of children within parent with basic layout."
"BlLayoutVertical","I am a concrete vertical orientation"
"BlMeasurementExactMode","I represent a concrete implementation of ""exact"" measurement mode.For more information see class comment of BlMeasurementMode"
"BlOutskirts","I define the strategy to be used to draw the border (inside/outside/centered)"
"BlRadialGradientPaint",""
"BlRopeIterator","I define an API of a rope iterator.It is highly recommended to use iterator to enumerate ropes, since it can be done in constant time.I support forward and reverse directions of enumeration"
"BlCompositeSelection","I am a composite text selection consisting of multiple independent non-overlapping monotone text selections"
"BlSpaceFrameDrawingPhase",""
"BlSplineOverScrollerCubicStep",""
"BlRepeatedTask",""
"BlVector2D","I represent a 2D Euclidean vectorhttps://en.wikipedia.org/wiki/Euclidean_vectorInstance creation:	vector := (2, 3)"
"BlVisibilityVisible","I am a concrete visibility type - ""visible"".Once set, element should be rendered and should participate in layout and take space."
"TBlDebug","I contain useful debug utility methods that can be enabled / disabled with:[[[	Bloc enableAssertions.	Bloc disableAssertions.]]]"
"BlParallelUniverseDeferredActionAddedSignal","I am sent when a there was a deferred action added to the universe using ==defer:=="
"BlTaskExecutionSignal","BlTaskExecutionSignal is used to record the start and end times of tasks that are run in the UI process.  These can then be analysed and tasks that are slow, and thus are significantly impacting the frame rate, identified.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	duration:		<Object>	task:		<Object>    Implementation Points"
"BlElementBorderChangedEvent","Is sent when element's border changes.Example:[[[| element |element := BlElement new.element when: BlElementBorderChangedEvent do: [ self inform: 'Border changed' ].element border: (BlBorder paint: Color blue width: 20)]]]"
"BlSpaceDestroyedEvent","I am an event raised when all normal events for closing a space have been completed.This event is used by the debugger to stop the UI process so it should be used with case. For reacting to the closing of a space ${class:BlSpaceClosedEvent}$ should be used instead."
"BlSpaceEventEndEvent",""
"BlGestureScrollBeginEvent",""
"BlMouseEvent",""
"BlMouseOutEvent","The mouse out event is fired when a pointing device (usually a mouse) is moved off the element that has the listener attached or off one of its children. Note that it is also triggered on the parent when you move onto a child element, since you move out of the visible space of the parent. https://developer.mozilla.org/en-US/docs/Web/Events/mouseout"
"BlChildren","I am an abstract root class designed for accessing and iterating over the children of a ${class:BlElement}$. I define a data structure independent API for iterating and accessing bloc elements. I assume an index-based way of accessing bloc elements. Subclasses can filter elements or have different orders to iterate over them.!!APISubclasses need to overide the following abstract methods to provide access to the actual bloc elements:- ${method:BlChildren>>#at:}$- ${method:BlChildren>>#do:}$- ${method:BlChildren>>#size}$Additionally, I provide an API for selecting only subsets of children, or iterating over them in a differen order, like:- ${method:BlChildren>>#accountedByLayout}$- ${method:BlChildren>>#ignoredByLayout}$- ${method:BlChildren>>#reversed}$- ${method:BlChildren>>#sortedByElevation}$Important API methods: - ${method:BlChildren>>#asArray}$: returns an array with all the elements."
"BlActionHandler",""
"BlAffineTransformationPositionOrigin","I allow users to provide a fixed location that should be used as transformation origin"
"BlBaseEventProcessor",""
"BlMultipleDragHandler",""
"BlSlideHandler",""
"BlArrowCursor",""
"BlResizeBottomLeftCursor",""
"BlDndTransferMode",""
"BlVectorShapeContainerElement",""
"BlNullAlignment","I represent null alignment which is default one.See BlLayoutAlignment for more info."
"BlVerticalCoordinateTopAlignment",""
"BlBlurEffect",""
"BlElementTransformation","I represent an element transformation and support both 2D and 3D transformations.For optimization purposes I use 2D matrix if 3D transformation was not requested. As soon as I'm transformed in 3D all further transformation will also happen with the help of 3D matrix."
"BlLayoutErrorHandler",""
"BlFocusFinderComparator","I sort element according to their visual layout and geometry"
"BlBezierCurve","I define a geometry of a bezier curve with N control points (of order N)"
"BlHandledError","I represent an error that bloc gracefully handled during some specific frame phase"
"BlHostSpaceRenderer",""
"BlKeyboardKeyTable",""
"BlLayoutOrientation","I represent a abstract layout orientation.I am used by layouts that support different orientations and by element alignment.I do not have any logic and can only used as orientation flag. Layouts that have orientation specific logic should impelment their own object oriented mechanism"
"BlMeasurementMode","I describe a mode of measurement specification. There are three modes which are my subclasses: - at most, meaning that element is allowed to be at most of specified size - exact, meaning that element should have exact size provided in specification - unspecified, meaning that we still can say anything how big an element should be. Maybe its size depends on children or parent, so we need first to find sizes of dependent element and then come backGenerally I represent an internal class which in most cases should not used directly by user or developers of custom layout strategies.My main methods are - measurement: aResizing with: aNumber to determine which measurement spec should be used to measure children based on their resizing property and possible size provided by parent. It uses double dispatch (BlMeasurementMode <-> BlLayoutResizing) - sizeFor: aNumber. find out the final value for the size of element based on provided possible size with single dispatching to my subclasses"
"BlBagObjectPool","I am a dynamic object pool that grows to acomodate a lot of objects"
"BlGradientPaint",""
"BlConcatenationRope","I am a special type of rope that plays a role of a node in a binary tree and contains left and right branch"
"BlScrollFlingerState",""
"BlSpaceFrame","! Frame modelI represent one space frame. There are usually 60 frames per seconds, which means that ideally frame should take less than 16ms to go through all phases.The frame consists of three important phases- event handling- scheduled tasks processing / animation- layout- rendering-idleI know my currentPhase which is one of the registered phases.The list of default phases is initialized in ${method:BlSpaceFrame>>#initializePhases}$"
"BlSplineOverScrollerStep",""
"BlDelayedTask",""
"BlUniverse","I am the lowest level in Bloc.My responsibility is to manage the low-level services such as managing windows, event queue and the drawing synchronization. My main responsibility is to manage and to keep in sync the opened Spaces.I am the interface used to create/delete window.To achieve that, i use the notion of Host (see: BlHost).Users can choose a preferable host. In order to do that a universe must be stopped first.Example:universe stop.universe preferableHost: MyHost new.universe start."
"BlVisibilityGone","I am a concrete visibility type - ""gone"".Once set, element should not be rendered and should not participate in layout (should not take space)"
"BlSineInterpolator","I am a cosinus interpolator defined by the following function:	f(x) = sin(x)"
"BlAnimationLoopDoneEvent","Is sent as soon as animation loop is done (loop progress >= 1)"
"BlDecelerateInterpolator","I am an interpolator where the rate of change starts out quickly and and then decelerates.I am configurable using ""factor"" - a degree to which the animation should be eased. Setting factor to 1.0f produces an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the ease-out effect (i.e., it starts even faster and ends evens slower).My formula is:	f(x) = 1 - (1 - x)^n, where n = 2* factorI meant to be immutable, therefore factor can be only set using factory method #factor: on my class side"
"BlCompositeAnimation",""
"BlQuinticInterpolator","I represent a special case of a quintic function.https://en.wikipedia.org/wiki/Quintic_functionMy interpolation function is   f(x) = x^5 - 5x^4 + 10x^3 - 10x^2 + 5xIt can be simplified to   f(x) = (x - 1)^5 + 1"
"BlInterpolator","I am an abstract Interpolator and define an abstract interpolate: method which is used to calculate interpolated values.Concrete interpolators or easing function implementations must subclass me and implement #interpolate: method that takes a Number within interval [0.0 - 1.0] and returnes an interpolated value. Note, that returned value is not necessarily positive or lies within the same interval as input value.- interpolate: returns interpolated value according to implemented interpolation function.Example   BlEasingElastic interpolate: 0.5"
"BlCosineInterpolator","I am a cosinus interpolator defined by the following function:	f(x) = cos(x)"
"BlNumberTransition",""
"BlLinearInterpolator","I am an interpolator where the rate of change is constant"
"BlSequentialAnimation",""
"BlColorTransition",""
"BlEasingQuad",""
"BlTransition",""
"BlEasingElastic",""
"BlTransformAnimation","I am special type of animation designed to operate on element's transformation.Transform animation can be absolute or relative.(consistent with absolute/relative vector path builder) - #relative builds on existing element transformation - #absolute defines new element independent transformation"
"BlEasingBounceOut",""
"BlOpacityAnimation","I am an animation responsible for changing #opacity parameter of the target element during specified period of time."
"BlEasingBounceInOut",""
"BlAnimation",""
"BlEasingBounceIn",""
"ManifestBlocAnimation","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BlBaseAnimation","I am an abstract class for all Bloc animations. See my subclasses for futher documentation and examples: ${class:BlBaseAnimation|show=gtSubclassesFor:|expanded=true}$"
"BlEasingBaseBounce",""
"BlViscousFluidInterpolator",""
"BlAnimationStepEvent","I am sent after every animation step with current progress as a parameter"
"BlEasing",""
"BlParallelAnimation",""
"BlAnimationTest","This class contains tests"
"BlAsyncElementExamples","I exemplify ${class:BlLazyElement}$."
"BlLazyElementValuable","BlLazyElementValuable is responsible for triggering the rendering and displaying of its element."
"BlLazyElement","BlLazyElement lazily renders its child element deferring the rendering until the element actually becomes visible in the window.  E.g. if the window can be scrolled and the element is not visible, no action is taken.!! Async Example The lazy element starts with the following temporary content:${example:BlAsyncElementExamples>>#temporaryElement|noCode|previewExpanded=true|previewShow=#gtLiveFor:|previewHeight=80}$And ends-up with the following final content:${example:BlAsyncElementExamples>>#finalElement|noCode|previewExpanded=true|previewShow=#gtLiveFor:|previewHeight=80}$Executing the following example shows the lazy element that at quickly change the content computed in the bacground:${example:BlAsyncElementExamples>>#lazyElement|previewExpanded=false|previewShow=#gtLiveFor:|previewHeight=80}$!! Sync ExampleIn particular cases, in which the lazy rendering needs to be disabled, ${class:BlUseAsyncFeatures}$ can be used as shown in the following example${example:BlAsyncElementExamples>>#syncLazyElement|previewExpanded=false|previewShow=#gtLiveFor:|previewHeight=80}$!! Public API and Key Messages- elementBuilder:   a valuable, typically a BlockClosure, that returns the child element !! Internal Representation and Key Implementation Points.!!! Instance Variables	element:				<BlElement>	elementBuilder:		<BlockClosure>"
"BlAsyncElementValuable","BlAsyncElementValuable is an abstract class that collaborates with BlAsyncElement to asynchronously update the state of BlAsyncElements with minimal impact on UI responsiveness.BlAsyncElementValuable works with ${class:name=BlAsyncUIWorkerPool}$ to ensure that elements that are currently visible on the screen are updated before elements that are not visible by prioritising tasks based on the elements visibility and distance from the viewable area, see ${method:name=BlAsyncElementValuable>>#taskPriority}$.Subclasses are responsible for deterining the contents and update their element, see ${method:name=BlAsyncElementValuable>>#updateElement}$.!!Public API and Key MessagesSubclasses of BlAsyncElementValuable typically create their own instance creation methods.!!Internal Representation and Key Implementation Points!!!Instance Variables	element:		<BlAsyncElement> The element being udpated by the receiver"
"BlAsyncElement","BlAsyncElement is an abstract class that provides a simple framework for Bloc Elements that need to perform asynchronous processing of the display, typically because it is CPU intensive, has lots of I/O or depends on other asynchronous elements such as network access.Using BlAsyncElement consists of creating two classes: - A subclass of BlAsyncElement, which is responsible for drawing the results on the canvas.- A subclass of BlAsyncElementValuable, which is responsible for performing the asynchronous operations.TaskIt is used to queue and execute operations.  Multiple items may be queued for an element before the first is executed, so the normal approach is to determine the work to be performed at the time the valuable is evaluated.  Subsequent tasks will realise that no additional work is required and finish quickly.By default, an update is scheduled:- When the receiver is added to a scene graph.- When the receiver's layout is changed.Subclasses can schedule additional updates by sending #queueAsyncUpdate to themselves.Because adding tasks and their execution order is indeterminate, no attempt is made to remove duplicates, rather the task should confirm that an update is required by calling #needsUpdate.Subclasses are responsible for implementing #drawOnSpartaCanvas:.There are two ""priorities"" involved with BlAsyncElement:- All background processing is done by BlAsyncUIWorkerPool at the Process priority specified in BlTKTBackgroundProcessProvider>>createProcessDoing:named:.- Items are retrieved from the task queue in priority order.  Priority 0 is the highest priority, with positive numbers being progressively lower priority.  Normally priorities are calculated dynamically, with elements that are currently visible receiving the highest priority, and then lower priority the further away from the visible area they are.By default the dynamic priority will be based on whether the receiver is within the space's bounds.  However it is possible (or likely) that the receiver will be a child of another element that only occupies a small portion of the space.  Specifying the parent which has the actual visible area improves the priority order.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. !Internal Representation and Key Implementation Points.!!Instance Variables	priority:						<Integer>  An optional manually set priority at relative to other BlAsyncElements. 0 is highest priority.	visibleElement:	<BlElement> The dynamic priority will be based on whether the receiver is visible within the visibleElement.	taskitRunner:		<Object> The object that is used to schedule tasks.  The default is BlAsyncUIWorkerPool, but this can be replaced with TKTLocalProcessTaskRunner to facilitate testing.	errorStencil:			<BrStencil> The stencil used to display errors that occurred while processing the element asynchronously.  It takes a single argument, the exception that occurred while processing.!!Implementation Points- BlAsyncElement relies on subclasses to send #queueAsyncUpdate due to the conflicting requirements on when to submit the task, e.g. BlLazyElement defers task submission until it has been drawn the first time, while many elements want to render as soon as they are attached to a scene graph."
"BlDevScripterTargetedStep",""
"BlDevScripterUserDataStorage",""
"BlDevScripterEventPosition",""
"BlSelectionTool",""
"BlDevScripterSelfEventTarget",""
"BlMetricsInspector","I am an element metrics inspector and give a summary of target's bounds, margin border and padding.!! ExampleOn an element that is defined with the following margin and padding methics: ${example:BlMetricsInspectorExamples>>#elementWithMetrics}$I provide the following overview:${example:BlMetricsInspectorExamples>>#metricsInspectorOnElementWithMetrics|codeExpanded=false|previewExpanded=true}$The view is available for any ${example:BlMetricsInspectorExamples>>#elementWithMetrics|label=#className}$ instance throught ${method:BlElement>>#gtMetricsFor:}$ inspector extension. You can find it when you inspect a view and switch to ${example:BlMetricsInspectorExamples>>#metricsPhlowView|label=#title}$ tab."
"BlDevScripterBlockSelectorEventTarget",""
"TBlDevScripterTarget","I define common step target definitions."
"BlDevScripterStepFailureState",""
"BlDevScripterStepProperty",""
"BlDevScripterStepPlayOnceExecutor",""
"BlDevScripterRequestFocusStep",""
"BlDevScripterCheckElementStep",""
"BlDevScripterRootStep",""
"BlDevScripterElementStorage","I am a copy of class BlDevScripterModelStorage. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	block:		<Object>    Implementation Points"
"BlDevScripterEvents",""
"BlDevScripterUserData",""
"BlDevResizer","I visualize the resizing srategy of the element on which I am installed[[[element := BlElement new	layout: BlFrameLayout new;	constraintsDo: [ :c |		c vertical fitContent.		c horizontal exact: 300 ];	look: BrShadowLook new;	background: Color white;	margin: (BlInsets all: 30);	padding: (BlInsets all: 40);	addChild: (BlElement new		constraintsDo: [ :c | c frame horizontal alignCenter ];		background: (Color gray alpha: 0.2);		size: 100@250).		BlDevResizer on: element.element]]]"
"BlDevScripterNestedChildEventTarget",""
"BlElementSelection","I am a Halos element. For more information about me, see ${class:BlDevHalosEventListener}$."
"BlDevScripterAsTarget","I am a copy of class BlDevScripterModelTarget. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"TBlDevScripterCheckStep","I define common check steps."
"BlDevScripterStepState",""
"BlDevScripterStepExecutorSyncStrategy",""
"BlDevScripterStepExecutor",""
"BlDevScripterClickStep","I fire a ${class:BlMouseDownEvent}$, ${class:BlMouseUpEvent}$, and ${class:BlClickEvent}$.!! ExampleHere you can see how to configure a fire and check a click event on a child element:${example:BlDevScripterExamples>>#clickCheck|previewExpanded=true|previewHeight=400}$"
"BlDevScripterCheckChildrenCountStep",""
"BlDevScripterCompositeStep",""
"BlDevScripterExamples","I exemplify ${class:BlDevScripter}$."
"BlDevScripter","I help developers to script UI scenes and simplify exemplification process.I am designed for Model-based User Interface Testing"
"BlDevScripterNullTarget","I am a copy of class BlDevScripterSelfEventTarget. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BlDevCrossover",""
"BlDevScripterIndexedChildEventTarget",""
"BlDevKeyboard","I am a virtual keyboard to debug key press events[[[	BlDevKeyboard new asScalableElement]]]"
"BlDevScripterStepSuccessState",""
"TBlDevScripterCheckStepCreation","I define very basic methods to create check steps using ${class:BlDevScripterMultipleCheckStep}$."
"BlDevScripterNoReference",""
"BlDevScripterStepExecutorStrategy",""
"BlDevScripterWaitStep",""
"BlDevScripterFutureCheckStep",""
"BlDevScripterActionStep",""
"BlDevScripterStep",""
"BlDevScripterEventCenteredPosition",""
"BlDevElementExamples",""
"BlDevScripterTextAttributesAtTarget",""
"BlMetricsInspectorElement","I represent a single metrics element (margin or padding or border).I can contain sub metrics element"
"BlDevScripterBreadthFirstSearchEventTarget",""
"ManifestBlocDevTool","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BlDevScripterStepHaltState",""
"BlDevScripterReference",""
"BlDevScripterStepExecutorStepActivity",""
"BlDevScripterShortcutStep",""
"BlDevScripterCheckFiredEventsStep","I check whether particular ${class:BlEvent}$ events were fired on a ${class:BlElement}$ target.!! ExampleHere you can see how to configure a fire and check a click event on a child element:${example:BlDevScripterExamples>>#clickCheck|previewExpanded=true|previewHeight=400}$"
"BlDevScripterMultipleCheckStep",""
"BlDevScripterModelStorage",""
"BlDevScripterReversedEvents",""
"BlElementSelectionListener","I am an event handler that is used for Halos element. For more information about me, see ${class:BlDevHalosEventListener}$."
"BlDevScripterSelectorChildEventTarget",""
"BlElementSelectionButton","I am one button inside of a Halos element. For more information about me, see ${class:BlDevHalosEventListener}$."
"BlDevScripterEventTarget",""
"TBlDevScripterCompositeStepTarget",""
"BlDevScripterStepExecutingState",""
"BlDevScripterStepProperties",""
"BlDevScripterStepContinueExecutor",""
"BlDevScripterFireEventStep",""
"BlDevScripterCheckElementClassStep",""
"BlDevScripterMultipleActionStep",""
"BlDevScripterSetStepStorage",""
"BlDevScripterCollection",""
"BlDevScripterSpaceTarget",""
"BlDevHalosEventListener","I am an ${class:BlElementEventListener}$ event listener and I can display halos around an element. Halos then permits to inspect or delete.You can install me on any ${class:BlSpace}$ (window) using ${method:BlSpace>>#withHalos}$.The ${method:BlDevHalosEventListener>>#mouseDownEvent:}$ checks if ==SHIFT== and ==ALT== modifiers are pressed during a ${class:BlMouseDownEvent}$. You can try to click on the rectangle below while pressing ==SHIFT== and ==ALT==:${example:BlDevHalosEventListenerExamples>>#containerWithRectangle|codeExpanded=false|previewExpanded=true|previewHeight=350|previewShow=#gtLiveFor:}$Available actions (see implementation at ${method:BlElementSelection>>#initializeActions}$:- The red button removes the selected element. - The green button displays additional information.- The yellow button resizes the selected element.- The blue button inspect the selected element.- Dragging Halos moves the selected element.- You can remove Halos by double click inside of the Halos rectangle."
"BlDevScripterNamedChildEventTarget",""
"BlDevScripterStepElement",""
"BlDevScripterTarget",""
"TBlDevScripterActionStep","I define common action steps"
"BlDevScripterStepScreenshot",""
"BlDevScripterStepExecutorAsyncStrategy","I am a copy of class BlDevScripterStepExecutorSyncStrategy. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BlDevScripterSetStep",""
"BlDevScripterInteractionStep",""
"BlDevScripterCheckStep",""
"BlDevScripterApplicationStep",""
"BlDevScripterEventOutsidePosition","I am a copy of class BlDevScripterEventCenteredPosition. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BlDevHalosEventListenerExamples","I exemplify ${class:BlDevHalosEventListener}$."
"BlDevScripterModelTarget",""
"BlMetricsInspectorExamples","I exemplify ${class:BlMetricsInspector}$."
"BlDevScripterElementClassEventTarget",""
"BlBenchmarkConsole",""
"BlDevScripterStepReadyState",""
"BlDevScripterMethodReference",""
"BlDevScripterStepExecutorScreenshotActivity",""
"BlDevScripterTypeTextStep",""
"BlDevScripterCheckTotalChildrenCountStep",""
"BlAnimationExamples","I contain examples of bloc's Animation framework.DOES NOT WORK"
"BlRopeIteratorExamples","I contain examples of rope iterators"
"BlExampleSwitchController",""
"BlOpacityExamples","! OpacityIt is possible to change transparency of the element and all its children by setting the ==opacity== property. Opacity is represented by a float number within the closed interval [0...1].""""NB: Opacity is a purely visual property, it is not taken into account during event dispatch phase, thus even transparent elements still receive mouse events""""When opacity is set to 0 an element is considered to be fully transparent, thus ${method:BlElement>>#isTransparent}$ returns true:${example:BlOpacityExamples>>#makeTransparent}$If opacity is set to 1, the element is considered to be opaque, ${method:BlElement>>#isOpaque}$ returns true:${example:BlOpacityExamples>>#makeOpaque}$The last but not least state of transparency is when opacity property has a value between 0 and 1, but not equal to them. In this case we call the element translucent and ${method:BlElement>>#isTranslucent}$ returns true:${example:BlOpacityExamples>>#makeTranslucent}$In the following example we show how to change and query ==opacity== of the element:[[[|element|element := BlElement new background: Color black.element opacity: 0.5.self assert: element opacity equals: 0.5.element]]]"
"BlMobileCamera",""
"BlInfiniteLinearLayoutVerticalExample","I contain examples of a vertical linear layout"
"BlExampleElementWithBrokenOnLayout","I am an element with a broken onLayout method that throws Error (SubscriptOutOfBounds)"
"BlGridLayoutExamples",""
"BlChickenHead","I am a chicken hed with eyes and pecker"
"BlGeometryAnchorExamples",""
"BlInfiniteExampleColorsElementHolder","I bind a color to its visual representation - a colored rectangle element"
"BlFitContentVerticallyInHorizontalLayoutsExamples","I exemplify what happens if we compose horizontal grid, linear and flow layout and configure them to fit content vertically.This is a very important use case for complex UIs that involve vertical lists"
"BlInfiniteExampleClassesDataSource","I am a data source of the collection of all classes in the image"
"BlExampleCustomEventTarget","I am an example of a custom non-element event target that can be nicely integrated in bloc infrastructure"
"BlInfiniteExampleGalleryListElement",""
"BlConcatenationRopeExamples","I contain examples of a concatenation rope"
"BlTextOperatorExamples",""
"BlChildrenLinkedListExamples","I define examples for the class ${class:BlChildrenLinkedList}$.Instances of ${class:BlChildrenLinkedList}$ are created by directly instatiating the class.${example:BlChildrenLinkedListExamples>>#emptyChildrenExplicitCreation}$Bloc elements can then be added and removed from the collection.${example:BlChildrenLinkedListExamples>>#add}$${example:BlChildrenLinkedListExamples>>#remove}$"
"BlSubRopeExamples",""
"BlImageBackgroundExamples","Easiest way to create a image background is by sending the message ${method:Form>>#asBlBackground}$ to a ${class:Form}$ object.${example:BlImageBackgroundExamples>>#blueImageWithPositiveExtentBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$Alternatively, one can call the factory method ${method:BlImageBackground class>>#image:}$ and pass it the desired form object${example:BlImageBackgroundExamples>>#blueImageBackgroundExplicitInstantiation|previewHeight=200|show=#gtViewBackgroundFor:}$We can also instantiate a ${class:BlImageBackground}$ object and configure it.${example:BlImageBackgroundExamples>>#blueImageBackgroundExplicitInitialization|previewHeight=200|show=#gtViewBackgroundFor:}$Icons can be used as a background as they are forms.${example:BlImageBackgroundExamples>>#iconImageBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$Apart from icons, any other form can be used as a background.${example:BlImageBackgroundExamples>>#pharoLogoImageBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$One property suported by the image background is opacity. This changes the transparency of the background.${example:BlImageBackgroundExamples>>#imageWithOpacityBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$Setting then the opacity to 0 makes the background transparent.${example:BlImageBackgroundExamples>>#imageWithZeroOpacityBackground|previewHeight=200|show=#gtViewBackgroundFor:}$We can also get a transparent background by using an empty form as a background.${example:BlImageBackgroundExamples>>#emptyImageBackground|previewHeight=200|show=#gtViewBackgroundFor:}$"
"BlScrollableElementExamples","! Scrollable elementScrollable element allows users to display a larger element in a smaller frame (so called ""window"") with the ability to scroll the content both veritcally and horizontally.Let's start by creating a content element which in our case will be a list of all subclasses of ${class:SequenceableCollection}$. As you can see it is a quite tall element and it does not fit on a screen:${example:BlScrollableElementExamples>>#scrollableContentInScalableElement|previewShow=#gtLiveFor:|previewHeight=250|previewExpanded|noCode}$Therefore we want to wrap such large element in a new instance of ${class:BlScrollableElement}$${example:BlScrollableElementExamples>>#scrollableElement|previewShow=#gtLiveFor:|previewHeight=100}$Once the ==scrollable== element is instantiated we can add our previously created content as a direct child to the scrollable element with ${method:BlElement>>#addChild:}$${example:BlScrollableElementExamples>>#scrollableElementWithContent|previewShow=#gtLiveFor:|previewHeight=75|previewExpanded}$We quickly notice that the ==scrollable== element does not have nice dimensions. We can fix it by asking the ==scrollable== element to match it's parent.${example:BlScrollableElementExamples>>#scrollableMatchParent|previewShow=#gtLiveFor:|previewHeight=300|previewExpanded}$While being the most common use case, match parent is not the only resizing strategy supported by a ==scrollable element==. Together with ==maxHeight:== constraint a scrollable element can be used with ==fit content==, which means that a scrollable element will grow in size to accommodate the scrolled element until reaching the limit set using `maxHeight:` or `maxWidth:`${example:BlScrollableElementExamples>>#scrollableFitContentWithMaxHeight|previewShow=#gtLiveFor:|previewHeight=400|previewExpanded}$"
"BlFocusExampleNavigationListener","I am a keyboard arrow press listener used by focus examples in order to move focus between cell elements"
"BlRectangleShapeWithArrowExplanation","! Rectangle geometry with arrow pointerThe goal of this tutorial is to create an element with an arrow-like pointer in the middle of the top edge, as shown below:${example:BlRectangleShapeWithArrowExplanation>>#elementWithTopArrowGeometry|noCode|previewShow=gtLiveFor:|previewHeight=250}$A traditional way to implement such geometry is to create a subclass of ${class:BlGeometry}$,  override ${method:BlGeometry>>#buildPathOnSpartaCanvas:}$ and implement quite cumbersome algorithm that computes the location of each point and then connects those points using ==moveTo:== and ==lineTo:== commands provided by ==PathBuilder==. The problem with such solution is its exponential increase in compolexity each time we would like to parametrize and customize the resulting geometry, for example the size of the arrow or its horizontal position. Even more compex would be to implement the support for positioning the arrow on different edges (e.g. left, bottom) or an ability to have multiple arrows on separate edges.This is where a ${class:BlVectorShape}$ comes-in handy.!! Creating a rectangle shapeWe will start with creation of the rectangle shape ${class:BlRectangleShape}$:${example:BlRectangleShapeWithArrowExplanation>>#rectangleShape|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$!! Translating the top edgeIn order to give the arrow pointing up enough space we should move the top edge of the rectangle down by the length of the arrow. First of all we should ask the rectangle shape to give us its top edge ${method:BlRectangleShape>>#topEdge}$. By default the ==topEdge== of the rectangle is an instance of ${class:BlLineShape}$ which can be translated by sending ${method:BlLineShape>>#moveBy:}$ to the ==topEdge==:${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTranslatedTopEdge|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$!! Injecting a line inside of the top edgeNext step on our way to the arrow is to inject a line segment equal to the length of the arrow in the middle of the ==topEdge==. It can be done by sending ${method:BlLineShape>>#injectLineAt:length:}$ to the ==topEdge==. Since we want to inject a line right in the middle of the edge we pass ==0.5== as a line location:${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopInjectedLine|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$!! Splitting the injected lineWe are almost ready to create a rectangular arrow. We just need to split an injected line in half in order to create the top corner of the rectangle. We can do so by sending a ${method:BlLineShape>>#splitAt:}$ to the now middle section of the ==topEdge== which was created by the previous line injection step:${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopPolylineSplitInHalf|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$!! Moving the top of the triangleOnce we have everything we need for the arrow triangle we can move it's top up by the length of the arrow. To do so we should send ${method:BlPointShape>>#moveBy:}$ to the connection point of the splitted line in the middle of the ==topEdge==. After doing so we receive the expected vector shape we we can later use together with ${class:BlShapeGeometry}$:${example:BlRectangleShapeWithArrowExplanation>>#rectangleWithTopArrow|previewShow=#gtLiveFor:|previewExpanded=true|previewHeight=250}$"
"BlMobileSoftwareStatusBar",""
"BlMouseEventExamples",""
"BlMobilePhone","BlMobilePhone open"
"BlInfiniteExampleGalleryImage",""
"BlExampleElementWithBrokenDrawing","I am an element with a broken drawing method that throws Error (ZeroDivide)"
"BlSigmoidElementExamples",""
"BlChicken","How to run:==BlChicken open=="
"BlFrameLayoutSingleChildExamples","I contain examples of positioning a single element within a parent element that uses a ${class:BlFrameLayout}$."
"BlExampleInfiniteForGeometryHolder",""
"BlExampleInfiniteForGeometryLinearNode",""
"BlExampleSwitchEventDeactivated",""
"BlEventDispatcherExamples","I am a collection of event dispatcher examples"
"BlZoomableElementExamples",""
"BlExampleInfiniteForGeometryElement",""
"BlCollectionRopeExamples","I contain examples of a collection rope"
"BlTextElementMeasurementStrategyExamples","! Text measurement strategies${class:BlTextElement}$ provides different text measurement strategies, each suitable for a specific use case. There is no perfect strategy, therefore understanding the differences between them is an important step in learning how to work with Text in Bloc.!! Label measurementThe default text measurement strategy is so called ==Label measurement==, ${method:BlTextElement>>#labelMeasurement}$. The height of the text element in this case is a sum of ascent and descent which is given by the font. It means that the height of the text is independent from the content. The width is given by the exact bounds of the element's text. ==Label measurement== is useful for displaying labels and short pieces of text. Please note, that since the width is precise and depends on the content, whitespace is not taken into account when computing the width of the text element.${example:BlTextElementMeasurementStrategyExamples>>#textElementWithLabelMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=100}$!! Editor measurementA similar measurement strategy which is designed to be used in a text editor computes the width of the element using the ==#advance== property of a text paragraph. The height is computed as a sum of ascent and descent. ${method:BlTextElement>>#editorMeasurement}$${example:BlTextElementMeasurementStrategyExamples>>#textElementWithEditorMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=100}$!! Precise measurementHowever, sometimes we want to know the exact and precise text bounds. ${method:BlTextElement>>#tightMeasurement}$ does exactly that and clips off any white space surrounding the text. It may be useful for displaying a short piece of a text, usually a word centered within a larger element.${example:BlTextElementMeasurementStrategyExamples>>#textElementWithTightMeasurement|noCode|previewShow=#gtLiveFor:|previewHeight=75}$!! ConslusionNow let's compare all text measurement strategies:${example:BlTextElementMeasurementStrategyExamples>>#measurementDifference|noCode|previewShow=#gtLiveFor:|previewHeight=220}$"
"BlBorderExamples","! BorderBorder is another essential visual property in addition to the ${class:BlBackground}$. It is represented by ${class:BlBorder}$ which encapsulates various border properties such as paint, width, style and opacity.""""All border instances are immutable objects.""""The simplest way to create a border is to use Color.${example:BlBorderExamples>>#colorGrayBorder}$In addition users can provide a custom width along side with the paint, it is the most common way to create a border:${example:BlBorderExamples>>#colorGrayBorderWithExplicitWidth}$!! ImmutabilityAs it was mentioned previously the border is immutable. Any change to its state once created results in ${class:BlImmutableObjectChangeError}$.The reason for the border to be immutable is to simplify overall design, decrease complexity and prevent users from making trivial mistakes. Some border properties influence the geometry of the element (stroked bounds) which means that every time the border width is changed we should somehow notify and invalidate the element that uses that border. Either the user would have to send some invalidation message to the element or the border should know its element. If we make users be responsible for manual invalidation sooner or later it may happen that they forget or just will have a lack of understanding of such details therefore they will start to think that Bloc does not work properly. That is why a clean and nice solution is to make border immutable and enfore users to use ${method:BlElement>>#border:}$ every time he or she wants to change the border.In the following example we show what happens if user tries to change the width of the existing border:${example:BlBorderExamples>>#changeWidthError}$!! Changing border's propertiesThe obvious downside of the immutability is the fact that it is not possible to mutate one specific border's property. To address this issue border provides a set of ==copyWith*:== methods that create a new instance of the border with one one property modified.Assume the following example in which we create a new border with a different width preserving all other properties:${example:BlBorderExamples>>#copyWithWidth}$"
"BlSpaceEventExamples","I contain examples of space related events"
"BlBackgroundExamples","!BackgroundsThe class ${class:BlBackground}$ defines the background of a Bloc element. As this is an abstract class, the actual concrete types of backgrounds are defined by its subclasses. There are four main types of backgrounds:- ${class:BlPaintBackground}$: color background defined using a ${class:BlPaint}$ object;- ${class:BlImageBackground}$: image background defined using a ${class:Form}$ object;- ${class:BlTransparentBackground}$: a special case of a transparent background;- ${class:BlCompositeBackground}$: a background that provided the ability to compose multiple other ${class:BlBackground}$ objects.!! Paint BackgroundsThe simplest of the available backgrounds is the paint background. A paint can be either a simple color or a type of gradient."
"BlScrollFlingerExamples","I contain examples of the scroll flinger"
"BlExampleSwitchSkinWithTrack",""
"BlPannableElementExamples",""
"BlMobileHomeButton",""
"BlLinearLayoutUsageExamples","I contain examples of a linear layout (both horizontal and vertical).I show how different resizing strategies work and how to use weight in order to distribute elements proportionally within parent."
"BlInfiniteExamplePager",""
"BlHandlerArrayRegistryExamples","I contain examples of event handler registry with Array as its backend"
"BlExampleAtomElement",""
"BlLineExamples","I contain examples and a few usecases of ===BlLineElement==="
"BlInfiniteLinearLayoutExampleHolder",""
"BlFrameLayoutChildrenExamples",""
"BlInfiniteExamplePagerPanesDataSource",""
"BlExampleInfiniteForGeometryFrameNode",""
"BlExampleCustomEvent","I am an example of a custom bloc event"
"BlElementEventExamples","I contain examples of different BlElementEvents"
"BlTransformationAnimationExamples",""
"TBlHandlerRegistryExamples","I define examples of the public api of event handler registry. All concrete implementations should behave in the same way"
"BlChildrenSubsetExamples","I provide examples for subclasses of ${class:BlChildrenSubset}$."
"BlTextElementExamples",""
"BlBasicExamples","I am a collection of basic most simple examples that show most important Bloc features"
"BlSharedEventDistributorExamples","I exemplify ${class:BlSharedEventDistributor}$."
"BlArrowheadExamples","I contain examples of different types of ==BlArrowheadElement=="
"BlRopedTextExamples","I contain examples of more complicated pieces of text to exemplify the rope structure."
"BlExampleSwitchLook",""
"BlOvershootingScrollerExamples",""
"BlMobileContent",""
"BlKeyCombinationExamples","I contain examples of how to use key combination"
"BlExampleSwitchElement",""
"BlGridLayoutUsageExamples","I contain examples of a grid layoutI show how different resizing strategies work and how to build advanced layouts with the help of a grid"
"BlChickenLeg","I am a single red chicken leg with two toes"
"BlGeometryElementExamples",""
"BlInfiniteExampleGalleryElementHolder",""
"BlFlowLayoutCompositionExamples","I contain examples of a flow layout"
"BlInfiniteExampleColorsDataSource","I am a data source of a color spectrum"
"BlExampleInfiniteForGeometryBuilder",""
"BlInfiniteExamplePagerElement",""
"BlConcatenationRopeIteratorExamples",""
"BlTextUnderlineAttributeExamples","! Underline attributeThe simplest way to apply an underline attribute on a whole text would be to use ${method:TBlTextStyleable>>#underlinePaint:width:}$${example:BlTextUnderlineAttributeExamples>>#textWithUnderline_1_to_5|previewShow=#gtTextFor:|previewExpanded|previewHeight=100}$To add an underline to just a part of text it can be scoped with ${method:BlText>>#from:to:}$${example:BlTextUnderlineAttributeExamples>>#textWithUnderline_3_to_4|previewShow=#gtTextFor:|previewExpanded|previewHeight=100}$In addition to the simple API an underline attribute can be customized and then applied on a text using ${method:TBlTextStyleable>>#underlineDo:}$ helper method. Users should pass a block that accepts ${class:BlTextUnderlineAttribute}$ as an argument.${example:BlTextUnderlineAttributeExamples>>#textWithUnderlineDo|previewShow=#gtTextFor:|previewExpanded|previewHeight=100}$"
"TBlChildrenExample","I define examples common to all types of ${class:BlChildrenCollection}$.Classes that are using me should define the concrete type of ${class:BlChildrenCollection}$ that is being tested using the method ${method:TBlChildrenExample>>#newChildrenCollection}$."
"BlChildrenOrderedCollectionExamples","I define examples for the class ${class:BlChildrenOrderedCollection}$.Instances of ${class:BlChildrenOrderedCollection}$ are created by directly instatiating the class.${example:BlChildrenOrderedCollectionExamples>>#emptyChildrenExplicitCreation}$Bloc elements can then be added and removed from the collection.${example:BlChildrenOrderedCollectionExamples>>#add}$${example:BlChildrenOrderedCollectionExamples>>#remove}$"
"BlSubTextExamples",""
"BlPaintBackgroundExamples","Easiest way to create a paint background that just displays a color is by sending the message ${method:Color>>#asBlBackground}$ to the actual color.${example:BlPaintBackgroundExamples>>#grayColorBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$Alternatively, one can call the factory method ${method:BlPaintBackground class>>#paint:}$ and pass it the desired paint.${example:BlPaintBackgroundExamples>>#grayColorBackgroundExplicitInstantiationWithPaint|previewHeight=200|show=#gtViewBackgroundFor:}$We can also instantiate a ${class:BlPaintBackground}$ object and configure it.${example:BlPaintBackgroundExamples>>#grayColorBackgroundExplicitInitializationWithPaint|previewHeight=200|show=#gtViewBackgroundFor:}$Instead of creating a paint object, we can also pass only the color as a parameter to the factory method: ${example:BlPaintBackgroundExamples>>#grayColorBackgroundExplicitInstantiationWithColor|previewHeight=200|show=#gtViewBackgroundFor:}$Paints do not have to be only be simple colors. We can also use gradients to specify a background. For example, below we create a background that displayes a gradient from red to blue.${example:BlPaintBackgroundExamples>>#linearGradientBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$We can also use a different kind of gradient, like a radial one.${example:BlPaintBackgroundExamples>>#radiusGradientBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$One property suported by the paint background is opacity. This changes the transparency of the background.${example:BlPaintBackgroundExamples>>#grayColorWithLowOpacityBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$Opacity also works when gradients are used in the background.${example:BlPaintBackgroundExamples>>#linearGradientBackgroundWithOpacity|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$Setting then the opacity to 0 makes the background transparent.${example:BlPaintBackgroundExamples>>#grayColorWithZeroOpacityBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$We can also get a transparent background by setting the a transparent color as a background.${example:BlPaintBackgroundExamples>>#transparentColorBackground|expandedPreview|previewHeight=200|show=#gtViewBackgroundFor:}$"
"BlSelectionExamples","I exemplify selection interval"
"BlAlternativeCombinationExamples",""
"BlResizerExamples",""
"BlMobileSpeaker",""
"BlMouseProcessorExamples","I contain examples-tests of mouse processor"
"BlMobileSubElement",""
"BlInfiniteExamplePagerPane",""
"BlExampleElementWithBrokenDrawingAndOnLayout","I am an element with broken drawing and onLayout methods"
"BlGeometryVisualAndLayoutBoundsExamples","!Geometry, Visual, and Layout Bounds ExplainedA bound is a territorial limit, a boundary. In terms of a graphical element, it is a space in which the graphical element is rendered. For simplicity, bounds are rectangular areas. Bloc defines three different bounds (layout, geometry, and visual) that we will explain using the following example:${example:BlGeometryVisualAndLayoutBoundsExamples>>#centeredOutskirts|expandedPreview}$""Layout"" bounds are drawn with gray dashed rectangles in the figure above. They are of this size in this particula example, because each element defines its size explicitly using ==size:== method. Layout bounds are considered by layout algorithms to define mutual locations for all considered elements.""Geometry"" bounds are drawn with red dashed rectangles in the figure above. The area is defined by minimum and maximum values of a polygon vertices. In case of rectangle, geometry bounds are defined by the following polygon:${example:BlGeometryVisualAndLayoutBoundsExamples>>#rectanglePolygon}$""Visual"" bounds are drawn with blue rectangles in the figure above. It is an exact area occupied by an element. Computing visual bounds is the most expensive computation as it takes strokes and rendering into account.!! Different Bounds SetupsThe first figure above draws all strokes centered around the defined vertices. For that reason, the geometry bounds are in the middle. The following example draws strokes outside:${example:BlGeometryVisualAndLayoutBoundsExamples>>#outsideOutskirts|expandedPreview}$In case of the rectangle, you can notice that its stroke is inside of the visual (blue, outside) and the geometry (red, inside) bounds. If the strokes are drawn inside, then visual and geometry bounds are equal:${example:BlGeometryVisualAndLayoutBoundsExamples>>#insideOutskirts|expandedPreview}$!! ClippingGeometry is used to define clipping. Consider the below an example in which the triangle is placed in the green parent. When clipping is ==false==, the triangle is seen in its entirety.${example:BlGeometryVisualAndLayoutBoundsExamples>>#unclippedTriangle|expandedPreview=}$When clipping is true, the triangle is cut.${example:BlGeometryVisualAndLayoutBoundsExamples>>#clippedTriangle|expandedPreview=}$! Debugging BoundsBeing able to display those three bounds helps when elements are not visually aligned as expected. Consider the following example:${example:BlGeometryVisualAndLayoutBoundsExamples>>#misalignedIcon|expandedPreview}$The triangle (icon) and text are not vertically centered despide the fact that we have ==BlLinearLayout horizontal alignCenter== in the code. To understand why it happens, ==aTriangleElement debug: true== can be added to the code with the following result:${example:BlGeometryVisualAndLayoutBoundsExamples>>#debuggingMisalignedIcon|expandedPreview}$As we can see the layout bounds (gray dashed rectangle) consider larger area then expected. Looking at the definition of the triangle polygon, we can spot that the polygon starts at ==0@3== instead of ==0@0==: ${example:BlGeometryVisualAndLayoutBoundsExamples>>#misalignedTrianglePolygon}$If we fix it to: ${example:BlGeometryVisualAndLayoutBoundsExamples>>#trianglePolygon}$The icon and text are aligned as expected:${example:BlGeometryVisualAndLayoutBoundsExamples>>#debuggingAlignedIcon|expandedPreview}$And we can disactivate the debug mode:${example:BlGeometryVisualAndLayoutBoundsExamples>>#alignedIcon|expandedPreview}$The debugging mode is also possible to activate in the GT-Inspector's menu, next to the tabs."
"BlChickenBody","I am a body of a very fat chicken"
"BlFrameLayoutCompositionExamples","I show a more complex example of how multiple children can be aligned within a parent element that uses ${class:BlFrameLayout}$.The parent contains three children, yellow, green and red added in the same order. Yellow matches completely the parent. The green and red children have a fixed size and different alignments. We can see that red is overlayed on top of the green child, and both green and red are overlayed on top of the yellow child. This is the case as children are rendered in the other in which they were added to the parent.${example:BlFrameLayoutCompositionExamples>>#example|previewExpanded|previewHeight=450}$In case we add children in the reverse order, red, green and yellow, we just see the yellow child, as it takes the entire available space and it overlaps both the other children.${example:BlFrameLayoutCompositionExamples>>#exampleReverseOrder|previewExpanded|previewHeight=450}$"
"BlInfiniteExampleClassesElementHolder","I bind class to its visual representation - a text element"
"BlExperimentalExamples","I contain experimental examples that only work in manually prepared laboratory environments.Trying to run these examples may result in undefined bahaviour such as: crash, infinite debugger windows spawning, unresponsive image, universe collapse or suddenly created black hole that will probably destroy our solar system.Take care. Be conscious at all times."
"BlExampleInfiniteForGeometryDataSource",""
"BlEventExamples","I contain examples various aspects of event dispatching and handling mechanism such as custom events, event simulation etc"
"BlInfiniteExampleElement","I am an infinite element with vertical linear layout"
"BlCollectionRopeIteratorExamples",""
"BlTextIteratorExamples",""
"BlChildrenArrayExamples","I define examples for the class ${class:BlChildrenArray}$.Instances of ${class:BlChildrenArray}$ are created by directly instatiating the class.${example:BlChildrenArrayExamples>>#emptyChildrenExplicitCreation}$Alternatively, instances can be created using the factory method ${method:BlChildrenArray class>>#from:}$${example:BlChildrenArrayExamples>>#emptyChildrenFactoryMethodCreation}$Bloc elements can then be added and removed from the collection.${example:BlChildrenArrayExamples>>#add}$${example:BlChildrenArrayExamples>>#remove}$"
"BlSpaceExamples","I contain example of how to use space"
"BlBuilderBackgroundExamples",""
"BlScrollPaneExamples",""
"BlExampleSwitchSkinWithoutTrack",""
"BlPullHandlerExamples",""
"BlMobileSoftware",""
"BlLinearLayoutVerticalExamples",""
"BlInfiniteExamplePagerTabGroupElement",""
"BlInfiniteExample","I contain exmples of infinite element"
"BlExampleBouncingAtomsElement",""
"BlParabollaExamples","I contain examples and a few usecases of ===BlArcElement==="
"BlBlurringClipper",""
"BlFrameLayoutMultipleChildrenExamples",""
"BlInfiniteLinearLayoutExampleDataSource",""
"BlExampleInfiniteForGeometryInfiniteNode",""
"BlExampleSwitchEventActivated",""
"BlErrorHandlingExamples","I exemplify how Bloc handles errors in different parts of the BlElement such as drawing, layout or event handling"
"BlTransformationExamples","I contain examples of how to apply different transformations on visual elements (e.g. scale, rotation, translation)"
"BlExampleLoggingEventHandler","I am a special event handler that increases ==counter== every time I handle an event"
"BlClockExample","I am an example of an analog clock element"
"BlTextElementMeasurementExamples",""
"BlBasicLayoutExamples",""
"BlSingleLineTextParagraphExamples","I contain examples of a text paragraph"
"BlAttributeRopeExamples","I contain examples of an attribute rope"
"BlScalableElementExamples",""
"BlExampleSwitchSkinRadio",""
"BlOvershootingSplineBasedScrollerExamples","I contain examples of the spline overscroller"
"BlMobileGlass",""
"BlLinearLayoutHorizontalExamples",""
"BlInfiniteExampleGalleryImageElement",""
"BlHandlerAnnouncerRegistryExamples","I contain examples of event handler registry with Announcer as its backend"
"BlElementExampleCubeOpenGL","Class definition:BlElement subclass: #BlElementExampleCubeOpenGL	instanceVariableNames: 'rotateX rotateY rotateZ count ctx fb'	classVariableNames: ''	poolDictionaries: 'UFFIOpenGLConstants UFFIOpenGLTypes'	category: 'Bloc-Examples-Experimental'"
"BlBezierElementExamples","!Bezier curvesThere are two kinds of Bezier curves supported:- quadratic- cubic!!Quadratic Bezier curves${example:BlBezierElementExamples>>#quadraticCurveWithAnchors|expandedPreview|noCode=|previewShow=gtLiveFor:}$!!Cubic Bezier curves${example:BlBezierElementExamples>>#curveWithAnchors|expandedPreview|noCode=|previewShow=#gtLiveFor:}$"
"BlInfiniteExamplePagerPaneElementHolder",""
"BlFocusExamples","How to:	1) Inspect / run example	2) Click one any cell to give it a focus (blue border should appear)	3) Navigate with keyboard arrows (arrow up/down left/right)"
"BlInfiniteExampleGalleryDataSource",""
"BlExampleInfiniteForGeometryNode",""
"BlInfiniteLinearLayoutExampleElement",""
"BlElementBoundsExamples","I contain examples of element bounds api"
"BlTouchExamples",""
"TBlExample","I contain useful helper methods that simplify creation of examples"
"BlChildrenRopeExamples","I define examples for the class ${class:BlChildrenRope}$.Instances of ${class:BlChildrenRope}$ are created by directly instatiating the class.${example:BlChildrenRopeExamples>>#emptyChildrenExplicitCreation}$Bloc elements can then be added and removed from the collection.${example:BlChildrenRopeExamples>>#add}$${example:BlChildrenRopeExamples>>#remove}$"
"BlTaskExamples",""
"BlTransparentBackgroundExamples",""
"BlSelectionHandlerExamples","I contain examples of how one can add support of selection.1) open example2) Press and drag with the mouse as if you would select something on your computer desktop"
"BlFileExporter","I export bloc element to a file.See my subclasses for different output formats"
"BlPdfExporter","I export bloc elements as PDF file.[[[| element |element := BlElement new.element background: Color red.element geometry: BlEllipse new.element size: 400@200.(BlExporter pdf element: element; fileName: 'test.pdf'; export) inspect]]]"
"BlSvgExporter","I export bloc elements as SVG file.[[[| element |element := BlElement new.element background: Color red.element geometry: BlEllipse new.element size: 400@200.(BlExporter svg element: element; fileName: 'test.svg'; export) inspect]]]"
"BlExporter","I am an exporter of bloc elements to various output formats. See my subclasses for more info"
"BlJpgExporter","I export bloc elements as JPG file.[[[| element |element := BlElement new.element background: Color red.element geometry: BlEllipse new.element size: 400@200.(BlExporter jpg element: element; fileName: 'test.jpg'; export) inspect]]]"
"BlPngExporter","I export bloc elements as PNG file.[[[| element |element := BlElement new.element background: Color red.element geometry: BlEllipse new.element size: 400@200.(BlExporter png element: element; fileName: 'test.png'; export) inspect]]]"
"BlFormExporter","I export an element as a Form.[[[					]]]"
"GLMBlocPresentationExamples",""
"GLMBlocPresentation","This presentation offers a means to embed a Bloc element. It makes sense only for the Morph  Renderer."
"GLMMorphicBlocRenderer","I render bloc presentation that should be able to be used within morphic"
"GLMMorphicSpartaRenderer","I render Sparta presentation that should be able to be used within morphic"
"GLMMorphicBlocWrapperMorph","I wrap a morphic host space window and listen for SystemWindow close events in order to close underlying bloc host window"
"GLMSpartaPresentation","This presentation offers a means to embed a Sparta Canvas and draw on it. It makes sense only for the Morph  Renderer."
"GLMBlocTextPresentationExamples",""
"BlExtensionAssets",""
"GLMBlocMatrixElement",""
"GLMBlocTextPresentation",""
"TGLMBlocPresentation","I am a special type of presentation that allowes users to create presentations using installable frameworks.When used framework is not installed I show a dialog asking users if they would like to install that framework"
"GLMMorphicBlocMondrianRenderer",""
"GLMBlocMondrianPresentationExamples",""
"GLMBlocMondrianPresentation",""
"GLMBlocObjectToSelect","I am an announcement that elements that are rendered by the Bloc presentation can trigger. "
"GLMMorphicInstallablePresentationRenderer",""
"GLMMorphicBlocTextRenderer",""
"BlPerpendicularFractionAnchor","I am a virtual anchor that lays on a perpendicular to a line between two reference anchors.The curvature - distance from the line connecting reference anchors is defined as a fraction (curvatureFraction) of a length between anchors."
"BlParabollaArcElement","I represent an arc element that is rendered between two provided anchors and has configurable curvature, which can be absolute or relative (fraction)"
"BlElementTopRightAnchor",""
"BlArrowheadRectangle",""
"BlElementBottomLeftAnchor",""
"BlAbsolutePositionAnchor","I am a static anchor that does not move and is independent from geometry element or other anchors."
"BlNearestPositionLooseCircleAnchor","I find the nearest point that lies on a circle of a reference element to the center of the given element.Circle radius is computed as a half of the diagonal length of the element bounds"
"BlCurveElement","I define basic functionality of a curve element.I should be common for all line- and curve- based elements that should support arrow heads."
"BlElementCenterRightAnchor","My position is equal to the right center of a reference element"
"BlArrowheadElement","I am a root class for all arrowheads to be used with curve element.I listen to border width changes of my parent in order to adapt geometry. That is why I am not intended to work outside of CurveElement context, however I can still be used for the case when arrow size depends on border width of a parent.In order to have pixel perfect connection of the arrowhead with its curve I am treated differently than other children in CurveElement. I also provide custom draw logic to avoid usage of virual canvas layers that prevents the use of ==Source== composition operator."
"BlAnchorRelativeToElement","Relative anchor takes an arbitrary element as a reference an compute its position based on properties of that element."
"BlSigmoidElement",""
"BlNearestPositionAnchor","I choose a point on a geometry path of the reference element which is the nearest to the other element"
"BlArrowheadSimpleArrow","I am a simple arrow-like arrowhead.Both my size and arrow length depend on the curve width.It is possible hovewer to customize a length fraction - how long should be the outer ""arrow"" compared to the length of the side of a nose triangle.Users can also customise nose angle that tells how wide should the arrow lines be spread.The with of the outer arrows can be specified by changing border width of a simple arrow arrowhead.I support both background and border paint and can have hollow inner triangle."
"BlElementBottomRightAnchor",""
"BlAnchorRelativeToAnchor","Anchor relative anchor computes its position based on other anchors"
"BlNearestPositionTightCircleAnchor","I find the nearest point that lies on a circle of a reference element to the center of the given element.Circle radius is computed as a half of the maximum of the height and width"
"BlBezierElement","I represent a curve element that is rendered between two provided anchors via additional control anchors.See ${class:BlBezierElementExamples}$."
"BlElementTopCenterAnchor","My position is equal to the top center of a reference element"
"BlArrowheadCircle","I am a circlular arrow head.My border width depends on the width of a curve and hence can not be manually specified.I support background and border paints. - For hollow arrowhead let background be transparent. - For solid arrowhead make background paint be the same as border paint. 	(it is possible to specify different paints for border and background)"
"BlAnchorRelativeToElementBounds",""
"BlEllipseElement","I am an ellipse element driven by a center anchor that describes where my center should be.My extent depends on major and minor radii.https://en.wikipedia.org/wiki/Ellipse"
"BlNearestPositionBoundsAnchor","I find the nearest point that lies on bounds rectangle of a reference element to the center of the given element"
"BlGeometryLayout","I am a special layout similar to frame layout that relies on geometry bounds instead of children when resizing mode is set to fit content.Note, that I don't take element's padding into account when computing it's fitContent size."
"BlArrowheadTriangle","I am a triangular arrow head.My size depends on the width of a curve and hence can not be manually specified.It is possible to have a border around triangle by specifying a border width of a triangle arrowhead.I support background and border paints. - For hollow arrowhead let background be transparent. - For solid arrowhead make background paint be the same as border paint. 	(it is possible to specify different paints for border and background)"
"BlElementCenterAnchor","My position is equal to the center of a reference element"
"BlPerpendicularAnchor","I am a virtual anchor that lays on a perpendicular to a line between two reference anchors.The curvature - distance from the line connecting reference anchors is explicitely user-defined"
"BlGeometryAnchorListener","I am an event listener that listens Anchor Moved event send by Anchor"
"BlLineElement","I represent a line element that is rendered between two provided position or attachment points"
"BlElementTopLeftAnchor",""
"BlArrowheadNone",""
"BlElementBottomCenterAnchor","My position is equal to the bottom center of a reference element"
"BlGeometryAnchor","I represent an anchor of a geometry element, which is driven by anchor positions.See my subclasses for a different anchor strategies."
"BlNearestPositionEllipseAnchor","I find the nearest point that lies on an ellipse of a reference element to the center of the given element.Ellipse radii are computed based as a half of the width and the height of the reference element"
"BlGeometryElement","I am a root class of geometry elements - elements driven by geometry anchors."
"BlElementCenterLeftAnchor","My position is equal to the left center of a reference element"
"BlGeometryAnchorMoved","I am sent when anchor's position changed"
"BlImageCacheHousekeeper","BlImageCacheHousekeeper keeps track of the size of its BlLocalImageCache and prunes the oldest files from the cache when it grows too large.!!Public API and Key MessagesThere are only really three operations performed by the housekeeper:- add: Add the size of the supplied ${class:name=FileReference}$ to the receiver.- schedulePruneCache Initiate deleting files to get the cache size down to targetSize- scheduleUpdateCurrentSize Initiate walking over the cache and adding up the total cache size.!!Internal Representation and Key Implementation Points.!!!Instance Variables	cache:		<BlLocalImageCache>	currentSize:		<Integer>	emergencySize:		<Integer>	entryCount:		<Integer>	targetSize:		<Integer>!!Implementation PointsTo ensure that UI responsiveness is not impacted all long lasting operations (updating the cache size and pruning the cache) are performed in a low priority queue without any access mutexes.  This means that the currentSize may not be accurate and the cache may grow beyond the specified maximums.Running the pruning operation in a low priority background process also means that in a (very) busy system it is possible that the pruning never catches up with files being added to the cache.  If the currentSize ever reaches the emergencySize the next file to be added will prune the cache in the calling process."
"BlAsyncImageElement","BlAsyncImageElement is an abstract class that provides a framework for Bloc elements that display an image that should be loaded in a background processes (to leave the UI responsive).Each subclass BlAsyncImageElement requires a matching ${class:name=BlAsyncElementValuable}$ that is responsible for doing the work of retrieving the ${class:name=Form}$ and updating the receiver.BlAsyncImageElement minimises memory and CPU usage by ensuring that the ${class:name=Form}$ held in memory is approximately the same size as the on-screen display size.  This ensures that memory is not wasted in the case where the form is much larger than the on-screen area, and that image quality is not compromised in the case where the form is much smaller than the on-screen display size.  See ${method:name=BlAsyncImageElement>>#needsUpdate}$.Subclasses of BlAsyncImageElement are responsible for holding the details of how to retrieve the image and answering their valuable, see ${method:name=BlAsyncImageElement>>#queueEntry}$ and  ${method:name=BlAsyncElementValuable>>#updateElement}$.!!Public API and Key MessagesBlAsyncImageElement has the same public API as BlElement.  As an abstract class, it shouldn't be instantiated. !!Internal Representation and Key Implementation Points!!!Instance Variables	bitmap:		<MozSurface>  Moz2D representation of the form.	form:			<Form>  The image being displayed.!!Implementation Points"
"BlImageCacheExamples",""
"BlImageCacheSignal",""
"BlImageCacheEntry","BlImageCacheEntry is used to return a ${class:name=Form}$ from the ${class:name=BlLocalImageCache}$.It includes two flags:- isOriginal: which indicates that the form is from the source, and thus no larger form is available.- isSmallest: which indicates that the form is the smallest held by the cache.These allow the user to determine whether it is worthwhile attempting to get a smaller or larger version of the form from the cache.!!Internal Representation and Key Implementation Points.!!!Instance Variables	form:		<Form>	isOriginal:		<Boolean>	isSmallest:		<Boolean>"
"BlLocalImageCacheTestResources",""
"BlLocalImageCacheTest","This class contains tests"
"BlMemoryImageCache","BlMemoryImageCache provides a cache of file system and network images at specified sizes.- The cache is stored in memory.- Cache entries are created lazily, i.e. only when a cache entry of the specified size is requested.- If the original image size is smaller than the cache size, the original will be returned (i.e. images are never extended, only shrunk).!!Public API and Key Messages- maxCacheSize: 	Set the number of entries held in memory.  See #initialize for the default. !!Internal Representation and Key Implementation Points.!!!Instance Variables	cache:			<Array of Association>	cacheIndex:		<Object>!!!Implementation PointsThe cache is expected to be fairly small, e.g. 5 - 10 entries.  If a large cache is desired BlLocalImageCache will normally be used instead.Since the cache is small, a simple array is used instead of a dictionary.  Possibly SmallDictionary should be used instead."
"BlImageTestResources",""
"BlLocalImageCacheHousekeepingTest","BlLocalImageCacheHousekeeperTest tests the main functionality of BlLocalImageCacheHousekeeper, but avoids anything that will run in a separate thread, i.e. the BlHousekeepingWorkerPool, to keep the tests simple.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cache:		<Object>	cacheRoot:		<Object>	fileRoot:		<Object>	housekeeper:		<Object>	index:		<Object>	networkRoot:		<Object>    Implementation Points"
"BlWorkerImageCache","BlWorkerImageCache provides the same capabilities as ${class:name=BlLocalImageCache}$ but delegates the work of populating the cache to slave pharo processes. !!Public API and Key MessagesThe public API is the same as for ${class:name=BlLocalImageCache}$."
"BlUrlImageLoadValuable","BlUrlImageLoadValuable is responsible for loading a single image at the supplied URL.  This is done by passing the request on to ${method:name=BlLocalImageCache class>>#current}$.  "
"BlImageLoadValuableTest","This class contains tests"
"BlLocalImageCache","BlLocalImageCache provides a cache of file system and network images at specified sizes.- The cache is stored on disk.- Cache entries are created lazily, i.e. only when a cache entry of the specified size is requested.- If the original image size is smaller than the cache size, the original will be returned.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cacheRoot:		<FileReference>	fileRoot:		<FileReference>	imageSizes:		<Array>	maxCacheSize:		<Integer>  The maximum size of the cache in bytes.  The actual size may grow somewhat larger than specified in a busy system.	networkRoot:		<FileReference>	housekeeper:		<BlImageCacheHousekeeper>	hits:								<Integer>	misses:						<Integer>!!!Implementation PointsTo allow lookup in the file system cache to be quick either an index has to be held in memory or the cache entries found quickly.The current assumption is that the memory cost of an in-memory index is too high.Scanning a directory looking for files is slow - Pharo always walks over all the files in the directory and matches the file name.  Determining whether a given file exists is fast, a single plugin primitive call.So we want the cache structure to allow lookup to be determined on the basis of a known file / directory existing or not.  The chosen structure is:	fileRoot / <path to image> / <image file name> / <cache entry name>.jpgThe directory containing the cache entries can then easily be tested for existence.To maximise the cache speed, no attempt is made to the cache thread safe.  The side affect is that the cache sizes are approximate and that the cache may actually grow larger than the specified constraints in a busy system."
"BlFileImageLoadValuable","BlFileImageLoadValuable is responsible for loading a single image from disk by passing the request on to ${method:name=BlLocalImageCache class>>#current}$.  "
"BlDiskUsageVisitor","BlDiskUsageVisitor simply walks over the cache files and totals up their size.Public API and Key Messages- on: aFileReference- total- entryCount!!Internal Representation and Key Implementation Points.!!!Instance Variables	entryCount:		<Integer> The number of files visited	total:		<Integer> The total size of the cache in bytes!!Implementation Points"
"BlImageCache","BlImageCache is an abstract super-class of the various image caches.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BlAsyncImageLoadValuable",""
"BlCachePruningVisitor","BlCachePruningVisitor is responsible for deleting enough files in the cache to get the size back down to the targetSize.The basic approach is to keep a sorted collection by date of the files to be deleted, i.e. enough of the oldest files to reduce the cache by reductionSize.Public API and Key Messages- on: aBlImageCacheHousekeeper- delete: actually remove the files chosen during the scan !!Internal Representation and Key Implementation Points.!!!Instance Variables	count:							<Integer> The number of files visited - statistic only	housekeeper:		<BlImageCacheHousekeeper>	newestOldestTime:		<DateAndTime> The timestamp of the newest file in the oldest collection.  Files that are older than this will be added to the oldest collection.	oldest:		<SortedCollection> The list of files to be deleted.	oldestSize:		<Integer> The sum of the size of files in oldest	reductionSize:		<Integer> The number of bytes to reduce the cache size by.	targetSize:		<Integer>  The target size of the cache in bytes.!!!Implementation Points"
"GToolkitImagesExamples",""
"BlUrlImageElement","BlUrlImageElement provides a simple Bloc element for displaying images retrieved over the internet.BlUrlImageElement takes care of retrieving and caching the image in a background process so that UI responsiveness is not affected.The number of images retrieved concurrently is defined in ${method:name=BlUrlImageElement>>#maxPoolSize}$.!!Public API and Key MessagesInstances are created by simply passing the url as either a ${class:name=String}$ or ${class:name=ZnUrl}$, e.g.:[[[BlUrlImageElement url: 'https://pharo.org/web/files/pharo.png']]] !!Internal Representation and Key Implementation Points!!!Instance Variables	url:		<ZnUrl> The URL of the image being displayed"
"BlImageCacheTestEntry","BlLocalImageCacheTestEntry acts as a proxy for ${class:name=BlAsyncImageElement}$ during testing."
"BlFileImageElement","BlFileImageElement provides a simple Bloc element for displaying images retrieved from disk.BlFileImageElement takes care of retrieving and caching the image in a background process so that UI responsiveness is not affected.The number of images retrieved concurrently is defined in ${method:name=BlAsyncElement>>#maxPoolSize}$.!!Public API and Key MessagesInstances are created by simply passing the url as either a ${class:name=String}$ or ${class:name=ZnUrl}$, e.g.:[[[BlFileImageElement file: (FileLocator imageDirectory / 'pharo-local/iceberg/feenkcom/pillar/archetypes/academic/support/html/img/bubbles.jpg' )]]] !!Internal Representation and Key Implementation Points!!!Instance Variables	file:		<FileReference> The reference to the image being displayed"
"BlInfiniteDataSourceItemRangeChanged","Sent when the ===itemCount=== items starting at ===position=== have changed.This is an item change event, not a structural change event. It indicates that any reflection of the data in the given position range is out of date and should be updated. The items in the given range retain the same identity.Sent by:	- BlInfiniteDataSource	Example:infiniteElement dataSource	addEventHandlerOn: BlInfiniteDataSourceItemRangeChanged	do: [ :event | self inform: event itemCount asString, ' items were changed starting from: ', event position asString ]"
"BlInfiniteRecyclerPool",""
"BlInfiniteRecyclerFetcher",""
"BlInfiniteHorizontalOrientation",""
"BlInfiniteLayoutStepFlags",""
"BlInfiniteElementInfoStoreDefaultProcessor","I process  appearing/disappearing element records"
"BlInfiniteBucket","I am an implementation of a Bitset that provides methods to offset indices"
"BlInfiniteSmoothScrollerAction","I hold information about a smooth scroll request by a SmoothScroller."
"BlInfiniteDataSourceCommandTypeUpdate","I represent a concrete ""update"" command type"
"BlInfiniteDataSource","I provide a binding from an app-specific data set to elements that are displayed within an InfiniteElement"
"BlInfiniteElementAttachedEvent","Sent when an element is attached to InfiniteElement.Sent by:  - BlInfiniteElementExample:infiniteElement	addEventHandlerOn: BlInfiniteElementAttachedEvent	do: [ :event | self inform: 'Atatched:  ', event element asString ]"
"BlInfiniteDataSourceEvent",""
"BlInfiniteRecyclerStableScrapFetcher",""
"BlInfiniteRecycler","I am an element recycler.I keep track of items outside of current viewport. I use object pool in order to reuse already created objects.I am used by infinite element.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	attachedScrap:		<Object>	cachedScrap:		<Object>	changedScrap:		<Object>	context:		<Object>	customCache:		<Object>	fetcher:		<Object>	recyclerPool:		<Object>    Implementation Points"
"BlInfiniteNamedItemType","I am an item type represented by its name"
"BlInfiniteInfoStoreRecordFlags",""
"BlInfiniteElementInfoStore","I abstract all tracking for Elements to run animations"
"BlInfiniteLayout","I am layout supposed to be used by infinite element to position children within visible bounds.Concrete layouting algorithms used to support infinite amount of children differs from non-infinite case, meaning that normal layouts can not be used by infinite element.! AnimationsThe ==BlInfiniteLayout== is in charge of the behavior of item animations. By default, ==BlInfiniteElement== has a non-null ==#itemAnimator==, and simple item animations are enabled. This means that add/remove operations on the datasource will result in animations to add new or appearing items, removed or disappearing items, and moved items.If a ==BlInfiniteLayout== returns false from ==#supportsPredictiveItemAnimations==, which is the default, and runs a normal layout operation during ==#layoutChildrenIn: state:==, the ==BlInfiniteElement== will have enough information to run those animations in a simple way. For example, the default ==BlInfiniteItemAnimator==, will simply fade elements in and out, whether they are actually added/removed or whether they are moved on or off the screen due to other add/remove operations.A ==BlInfiniteLayout== wanting a better item animation experience, where items can be animated onto and off of the screen according to where the items exist when they are not on screen, then the ==BlInfiniteLayout== should return true from ==#supportsPredictiveItemAnimations== and add additional logic to ==#layoutChildrenIn: state:==. Supporting predictive animations means that ==#layoutChildrenIn: state:== will be called twice; once as a *pre* layout step to determine where items would have been prior to a real layout, and again to do the 'real' layout. In the pre-layout phase, items will remember their pre-layout positions to allow them to be laid out appropriately. Also, removed (==BlInfiniteLayoutConstraints>>#isItemRemoved==) items will be returned from the scrap to help determine correct placement of other items. These removed items should not be added to the child list, but should be used to help calculate correct positioning of other elements, including elements that were not previously onscreen (referred to as APPEARING elements), but whose pre-layout offscreen position can be determined given the extra information about the pre-layout removed elements.The second layout pass is the real layout in which only non-removed elements will be used. The only additional requirement during this pass is, if ==#supportsPredictiveItemAnimations== returns true, to note which elements exist in the child list prior to layout and which are not there after layout (referred to as DISAPPEARING elements), and to position/layout those children appropriately, without regard to the actual bounds of the ==BlInfiniteElement==. This allows the animation system to know the location to which to animate these disappearing elements.The default ==BlInfiniteLayout== implementations for ==BlInfiniteElement== handle all of these requirements for animations already. Clients of ==BlInfiniteElement== can either use one of these layouts directly or look at their implementations of ==#layoutChildrenIn: state:== to see how they account for the APPEARING and DISAPPEARING e;ements."
"BlInfiniteAbstractDataSourceController","I define an interface between data source manager and infinite element.Data source manager communicates with infinite element  only using my interface"
"BlInfiniteSmoothScroller","I am a base class for smooth scrolling. I handle basic tracking of the target element position and provide methods to trigger a programmatic scroll."
"BlInfiniteDataSourceCommandTypeNull","I am a null command and do nothing"
"BlInfiniteScrollChangedEvent",""
"BlInfiniteDataSourceItemRangeMoved","Sent when an item reflected at ===from=== position has been moved to ===to=== position.This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.Sent by:	- BlInfiniteDataSource	Example:infiniteElement dataSource	addEventHandlerOn: BlInfiniteDataSourceItemRangeMoved	do: [ :event | self inform: 'Item was moved from: ', event from asString, ' to: ', event to asString ]"
"BlInfiniteMouseScrollListener",""
"BlInfiniteRecyclerPoolFetcher",""
"BlInfiniteSimplePool","I am a non-synchronized concrete pool implementation"
"BlInfiniteItemType","Used to allow creation of items of different types in infinite element"
"BlInfiniteDataSourceCommandTypeFlags",""
"BlInfiniteDataSourceCommandsReorderer","I do a hard work sorting pending data source update commands based on their ""priority"" and type.I am used by BlInfiniteDataSourceManagerPublic API and Key Messages- reorderCommands: in-place reorders provided list of commands. The only available public API! Internal Representation and Key Implementation Points.    Instance Variables	dataSourceManager:		<BlInfiniteDataSourceManager>    Implementation Points"
"BlInfiniteChildrenUpdateRunnable","I am only ever posted if:   - We've been through first layout   - We know we have a fixed size (InfiniteElement hasFixedSize = true)   - We're attached"
"BlInfiniteAbstractChildrenController","I define an interface between child manager and infinite element.Child manager communicates with infinite element  only using my interface"
"BlInfiniteItemAnimator","I am an infinite item animator.I am responsible for keeping track of item's animation. In case of infinite elements we need to end animation as soon as item goes away and in some cases depending on configuration start on-appear animation when item comes in.Public API and Key Messages- endAnimation: ends animation of provided item.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BlInfiniteDataSourceCommandTypeAdd","I represent a concrete ""add"" command type"
"BlInfiniteItemAnimationFinished",""
"BlInfiniteDataSourceItemRangeEvent",""
"BlInfiniteDataSourceObserver","I am an observer for watching changes to an DataSource"
"BlInfiniteRecyclerChangedScrapFetcher",""
"BlInfiniteVerticalOrientation",""
"BlInfiniteItemDecoration","I allow users to add a special drawing and layout offset to specific item elements from the data set. This can be useful for drawing dividers between items, highlights, visual grouping boundaries and more."
"BlInfiniteElementInfoStoreRecord",""
"BlInfiniteChildrenManager","I help to manage children (add / remove) and used as mediator between infinite element and data source."
"BlInfiniteState","I represent a current state of infinite element and hold information like target scroll.I also can store arbitrary data as key <-> value pairs"
"BlInfiniteElement","I'm an element which is supposed to contain huge amount of children and layout only those of them that are visible inside my viewport.I work with DataSources to fetch data from and can present data within different Infinite Layouts.I fire the following events:   - BlInfiniteChildDetachedEvent when a child element is detachedMy main collaborators are: - BlInfiniteHolder - BlInfiniteLayout - BlInfiniteRecycler - BlInfiniteState"
"BlInfiniteBasicDataSource","I am an empty data source used by default by infinite element"
"BlInfiniteElementDetachedEvent","Sent when an element is detached from InfiniteElement.Sent by:  - BlInfiniteElementExample:infiniteElement	addEventHandlerOn: BlInfiniteElementDetachedEvent	do: [ :event | self inform: 'Detached: ', event element asString ]"
"BlInfiniteDataSourceChanged","Sent when the data set has changed.There are two different classes of data change events, item changes and structural changes. Item changes are when a single item has its data updated but no positional changes have occurred. Structural changes are when items are inserted, removed or moved within the data set.This event does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid.InfiniteLayout will be forced to fully rebind and relayout all visible elements.Sent by:	- BlInfiniteDataSource	Example:infiniteElement dataSource	addEventHandlerOn: BlInfiniteDataSourceChanged	do: [ self inform: 'Data source changed!' ]"
"BlInfiniteRecyclerUserCacheFetcher",""
"BlInfiniteRecyclerController","I am responsible for communication between recycler and other parts of the system, for instance layout, state or infinite element"
"BlInfiniteLayoutOrientation","I abstract measurements depending on the Element's orientation.I make it easier to support horizontal and vertical orientations in ===BlInfiniteLayout==="
"BlInfiniteItemAnimatorFlags",""
"BlInfiniteElementInfoStoreProcessor","I define an api of info store records processor"
"BlInfiniteBasicLayout","I am a basic dummy infinite layout that does not lay elements out"
"BlInfiniteDefaultDataSourceController","I am a default implementation of communication interface between data source manager and infinite element.It is enough to use me in most cases."
"BlInfiniteLinearSmoothScroller","I am a SmoothScroller implementation which uses a LinearInterpolator until the target position becomes a child of the InfiniteElement and then uses a DecelerateInterpolator to slowly approach to target position."
"BlInfiniteDataSourceCommandTypeRemove","I represent a concrete ""remove"" command type"
"BlInfiniteConstants","I store constants used along infinite classes"
"BlInfiniteDataSourceItemRangeRemoved","Sent when the ===itemCount=== items previously located at ===position=== have been removed from the data set.The items previously located at and after ===position + itemCount + 1=== may now be found ===oldPosition - itemCount===.This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.Sent by:	- BlInfiniteDataSource	Example:infiniteElement dataSource	addEventHandlerOn: BlInfiniteDataSourceItemRangeRemoved	do: [ :event | self inform: event itemCount asString, ' items were removed starting from: ', event position asString ]"
"BlInfiniteLayoutConstraints","I am specific element constraints that should be used by infinite element and infinite layout.Infinite layouts use me to store addition data assigned to children"
"BlInfiniteRecyclerPositionScrapFetcher",""
"BlInfiniteSynchronizedPool","I am synchronized pool"
"BlInfiniteInvalidItemType","I am a default item type"
"BlInfiniteElementHolderFlags",""
"BlInfiniteDataSourceManager","I manage data source update commands.I control their order and optimize commands queue.For example if there are two sequential commands: add and remove at the same position, I annihilate them and do nothing.My onItemRange* methods are triggered directly or indirectly by data source when it is changed.Public API and Key Messages- onItemRangeChanged: itemCount: payload: - is sent by data source when content or value of items was changed- message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	commandsPool:		<Object>	commandsReorderer:		<Object>	controller:		<Object>	pendingCommands:		<Object>	postponedCommands:		<Object>	shouldRecycle:		<Object>    Implementation Points"
"BlInfiniteItemAnimatorRunner",""
"BlInfiniteDefaultChildrenController","I am a default implementation of communication interface between child manager and infinite element.It is enough to use me in most cases."
"BlInfiniteScrollFlinger",""
"BlInfiniteDataSourceCommandTypeMove","I represent a concrete ""move"" command type"
"BlInfiniteItemAnimationsFinished","I am sent when all pending or running animations in an ItemAnimator are finished.I can be used, for example, to delay an action in a data set until currently-running animations are complete."
"BlInfiniteDataSourceItemRangeInserted","Sent when currently reflected ===itemCount=== items starting at ===position=== have been newly inserted.The items previously located at ===position=== and beyond can now be found starting at position ===position + itemCount===.This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.Sent by:	- BlInfiniteDataSource	Example:infiniteElement dataSource	addEventHandlerOn: BlInfiniteDataSourceItemRangeInserted	do: [ :event | self inform: event itemCount asString, ' items were inserted at: ', event position asString ]"
"BlInfiniteElementDataSourceObserver","I am a data source observer registered by infinite element to support internal synchronisation of data and its representation."
"BlInfiniteRecyclerDataSourceFetcher",""
"BlInfinitePool","I represent a pool of objects"
"BlInfiniteItemInfoHolder",""
"BlInfiniteFlags",""
"BlInfiniteDataSourceCommand","I represent a data source update command.There are 4 times of commands: add, move, remove and update.Add command describes insertion of one or multiple items in data source.Move command describes a position change of existing item in data source.Remove command describes deletion of one or multiple items from data source.Update command describes content or value change of one or multiple items in data source."
"BlInfiniteBucketTests","This class contains tests"
"BlInfiniteAbstractCache",""
"BlInfiniteHolder","I represent a child holder  within infinite element and store data related to child - current position within data source, old position and maybe additional data needed by infinite layout"
"BlInfiniteDataSourceCommandType","I am a type of data source update command.I suppose to be stateless and therefore immutable.For performance and memory reasons I provide a unique instance of me to be shared among my users"
"BlInfiniteElementRecycledEvent","Sent when the element in the ElementHolder is recycled.Recycler sends me right before clearing ElementHolder's internal data and sending it to RecyclerPool. This way, if ElementHolder was holding valid information before being recycled, you can use ===#dataSourcePosition=== to get its datasource position.Sent by:  - BlInfiniteRecyclerExample:infiniteElement recycler	addEventHandlerOn: BlInfiniteElementRecycledEvent	do: [ :event | self inform: ('Recycled: ', event holder dataSourcePosition asString)]"
"BlInfiniteLinearLayoutAnnouncements","My subclasses are sent by infinite linear layout when internal state changes.I am useful for debug purposes"
"BlInfiniteLinearLayoutDirection",""
"BlInfiniteLinearLayoutItemDirectionHead",""
"BlInfiniteLinearLayoutState",""
"BlInfiniteLinearLayoutAvailableSpaceChanged","Is sent when available space changes in linear layout state"
"BlInfiniteLinearLayoutDirectionEnd",""
"BlInfiniteLinearLayoutItemDirectionTail",""
"BlInfiniteLinearLayoutChunkAdded","Is sent when linear layouts adds a new chunk element during the layout process"
"BlInfiniteLinearLayoutDirectionStart",""
"BlInfiniteLinearLayout",""
"BlInfiniteLinearLayoutChunkResult",""
"BlInfiniteLinearLayoutItemDirection",""
"BlInfiniteLinearLayoutAnchorInfo",""
"BlLinearLayoutConstraints",""
"BlGridUndefinedAlignment",""
"BlFlowLayoutInlineChild",""
"BlGridFlexibility",""
"BlGridLayoutConstants",""
"BlGridLayoutConstraintsAxis",""
"BlFlowLayoutHorizontal",""
"BlLinearLayoutMeasurer",""
"BlGridLayoutBaselineBounds",""
"BlLinearLayout",""
"BlGridLayoutHelp","A helper class containing the help for Grid layout."
"BlFitLayout","I am a special layout that uses measured positions of children to determine parent's extent.I should be considered to be a root of graph or visualisation layouts. For that purpose override measurePositions: with:"
"BlFlowLayoutDisplay",""
"BlFlowLayoutConstraints",""
"BlLinearLayoutConstraintsVertical",""
"BlGridAlignmentMode",""
"BlLinearLayoutOrientation",""
"BlGridFillAlignment",""
"BlFlowLayoutLineSpace",""
"BlGridHorizontalOrientation",""
"BlGridLayout","I layout elements in a rectangular grid.All children of an element with GridLayout must use GridConstraints that allows users to configure how children are located within grid independently. A grid consists of cells that are separated by invisible lines. Each line is assigned to an index, meaning that a grid with N columns would have N+1 line. Indices lie in closed interval [ 1, N + 1 ]. Grid Layout supports fitContent, matchParent and exact resizing mode of the owner. Children are allowed to have fitContent and exact resizing modes. Because child's matchParent does not make sense in case of grid users should use #fill to declare that child should take all available cell's space.By default grid layout does not specify how many columns and rows exist, instead it tries to compute necessary amount of columns or rows depending on amount of children. User can specify amount of columns or rows by sending columnCount: or rowCount: to an instance of grid layout.Grid Layout supports spacing between cells which can be set sending cellSpacing: message.Public API and Key Messages- columnCount: aNumber to specify amount of columns- rowCount: aNumber to specify amount of rows- cellSpacing: aNumber to specify spacing between cells- alignMargins  bounds of each element are extended outwards, according to their margins, before the edges of the resulting rectangle are aligned.- alignBounds  alignment is made between the edges of each component's raw bounds   BlGridLayout new	columnCount: 2;	rowCount: 3;	cellSpacing: 10;	alignMargins Internal Representation and Key Implementation Points.    Instance Variables	alignmentMode:		<BlGridAlignmentMode>	cellSpacing:		<Number>	horizontalAxis:		<BlGridLayoutAxis>	lastLayoutParamsHashCode:		<Number>	orientation:		<BlGridOrientation>	verticalAxis:		<BlGridLayoutAxis>    Implementation Points"
"BlFlowLayoutDirection",""
"BlGridCanStretch",""
"BlGridAlignment",""
"BlGridLayoutConstraintsHorizontal",""
"BlFlowLayoutConstraintsVertical",""
"BlLinearLayoutHorizontalMeasurer",""
"BlGridLayoutImpl",""
"BlFlowLayoutVertical",""
"BlSquaredLayout",""
"BlGridLayoutInterval","An Interval represents a contiguous range of values that lie between the interval's #min and #max values *excluding #max*.I am different from ${class:Interval}$ in a sense that I don't include #max and my size is computed as (max - min)Intervals are immutable so may be passed as values and used as keys in hash tables.It is not necessary to have multiple instances of Intervals which have the same #min and #max values.Intervals are often written as [min, max) and represent the set of values min <= x < max.I am used by ${class:BlGridLayoutArc}$"
"BlGridLeadingAlignment",""
"BlFlowLayoutFloat",""
"BlFrameLayoutConstraints",""
"BlFlowLayoutChild",""
"BlGridAlignBoundsMode",""
"BlLinearLayoutHorizontalOrientation",""
"BlFlowLayoutMeasurer",""
"BlGridVerticalOrientation",""
"BlGridLayoutAxis","I represent a horizontal or vertical axis of grid layout.I compute and cache locations of cells within grid along corresponding axis.I use Bellman-Ford algorithm to solve a set of inequalities in order to distribute indices such that cells of different sizes could fit on the grid within its bounds. I'm also responsible for calculation of grid's size based on children and grid resizing mode.This internal class houses the algorithm for computing the locations of grid lines; along either the horizontal or vertical axis.A GridLayout uses two instances of this class - distinguished by the ""horizontal"" flag which is true for the horizontal axis and false for the vertical one.Public API and Key Messages- applyLayoutIn: entrance point used to launch layout computation process within provided size along axis- locations returns (creates,  computes and caches) cell locations and sizes along axis and used by GridLayout during measure: and layout:  - measure: determines grid's size based on cells and grid's resizing mode along axis   BlGridLayoutAxis new horizontal: true Internal Representation and Key Implementation Points.	Most instance variables are used to cache and store computation results between layout processes. Used to increase performance    Instance Variables	arcs:		<Object>	arcsValid:		<Object>	backwardLinks:		<Object>	backwardLinksValid:		<Object>	definedCount:		<Object>	deltas:		<Object>	element:		<Object>	forwardLinks:		<Object>	forwardLinksValid:		<Object>	groupBounds:		<Object>	groupBoundsValid:		<Object>	hasWeights:		<Object>	hasWeightsValid:		<Object>	isHorizontal:		<Object>	leadingMargins:		<Object>	leadingMarginsValid:		<Object>	locations:		<Object>	locationsValid:		<Object>	maxIndex:		<Object>	orderPreserved:		<Object>	parentMax:		<Object>	parentMin:		<Object>	trailingMargins:		<Object>	trailingMarginsValid:		<Object>"
"BlFlowLayoutLeftToRight",""
"BlGridInflexible",""
"BlGridBaselineAlignment",""
"BlGridLayoutConstraintsVertical",""
"BlFrameLayoutConstraintsHorizontal",""
"BlLinearLayoutVerticalMeasurer",""
"BlGridLayoutSpec","I define characteristics of a group of cells on the grid (indices, weight and alignment) along corresponding axis.I am supposed to be immutable. In order to create a new spec with different parameters use provided copyWith*: methodsPublic API and Key Messages- span, declares indices on the grid. span first is an index of a row or column that cell wants to occupy.- weight, proportional weight allowing to distribute cells proportionally. In order to work all cells in a group must have weight > 0.- alignment, specifies how cells should be aligned within row or column groups.- flexibility, dynamically determined based on current alignment and weight- startDefined, true if span first is undefined. Means that it is up to grid to determine indices	BlGridLayoutSpec new		setAlignment: BlGridAlignment fill		span:  (1 to: 2)		startDefined:  true		weight: 1 Internal Representation and Key Implementation Points.Instance Variables	alignment:		<BlGridAlignment>	span:		<BlGridLayoutInterval>	startDefined:		<Boolean>	weight:		<Number>"
"BlFlowLayoutPriorityQueue",""
"BlFlowLayoutInline",""
"BlFlowLayout",""
"BlGridMeasurer",""
"BlGridLayoutConstraints",""
"BlFlowLayoutConstraintsHorizontal",""
"BlFlowLayoutFloatingChild",""
"BlGridAlignMarginsMode",""
"BlLinearLayoutVerticalOrientation",""
"BlGridTrailingAlignment",""
"BlFrameLayoutConstraintsVertical",""
"BlFlowLayoutOrientation",""
"BlGridPackedMap",""
"BlGridLayoutBounds","For each group (with a given alignment) we need to store the amount of space required before the alignment point and the amount of space required after it. One side of this calculation is always 0 for START and END alignments but we don't make use of this. For CENTER and BASELINE alignments both sides are needed and in the BASELINE case no simple optimisations are possible.The general algorithm therefore is to create a Map (actually a PackedMap) from group to Bounds and to loop through all Views in the group taking the maximum of the values for each View."
"BlFlowLayoutRightToLeft",""
"BlGridLayoutArc","I represent an association of span interval, associated value and validity flag.I am used by grid layout instead of Dictionary of span <-> value key-value pair for performance reasons. Internal Representation and Key Implementation Points.Instance Variables	span:		<BlGridLayoutInterval>	valid:		<Boolean>	value:		<BlGridMutableInteger>"
"BlGridCenterAlignment",""
"BlLinearLayoutConstraintsHorizontal",""
"BlFlowLayoutPriorityQueueNode",""
"BlLinearLayoutNode",""
"BlGridMutableInteger","A mutable Integer - used to avoid heap allocation during the layout operation"
"BlFlowLayoutLine",""
"BlFrameLayout","!Frame layoutI am a layout designed to block out an area on the screen to display a single child. I should be mainly used to display a single child, as it can be difficult to display multiple children at different positions on the screen without overlapping each other. However, elements with a frame layout can have multiple child elements. The =='weight'== and =='alignment'== atributes can be used to control the position of children. However, weight only works when the child matches the parent; if it fits content or has an exact size, the weight attribute is ignored. I rely on custom layout constraints for setting  attributes (see ${class:BlFrameLayoutConstraints}$, ${class:BlFrameLayoutConstraintsHorizontal}$ and ${class:BlFrameLayoutConstraintsVertical}$).I position each child element based on the top left of the screen. Child elements are stacked on top of each other, with the most recently added child on top. An important property is that the location of a child is independent from the location of other children. I am similar to the frame layout from Android. The main differences are that I:- provide support for controlling the size of a child element using the =='weight'==  attribute;- the =='gravity'==  attribute is not present; instead the =='alignment'==  attribute should be used.!!AlignmentThe alignment attribute controls the position of children with a FrameLayout. Children can be aligned both vertically and horizontally as follows:- horizontally children can be aligned to left, center and right;- vertically children can be aligned to top, center and bottom.For example, below we aligh a child with a fixed size horizontally to the right and vertically to the bottom. To set the alignment we need to use a constraint specific to the frame layout, as not all layouts know about alignment. For that we first need to obtain the constraints specific to the frame layout by sending the message ${method:BlLayoutCommonConstraints>>#frame}$ to the current constraint object. This returns an instance of ${class:BlFrameLayoutConstraints}$ that we can use to set the desired alignment. Other constraints like the size of an element are common to all layouts and can be set directly without requesting a specific constraint object.${example:BlFrameLayoutSingleChildExamples>>#elementDocumentationWithOneExactChildAlignBottomRightInExactParent|previewExpanded|previewHeight=400}$When using multiple children if we do not specify any alignment they will be placed in the top-left corner in the order in which they were added to the parent.${example:BlFrameLayoutMulipleChildrenExamples>>#elementWithTwoExactChildrenAndNoAlignment|previewExpanded|previewHeight=400}$With an alignment we can better arrange these children. For example we can place one to the right and center it. This will result in no overlapping.${example:BlFrameLayoutMulipleChildrenExamples>>#elementWithExactChildAlignTopLeftAndExactChildRightCenter|previewExpanded|previewHeight=400}$We can also use a different alignment that goes not completely remove overapping. ${example:BlFrameLayoutMulipleChildrenExamples>>#elementWithExactChildAlignLeftCenterAndExactChildCenter|previewExpanded|previewHeight=400}$We can use alignment to place children in more advanced ways. An example is given by ${class:BlFrameLayoutCompositionExamples}$.${example:BlFrameLayoutCompositionExamples>>#example|previewExpanded|previewHeight=400}$To end this section below are all the nine ways in wich we can place a child using alignment.${example:BlFrameLayoutMulipleChildrenExamples>>#elementWithNineExactChildrenWithAllAlignments|previewExpanded|previewHeight=400}$!!WeightAbove we saw that one way to set the size of a child element is by using an exact size. A second option is for a children to match the size of the parent. In this case, children that match parent can also be configured to occupy only a fraction of parent's size using the =='weigh'== attribute.A child can match parent both horizontally and vertically. If no padding or margin is used, the child will overlap the parent completely.${example:BlFrameLayoutSingleChildExamples>>#elementWithOneChildMatchExactParent|previewExpanded|previewHeight=400}$We can add padding, for example, to also see that indeed the parent is also rendered.${example:BlFrameLayoutSingleChildExamples>>#elementWithOneChildMatchExactParentWithPadding|previewExpanded|previewHeight=400}$By indicating a weight value when the child matches parent we can control the actual space occupied by that child. For example, in the code below the child takes 90% of the space horizontally and 50% vertically, starting from the top left corner. ${example:BlFrameLayoutSingleChildExamples>>#elementForDocumentationWithOneChildMatchExactParentWithWeight|previewExpanded|previewHeight=400}$We can also have multiple children that match parent and take different proportions of the available space, as in the following example.${example:BlFrameLayoutMulipleChildrenExamples>>#elementWithTwoChildrenMatchingParentWithWeight|previewExpanded|previewHeight=400}$Setting this attribute only works in case the element matches parent. In case the element has a fixed size and we specify a weight, the weight is going to be ignored.${example:BlFrameLayoutSingleChildExamples>>#elementWithOneChildWithExactSizeParentWithWeight|previewExpanded|previewHeight=400}$Also if a child element has a fixed side and both weight and alignment, the weight is going to be ignored.${example:BlFrameLayoutSingleChildExamples>>#elementWithOneExactChildAlignBottomCenterAndWithWeightInExactParent|previewExpanded|previewHeight=400}$!!Fit content in parent The previous examples assumened that the parent had a fixed size. That, or having the parent use a match parent strategy are the common ways to use a frame layout. It is however also possible to have the parent fit content, if the child has a fixed size. In that case the parent will have the size of the child, if no padding or margin is used.${example:BlFrameLayoutSingleChildExamples>>#elementWithOneExactChildAndFitContentParent|previewExpanded|previewHeight=400}$ This also works in case multiple children are present having different sizes.${example:BlFrameLayoutMulipleChildrenExamples>>#elementWithTwoExactChildrenAndFitContentParent|previewExpanded|previewHeight=400}$However, this will not work in case the parent uses fit content and the child uses match parent, as there is no way to determine the size. In such cases the size of both the parent and the child will be ==0@0==.${example:BlFrameLayoutSingleChildExamples>>#elementWithOneMatchParentChildAndFitContentParent|previewExpanded|previewHeight=400}$!!More examplesFor more example on how to use the frame layout you can view the classes providig examples for this layout:- ${class:BlFrameLayoutSingleChildExamples}$- ${class:BlFrameLayoutMulipleChildrenExamples}$- ${class:BlFrameLayoutCompositionExamples}$"
"BlGridOrientation",""
"BlFrameLayoutConstraintsTests","This class contains tests"
"BlGridLayoutConstraintsTests","This class contains tests"
"TBlLayoutExamplesSetup",""
"BlLinearLayoutConstraintsTests","This class contains tests"
"BlSpartaSpaceRenderer",""
"BlTextParagraphSpanSpartaMeasurer","I measure a text span in a context of sparta canvas"
"BlSpartaMozSkiaCanvasBuilder","I am a copy of class BlSpartaMozCanvasBuilder. This comment is copied from there, and might not be entirely accurateI build sparta canvas using Moz2D backend"
"BlSpartaBufferSpaceRenderer",""
"BlSpartaCanvasBuilder","I construct a sparta canvas"
"BlSpartaSkiaCanvasBuilder","I am a copy of class BlSpartaMozCanvasBuilder. This comment is copied from there, and might not be entirely accurateI build sparta canvas using Moz2D backend"
"BlSpartaFormSpaceRenderer",""
"BlSpartaCairoCanvasBuilder","I build sparta canvas using Cairo backend"
"BlSpartaElement","I am a special element whose rendering can be customized.[[[element := BlSpartaElement new.element rendering: [ :aCanvas :anElement |	aCanvas fill		paint: Color red;		path: anElement bounds asRectangle;		draw ].element]]]"
"BlSpartaRenderer","I am a concrete implementation of a BlHostRenderer.I allow space to be rendered on sparta canvas without making any asumptions about concrete host space type"
"BlSpartaOpenGLSpaceRenderer",""
"BlSpartaMozCanvasBuilder","I build sparta canvas using Moz2D backend"
"BlSignalProgress",""
"BlTktCommonQueueWorkerPool",""
"BlTaskItGuidelines","! Bloc-TaskIt Process GuidelinesBuilding responsive applications require dealing with processes responsible for long-time computation and giving back to an user interface an answer, when it is ready. Applications can therefore end-up with many processes. In addition, those processes can spawn sub-processes. Check the following example (look at the scrollbar):+Process Browser with many processes>file://feenkcom/Bloc/doc/class-comment-support/process-inflation-issue.png+ To manage and deal with such information, we need to keep a control of it. For example, developers should understand the process hierarchy and which graphical widget (application) spawned what process.!! Considerations- Processes should be created in unified way, a common API.- We should have tools to deal with possible process issues, e.g., too many processes running in the background.- ${class:BlTaskItStatus}$ to be live (a few more views).- Submitted tasks could have a name (and maybe a source).- ${class:BlTaskItStatus}$ could then provide a view showing the currently executing tasks (by name (and source))- TaskIt also has a process viewer, but I've never been able to make sense of it.  (It's not loaded by default)- It would also be good to have an overview of all the tasks queued against ${class:BlElement}$ instances and ${class:BlSpace}$.   !! Common API  "
"BlTktDecoratedCommand",""
"BlTaskItSignal",""
"BlTaskItExplicitlyTerminatedCommandSignal",""
"BlTKTWorkerProcess",""
"BlTktCommand",""
"SharedPriorityUniqueQueueExamples",""
"BlTaskNotificationHandler",""
"BlTktSingleCommand",""
"BlTktCommandTask",""
"BlTktValuableCommand",""
"BlTaskItStartCommandSignal",""
"BlEnqueuedTaskItAction",""
"BlTaskAtPostponedTerminableTask",""
"BlTktSingleCommandExample",""
"BlUseAsyncFeatures","I define whether asynchronous features should be used and a code execution therefore should be triggered in different processes.All code that trigger async executions should use one of my class side methods:- ${method:BlUseAsyncFeatures class>>#ifEnabledDo:otherwise:}$- ${method:BlUseAsyncFeatures class>>#ifEnabledDo:}$- ${method:BlUseAsyncFeatures class>>#ifDisabledDo:}$In the cases where the async should be disabled, ${method:BlUseAsyncFeatures class>>#disableDuring:}$ should be used."
"BlTktExamplesCollector","I collect objects to an ${class:OrderedCollection}$, using ${class:Mutex}$ to ensure unique access and data consistency.I am useful for testing purpose, e.g., checking right values and execution order.Someone can add object to the collection using either a generic method ${method:BlTktExamplesCollector>>#add:}$ or ${method:BlTktExamplesCollector>>#increment}$ to add numbers."
"BlTktCommonPriorityQueueWorkerPool",""
"BlTaskItRenderingProblemSolutionExplanation","! The Infinite GT-Inspector Redering Problem We use ${class:GtInspector}$ extensions, defined by the ${class:BaselineOfGToolkitPhlow}$ framework. Those extensions are rendered on a background and actual views are displayed when the computation finishes.We ended-up having an issue, that (even simple) views got stuck regularly. The problem was documented in the *GitHub issue 347>https://github.com/feenkcom/gtoolkit/issues/347* with the following screenshot:+file://feenkcom/Bloc/doc/class-comment-support/feenk-issue-347.png+!! The Problem Cause${class:BlPulseStatSignal}$ and ${class:CurrentProcessSignal}$ showed that the Bloc pulse loop (${class:BlPulseLoop}$) was always taking longer than the pulse period (16ms) and thus was never allowing lower priority processes to run. Since ${class:GtInspector}$ uses ${class:GtPhlowTaskItView}$ to generate ${class:BlElement}$ the actual work is done in a low priority task (priority 35), preventing the Rendering from completing.The commit *feenkcom/Bloc@450dfe5>https://github.com/feenkcom/Bloc/commit/450dfe5b82731ea85fc8718b1d628ba83ee2d1de* modifies ${method:BlPulseLoop>>#wait}$ to check if there are low priority processes waiting for CPU time, and forces a minimum delay (currently 8ms) when there are.!!Other ConsiderationsIt is possible that the symptoms could be triggered by other causes:- a large number of tasks are submitted to the background queue for window(s) that are either closed or hidden. We conclude that: (i) tasks should lower their priority if the window or their element is not visible; or (ii) tasks should finish immediately if their associated window is closed- some other higher priority process is consuming all the available CPU time.- a task run within the ${class:BlPulseLoop}$ (at UI priority) that is long running that would be better run as a background UI task.There are a number of tools that have been developed along the way to help identify issues:- ${class:BlTaskItStatus}$ gives an overview the Bloc related TaskIt queues. While there is a ${class:GtInspector}$ view that displays the status, the system is normally not responding when this is required, so it is better to write the string to a file.- See also the class comments for: ${class:BlPulseStatSignal}$, ${class:CurrentProcessSignal}$ & ${class:BlSignalAnalysis}$"
"BlErrorCatchingCommand",""
"BlTaskItCommandSignal",""
"BlTaskItInjectedTerminationCommandSignal",""
"BlTaskProcess",""
"BlRollingLinearGradientPaintCommand",""
"AtomicSharedPriorityQueue","WaitfreePriorityQueue is a thread-safe implementation of a priority queue with wait-free operations.- Priority 0 is the highest priority.- The priorities are assumed to change dynamically, so it is not practical to store a sorted list.  If a 0 priority item is found it is returned immediately, otherwise the entire queue is scanned looking for the highest priority item.- If multiple items are found with the same priority, the first is returned.Currently no optimisations are done to handle large queues, so the performance will degrade linearly with queue size if there are few or no priority 0 items.Entries must respond to the #priority message with a zero or positive number.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BlTaskAtPostponedTerminableFuture",""
"BlTaskNotifications",""
"BlTktProcess",""
"BlTktCommandTaskState",""
"BlTktTerminableCommand",""
"BlTktResponsiveCommand",""
"BlTaskItTaskExecutionSignal",""
"BlNotificableTaskItAction",""
"BlTktCommandTaskExecution",""
"BlTktExamplesSignaler","I hold couple of ${class:Semaphore}$ that can by used to exemplify (test) particular behavior, involving various processes. "
"BlTktUsageExamples",""
"BlTktCommandTaskWorker",""
"BlTaskItStatus","BlTaskItStatus provides a very low level overview of TaskIt pools used by Bloc.Since this is typically required when the UI is failing to update the output is a simple string that can easily be printed or written to file.To view the current status:[[[BlTaskItStatus new]]]"
"BlTktLoggingCommand",""
"BlTaskItDoneCommandSignal",""
"BlExactProgress",""
"BlRollingLinearGradientBackgroundCommand",""
"BlTaskItScheduledCommandSignal",""
"BlTktExplicitlyTerminatedTaskException",""
"BlTaskProgress",""
"BlTktCancelableTaskExamples",""
"BlTktNullCommand",""
"BlTktExplicitlyTerminatedTaskState",""
"TBlTktCommandTaskScheduler",""
"BlTktUnresponsiveCommand",""
"SharedPriorityUniqueQueue","SharedPriorityUniqueQueue is a thread-safe that:- retrieves items in priority order (0 is the highest priority).- optionally filters items on addition by item identifier.The priorities are assumed to change dynamically, so it is not practical to store a sorted list.  If a 0 priority item is found it is returned immediately, otherwise the entire queue is scanned looking for the highest priority item.If multiple items are found with the same priority, the first is returned.Currently no optimisations are done to handle large queues, so the performance will degrade linearly with queue size if there are few or no priority 0 items.Entries must respond to the #taskPriority message with zero or positive number.!!Public API and Key MessagesSharedPriorityUniqueQueue has the same public interface as SharedQueue. !!Internal Representation and Key Implementation Points.!!!Implementation PointsSome care is taken to ensure that the queue is not corrupted by some other process attempting to terminate the owner of the monitor.  This is done by increasing the process priority by wrapping the operation in #valueWithoutUserInterruption while queue modifications are made."
"BlCancellableTaskItAction",""
"BlTaskItExceptionCommandSignal",""
"BlTktProtoCommand",""
"BlTktWorkerProvider","${class:BlTktWorkerProvider}$ provides a number of convenience methods for submitting tasks at different priorities.  The intention is that the supplied set of queues will be sufficient when submitting tasks in all cases but a few exceptions.The main UI processing process runs at priority 40 (${method:name=ProcessorScheduler>>#userSchedulingPriority}$ (39 during development).  The design goal is to be keep the UI responsive by reducing the work done by the UI process to responding to user input and any other processing that is restricted to the UI process for thread safety reasons.The supported worker pools and their expected uses are:;#highUICPUBoundPool:This is used for background rendering of views where the processing time is reasonably short and the process is CPU constrained.;#highUIExternalResourceBoundPool:This is used for background rendering of views where the process is expected to spend significant time waiting on external resources, e.g. retrieving a file over the network.;#lowUIUserExecutionPool:This is used for background processing where the execution time may be arbitrary, e.g. evaluation of user code in a playground.;#nonUISinglePool:This is used for background processing that won't be directly used by the user, e.g. cache management, and only a single instance should be run at a time.;#nonUIMultiPool:This is used for background processing that won't be directly used by the user and multiple instances may be run concurrently.For detailed pool configuration information, e.g. process priority, maximum pool size and queue priority, see the associated instance methods."
"BlTaskItTaskExamples",""
"BlTktPreservingResultCommand",""
"BlTktProcessProvider",""
"BlTktDemoResponsiveCommand","GtInspector openOn: BlTaskItDemoCommand new"
"BlTaskItSelfTerminatedCommandSignal",""
"BlElementTask",""
"BlSomeProgress",""
"BlAnyProgress",""
"BlTktExamples",""
"BlTktRequest",""
"BlTktFutureExecution",""
"BlSpaceTest","This class contains tests"
"BlTestFocusProcessor",""
"BlMockedKeyboardBuffer","I am a special mocked keyboard buffer with configurable key pressed state for testing purposes"
"BlElementTest","This class contains tests"
"BlShortcutTest","This class contains tests"
"BlTestMouseEventProcessor",""
"SharedPriorityQueueTestEntry","GtImageTestQueueEntry provides a dummy object that can be inserted in to GtImageLoadQueue for testing.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	priority:		<Object>    Implementation Points"
"BlElementPositionChangeTest","I contain examples of position change logging functionality"
"BlLayoutExactResizerTest","This class contains tests"
"BlTestToExample","I convert unit tests to GT-Examples"
"BlMockedKeyCombination","I am a special mocked key combination with predefined matching behaviour based on settable booleans"
"BlElementExtentChangeTest","This class contains tests"
"BlKeyboardProcessorTest","This class contains tests"
"BlTestAutoClosingSpace","I am a space that closes itself after a given amount of frames"
"BlTaskAtExamples",""
"BlDeferredActionTest","This class contains tests"
"BlKeyCombinationTest","I am an integration test of all key combinations"
"BlCornerRadiiTest","This class contains tests"
"BlInsetsTest","This class contains tests"
"BlCompulsoryCombinationTest","This class contains tests"
"BlGeometryTest","An AkGroupTest is a test class for testing the behavior of AkGroup"
"BlColorPaintTest","This class contains tests"
"BlFocusProcessingTest","This class contains tests"
"BlAssertionsTraitTest","This class contains tests"
"BlEventProcessingTest","This class contains tests"
"BlTransformationTest","This class contains tests"
"AtomicSharedPriorityQueueTest","This class contains tests"
"BlEventTestCase","This class contains tests"
"BlMultiLineTextParagraph",""
"BlTextStyledEvent",""
"BlTextBackgroundAttribute","I represent a text background attribute.I am used together with BrText and BrTextStyler to style text.Public API and Key Messages- paint: set background paintExample:	BrTextBackgroundAttribute paint: Color yellow Internal Representation and Key Implementation Points.    Instance Variables	paint:		<Object> can be a Color, Pattern, Gradient. Basically anything that is knows how to convert itself to canvas specific paint"
"BlTextLineEndingUnix",""
"BlTextParagraphSpan","I represent a single measured span within ===BrTextParagraph===.Depending on the type of a paragraph (single or multi line) I can be either a direct child of ===BrTextParagraph=== or be contained inside of ===BrTextParagraphLine===.A span consists of 3 essential parts:	- underlying text span with span start and end indices	- generated glyph text run with start and end indices used for measurement and rendering	- various measurement metrics computed during measurement step by ===BrTextParagraphSpanMeasurer==="
"TBlTextStyleable","I am a unified entrance point for text style attributes. My goal is to let users add text attributes without directly referencing attribute classes.As a trait I am used in different parts of the system, thus by adding extension methods to me developers can add support of their custom attributes everywhere."
"BlFontItalicAttribute",""
"BlTextAttributesStyler","I am a helper class to ease text styling with the help of attributes.Developers can add custom attributes by creating corresponding extension method on the instance side of ==TBlTextStylable== trait.[[[| text styler |text := 'Hi John' asRopedText.styler := BlTextAttributesStyler on: (text from: 3 to: 7).styler bold;	italic;	fontSize: 30;	fontName: 'Roboto';	monospace;	foreground: Color darkGray.styler style.text]]]==BlText==provides fluent API that makes use of me:[[[| text |text := 'Hi John' asRopedText.(text from: 3 to: 7)	stylerDo: [ :aStyler | aStyler bold italic foreground: Color red ].text]]]"
"BlTextParagraphAscentTightBaseline",""
"BlWrappedText","I am a special type of text that delegates most operations to the underlying text that is wrapped by me"
"BlTextMethodLink",""
"BlPositionFinder",""
"BlTextStringNormalizer","I process a given string and replace some characters with special items such as line endings.I return an array of items (characters or other objects)"
"BlTextAnnouncer",""
"BlFontGenericFamilyAttribute",""
"BlTextLogicalItem","One logical item can be seen as one *special* character in a sense that it occupies exactly one place inside of the text."
"BlTextParagraphRenderer","I define an API of a paragraph renderer.Users should sublcass me in order to implement backend specific renderers.Note: definition #render:on: accepts any kind of canvas, however every concrete renderer implementation expects a very specific canvas. Using backend specific renderers with wrong canvas resuls in undefined behaviour.Public API and Key Messages- render:on: renders a given text paragraph on a provided canvas"
"BlSpan","I represent a homogeneous styled piece of text where every character has the same set of attributes.I am data structure independent and rely only on BrText's public API"
"BlTextUnderlineAttribute","! UnderlineI represent a text underline attribute.I am used together with ${class:BlText}$ and ${class:TBlTextStyleable}$ to style text.https://en.wikipedia.org/wiki/UnderlineSee ${class:BlTextUnderlineAttributeExamples}$ for examples"
"BlSingleLineTextParagraph",""
"BlText","! Text modelI am a data structure independent text abstraction.I define a public API of the text model. User must only talk with me using provided methods. My subclasses provide implementation based on concrete data structures, for example rope or string.I only store string and corresponding attributes. I don't know anything about text layout or paragraphs. I should be used together with BrTextParagraph in order to be measured, layered out and rendered. Once a piece of string is converted ${BlText}$ users must not make any assumption on the internat structure of that string inside of the text. For example I replace all occurrences of ==CrLf== with a special marker that is exactly one item instead of two characters (==Cr== and ==Lf==)I provide a fluent text styling api:[[[| text |text := 'Hello world' asRopedText.(text from: 1 to: 5) foreground: Color blue.(text from: 7 to: 11) foreground: Color red.text	]]]!! Attributes- ${class:BlTextUnderlineAttribute}$"
"BlTextForegroundAttribute","I represent a text foreground attribute.I am used together with BrText and BtTextStyler to style text.Public API and Key Messages- paint: set foreground paintExample:	BrTextForegroundAttribute paint: Color blue Internal Representation and Key Implementation Points.    Instance Variables	paint:		<Object> can be a Color, Pattern, Gradient. Basically anything that is knows how to convert itself to canvas specific paint"
"BlTextLineEndingWindows",""
"BlTextParagraphFixedSpan",""
"BlTextAttributeAdded",""
"BlFontNormalAttribute",""
"BlTextIterator","I define a data structure independent text iterator api.Use me for text enumeration purposes"
"BlTextParagraphBoundsBaseline",""
"BlCharacterText","I am a special type of ${BlText}$ with a guarantee that every item is a character.${BlCharacterText} is designed to be polymorphic with ${WideString}$, e.g. I can be compared with it (""text = string"" and ""string = text"").Similar to the String I can not modified (insertion or deletions). Therefore "
"BlTextVariableLink",""
"BlTextTrimmer",""
"BlTextStyler","I am responsible for applying text attributes on ${class:BlText}$ based on some logic, for example it can be code syntax highlighting.I am independent from the text editor.The main entrance point is "
"BlTextError",""
"BlFontSizeAttribute","I represent a font size attribute.I am used together with BrText and BrTextStyler to style text.Public API and Key Messages- size: set font size in pointsExample:	BrFontSizeAttribute size: 20 Internal Representation and Key Implementation Points.    Instance Variables	size		<Number> "
"BlTextLineEnding","I represent a line ending for a specific platform"
"BlTextParagraphSegment","I an already measured abstract paragraph segment."
"BlTextAttribute",""
"BlTextAttributesBuilder","I represent a text properties - a collection of attributes. They can be added dynamically with the help of corresponding api methods.[[[BlTextAttributesBuilder new	bold;	italic;	fontSize: 30;	fontName: 'Roboto';	foreground: Color darkGray]]]"
"BlTextParagraphBaseline","I represent a text paragraph baseline.The baseline is the line upon which most letters ""sit"" and below which descenders extend.(https://en.wikipedia.org/wiki/Baseline_(typography))"
"BlEmptyText",""
"BlTextLinkAttribute",""
"BlTextTab",""
"BlTextParagraphSpanMeasurer","I define a backend independent API of a span measurer.My responsibility is to measure a given span according to provided properties"
"BlTextStringsInserted","I am sent by BlText when a collection of strings (or one string) is inserted at some indices"
"BlFontObliqueAttribute",""
"BlEmptyTextIterator",""
"BlTextParagraphMeasurer","I am text paragraph measurer. I keep track of available width, height, current measuring position.Additionally, depending on a paragraph type I may collect lines or spans. This behaviour should be inplemented in my paragraph sepecific subclass."
"BlGenerationText",""
"BlTextOrientationAttribute",""
"BlTextParagraph","I am an abstract text paragraph. My main role is to measure text according to given additional properties or constraints and prepare it for rendering.The most important properties are maximal width and height. Maximal width is used to wrap a line of text in multiple lines while maximal height prevents text from exceeding an element's boundaries.Once measurement is done users may ask for computed text extent by sending #extent message.The measured text layout can be rendered on Canvas by sending #renderOn: with canvas as argument to me.Public API and Key Messages- text: initialize me with a given text- measureOn: measure given rope using provided canvas- renderOn: render text layout on given canvas- extent - return measured text extent- width - return measured text width- height - return measured text height- selection - return text selection interval (used to render selction during renderOn:) Internal Representation and Key Implementation Points.    Instance Variables	text:		<BrText>	maxHeight:		<Number>	maxWidth:		<Number>	height:		<Number>	width:		<Number>	end:		<Number>	autoRelease:		<Boolean>	selection: 	<Interval>"
"BlTextNullStyler",""
"BlTextOutOfBoundsError",""
"BlFontWeightAttribute","I represent a font weight attribute.I am used together with BrText and BrTextStyler to style text.Public API and Key Messages- weight: set font weight in absolute units (100, 200, 400, 600, 800)Example:	BrFontWeightAttribute weight: 400.	BrFontWeightAttribute bold.	BrFontWeightAttribute normal.	BrFontWeightAttribute thin Internal Representation and Key Implementation Points.    Instance Variables	weight		<Number> "
"BlTextLineEndingMacClassic","On the Mac Classic (Mac systems using any system prior to Mac OS X), line-endings are terminated with a single carriage return (\r or CR).Mac OS X uses the UNIX convention."
"BlTextParagraphLine","I represent a paragraph line and consist of spans.Width of the line is not a plain sum of width of all spans. The difference comes from the fact that because of Kerning advance of a piece of text is less than visual width of the same text."
"BlFontEmphasisAttribute",""
"BlTextDelegatedAttributesBuilder","I am an extended version of the attributes builder with an ability to delegate the applying of attributes to the other stylable, which can be a ${class:BlText}$ or the other ${class:BlTextAttributesBuilder}$"
"BlTextParagraphAscentLooseBaseline","I am a baseline which is computed based on ascent property of the paragraph"
"BlSubText","I represent a part of original text from ===start=== to ===end===.All subtexts of a BrText share the same text instance.I modify the underlying text when I am modified.Essentially, I offer a scope that can be used  by upper layers, such as editors, to make it easier to manipulate a logical piece of text, such as a line, or a paragraph."
"BlTextClassLink",""
"BlTextOperator",""
"BlTextParagraphFixedSpanMeasurer","I am a span measurer that assignes a fixed extent to every text character ignoring text attributes.Useful for testing the paragraph behaviour"
"BlTextsDeleted","I am sent by BlText when some pieces of text defined by index intervals are deleted."
"BlFontFamilyAttribute",""
"BlSubTextIterator",""
"BlSingleLineTextParagraphMeasurer",""
"BlReadonlyText",""
"BlTextSpacingAttribute",""
"BlShrinkingTextElement","I am a label that when the space is less than my width, I cut the text and add ... as ending"
"BlTextElementTightMeasurementStrategy",""
"BlTextElementOffscreenCanvasMeasurer",""
"BlTextElementMeasurementStrategy",""
"BlTextElementMeasurer",""
"BlTextElementEditorMeasurementStrategy",""
"BlTextElementCanvasMeasurer",""
"BlTextElement","! Text element""""I am independent from Sparta """"I support multiple measurement strategies, see examples for more detailed explanation:${class:BlTextElementMeasurementStrategyExamples}$"
"BlTextElementLabelMeasurementStrategy",""
"BlTextElementFixedMeasurer",""
"BlRopedText","I am a concrete implementation of a text model backed up by a persistent rope data structure.See BrText for more information.See BrRope to learn more about rope"
"BlRopedRawText",""
"BlRopedTextIterator","I am a specific RopedText iterator"
"BlGlutinKeyboardKeyTable",""
"BlGlutinHostSpace",""
"BlGlutinBufferSurfaceRenderer",""
"BlGlutinWindowEventsSensor",""
"BlGlutinHost",""
"BlGlutinSurfaceRenderer",""
"BlGlutinOpenGLSurfaceRenderer",""
"BlMockedHostSpace","I am a mocked host space that behaves just like a real one but is invisible and does not render anything"
"ManifestBlocHostMock","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BlMockedHost","I am a mocked host that looks like real but does not create any windows"
"BlMorphicWorldDisplayScreen",""
"BlMorphicWindowEvent","I am a super class of all window related events fired by morphic host window"
"BlMorphicWorldEmbeddingElement",""
"BlMorphicWorldMorph",""
"BlMorphicWorldRenderer","I know how to render the world in a Bloc element"
"BlMorphicWorldEmbeddingEventHandler","I can be used to convert OSWindow-level events to Morphic events.So, that installing my instance as event handler for specific window would allow running Morphic World in it.Later, the Morphic can be integrated with OSWindow API to avoid unnecessary conversion and thus eliminating the need in having this class."
"BlNullWorldRenderer","I exist to prevent opening of Morphic World when running with a headless vm and --interactive flag"
"BlMorphicWindow","I am a special case of StandardWindow that is used as host window for bloc space.I provide helper methods to be used by event handler and moprhic host space"
"BlMorphicWindowHost","I am a concrete implementation of a BlHost that allows users to open host bloc spaces within Moprhic windows"
"BlMorphicKeyboardKeyTable",""
"BlMorphicHost","I am a host that allows users to embed Bloc spaces inside of arbitrary morphs.It is required to provide set a ==containerMorph== where bloc space will be embedded.The main difference between me and BlMorphicWindowHost is the fact that I don't support window-specific properties like #borderless, #minimized, #maximized etc.Because of Morphic limitations it is not possible to send an event when space is opened in the World.Example:[[[morph := Morph new.""container morph could also have #spaceFill resizing""morph extent: 700@700.""set layout policy to container morph in order for bloc space to fill space""morph layoutPolicy: TableLayout new.host := BlMorphicHost new.host containerMorph: morph.space := BlSpace new.space host: host.space show]]]"
"BlMorphicSpaceHostMorph","I act as a space host for a Bloc space"
"BlMorphicWorldExamples",""
"BlMorphicSteppingHost","I am a host that lives in a Morphic World's UI thread and uses stepping mechanism to pulse the universe"
"BlBlocUIManager","I provide a solution for handling the opening of the debugger that supports both the Bloc UI and the Morphic UI processes.I assume there is only one UI Process either in Bloc or Morphic. If the error happened in either one of these processes, I restart the correct one. If both Bloc and Morphic have two distinct UI processes I will not work correctly.Normally I should only be used when running Bloc natively. When running Bloc using inside the Morphic UI process the a ${class:MorphicUIManager}$ can be used instead.However for now I can also be used to handle just the case of the Morhic UI process. Later I should be simplified to take into account only the Bloc UI process."
"BlMorphicWindowHostSpace","I am a concrete implementation of a BlHostSpace.My responsibility is to control morphic window using unified host space api.Depends on Bloc-Sparta"
"BlMorphicWindowResizeEvent","I am fired when host window changed its size"
"BlMorphicWorldState",""
"BlMorphicHostSpace","I am a host space created by BlMorphicHost.I make it possible to embed Bloc space within arbitrary morphs.For more information and example, please refer to BlMorphicHost."
"BlMorphicWindowOpenedEvent","I am fired by morphic host window when it is opened in the World"
"BlMorphicFormSurfaceRenderer",""
"BlMorphicEventHandler","I am a morphic event handler.I am responsible for convertion of moprhic events to bloc events and their enqueuing.I know morphic window I belong to"
"BlMorphicWindowClosedEvent","I am fired by morphic host window when it is closed or deleted from the World"
"BlOSWindowHost","I am a concrete implementation of a BlHost that allows users to open host bloc spaces within OSWindow windows.OSWindow is an abstraction of different windowing backends, for example SDL2 or Glutin. See my subclasses for available backends.OSWindow host relies on native windows that already have their own event loop, therefore I do event fetching and rendering in the same UI thread"
"BlOSWindowCreatedSignal",""
"BlOSWindowEventHandler",""
"BlOSWindowRenderer","I am an abstract Bloc OSWindow renderer. "
"ManifestBlocHostOSWindow","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BlOSWindowDestroyedSignal",""
"BlOSWindowSpace","I am a concrete implementation of a BlHostSpace.My responsibility is to control OSWindow window using unified host space api."
"BlOSWindowSDL2Space",""
"BlOSWindowSDL2Host",""
"BlOSWindowSDL2Renderer","I am an Bloc OSWindow renderer which uses SDL2."
"BlOSWindowSDL2KeyboardKeyTable",""
"BlOSWindowSDL2BufferSurfaceRenderer",""
"BrTooltipRelocateWish",""
"BrSimpleListItemHolder",""
"BrColumnCellStencilBuilder",""
"BrAnchoredGeometry",""
"BrFocusedState",""
"BrDefaultLogicalZoomLevel",""
"BrResizerRightLocation",""
"BrBreadcrumbLinearLook",""
"BrLayoutAlignmentLook",""
"BrTabLook",""
"BrWithContextMenuLook",""
"BrIconModel",""
"BrHoverModel",""
"BrWithAnchoredModel",""
"BrButton",""
"BrPagerPageResizerElement","I am the element with which a pager page can be resized horizontally."
"BrHorizontalPane","I arrange my children in one horizontal row, one by one"
"BrAnchoredHandleChanged",""
"BrEditorTextChanged",""
"BrExpansionChanged","I am sent by ${class:BrExpandableModel}$ when its expansion state changes.I am also a respose to the ${class:BrExpansionStateRequest}$"
"BrListSelectedItemDetached",""
"BrDropdownHandleRequest",""
"BrEntailmentConclusionRequest",""
"BrPopupTargetRequest",""
"BrResponse",""
"BrToggleAddedEvent",""
"BrContextMenuRelocateWish",""
"BrListItemHolder",""
"BrColumnedTreeDataSource",""
"TBrLayoutResizable",""
"BrDisabledState",""
"BrLogicalZoomLevel",""
"BrResizerBottomLocation",""
"BrTooltipLook",""
"BrPopupLook",""
"BrTabGroupHeaderLook",""
"BrVerticalPaneLook",""
"BrEditorModel",""
"BrExpandableModel","I am a model for expandable / collapsable widgets.Users can send me a ${class:BrExpansionStateRequest}$ to know whether I am expanded or collapses. "
"BrToolbarModel",""
"BrBadge",""
"BrPagerPageContentElement","I hold the contents of one page."
"BrFrame","I arrange my children on top of each other based on they own alignment"
"BrDropdownContentChanged",""
"BrDescriptionChanged",""
"BrActivationChanged","I am sent when the activation status (enabled / disabled) of the widget is changed"
"BrListItemsChangedEvent",""
"BrAnchoredHandleRequest",""
"BrEditorStylerRequest",""
"BrPagerPagesRequest",""
"BrToggleStateRequest","I am sent by a look to request toggle status update"
"BrToggleEvent",""
"BrTooltipHideWish",""
"BrPagerScrollWish",""
"BrPagerDataSource",""
"TBrActivatable",""
"BrDisjunctionState","I represent a logical ""OR"", I match the interaction state only any of left or right match"
"BrInteractiveStyler",""
"BrPopupWindowTarget","I open a popup in a new window"
"BrContextMenuLook",""
"BrInteractiveLook","Example:[[[ BrInteractiveLook new style: [ :aStyler |	aStyler default: [ self foreground: BrGlamorousColors defaultButtonTextColor ].	aStyler hovered: [ self foreground: BrGlamorousColors hoveredButtonTextColor ].	aStyler pressed: [ self foreground: BrGlamorousColors pressedButtonTextColor ].	aStyler disabled: [ self foreground: BrGlamorousColors disabledButtonTextColor ] ]]]]"
"BrSimpleListLook",""
"BrHorizontalPaneLook",""
"BrColumnedModel",""
"BrStateModel","I am a super class of all models that have a boolean state, for example enabled/disabled, expanded/collapsed, pressed/unpressed"
"BrToggleGroupModel",""
"BrAccordion","children := 5 timesCollect: [ :anIndex |	| accordion |	accordion := BrAccordion new.	accordion look: BrGlamorousAccordionLook new.	accordion margin: (BlInsets all: 5).	accordion stencil: [		(GtDocumenter editorForText: 'Hello world')			constraintsDo: [ :c | c vertical fitContent ] ].	header := BrButton new.	header look: BrGlamorousAccordionHeaderLook new.	header label: 'Header ', anIndex asString .	header action: [ accordion toggle ].	accordion addChildFirst: header.	accordion ].container := BlElement new.container layout: BlLinearLayout vertical.container padding: (BlInsets all: 10).container constraintsDo: [ :c |	c horizontal matchParent.	c vertical fitContent ].container addChildren: children.container"
"BrPager",""
"BrUmlClassElement","I represent a UML class elementExample:[[[example=GtDiagrammerUmlClassElementExamples>>#withAttributesAndMethods|expanded=true|show=gtLiveIn:]]]"
"BrAnchoredContentChanged",""
"BrTooltipVisibleChanged",""
"BrSelectionChanged","I am sent when selection in a view model is changed"
"BrListItemElementAttached",""
"BrDropdownContentRequest",""
"BrDescriptionRequest",""
"BrLayoutVerticalResizerRequest",""
"BrTabActionbarRequest",""
"BrTabGroupActionbarChangedEvent",""
"BrContextMenuHideWish",""
"BrLayoutHorizontalResizerWish",""
"BrColumnedListDataSource",""
"BrSimpleTreeRowStencilBuilder",""
"BrCompositeState",""
"BrSizeState",""
"BrPopupEmptyTarget","I am a ""null"" target. Nothing happens if I am used"
"BrAccordionLook",""
"BrGridListLook",""
"BrResizerLook",""
"BrFrameLook",""
"BrBreadcrumbModel",""
"BrResizerModel",""
"BrTabGroupModel",""
"BrPagerPageEmbellisher",""
"BrGridList",""
"BrColumnedTree",""
"BrAccordionContentStencilChanged","I am sent by accordion model when content stencil changes"
"BrContextMenuVisibleChanged",""
"BrPopupTargetChanged",""
"BrSelectedChanged",""
"BrAnchoredContentRequest",""
"BrTooltipVisibleRequest",""
"BrLayoutResizerRequest",""
"BrTabGroupTabsRequest","I am sent to request a tab group view model to respond with all the registered tabs"
"BrTabToolbarChangedEvent",""
"BrAnchoredWish",""
"BrLayoutAlignmentWish",""
"BrInfiniteTreeElement",""
"BrTreeRowStencilBuilder",""
"BrDropdown",""
"BrResizerLocationState","I model a state of the resizer's lcoation.I am useful to let resizer widgets style themselves based on the location. For example if location is bottom, then widget should look like a horizontal bar. If location is left then resizer should be a vertical bar."
"BrPopupTarget","I am a strategy to find a target for opening a popup.A target can be for example a separate window, a modal dialog or an arbitrary UI element"
"BrActor",""
"BrFlatShadowLook","I add a simple flat shadow around an element.To work properly and element should have some margin in order for the shadow to not be clipped by the parent bounds"
"BrPagerScrollbarLook",""
"BrSimpleTreeLook",""
"BrDropdownModel",""
"BrPopupModel",""
"BrSelectModel",""
"BrColumnCellLabelStencil","I create a label only element to be used within a list widget, both in a simple and columned lists.[[[| aStencil anElement |aStencil := BrColumnCellLabelStencil new.aStencil text: 'List row'.anElement := aStencil create]]]"
"BrColumnedList",""
"BrToolbar",""
"BrBreadcrumbItemRemovedEvent",""
"BrTooltipStencilChanged",""
"BrLogicalZoomPushEvent",""
"BrPressedChanged",""
"BrAccordionHeaderStencilRequest","I am sent to the accordion model to receive a response with its current header stencil"
"BrContextMenuVisibleRequest",""
"BrLabelRequest","I am sent by a look to request label text update  from the view mod"
"BrTabGroupRequest",""
"BrTabRemovedEvent","I am sent when a tab is removed from ${class:BrTabGroupModel}"
"BrWish",""
"BrExpansionToggleWish",""
"BrInfiniteListElement",""
"BrListClickableRowStencilBuilder",""
"BrColumnProportionalWidth",""
"BrNegationState",""
"BrLookPropertyCopyChange",""
"BrLayoutAlignmentTypes",""
"BrEntailmentLook",""
"BrProportionalPagerLook",""
"BrTreeLook",""
"BrAnchoredModel",""
"BrPagerModel",""
"BrPressModel",""
"BrTreeNodeCollapsed",""
"BrLabel",""
"BrTabGroup",""
"BrBreadcrumbItemEvent",""
"BrContextMenuStencilChanged",""
"BrLabelChanged","I am sent when label in a view model is changed"
"BrLayoutHorizontalResizerChanged",""
"BrRequest",""
"BrTooltipStencilRequest",""
"BrIconRequest","I am sent by a look to request icon update from the view model"
"BrSelectedStateRequest",""
"BrTabAddedEvent","I am sent when a new tab is added to ${class:BrTabGroupModel}"
"BrToolbarItemRemovedEvent",""
"BrDropdownShowWish",""
"BrColumnedTreeItemHolder",""
"BrListRowStencilBuilder",""
"BrColumnWidth",""
"BrLayoutHorizontalResizerState",""
"BrLookAddChildAsChange",""
"BrResizerExtentStrategy",""
"BrDescriptionLook",""
"BrLayoutLook",""
"BrToggleLook",""
"BrWidgetModel","I define how meaningful UI components of a widget should change in a respond to UI events.Since I am a view model I also manage widget states (e.g. pressed, focused, hovered)"
"BrListModel",""
"BrLayoutHorizontalResizerModel",""
"BrWithTooltipModel",""
"BrEntailment","I am a widget that represents a GT-Example.I can be embedded in various contexts"
"BrResizer",""
"BrEditorWithToolbar","I am a text editor with a toolbar to change visual properties of the text"
"BrTooltipHandleChanged",""
"BrIconChanged","I am sent when icon in a view model is changed"
"BrLayoutAlignmentChanged",""
"BrPagerPagesChanged",""
"BrContextMenuStencilRequest",""
"BrFocusedRequest",""
"BrResizerLocationRequest",""
"BrTabEvent","I define a set of events that are sent by ${class:BrTabGroupModel}"
"BrToolbarItemEvent",""
"BrAnchoredShowWish",""
"BrPagerPageHolder",""
"BrColumnIndexCellStencilBuilder",""
"BrAnchoredPositioner",""
"BrHoveredState",""
"BrLookChange",""
"BrResizerTopLocation",""
"BrBreadcrumbScrollableLook",""
"BrLayoutResizerLook",""
"BrTextLabelLook","I am a look that automatically adds a text label to the content element in a widget element. I am independent of the widget model and the widget element. If the widget model  responds to the ==BrLabelRequest== and replies with a corresponding ==BrLabelChanged== event, then I automatically update the label based on the model.For example, in a subclass of a ViewModel override ==#onAttachedTo:== and implement:[[[	self when: BrLabelRequest reply: [ BrLabelChanged new text: self label ].]]]The label look can directly change properties of the label element. This can be usefull when one want to customize the existing look, or change layout properties:[[[example=BrButtonLabelLookExamples>>#buttonLabelLookWithConstraints|expanded=true|expandedPreview=false|show=gtLiveIn:]]]"
"BrWithDropdownLook",""
"BrInteractiveModel","I am a composite interaction model responsible for managing widget state such as pressed, hovered, focused."
"BrLayoutAlignmentModel",""
"BrWithContextMenuModel",""
"BrToggle",""
"BrPopup","[[[popup := BrPopup new.popup look: BrPopupLook new.popup stencil: [ BlElement new background: Color red ].popup target: BrPopupWindowTarget new.popup show.]]]"
"BrVerticalFlow","I arrange my children vertically in a flow layout"
"BrContextMenuHandleChanged",""
"BrEntailmentConclusionChanged",""
"BrFocusedChanged",""
"BrPagerPageAddedEvent","I am sent by ${class:BrPagerModel}$ when a new ${class:BrPagerPageModel}$ is added to the pager"
"BrTooltipHandleRequest",""
"BrEntailmentPremiseRequest",""
"BrPressedRequest",""
"BrNoResponse",""
"BrToggleDeactivatedEvent","I am sent when switch widget is deactivated"
"BrDropdownRelocateWish",""
"BrColumnedListItemHolder",""
"BrSimpleTreeDataSource",""
"TBrSelectable",""
"BrExpandedState",""
"BrCustomLogicalZoomLevel",""
"BrResizerLeftLocation",""
"BrBreadcrumbLook",""
"BrInteractiveSizeLook",""
"BrTabGroupSplitterLook",""
"BrWithAnchoredLook",""
"BrEntailmentModel",""
"BrFocusModel",""
"BrTreeModel",""
"BrBreadcrumb",""
"BrPagerPageElement","I am the wrapper around the contents of one page, resizer and next button."
"BrHorizontalFlow","I arrange my children horizontally in a flow layout"
"BrTooltipContentChanged",""
"BrEditorStylerChanged",""
"BrDimensionChanged",""
"BrListSelectedItemAttached",""
"BrContextMenuHandleRequest",""
"BrEditorTextRequest",""
"BrPopupStencilRequest",""
"BrTreeChildrenRequest",""
"BrToggleActivatedEvent","I am sent when switch widget is activated"
"BrAnchoredRelocateWish",""
"BrSelectedWish",""
"BrTreeDataSource",""
"TBrLayoutAlignable",""
"BrDefaultState",""
"BrInteractiveCommonStyler",""
"BrResizerLocation",""
"BrDropdownLook",""
"BrInteractiveCommonLook",""
"BrTabGroupContentLook",""
"BrVerticalFlowLook",""
"BrDescriptionModel",""
"BrActivationModel",""
"BrToggleModel",""
"BrAnchoredElement",""
"BrPagerNextButton","I am the triangular button with which one can spawn a new page to the right."
"BrWidgetContainer",""
"BrContextMenuContentChanged",""
"BrColumnsChanged",""
"BrStateChangedEvent","I am a super class of all state change related events.They must be sent by subclasses of ${class:BrStateModel}$"
"BrListItemElementDetached",""
"BrTooltipContentRequest",""
"BrDimensionRequest",""
"BrListItemsRequest",""
"BrTabToolbarRequest",""
"BrTabGroupTabsChangedEvent","I am sent by a tab group view model to let all interested objects know what tabs there are"
"BrDropdownHideWish",""
"BrLayoutVerticalResizerWish",""
"BrSimpleListDataSource",""
"BrConjunctionState","I represent a logical ""AND"", I match the interaction state only if both left and right states match"
"BrInteractiveStyle",""
"BrPopupSpaceTarget","I open a popup in a given space"
"BrAnchoredLook",""
"BrIconLook","I add an icon to the widget content. An icon can be any ==BlElement==.Icon look supports automatic icon property binding to the view model.For that a view model must respond to the ==BrIconRequest== and reply with a corresponding ==BrIconChanged== event.For example in a subclass of a ViewModel override ==#onAttachedTo:== and implement:[[[	self when: BrIconRequest reply: [ BrIconChanged new icon: self icon ].]]]"
"BrShadowLook","I add a gaussian shadow around an element.To work properly and element should have some margin in order for the shadow to not be clipped by the parent bounds"
"BrHorizontalFlowLook",""
"BrButtonModel","! Button modelButton - An element of a graphical user interface which a user can select to perform a particular action.(https://en.oxforddictionaries.com/definition/button)I know how to react on a typical user action such as click or touch event. My reaction is defined by an ==#action== which can be any valuable:  ${class:BlockClosure}$, ${class:Symbol}$ or any object that responds to ==#value==I am not responsible for labels or icons since buttons not necessarily have them.The following example shows how to create a new button model and attach an action. In this particular case we set ==#clicked== as an inner domain model to be able to assert that the action  was indeed executed and also inform users about it:${example:BrButtonModelExamples>>#buttonModel|expandedPreview}$The instantiated button model can be attached to any visual ${class:BlElement}$ as its view model. Once attached, the visual element becomes clickable, as the following example shows:${example:BrButtonModelExamples>>#elementWithButtonModel|expandedPreview}$To test the behaviour of the button model we can simulate a click on the element with attached button model and make sure that the action was performed:${example:BrButtonModelExamples>>#clickOnElementWithButtonModel|expandedPreview=}$"
"BrSelectionModel",""
"BrTabModel",""
"BrUmlClassStencil",""
"BrSimpleList",""
"BrSimpleTree",""
"BrAccordionHeaderStencilChanged","I am sent by accordion model when header stencil changes"
"BrDropdownVisibleChanged",""
"BrResizerTargetChanged",""
"BrTreeChildrenChanged",""
"BrContextMenuContentRequest",""
"BrColumnsRequest",""
"BrLayoutHorizontalResizerRequest",""
"BrTabRequest",""
"BrTabGroupEvent",""
"BrAnchoredHideWish",""
"BrLayoutResizerWish",""
"BrListDataSource",""
"BrColumnedTreeRowStencilBuilder",""
"BrInteractionState",""
"BrSelectedState",""
"BrPopupElementTarget","I open a popup in a given UI element"
"BrLook","I define how widgets look. In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets"
"BrFlowListLook",""
"BrProgressLook",""
"BrWidgetContainerLook",""
"BrTooltipModel",""
"BrProgressModel",""
"BrSizeModel",""
"BrListLabelStencil","! Use BrColumnCellLabelStencil insteadI create a label only element to be used within a list widget, both in a simple and columned lists.[[[| aStencil anElement |aStencil := BrColumnCellLabelStencil new.aStencil text: 'List row'.anElement := aStencil create]]]"
"BrFlowList",""
"BrTree",""
"BrChangeEvent",""
"BrAnchoredVisibleChanged",""
"BrPopupStencilChanged",""
"BrResizerLocationChanged",""
"BrActivationRequest","I am sent by a look to request the activation status (enabled/disabled) of the widget model"
"BrDropdownVisibleRequest",""
"BrLayoutAlignmentRequest",""
"BrTabGroupActionbarRequest",""
"BrTabSelectedEvent","I am sent when a tab is selected in ${class:BrTabGroupModel}"
"BrActivationWish",""
"BrExpansionWish",""
"BrInfinitePagerElement",""
"BrSimpleListRowStencilBuilder",""
"BrColumnUndefinedWidth",""
"BrPressedState",""
"BrLookChanges",""
"BrLayoutAlignmentState",""
"BrExpanderLook",""
"BrScrollablePagerLook",""
"BrColumnedTreeLook",""
"BrContextMenuModel",""
"BrPagerPageModel",""
"BrResizerLocationModel",""
"BrTreeNodeExpanded",""
"BrList",""
"BrToggleGroup",""
"BrBreadcrumbItemAddedEvent",""
"BrDropdownStencilChanged",""
"BrLogicalZoomPopEvent",""
"BrLayoutVerticalResizerChanged",""
"BrAccordionContentStencilRequest","I am sent to the accordion model to receive a response with its current content stencil"
"BrAnchoredVisibleRequest",""
"BrInteractionRequest",""
"BrSelectionRequest","I am sent by a look to request selection update from the view model"
"BrTabDeselectedEvent","I am sent when a tab is deselected in ${class:BrTabGroupModel}"
"BrViewModelAttached",""
"BrTooltipShowWish",""
"BrSimpleTreeItemHolder",""
"BrColumnedListRowStencilBuilder",""
"BrColumnFixedWidth",""
"BrLayoutVerticalResizerState",""
"BrLookAddChildChange",""
"BrTreeNode",""
"BrEditorLook",""
"BrPagerLook",""
"BrToolbarLook","! ToolbarLook!! Toolbar Order-Independent Item Binding You may noticed that ${method:BrToolbarLook>>#initialize}$ initialize ==item== instance variable as an ${class:OrderedDictionary}$. The reason for the ordered dictionary is to allow order-independent binding of toolbar view (${class:BrToolbarItem}$) to the tab model ${class:BrToolbarItemModel}$. To understand it easily, let's check the following excercise: First, we create and inspect a ${class:BrToolbar}$ instance:[[[toolbar := BrToolbar new.toolbar look: BrToolbarLook + BrLayoutLook linearHorizontal matchParent.]]]Please, inspect the result in order to observe changes while executing the following code snippets.Second, we create three toolbar items (${class:BrToolbarItemModel}$):[[[item1 := BrToolbarItemModel new.toolbar viewModel addItem: item1.item2 := BrToolbarItemModel new.toolbar viewModel addItem: item2.item3 := BrToolbarItemModel new.toolbar viewModel addItem: item3.]]]Third, we attach a view ${class:BlElement}$ to the second view model:[[[BlElement new	size: 70@40;	background: Color blue;	viewModel: item2.]]]Fourth, we attach a view ${class:BlElement}$ to the third view model. Notice, that it will be added after the second (blue color) element:[[[	BlElement new	size: 70@40;	background: Color red;	viewModel: item3.]]]Finaly, we attach a view ${class:BlElement}$ to the first view model. Notice, that it will be added before the second (blue color) element:[[[BlElement new	size: 70@40;	background: Color green;	viewModel: item1.]]]So, you should end up with three toolbar item views with the the following order: green, blue, red. NOTE: It would be nice to explain, why this order-independed feature is important."
"BrAccordionModel",""
"BrLogicalZoomModel",""
"BrLayoutVerticalResizerModel",""
"BrPagerPagePreviewResizeListener","I update the size of a page preview element in a scroll bar according to the size of a corresponding page"
"BrExpander",""
"BrTab",""
"BrEditor",""
"BrAnchoredStencilChanged",""
"BrInteractionChanged",""
"BrLayoutResizerChanged",""
"BrProgressChangedEvent",""
"BrDropdownStencilRequest",""
"BrHoveredRequest",""
"BrResizerTargetRequest",""
"BrTabActionbarChangedEvent",""
"BrToolbarItemAddedEvent",""
"BrContextMenuShowWish",""
"BrTreeItemHolder",""
"BrColumnNameCellStencilBuilder",""
"BrColumn","I represent a column within a columned model. A column has associated title and a cell stencil builder.Cell stencil builder builds a stencil or an element for each cell within a columned list taking row value, row index and current column index into account.[[[| aColumn |aColumn := BrListColumn new.aColumn title: 'Column'.aColumn stencil: [ :aRowValue :aRowIndex :aColumnIndex | BrListLabelStencil new text: aRowValue asString ].aColumn]]]"
"BrLayoutResizerState",""
"BrLookPropertyChange",""
"BrResizerStrategy",""
"BrColumnedListLook",""
"BrResizerInteractiveLook",""
"BrLabelLook",""
"BrWithTooltipLook",""
"BrLabelModel","I am an essential building component of Brick's widget models"
"BrLayoutResizerModel",""
"BrWithDropdownModel",""
"BrCard",""
"BrProgress",""
"BrVerticalPane","I arrange my children in one vertical column, one by one"
"BrDropdownHandleChanged",""
"BrEntailmentPremiseChanged",""
"BrHoveredChanged",""
"BrPagerPageRemovedEvent","I am sent by ${class:BrPagerModel}$ when a ${class:BrPagerPageModel}$ is removed from the pager"
"BrAnchoredStencilRequest",""
"BrExpansionStateRequest","I am sent to the ${class:BrExpandableModel}$ to receive its state (expanded / collapsed)"
"BrProgressStatusRequest",""
"BrSelectionDoubleClicked",""
"BrToggleRemovedEvent",""
"BrDevScripterButtonWithLabelChildEventTarget",""
"BrTextEditorNavigatorMoveToOperation",""
"BrTextEditorSignalLogger",""
"BrTextEditorSegmentCollector","I collect and cache text segment for fast access by index. Amount of segment that I store at a time is limited by #cacheLimit."
"BrCursorStencil",""
"BrTextEditorCommand",""
"BrTextClickAttribute",""
"BrTextEditorHistoryCompositeCommand","Sometimes multiple commands should be grouped in one undo/redo sequence"
"BrTextEditorSelectedEvent","I am sent by the text editor model when an interval of text is selected"
"BrTextEditorNavigatorAddAtScreenPositionOperation",""
"BrTextEditorSignal",""
"BrTextEditorPaster",""
"BrTextWordPieceDoubleClickHandler",""
"BrTextStylerCommonAsyncStrategy","I am an abstract text styler strategy used by ${class:BrTextEditor}$.My concrete subclass strategies should style text in a background process.The common styling logic, that should be executed in the background process is implemented in ${method:BrTextStylerCommonAsyncStrategy>>#doStyle:afterDo:}$ and should be called from concete The subclasses should implement ${method:BrTextStylerStrategy>>#style:afterDo:}$ implementations.See ${class:BrTextStylerStrategy}$ for futher explanation.See my subclasses for concrete async strategies: ${class:BrTextStylerCommonAsyncStrategy|expanded=true|show=gtSubclassesFor:}$"
"BrEditorTextFlowLine","I represent a single line of a flow layout.I store reference to the next line in order to avoid unnecessary array of lines creation for a very common case of just one line"
"BrTextEditorUpdateCommand",""
"BrTextEditorCursorElementAddedEvent","I am sent by the text editor element when an element playing a role of the cursor is added to the editor"
"BrTextEditorLetterInputFilter","I only allow letters"
"BrTextEditorFocusRequest","I am sent to the segment piece element when the editor element gets focus"
"BrTextEditorNavigatorMoveUpOperation",""
"BrEditorWrongThreadError",""
"BrTextEditorSelectionRecorder","I am used to record text selection intervals while user drags mouse over the text editor.Additionally I play a role of a selection strategy to support single or multiple selection."
"BrTextExpandButtonAttributeStencil",""
"BrTextEditorCursorChangeCommand","I am sent when a cursor related change happened at a given text position.It can be that a cursor was removed from this position or added at it"
"BrTextCursorAttribute",""
"BrTextEditorHistoryCursorMovementCommand",""
"BrTextEditorHolderCommand","I am a payload to trigger partial text update without re-creation of text pieces"
"BrTextEditorNavigatorAddCursorOperation",""
"BrTextEditorCommandSignal",""
"BrTextEditorSelecter","When in ""cursor update mode"" I place cursors at the end of each selection"
"BrTextWordPieceFocusHandler",""
"BrTextStylerAsyncStrategy","I am a text styler strategy used by ${class:BrTextEditor}$.I style a text in a bacground process using ${method:BlockClosure>>#forkAt:named:}$.See ${class:BrTextStylerStrategy}$ for futher explanation.Example: ${example:BrTextStylerExamples>>#editorWithAsyncStylerStrategy|codeExpanded=false|previewExpanded=true}$"
"BrTextAdornmentAttributeRenderingStrategy",""
"TBrTextEditorTextualPiece",""
"BrTextEditorCommandExamples",""
"BrTextEditorCursorElementRemovedEvent","I am sent by the text editor element when an element playing a role of the cursor is removed from the editor"
"BrTextEditorNoInputfilter","I don't apply any filter and return the bare input"
"BrTextEditorHideCursorRequest","I am sent to the segment piece element when a cursor at a given text index in local text piece coordinates should be hidden"
"BrTextEditorNavigatorRemoveCursorOperation",""
"BrCursorElement",""
"BrTextEditorSelectionOverwriteRecorder","I am a special type of selection recorder that always starts with empty selection and in the end replaces editor's selection with recorder one.Basically, I am a single (monotone) selection strategy."
"BrTextEditor","! The Moldable EditorI edit text and provide high level abstractions of essential text editor functionality such as selection, cursor, text insertions and deletions.I make use of ${class:BrTextAdornmentAttribute}$ to augment text with visual elements. I subclass infinite data source in order to be able to smoothly display practically infinite amounts of text."
"BrTextEditorDeleteCommand",""
"BrTextHoverAttribute",""
"BrTextEditorHistoryDeletionCommand",""
"BrTextEditorCursorChangedHolderCommand","I trigger a cursor update in the text piece"
"BrTextEditorNavigatorMoveAtScreenPositionOperation",""
"BrTextEditorHolderCommandSignal",""
"BrTextEditorUpdater",""
"BrTextWordPieceHideCursorHandler",""
"BrTextStylerTaskItStrategy","I am a text styler strategy used by ${class:BrTextEditor}$.I style a text in a TaskIt background process using ${class:BlTktWorkerProvider}$.See ${class:BrTextStylerStrategy}$ for futher explanation.Example: ${example:BrTextStylerExamples>>#editorWithTaskItStylerStrategy|codeExpanded=false|previewExpanded=true}$"
"BrTextAdornmentAttributeSyncRenderingStrategy",""
"BrTextEditorCursorIconHandler",""
"BrTextEditorCursor",""
"BrTextEditorEvent","I am a root class of Model related events."
"BrTextEditorLineSegmentExamples","I contain examples-tests of the editor backed up by line based segments"
"BrTextEditorScreenToCursorRequest",""
"BrTextEditorOperator",""
"BrTextEditorSegmentElement","I am a visual element representing a segment. I am hold by SegmentHolder which binds me with a segment.Users may customize me by changing segment's layout, margin, padding or visual properties such as background or border.Override me for more advanced customizations"
"BrTextEditorSplitter","I am responsible for splitting a given piece of text into segments"
"BrEditorSegmentHolder","I am a segment holder and is responsible for binding it to its visual representation.I am also responsible for caching functionality in order to reduce amount of instantiated objects."
"BrTextEditorDeselectCommand","I deselect an interval of text from ===fromIndex=== to ===toIndex==="
"BrTextHoverStylableAttribute","I add attributes to a piece of text when user hovers it with a mouse, then I remove those attributes when the mouse is no longer over the text"
"BrTextEditorHistoryInsertionCommand",""
"BrTextEditorFocusChangedHolderCommand","I trigger a focus state update in the text piece"
"BrTextEditorNavigatorMoveByOperation",""
"BrEditorSegmentType","I represent a segment type and is responsible for creating a segment holder of desired type.We don't want to restrict text editor to work only with one  type of segments. In order to support multiple segment types override ===BrTextEditor>>#itemTypeAt:=== and return a custom type for a segment at an index."
"BrTextEditorParagraphAttributesExamples",""
"BrTextWordPieceScreenToCursorHandler",""
"BrTextStylerSyncStrategy","I am a text styler strategy used by ${class:BrTextEditor}$.I style a text in the same active process, which should be a Bloc UI process to display the styled text properly to a user.See ${class:BrTextStylerStrategy}$ for futher explanation.Example: ${example:BrTextStylerExamples>>#editorWithSyncStylerStrategy|codeExpanded=false|previewExpanded=true}$"
"BrTextAdornmentAttributeTaskItRenderingStrategy",""
"BrTextEditorInsertionHandler","I handle keystroke-based insertions and must be added to the editor element"
"BrTextEditorMultipleCursor","I am a composite cursor that is composed out of multiple single cursors"
"BrTextEditorCursorAddedEvent","I am sent by the text editor model when a new cursor is added"
"BrTextEditorLineSegmentPiece",""
"BrTextEditorSelectRequest","I am sent to the segment piece element when the a text interval is selected"
"BrTextEditorCopier",""
"BrTextEditorMouseDownHandler","I handle mouse down events and move or add a cursor at a corresponding position"
"BrTextEditorLineSplitter","I split a piece of text into line segments ${class:BrTextEditorLineSegment}$"
"BrTextEditorSegmentHolder","I am a text segment holder (===BrTextEditorSegment===) designed to be used by ===BrTextEditor==="
"BrTextEditorFocusChangedCommand",""
"BrTextParagraphAttribute","I am an attribute that is intended to be applied on a multi-line piece of text.I should be treated differently by text widgets with the support of multi-line text than normal text attributes. One example of a paragraph attribute is line-spacing"
"BrTextEditorIndex",""
"BrTextEditorScreenToCursorHolderCommand",""
"BrTextEditorNavigatorMoveDownOperation",""
"BrTextEditorLineSegmentType",""
"BrTextEditorScreenToCursorTransformation",""
"BrTextWordPieceSelectionAcquiredHandler",""
"BrBenchmarkStyler",""
"BrTextAttributesHowToGuide","!Text attributes !!How to create a link in a text?${example:BrTextAttributesHowToGuide>>#linkInText|previewExpanded}$"
"BrTextEditorSelectionHandler",""
"BrTextEditorSingleCursor",""
"BrTextEditorCursorMovedEvent","Is sent by the text editor after a cursor is moved from an ==oldIndex== to a ==newIndex== where both are text indices"
"BrTextEditorLineSegmentAdornmentPiece","I special type of a segment piece that creates an element based on adornment attribute.I am created by BrTextEditorAttributedLineSegment - a segment that supports adornment attributes"
"BrTextEditorShowCursorRequest","I am sent to the segment piece element when a cursor at a given text index in local text piece coordinates should be shown"
"BrTextEditorCutter",""
"BrTextWordPieceHandler",""
"BrTextEditorSurroundDefinition","BrTextEditorSurroundDefinition defines a character that the text editor will automatically close when the character is inserted, e.g. an opening bracket will have its closing bracket also inserted.Some characters, e.g. quotes, should only be inserted if surrounded by spaces.  The optional condition can be specified to allow this.!!Internal Representation and Key Implementation Points.!!!Instance Variables	closeCharacter:		<Character>	condition:			<BlockClosure>	openCharacter:		<Character>!!!Implementation Points"
"BrTextEditorLineSegmentHolder","I am a line segment holder and is responsible for binding ===BrTextEditorLineSegment=== with corresponding visual element"
"BrTextEditorInsertStringsCommand",""
"BrTextParagraphLineSpacingAttribute","I influence a line spacing of a paragraph of text.Example:"
"BrTextEditorCursorIndex",""
"BrTextEditorSelectionChangedHolderCommand","I trigger a selection update in the text piece"
"BrTextEditorNavigatorMoveLeftOperation",""
"BrEditorTextFlowLayoutConstraints","I am special text flow layout constraints that add support line breaking and pushing which is very useful for embedding visual elements in moldable text editor."
"BrTextEditorExplicitScreenToCursorTransformation",""
"BrTextWordPieceSelectionHandler",""
"BrTextStylerST80",""
"BrTextEditorAdornmentsExamples","!AdornmentsThe editor supports ''adornment'' attributes that visually influence the content of the editor. ${class:BrTextAdornmentAttribute}$ is the superclass of all adornment attributes.Adornment attribute can replace a piece of text with arbitrary visual elements or simply append them after a piece of text. Therefore we define two groups of adornments:# replacing ${class:BrTextEditorReplacingAdornmentsExamples}$# appending ${class:BrTextEditorAppendingAdornmentsExamples}$"
"BrTextAdornmentAttribute","! AdornmentsI am an attribute which when applied on a text visually replaces some parts of it with other items (not neccessarily character). Such attribtues requires complex text rendering system and currently only supported by the Moldable Editor.See ${class:BrTextEditorAdornmentsExamples}$"
"BrTextEditorExamples","! Today we will learn how to compose an editor 🙊==It is as simple as computing a factorial, a piece of cake! == 🍰[[[show=gtPrintIn:	10 factorial]]]!!! 🔹 First create the text 💁[[[example=BrTextEditorExamples>>#newText]]]!!! 🔸 Next, we build the editor 👷[[[example=BrTextEditorExamples>>#newEditor]]]!!! 🔹 Then, we attach text to the enditor. 💡[[[example=BrTextEditorExamples>>#editor:text:]]]!!! 🔸 Next, we create an editor element. 🤘[[[example=BrTextEditorExamples>>#newElement|show=gtLiveIn:]]]!!! 🔹 And finally, build everything together 💪[[[example=BrTextEditorExamples>>#element:editorText:|show=gtLiveIn:]]]! Done 😎"
"BrTextEditorCursorRemovedEvent","I am sent by the text editor model when one of the cursors is removed"
"BrTextEditorLineSegmentTextPiece",""
"BrTextEditorTextChangedRequest","I am sent to the segment piece element when text inside it changes."
"BrTextEditorDeleter",""
"BrTextWordPieceUniqueHandler",""
"BrTextEditorSurroundMap","BrTextEditorSurroundSet provides dictionary like lookup for opening and closing surround characters.See BrTextEditorSurroundDefinition for more information.  !!Internal Representation and Key Implementation Points.!!!Instance Variables	definitions:		<Array>!!!Implementation PointsThe size of the collection is assumed to be small, so a simple search is done instead of using a Dictionary."
"BrEditorSegment","Editor only measures and renders visible distinct pieces of objects that is why we should split the whole editable object in so called segments.I represent such segment"
"BrTextEditorInvalidateCommand",""
"BrTextParagraphMarginAttribute",""
"BrTextEditorTextIndex",""
"BrTextEditorTextChangedHolderCommand",""
"BrTextEditorNavigatorMoveRightOperation",""
"BrTextAdornmentStencilBuilder","I am a stencil builder designed to be used together with dynamic adornment attribute.Example:[[[	stencilBuilder := BrTextAdornmentStencilBuilder new.	stencilBuilder		segmentPiece: aTBrTextEditorTextualPiece;		editor: anEditorElement.	adornmentElement := stencilBuilder asElement]]]The use of me together with adornment attribute assuming that a subclass of me is used:[[[	attribute := BrTextAdornmentDynamicAttribute new.	attribute stencil: BrTextAdornmentStencilBuilder new]]]Users can also directly use blocks for scripting:[[[	attribute := BrTextAdornmentDynamicAttribute new.	attribute stencil: [ :aTBrTextEditorTextualPiece :anEditorElement | BlElement new  ]]]]"
"BrTextEditorRelativeScreenToCursorTransformation",""
"BrTextWordPieceSelectionLostHandler",""
"BrRBTextStyler","Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".selFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"BrTextEditorAppendingAdornmentsExamples",""
"BrTextAdornmentDynamicAttribute","I am a dynamic version of an adornment attribute that creates visual text adornments with the help of a provided stencil (builder).I work together with ==BrTextAdornmentStencilBuilder== to build a corresponding stencil for a text adornment.Users should create a subclass of ==BrTextAdornmentStencilBuilder== and override ==#buildDefault== that returns a new instance of an intended stencil or a new visual element (==BlElement==).Once stencil builder is created it can be attached to the attribute as follows:[[[	BrTextAdornmentDynamicAttribute new		stencil: BrTextAdornmentStencilBuilder new]]]For scripting purposes a block closure can be used instead. It can have two optional parameters: - a piece of text to be affected - and and instance of an editor element to get access to the editor model if it needs to be invalidated due to some user actions (for example trigger syntax highlighter to restyle a text)[[[	BrTextAdornmentDynamicAttribute new		stencil: [ :aBlText :aBrEditorElement |  BlElement new ""or BrStencil that creates elements"" ]]]]"
"BrTextEditorOnObjectPrintStringExamples",""
"BrTextEditorDeletedEvent","Is sent by the text editor after a piece of text was deleted from ==fromIndex== to ==toIndex== represented by a text index"
"BrTextEditorLineSegmentSplitter","I split a piece of text behind a ${class:BrTextEditorLineSegment}$ into pieces ${class:BrTextEditorLineSegmentPiece}"
"BrEditorElement","I represent a scrollable editor element. I support scrolling, selection and other various features."
"BrTextEditorDeselecter",""
"BrTextEditorLineSegmentTextListener","I add support of BrTextEventHandlerAttribute - special kind of attribute that can handle events"
"BrTextEditorSurroundMapExamples",""
"BrTextEditorSegment","I represent a single text segment that is backed up by a sub text.We split the whole text into segment in order to support infinite list that is used to render the whole text.By default segment is a single line: a piece of text between new line characters"
"BrTextEditorScreenToCursorCommand",""
"BrTextParagraphWordPaddingAttribute",""
"BrTextEditorInputFilter","I am responsible for input filtering and is used by text editor inserter"
"BrTextEditorRequest","I am a hierarchy of text editor request.A request is a special type of the event that is sent by the editor to each segment piece in order to request them to react to some actions such as cursor movement or selection.""""Requests are dispatched by the editor to each segment piece"""""
"BrTextEditorNavigatorMoveToLineEndOperation",""
"BrTextWordPieceStencilBuilder",""
"BrTextEditorSegmentBuilder","I am responsible for building and updating segments.I know what to do with the segment structure when we insert or delete a piece of text from the editor.I take a piece of text and split it into segments."
"BrTextWordPieceShowCursorHandler",""
"BrTextEditorCursorAttributeExamples",""
"BrTextExpandButtonAttribute","I am a text attribute that adds a small expand button that when clicked may apply further attribues on the text"
"BrTextEditorHistory",""
"BrTextEditorDeselectedEvent","I am sent by the text editor model when an interval of text is deselected"
"BrTextEditorLineSplitterExamples",""
"BrTextEditorRecordDeselectionSignal","I am signaled when selection recorder records a new motone deselection"
"BrTextEditorInserter","Example:[[[anEditor := BrTextEditor new.anEditor inserter	atCursor;	string: 'Hello';	insert.anEditor]]]"
"BrTextWordPieceBlurHandler",""
"BrTextStylerExamples","Hello World *https://gtoolkit.com*"
"BrTextEditorLineSegment",""
"BrTextEditorSelectCommand","I select an interval of text from ===fromIndex=== to ===toIndex===.I do not remove existing selections, I just add new one on top merging overlapping intervals"
"ManifestBrickEditor","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BrTextEditorAlphaNumericInputFilter","I allow letters and digits"
"BrTextEditorBlurRequest","I am sent to the segment piece element when the editor element loses focus"
"BrTextEditorNavigatorMoveToLineStartOperation",""
"BrTextElementWithCursors","I am extended version of the ${class:BlTextElement}$ with support of multiple cursors."
"BrTextEditorLineSegmentBuilder","I am a simple line-based segment builder and do not take text attributes into account.Note: I do not support embedded elements"
"BrTextWordPieceTextChangeHandler",""
"BrTextEditorReplacingAdornmentsExamples","!Replacing adornmensThe following example replaces the whole text with a gray circle. It can be achieved by sending ${method:BlText>>#replacingAdornment:}$ to an instance of the ${class:BlText}$. ${example:BrTextEditorReplacingAdornmentsExamples>>#singleLineTextWithReplacementAll|previewShow=#gtTextFor:|previewHeight=40|previewExpanded}$By scoping a text using ${method:BlText>>#from:to:}$ we can replace any arbitrary piece of text with a visual element. For example the first word: ${example:BrTextEditorReplacingAdornmentsExamples>>#singleLineTextWithReplacementFirst|previewShow=#gtTextFor:|previewHeight=40|previewExpanded}$Or a word in the middle of a sentence: ${example:BrTextEditorReplacingAdornmentsExamples>>#singleLineTextWithReplacementMiddle|previewShow=#gtTextFor:|previewHeight=40|noCode}$Or even the last word in the same sentence: ${example:BrTextEditorReplacingAdornmentsExamples>>#singleLineTextWithReplacementLast|previewShow=#gtTextFor:|previewHeight=40|noCode}$Replacement attributes can also stack up if applied on the same piece of text. In this case the order of added elements is defined by the order in which replacement attributes are added: ${example:BrTextEditorReplacingAdornmentsExamples>>#singleLineTextWithMultipleReplacementsOnTopEachOther|previewShow=#gtTextFor:|previewHeight=40|previewExpanded}$They can also overlapp. In this case attributes that end first take precedence over attributes whose end index is larger and so the elements that they add: ${example:BrTextEditorReplacingAdornmentsExamples>>#singleLineTextWithMultipleOverlappingReplacements|previewShow=#gtTextFor:|previewHeight=40|previewExpanded}$"
"BrTextEventHandlerAttribute","I am an attribute with the ability to handle events received by a visual text element "
"BrTextEditorHistoryCommand",""
"BrTextEditorInsertedEvent","Is sent by the text editor after a new piece of text is inserted in the editor at a location defined by an insertion index"
"BrTextEditorNavigatorOperation",""
"BrTextEditorRecordSelectionSignal","I am signaled when selection recorder records a new motone selection"
"BrTextEditorNavigator","I am responsible for cursor navigation.- First I perform all cursor remove operations.- Then I add new cursors- and finally perform cursor movement operations"
"BrTextWordPieceDeselectionHandler",""
"BrTextStylerStrategy","I am an abstract text styler strategy used by ${class:BrTextEditor}$.My subclasses are responsible for the text style request executions.For example, one strategy could perform styling in a background process, another in a UI process (and being therefore blocking).The common methods are ${method:BrTextStylerStrategy>>#style:}$ and ${method:BrTextStylerStrategy>>#style:afterDo:}$.See my subclasses for concrete strategies: ${class:BrTextStylerStrategy|expanded=true|show=gtSubclassesFor:}$"
"BrEditorSegmentStream","I am used by ===BrTextEditorSegmentBuilder=== to stream created segments so that ===BrTextEditorSegmentsCollector=== could collect them."
"BrTextEditorSelectionUpdateCommand","I do the hard job of visually updating selection by requesting segment holders to partially update themselves"
"BrEditorTextFlowLayout","I am a special kind of Flow layout optimized to layout small text piece elements with moldable editor's segment.I do not support children matching parent. All of them must have either exact of fit content resizing strategies."
"BrTextEditorDigitInputFilter","I only allow digits"
"BrTextEditorDeselectRequest","I am sent to the segment piece element when the a text interval is deselected"
"BrUmlClassElementExamples",""
"BrExpanderExamples",""
"BrTextEditorSelecterExamples",""
"BrButtonLabelLookExamples","!! Playing with Label Looks for ButtonsWhen using a label look, the label look embeds the label element directly in the widget element as a child. In the example below, the look is added directly to the button element:${example:name=BrButtonLabelLookExamples>>#buttonWithDirectlyEmbeddedLabel|expanded=true|expandedPreview=true}$If the button has a more complex structure, this behaviour can cause problems. In the example below, the button defines a content element in which the label should be added. However, because the look is added to the button element, the label will be emdedd in the button element instead of the content element:${example:name=BrButtonLabelLookExamples>>#buttonWithModelAndWrongContentPlacement|expanded=true|expandedPreview=true}$To change this behavior, the label look  provides more control over where the label is inserted into the button element: to identify the element in the button element where the label should be placed, the look looks for an element marked with ==#content==. There shoud be only one element marked with  ==#content==.  To fix the problem from the above example,  we can mark the ==aContent== element with ==#content== when adding it to the button element:${example:name=BrButtonLabelLookExamples>>#buttonWithModelAndLookWithoutConstraints|expanded=true|expandedPreview=true}$The label look can directly change properties of the label element. This can be usefull when one wants to change layout properties or update graphical properties of the label:${example:name=BrButtonLabelLookExamples>>#buttonWithChangedConstraintsInLook|expanded=true|expandedPreview=true}$After linking the button element with the label look and the button model, changing the value in the button model updates the label in the button element:${example:name=BrButtonLabelLookExamples>>#buttonWithModelAndLookAndChangedModelLabel|expanded=true|expandedPreview=true}$When changing the label in the model, a ==BlLabelChanged== event is triggered that reaches the label look, through the button widget. The propagation of this element is as follows:${example:name=BrButtonLabelLookExamples>>#labelChangedEvent|expanded=true|expandedPreview=true|show=gtTraversedLiveFor:}$In case the button widget does not have a label look attached, changing the value of the text in the model does not update the visual representation of the label in the button widget:${example:name=BrButtonLabelLookExamples>>#buttonWithOnlyModelAndChangedModelLabel|expanded=true|expandedPreview=true}$When attaching a label look and a button model to a button widget the order in which they are attached does not matter.  If the model is set first then the text value set in the label look is not used; the model has priority  over the label look${example:name=BrButtonLabelLookExamples>>#buttonWithModelFirstThenLook|expanded=true|expandedPreview=true}$If the label look is set first, and the button widget does not have a model the the text value defined in the label look is used. If the button widget  is then assigned a button model, then the value defined in the model is used:${example:name=BrButtonLabelLookExamples>>#buttonWithLookFirstThenModel|expanded=true|expandedPreview=true}$"
"BrStencilExamples",""
"BrEmbeddedEditorExamples",""
"BrLayoutResizerExamples",""
"BrTooltipExamples",""
"BrContextMenuExamples",""
"BrTextEditorDeleterExamples",""
"BrAnchoredPositionerExamples",""
"BrPressExamples",""
"BrInteractionExamples",""
"BrToggleExamples","!!Playing with looks Let's take a look at a toggle button as an example. A toggle button is made of an element and an associated view model. To have it drawn on the screen, we add a look to it, such as an icon:${example:BrToggleExamples>>#toogleWithMaterialIcon|previewExpanded}$Or a label:${example:BrToggleExamples>>#toogleWithMaterialLabel|previewExpanded}$The icon and the label can also be combined:${example:BrToggleExamples>>#toggleWithMaterialIconAndLabel|previewExpanded}$Changing the order of composition can also affect the rendering. In this case, the icon appears to the right of the label:${example:BrToggleExamples>>#toggleWithMaterialLabelAndIcon|previewExpanded}$But, looks can also influence the behavior of a widget. For example, to change the icon depending of the state of the toggle, we simply make hte look listen to the toggle event and change the icon from the view model:${example:BrToggleExamples>>#toggleWithMaterialChangingIcon|previewExpanded}$"
"BrButtonModelExamples","See ${class:BrButtonModel}$"
"BrTabExamples",""
"BrAccordionExamples","! AccordionThe accordion is a graphical control element that can be ""expanded"" or ""collapsed"" to reveal the content associated with that element. By default an accordion is collapsed:${example:name=BrAccordionExamples>>#glamorousWithEditor|noCode|previewShow=#gtLiveFor:|previewHeight=140}$and users are required to click on the header to expand it:${example:name=BrAccordionExamples>>#glamorousWithEditorExpanded|noCode|previewShow=#gtLiveFor:|previewHeight=140}$the color of the vertical bar on the left side changes when the accordion receives keyboard focus:${example:name=BrAccordionExamples>>#glamorousWithEditorExpandedWithFocus|noCode|previewShow=#gtLiveFor:|previewHeight=140}$!! Resizing"
"BrListStencilExamples",""
"BrTreeExamples",""
"BrDropdownExamples",""
"BrTextEditorInserterExamples",""
"BrBasicExamples",""
"BrProgressExamples",""
"TBrTextEditorFixedMeasurerExamples","I add utility methods related to fixed text measurer"
"BrLabelExamples",""
"BrToggleGroupExamples",""
"BrCardExamples",""
"BrTextEditorLayoutMeasurementExamples",""
"BrActivationExamples",""
"BrLookChangeExamples",""
"BrTreeNodeExamples",""
"BrExamplesShowroom","I am a collection of ""showroom"" examples.! ButtonsIn the example below we show all existing button styles${example:BrExamplesShowroom class>>#allButtons|expanded|noCode}$The following glamorous button reacts to various UI interaction events and changes its style according the state (pressed, hovered)${example:BrExamplesShowroom>>#glamorousButton}$Button can also be disabled to prevent click events${example:BrExamplesShowroom>>#glamorousDisabledButton}$! TogglesToggle buttons can have radically different look, while the behaviour of all of them is exactly the same.${example:BrExamplesShowroom class>>#allToggles|noCode}$!! Labelled toggleTo create a toggle button with a label user should the corresponding  ${class:BrMaterialToggleWithIconLook}$${example:BrExamplesShowroom>>#materialLabelToggle}$!! Iconified toggleSimilarly we can use the icon look to build an iconified toggle:${example:BrExamplesShowroom>>#materialIconToggle}$!! Iconified labelled toggleWe can compose label and icon looks to create a toggle button with both label and the icon. Note that the order of looks defines the visual order of the label and icon:${example:BrExamplesShowroom>>#materialToggle}$Thus being said by swapping the label and icon look we can move the icon to the right from the label:${example:BrExamplesShowroom>>#materialReversedToggle}$! AccordionAccordion is the exandable and collapsable widget that consists of a header and a content. Any visual ${class:BlElement}$ can be a header of the accordion. The following example shows how a ${class:BrButton}$ can be used an accordion header:${example:BrExamplesShowroom>>#accordion}$! TabsThe following example shows how to create a tab group widget with 3 tabs. The content of each tab is defined with the help of a stencil.${example:BrExamplesShowroom>>#glamorousTabs}$! ToolbarThe toolbar is a logical set of action buttons (either labelled or iconified).${example:BrExamplesShowroom>>#glamorousToolbar}$${example:BrExamplesShowroom>>#materialToolbar}$! ListThe example below describes how to instantiate a new instance of the simple list that only has one column:${example:BrExamplesShowroom>>#simpleList|noCode}$${example:BrExamplesShowroom>>#columnedList|noCode}$"
"BrTextEditorNavigatorExamples",""
"BrButtonExamples","! Brick buttonsButton is one of the most essential graphical components in UI. It can be in a lot of different variaties and forms.See ${class:BrButtonModel}$ for a more detailed description.!! Instantiating a buttonA button widget is an instance of ${class:BrButton}$. By default it does not have any attached look and therefore has no visual appearance:${example:BrButtonExamples>>#newButton}$!! BehaviorA button widget is composed of multiple view models that add important functionality:- ${class:BrLabelModel}$ is responsible for button's label- ${class:BrIconModel}$ adds support of an icon- ${class:BrActivationModel}$ lets users to enable or disable a button (make it non-interactable)- ${class:BrPressModel}$ provides support of handling press state- ${class:BrHoverModel}$ adds support of mouse hover events- ${class:BrSizeModel}$ is responsible for managing the logical size of a button (tiny, small, large etc)- ${class:BrLayoutAlignmentModel}$ lets users to align a button's content within the button itself (center, top-right, etc)- ${class:BrLayoutHorizontalResizerModel}$ provides support for horizontal resizing strategies (fit content, match parent, exact size)- ${class:BrLayoutVerticalResizerModel}$ is similar to horizontal resizer but controls a vertical resizing strategy!! Building a buttonButton's look can be implemented by composing existing looks or implementing a new one.!!! Adding and styling a labelHaving ${class:BrLabelModel}$ view model is not enough to create a button with a label. For that we would need to add ${class:BrTextLabelLook}$:${example:BrButtonExamples>>#buttonWithLabelLook|previewShow=#gtLiveFor:|previewHeight=55|previewExpanded=true}$Of course, a text style can be customized to match user's preference:${example:BrButtonExamples>>#buttonWithLabelLookAndCustomFont|previewShow=#gtLiveFor:|previewHeight=70|previewExpanded=true}$Quite often though, it may be needed to change label's style when users hover a button. ${class:BrHoverModel}$ handles widget hover state change. To style the text accordingly we can add ${class:BrInteractiveCommonLook}$ to the previosly created ${class:BrTextLabelLook}$. Please note that we should also provide default values for all button properties that change due to interactivity in a ==default:== style:${example:BrButtonExamples>>#buttonWithLabelLookReactingToHover|previewShow=#gtLiveFor:|previewHeight=70|previewExpanded=true}$In a similar fashing we can also change the text style on a button press which is managed by ${class:BrPressModel}$:${example:BrButtonExamples>>#buttonWithLabelLookReactingToHoverAndPress|previewShow=#gtLiveFor:|previewHeight=70|previewExpanded=true}$One more common use-case is to provide a text style for a disabled button which is modelled by ${class:BrActivationModel}$. Please note that disabled button does not react to click and hover events:${example:BrButtonExamples>>#buttonWithLabelLookReactingToHoverAndPressAndDisabled|previewShow=#gtLiveFor:|previewHeight=70|previewExpanded=true}$Sometimes users may want to create a look that depends on a logical button size modelled by ${class:BrSizeModel}$. For example a button can be made huge ==beHuge== or tiny ==beTiny==. To style a label based on the logical widget size we can use ${class:BrInteractiveSizeLook}$ which provides a fluent api for variuos sizes. Click on the label to randomly change its logial size:${example:BrButtonExamples>>#buttonWithLabelLookOfDifferentSizes|previewShow=#gtLiveFor:|previewHeight=70|previewExpanded=true}$Now lets put together the final label look that we will use later to build our custom button:${example:BrButtonExamples>>#labelLookWithCommonAndSizeInteractions}$!!! Adding and styling the button's exterior"
"BrSimpleListExamples",""
"BrExampleColoredElementStencil","I am an example of a custom Stencil that creates a rounded rectangular element with cusomizable background color and corner radius"
"BrLayoutLookExamples",""
"BrToolbarExamples",""
"BrColumnedListExamples",""
"BrTextEditorOperatorExamples",""
"BrAnchoreGeometryExamples",""
"BrPagerExamples",""
"BrGlamorousLinkButtonLabelLook","I define how a link (with a label) looks inside of a text, for example font size, family name, weight etc"
"BrGlamorousCodeEditorLook",""
"BrGlamorousButtonWithLabelAndIconLook",""
"BrGlamorousTabActionbarLook",""
"BrGlamorousFocusableShadowLook",""
"BrValueLinearNormalizer",""
"BrGlamorousResizerLook",""
"BrGlamorousSpaceTabWithIconLook",""
"BrGlamorousBadgeCircularLook",""
"BrGlamorousResizerRightBarLook",""
"BrGlamorousTextAreaSpacingLook",""
"BrGlamorousNormalizer",""
"BrGlamorousColors","I define colors used for Glamorous Toolkit.Here is the list of available colors: ${class:BrGlamorousColors|show=gtColorsFor:|expanded=true}$"
"BrGlamorousAccordionLook","accordion := BrAccordion new.accordion look: BrGlamorousAccordionLook new.accordion stencil: [	BlElement new		size: 200@200;		background: Color random ].header := BrButton new.header look: BrGlamorousAccordionHeaderLook new.header label: 'Header'.header action: [ accordion toggle ].accordion addChildFirst: header.accordion."
"BrGlamorousTabLook",""
"BrGlamorousBadgeWithLabelLook",""
"BrGlamorousWithContextMenuLook",""
"BrGlamorousButtonRectangularLook","I define the rectangular exterior of the button"
"BrColorLinearNormalizer",""
"BrGlamorousSpaceTabGroupLook",""
"BrGlamorousRegularEditorLook",""
"BrGlamorousButtonWithLabelLook",""
"BrGlamorousFlatCardLook",""
"BrGlamorousTextLabelLook",""
"BrGlamorousBreadcrumbLook",""
"BrGlamorousTooltipLook",""
"BrMultipleColorLinearNormalizer",""
"BrGlamorousTabGroupLook",""
"BrGlamorousWithDropdownLook",""
"BrGlamorousBadgeLook",""
"BrIdentityNormalizer",""
"BrGlamorousWithVerticalResizerLook",""
"BrGlamorousAccordionWithBorderLook",""
"BrGlamorousTabWithoutBarLook",""
"BrGlamorousButtonWithIconAndLabelLook",""
"BrGlamorousWithResizerLook",""
"BrGlamorousSimpleContextMenuContent",""
"BrGlamorousLinkButtonExteriorLook","I define the rectangular exterior of the link button."
"BrFontLinearNormalizer",""
"BrGlamorousLabelLook",""
"BrGlamorousFonts","!! Source Sans Pro Script used to load Source Sans Pro fonts in the image from their corresponding ttf files[[[BrGlamorousFonts load: './Source Sans Pro 200.ttf' as: 'sourceSansPro200ExtraLight'.BrGlamorousFonts load: './Source Sans Pro 200italic.ttf' as: 'sourceSansPro200italicExtraLight'.BrGlamorousFonts load: './Source Sans Pro 300.ttf' as: 'sourceSansPro300Light'.BrGlamorousFonts load: './Source Sans Pro 300italic.ttf' as: 'sourceSansPro300italicLight'.BrGlamorousFonts load: './Source Sans Pro 600.ttf' as: 'sourceSansPro600Semibold'.BrGlamorousFonts load: './Source Sans Pro 600italic.ttf' as: 'sourceSansPro600italicSemibold'.BrGlamorousFonts load: './Source Sans Pro 700.ttf' as: 'sourceSansPro700Bold'.BrGlamorousFonts load: './Source Sans Pro 700italic.ttf' as: 'sourceSansPro700italicBold'.BrGlamorousFonts load: './Source Sans Pro 900.ttf' as: 'sourceSansPro900Black'.BrGlamorousFonts load: './Source Sans Pro 900italic.ttf' as: 'sourceSansPro900italicBlack'.BrGlamorousFonts load: './Source Sans Pro regular.ttf' as: 'sourceSansPro400Regular'.BrGlamorousFonts load: './Source Sans Pro italic.ttf' as: 'sourceSansPro400Italic'.]]]!! Source Code ProScript used to load Source Code Pro fonts in the image from their corresponding ttf files[[[BrGlamorousFonts load: './Source Code Pro 200.ttf' as: 'sourceCodePro200ExtraLight'.BrGlamorousFonts load: './Source Code Pro 200italic.ttf' as: 'sourceCodePro200italicExtraLight'.BrGlamorousFonts load: './Source Code Pro 300.ttf' as: 'sourceCodePro300Light'.BrGlamorousFonts load: './Source Code Pro 300italic.ttf' as: 'sourceCodePro300italicLight'.BrGlamorousFonts load: './Source Code Pro 500.ttf' as: 'sourceCodePro500Medium'.BrGlamorousFonts load: './Source Code Pro 500italic.ttf' as: 'sourceCodePro500italicMedium'.BrGlamorousFonts load: './Source Code Pro 600.ttf' as: 'sourceCodePro600Semibold'.BrGlamorousFonts load: './Source Code Pro 600italic.ttf' as: 'sourceCodePro600italicSemibold'.BrGlamorousFonts load: './Source Code Pro 700.ttf' as: 'sourceCodePro700Bold'.BrGlamorousFonts load: './Source Code Pro 700italic.ttf' as: 'sourceCodePro700italicBold'.BrGlamorousFonts load: './Source Code Pro 900.ttf' as: 'sourceCodePro900Black'.BrGlamorousFonts load: './Source Code Pro 900italic.ttf' as: 'sourceCodePro900italicBlack'.BrGlamorousFonts load: './Source Code Pro regular.ttf' as: 'sourceCodeProRegular'.BrGlamorousFonts load: './Source Code Pro italic.ttf' as: 'sourceCodeProItalic'.]]]"
"BrGlamorousLinkButtonWithLabelLook","I define a link button that represents a link (in a text document)."
"BrGlamorousEditorSpacingLook",""
"BrGlamorousButtonIconLook",""
"BrGlamorousContextMenuLook",""
"BrNormalizerExamples",""
"BrGlamorousWithLabelTooltipLook",""
"BrGlamorousButtonCircularLook","I define the circular exterior of the button. I am designed to be used with an icon look"
"BrExplicitIdentityNormalizer",""
"BrGlamorousButtonLabelLook","I define how a label looks inside of the glamorous button, for example font size, family name, weight etc"
"BrGlamorousEditorLook",""
"BrGlamorousButtonWithIconLook",""
"BrGlamorousWithHorizontalResizerLook",""
"BrGlamorousExpanderLook",""
"BrGlamorousDropdownLook",""
"BrGlamorousSpaceTabWithLabelLook",""
"BrNumberLinearNormalizer",""
"BrGlamorousSpaceTabWithIconAndLabelLook",""
"BrGlamorousToggleBackgroundLook",""
"BrGlamorousResizerBottomBarLook",""
"BrGlamorousIcons","I am a Glamorous icons container. You can import new icons using ${method:name=BrGlamorousIcons class>>#importIconsFromDirectory:}$ using the script below. It imports all ==PNG== files and creates class methods with the same name.[[[BrGlamorousIcons importIconsFromDirectory: './gt-icons' asFileReference]]]Here is a list of available icons:${class:BrGlamorousIcons|show=gtIconsFor:|expanded=}$"
"BrGlamorousInputFieldSpacingLook",""
"BrGlamorousListLabelLook",""
"BrGlamorousToolbarLook",""
"BrGlamorousSpaceTabBasicLook",""
"BrGlamorousAccordionHeaderLook",""
"BrGlamorousTabGroupHeaderLook",""
"BrGlamorousButtonExteriorLook",""
"BrLinearNormalizer",""
"BrHydraSwitchLook","Futuristic switches inspired by Hydra UI (https://creativemarket.com/MehmetRehaTugcu/363101-Hydra-UI)"
"BrHydraSwitchWithoutTrackLook",""
"BrHydraSwitchRadioLook",""
"BrHydraSwitchWithTrackLook",""
"BrMaterialListItemStencil",""
"BrMaterialListItemIconLook",""
"BrMaterialListSingleLineItemLook",""
"BrMaterialToggleWithIconLook",""
"BrMaterialToggleBackgroundLook","I describe how background of a material toggle button changes due to toggle events"
"BrMaterialResizerBottomBarLook",""
"BrMaterialButtonLayoutLook","I define basic layout related properties of material buttons such as padding or resizing strategies"
"BrMaterialToolbarLook",""
"BrMaterialToggleLabelledLook","I am a look of a labelled material toggle button.I don't apply any shadows to simplify integration into a toggle group which has its own shadow on the widget"
"BrMaterialButtonLook",""
"BrMaterialRoundedLook","I define a rounded rectangle geometry"
"BrMaterialListItemLabelLook",""
"BrMaterialToggleWithLabelLook",""
"BrMaterialSimpleListStencil",""
"BrMaterialListItemLook",""
"BrMaterialToggleIconifiedLook","I am a look of an iconified material toggle button.I don't apply any shadows to simplify integration into a toggle group which has its own shadow on the widget"
"GtGraphEdge","I represent a logical connection between two elements. I do not have a visual representation and I am used as a constraint in graph-based layouts."
"GtGraphIterator","I am an iterator that is used to iterate over connected edges and nodes within a graph of elements."
"GtGraphEdgesIterator","I am an abstract iterator over edges connected to a graph element"
"GtGraphIncomingEdges","I iterate over all incoming edges to the graph node[[[	| anElement theIncomingEdges |		anElement := BlElement new.	theIncomingEdges := anElement graph connectedEdges incoming]]]"
"GtGraphConstraints","I represent graph constraints and allow users to specify logical connections between graph nodes with the help of attached graph edges"
"GtGraphElementContext","I am a utility class that offers an extra API for adding graph semantics to Bloc elements "
"GtGraphConnectedNodes","I iterate over all nodes connected by given edges to the initial graph  element"
"GtGraphConnectedEdges","I iterate over all connected edges of the graph element.Users can ask for different subsets of those edges for example incoming or outgoing edges"
"GtGraphOutgoingEdges","I iterate over all outgoing edges from the graph node[[[	| anElement theOutgoingEdges |		anElement := BlElement new.	theOutgoingEdges := anElement graph connectedEdges outgoing]]]"
"GtGradDominanceCenteredTreeLayoutExamples","!Centered dominance tree layoutThis layout is a variation of the dominance  tree layout which not only makes sure that a tree node is placed as deep as possible, but also that it is centered.  Please see dominance tree documentation to learn more about the depth aspect of the layout.A node being centered means that, if it has multiple incoming edges starting at nodes at the same level, it will be placed under the middle one. An example is shown below:${example:name=GtGradVerticalDominanceCenteredTreeLayoutExamples>>#moreComplexGraphWithANodeWithSeveralIncomingEdges|expanded=true|expandedPreview=true|show=gtLiveFor:}$All nodes on the second level are conneceted to the rightmost node on the third level. A simple depth-first search would form a tree where this node would be placed under the leftmost node on the second level. However, it can be seen that this layout placed it under the second node on the second level. The same can be seen in case of the bottommost node, whose possible parent sinclude all nodes on the second to last level. The following example shows the same graph , but laid out using the horizontal centered dominance tree:${example:name=GtGradHorizontalDominanceCenteredTreeLayoutExamples>>#moreComplexGraphWithANodeWithSeveralIncomingEdges|expanded=true|expandedPreview=true|show=gtLiveFor:}$"
"GtGradHierarchicalWeightedElement",""
"GtGradTreeConstraints","I store layout properties of the nodes within tree layout that are used during layout computation.Those properties can be later accessed after layout computation for testing and debug purposes"
"GtGradKamadaKawaiInitialPositionSetSignal",""
"GtGradEastHierarchicalTreeLayout",""
"GtGradTreeLayoutPreparator",""
"GtGradCircleLayout",""
"GtGradTreeNodesAlignment",""
"GtGradHorizontalDominanceCenteredTreeLayout",""
"GtGradNodeContour",""
"GtGradHierarchyElement",""
"GtGradWestHierarchicalCoordinateAssignmentStage",""
"GtGradHierarchicalLayoutLeafAlignment",""
"GtGradNorthHierarchicalLayoutExamples",""
"GtGradVerticalDominanceTreeLayoutExamples",""
"GtGradAbstractTreeCreationExamples",""
"GtGradTreeLayoutNodeProcessingStartedSignal",""
"GtGradHierarchicalConstraints",""
"GtGradHierarchicalLayoutNodeLayerSignal",""
"GtGradWestHierarchicalLayout",""
"GtGradTreeLayouter",""
"GtGradVerticalDominanceTreeLayout",""
"GtGradDominanceTreeForest",""
"GtGradFixRankHierarchyVisitor",""
"GtGradHierarchicalTreeLayoutLeafAlignment",""
"GtGradNorthHierarchicalCoordinateAssignmentStage",""
"GtGradHierarchicalLayoutAlignment",""
"GtGradHierarchicalLayoutExamples",""
"GtGradDominanceTreeLayoutExamples","!Dominance tree layoutThis layout is a variation of the tree layout which makes sure that a tree node is placed as deep as possible.  So, if a node has more than one incoming edge the tree will be formed in such a way that its parent is the deepest of all possible  parents.  An example shown below demonstrates this:${example:name=GtGradVerticalDominanceTreeLayoutExamples>>#dominanceTreeWithMultiplePathsToANodesWith9Nodes|expanded=true|expandedPreview=true|show=gtLiveFor:}$The node on the fourth level is connected to the root node, as well as the rightmost node on the third level. The bottommost node is connected to the middle node on the third level and the only node on the fifth level.  In case of the simple tree layout, a spanning tree (to which the layout will be applied) is contructed using depth-first search. This procedure would create a tree where the mentioned bottomost node would be on the fourth level, with its parent being the middle node on the third level..The following example shows the same graph , but laid out using the horizontal dominance tree:${example:name=GtGradHorizontalDominanceTreeLayoutExamples>>#dominanceTreeWithMultiplePathsToANodesWith9Nodes|expanded=true|expandedPreview=true|show=gtLiveFor:}$Other than  different contruction of the tree based on the input graph, there are no other differences between this layout and the regular tree layout. Please see its documenation for more details."
"GtGradAlgorithmsExamples",""
"GtGradTreeLayoutCorrectionSignal",""
"GtGradWestHierarchicalTreeLayout",""
"GtGradHierarchicalLayoutInitialRanksSignal",""
"GtGradNorthHierarchicalLayout",""
"GtGradTreeNodesRootAlignment",""
"GtGradAbstractTreeLayout","This an implementation of a Moen's tree layout algorithm.Moen's algorithm attempts to create a tree with a triangular shape and place nodes somewhat simetrically. It is an extension of the well-known Reingold-Tilfold algorithm. It improved the older algorithm's ability to handle non-uniform sized nodes. Moen's trees are oriented horizontally. However, this implementation offers the posibility of choosing the orientation - vertical or horizontal. The Reingold-Tilfold  algorithm, and thus Moen's also,  starts with a bottom-up traversal of the tree. It calculates left and right subtrees of a tree and merges them. When doing that, it makes sure that the parents are centered above their children. Reignold-Tilfold's algorithm  was originally designed only for binary trees, but later extended to work for non-binary ones as well.  While Reignold-Tilfold's algorithm produces a compact tree layout, Moen's strives to make a tighter one. To accomplish that, it uses shapes represented by polyline structures. These shapes are initially formed for each leaf, so that the polyline goes around the node, but leaves the left side open. During the first phase of the algorithm's execution (bottom-up traversal), these shapes  are merged - shapes of parents are merged with shapes of children. In this implementation, we call the polylines contours. When merging contours, minimum horizontal/vertical offsets at which siblings can be placed with resepct to  their upper (left) sibling (depending of the layout's orientation) are calculatedOnce the bottom-up traversal is finished,  calculation of offsets is finished as well. At that point, the tree is traversed again, but this time from top (root) to the bottom. During this second traversal, positions of the tree's nodes are set. Calculation of positions factors in the mentioned offsets, as well as the positions of the node's parent and the layout's  node and level distance properties.Additionally, this implementation supports alignment of  nodes (top, center, bottom in case of the vertical layout and left, center, right in case of the horizontal layout). This is done through calculation of differences in sizes of nodes compared to the largest nodes on the same level, as well as the differences in sizes of their parents compared to the largest nodes on the parent level.GtGradTreeLayout is  a superclass of GtGradHorizontalTreeLayout and GtGradVerticalTreeLayout classes and  contains generic tree layout methods and definitions of methods the two subclasses need to redefine.  Generally, the differences between the implementations of  the hozitonal and vertical variants  are really small, revolving around one using  or setting the x and the other y coordinates.The tree algorithms can be  used to lay out inner elements of a Bloc element or a Mondrian view."
"GtGradAbstractVerticalTreeLayout",""
"GtGradDFSTreeForest",""
"GtGradHierarchyModel",""
"GtGradHierarchicalTreeLayoutAlignment",""
"GtGradHierarchicalCoordinateAssignmentStage",""
"GtGradHierarchicalTreeLayoutExamples",""
"GtGradVerticalTreeLayoutExamples","!Vertical tree layoutThis layout orders a graph nodes so that they form a vertical tree, meaning that the root node is at the top, with all other nodes being bellow it. "
"GtGradHorizontalDominanceCenteredTreeLayoutExamples",""
"DijkstrasShortestPath",""
"GtGradKamadaKawaiLayoutDeltasSignal",""
"GtGradNorthHierarchicalTreeLayout",""
"GtGradCircleLayoutRadiusSignal",""
"GtGradHierarchicalLayout",""
"GtGradTreeNodesCenterAlignment",""
"GtGradHorizontalDominanceTreeLayout",""
"GtGradNodeContourLine",""
"GtGradHierarchyEdge",""
"GtGradHierarchicalCycleRemovalStage",""
"GtGradHierarchicalLayoutRootAlignment",""
"GtGradSouthHierarchicalLayoutExamples",""
"GtGradTreeLayoutExamples","!Tree layoutThis layout orders a graph's nodes in such a way that they form  a tree. The layout supports creation of both vertical and horizontal trees. In the first case the root node is at the top, with all of the other nodes being bellow it, as seen in the following example:${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTree|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$On the other hand,  in case of a  horizontal tree , the root node is placed to the left of all other nodes. An example can be seen below:${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTree|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$The layout allows customization of distances between levels of the tree, as well as the nodes. The default value of distance between nodes is 1, meaning that the nodes on the same level are very close to each other.  The default value of level distance is 10. The next examples showcase horizontal and vertical trees created using firstly larger than default values of the  distances, and, secondly, with a smaller level distance.Big distances:${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTreeWithBiggerDistances|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTreeWithBiggerDistances|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$Small distances:${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTreeWithSmallerDistances|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTreeWithSmallerDistances|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$The layout can also handle graph which are not trees. This is done by firstly traversing the graph using DFS and forming a tree.  An example of this feature shown bellow:${example:name=GtGradVerticalTreeLayoutExamples>>#graphWithCycles|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#graphWithCycles|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$Additionally, if the layout handles laying out a disconnected graph. That is, a graph that contains several disconnected componnents.It is possible to configure the distance between trees, as demonstrated by the next examples,  with the first one having thedefault distance between trees, and the second one a larger value of the distance parameter. The examples also demonstrate that disconnected horizontal trees are positioned one below the other, while in case of vertical trees, these components of a graph are placed one left/right of each other.${example:name=GtGradVerticalTreeLayoutExamples>>#disconnectedGraph|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#disconnectedGraphBiggerDistance|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$Another important aspect of the tree layout is that it supports alignment of nodes. More precisely, it can be specified if the nodes should have top, center or bottom alignment. In case of the horizontal layout, this actually means that nodes will have left, ceter or right alignment. Examples of different alignmets are shown in the next couple of examples:${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTreeWith10NodesOfIncreasingSizeRootAlignment|expanded=true|previewExpanded=true|previewShow=#gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTreeWithNodesOfIncreasingSizeRootAlignment|expanded=true|previewExpanded=true|previewShow=#gtLiveFor:}$${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTreeWith10NodesOfIncreasingSizeCenterAlignment|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTreeWithNodesOfIncreasingSizeCenterAlignment|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTreeWith10NodesOfIncreasingSizeLeafAlignment|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTreeWithNodesOfIncreasingLeafAlignment|expanded=true|previewExpanded=true|previewShow=gtLiveFor:}$The trees can be reversed, so that in case of  a vertical tree, the root node is at the bottom, while in case of the horizontal tree, the root node is to the right of the all other nodes. The two examples are shown next:${example:name=GtGradVerticalTreeLayoutExamples>>#simpleTreeReversed|expanded=true|expandedPreview=true|show=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#simpleTreeReversed|expanded=true|expandedPreview=true|show=gtLiveFor:}$The previous examples demonstrate that this tree algorithm tends to create compact trees. However, in some cases, this is not preferable. By setting separateSubtrees parameter's value to true, all subtrees are clearly separated. An example is seen below:${example:name=GtGradVerticalTreeLayoutExamples>>#distinctSubtrees|expanded=true|expandedPreview=true|show=gtLiveFor:}$${example:name=GtGradHorizontalTreeLayoutExamples>>#distinctSubtrees|expanded=true|expandedPreview=true|show=gtLiveFor:}$"
"GtGradAbstractTreeLayoutExamples",""
"GtGradTreeLayoutOffsetSetSignal",""
"GtGradKamadaKawaiConstraints",""
"GtGradKamadaKawaiDistanceMatrixSignal",""
"GtGradHierarchicalTreeLayout",""
"GtGradTreeLayoutCalculator",""
"GtGradVerticalTreeLayout",""
"GtGradTreeNode",""
"GtGradHierarchyCycleRemovalVisitor",""
"GtGradHierarchicalTreeLayoutRootAlignment",""
"GtGradSouthHierarchicalCoordinateAssignmentStage",""
"GtGradHierarchicalLayoutCenterAlignment",""
"GtGradEastHierarchicalLayoutExamples",""
"GtGradHorizontalDominanceTreeLayoutExamples",""
"GtGradLayoutExamples",""
"GtGradTreeLayoutNodeProcessingFinishedSignal",""
"GtGradKamadaKawaiLayout","This is an implementation of the Kamada-Kawai force-directed algorithm. The algorithm was designed witht he intention of laying out general undirected graphs. It is a spring algorithm whose  main idea is that graph theoretic distances between vertices in a graph is related to the geomentri distances between them in the drawing. "
"GtGradHierarchicalLayoutLayeringStageOutputSignal",""
"GtGradSouthHierarchicalLayout",""
"GtGradTreeVisitor",""
"GtGradAbstractHorizontalTreeLayout",""
"GtGradVerticalDominanceCenteredTreeLayout",""
"GtGradDominanceCenteredTreeForest",""
"GtGradHierarchyVisitor",""
"GtGradHierarchicalTreeLayoutCenterAlignment",""
"GtGradEastHierarchicalCoordinateAssignmentStage",""
"GtGradKamadaKawaiLayoutExamples",""
"GtGradCircleLayoutExamples","!Circle layout This layout orders a graph's nodes in a circular formation. A very basic example of this layout is shown below. The example demonstrates how 10 nodes belonging to the same container are laid out using this algorithm.${example:name=GtGradCircleLayoutExamples>>#containerWithCircleLayoutAnd10SimpleNodes|expanded=true|expandedPreview=true}$The next example show nodes of varying sizes .${example:name=GtGradCircleLayoutExamples>>#containerWithCircleLayoutAndNodesOfIncreasingSize|expanded=true|expandedPreview=true}$It can be noticed that it is not necessary to specify the circle's radius - it is automatically calculated so that the nodes do not overlap.  The following example shows this feature in action by laying out 10 nodes, much bigger than those used in the preivous example.${example:name=GtGradCircleLayoutExamples>>#containerWithCircleLayoutAnd10BigNodes|expanded=true|expandedPreview=true}$Optionally, a threshold value can be provided. If that is not the case, the radius will be calculated so that the nodes are close to each other in the resulting layout. If more space is required, the threshold can be manually specified. The larged that value is, the more space there will be between the nodes. The next example shows the same 10 nodes as in the first example, but with the distance parameter (threshold) set to  a value which is twice as big as the default one.${example:name=GtGradCircleLayoutExamples>>#containerWithCircleLayoutAnd10SimpleNodesWithDistance|expanded=true|expandedPreview=true}$The nodes don't have to be plain geometric shapes - they can be complex elements, like textual editors, as demostrated in the following example.${example:name=GtGradCircleLayoutExamples>>#containerWithCircleLayoutAnd10EditorNodes|expanded=true|expandedPreview=true}$"
"GtGradVerticalDominanceCenteredTreeLayoutExamples",""
"GtGradExamples",""
"GtGradProcessingTreeSignal",""
"GtGradSouthHierarchicalTreeLayout",""
"GtGradHierarchicalLayoutCurrentComponentSignal",""
"GtGradEastHierarchicalLayout",""
"GtGradTreeNodesLeafAlignment",""
"GtGradLayout",""
"GtGradHorizontalTreeLayout",""
"GtGradTreeForest",""
"GtGradHierarchyNode",""
"GtGradHierarchicalHybirdCrossingReductionStage",""
"GtGradHierarchicalLayoutStage",""
"GtGradWestHierarchicalLayoutExamples",""
"GtGradHorizontalTreeLayoutExamples","!Horizontal tree layoutThis layout orders a graph nodes so that they form a horizontal  tree, meaning that the root node is left of all other nodes."
"GtGraphTreemapSquarifyWorstAspectRatio","I compute worst aspect ratio based on node height and weight.See ${class:GtGraphTreemapSquarifyWorst}$ for more details and examples."
"GtGraphTreemapSquarifyAbstractStep",""
"GtGraphTreemapSliceVertical","I split an area vertically according to ${method:GtGraphTreemapNode>>#weight}$ node values.!! Example The following example shows an area with three nodes: ${example:GtGraphTreemapLayoutExamples>>#sliceVerticalWithThreeNodes|codeExpanded=false|previewExpanded=true}$."
"GtGraphMockElement",""
"GtGraphGridLayoutExamples",""
"GtGraphCircleNeighbourhoodExamples",""
"GtGraphCircleNeighbourhoodElement",""
"GtGraphTreeLayout",""
"GtGraphRadialTreeLayout",""
"GtGraphAbstractGridLayout","A ROAbstractGridLayout is xxxxxxxxx.Instance Variables	gapSize:		<Object>	lineItemsCountBlock:		<Object>gapSize	- xxxxxlineItemsCountBlock	- xxxxx"
"GtGraphTreemapLayoutConstraints","I am a ${class:BlLayoutConstraints}$ for ${class:GtGraphTreemapSquarifiedLayout}$ layout."
"GtGraphTreemapSquarifyNoRectangle","I represent a ==nil== value of a ${class:GtGraphTreemapSquarifyAreaRectangle}$."
"GtGraphTreemapSquarifyLandscapeRectangle","I represent a rectangle. My height is smaller than my width.I layout ${class:GtGraphTreemapNode}$ along my shorter side (height).I am used by ${class:GtGraphTreemapSquarifyStep}$.!! ExampleIn the following example, I occupy top-right side of a total area with ${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesFirstArea|label=#nodesCount}$ nodes:${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesFirstArea|noCode}$"
"GtGraphTreemapSlice","My subclasses implement treemap slice algorithms.See my subclasses for more details and examples: ${class:GtGraphTreemapSlice|show=gtSubclassesFor:|expanded=true}$"
"GtGraphDirectLayoutTranslator",""
"GtGraphDominanceTreeLayoutExamples",""
"GtGraphCircleEnclosureExamples",""
"GtGraphCirclePackFrontChain",""
"GtGraphAbstractVerticalTreeLayout",""
"GtGraphAbstractGraphLayout",""
"GtGraphEquidistantCircleLayout","RTEquidistantCircleLayout is a circle layout in which elements are equidistant from each other: the layout maintains the same distance between elements.Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).v addAll: elements.RTEquidistantCircleLayout on: elements.v-=-=-=-=-=-=-=-=-=-=-=-="
"GtGraphCirclePackNode","I represent a circle node in a circle pack front-chain. I know an element which I describe, and a circle object that encapsulates radius, margin and center of the node.Since I am a part of the front-chain which is a double linked list I also know the next node after me"
"GtGraphTreemapSquarifyStep","I represent one step in which ${class:GtGraphTreemapNode}$ nodes are allocated along with shorter rectangle size.I use ${class:GtGraphTreemapSquarifyAreaRectangle}$ to layout nodes.My main algorithm that split an orignal area into sub-areas is implemented in the ${method:GtGraphTreemapSquarifyStep>>#squarifyHereNode:}$ method.I use ${class:GtGraphTreemapSquarifyWorst}$ in order to decide whether a new node should be added to my area or rather a new area should be created.!! Example In the following example, you can see one are with two nodes: ${example:GtGraphTreemapLayoutExamples>>#stepWithTwoNodes|codeExpanded=false|previewExpanded=true}$If we add another node, all area nodes get less squared:${example:GtGraphTreemapLayoutExamples>>#stepWithThreeNodes|codeExpanded=false|previewExpanded=true}$The algorithm therefore decides to rather create a new area with the third node and keeps the first two nodes in the existing area. A new node is added only if the worst aspect ratio (among all area nodes) is improved. Otherwise, the new node is added to a new area.See the ${class:GtGraphTreemapSquarify}$ class comment for more details."
"GtGraphTreemapNode","I represent a ${class:GtGraphTreemap}$ node.I keep my weight and the ${class:GtGraphTreemap}$ is responsible for computing my position and extent."
"GtGraphRectanglePackTreeNode",""
"GtGraphTreemapLayoutExamples","I exemplify ${class:GtGraphTreemap}$ layout algorithm."
"GtGraphCircleLayoutExamples",""
"GtGraphTreemapSliceVerticalLayout","I implement an horizontal slice algorithm.I use ${class:GtGraphTreemapSliceVertical}$ to compute ${class:BlElement}$ children positions and extents.!! Example ${example:GtGraphTreemapLayoutExamples>>#numbersSliceVertical|codeExpanded=false|previewExpanded=true}$"
"GtGraphCircle",""
"GtGraphOptimizedForceBasedLayout",""
"GtGraphHorizontalDominanceTreeLayout",""
"GtGraphCirclePackLayout",""
"GtGraphCircleLayout","A ROCircleLayout is xxxxxxxxx."
"GtGraphTreemapSquarifyWorstPreview","I keep utility methods that are useful for ${class:GtGraphTreemapSquarifyWorst}$ inspector extention views."
"GtGraphTreemapSquarifyNoStep",""
"GtGraphTreemapSquarify","I split an area into rectangles that are close to squares (aspect ratio 1) as much as possible.I use ${method:GtGraphTreemapNode>>#weight}$ node values to split an area into.I use ${class:GtGraphTreemapSquarifyStep}$ to split area into sub-areas and measure ${class:GtGraphTreemapNode}$ positions and extends.The algorithm is implemented as described in the paper by Mark Bruls, Kees Huizing, and Jarke J. van Wij, ""Squarified Treemaps"" [*PDF>https://www.win.tue.nl/~vanwijk/stm.pdf*].!! Algorithm ExplanationThis is an adapted extract from the paper Squarified Treemaps mentioned above. Suppose we have a rectangle with width ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#width}$ and height ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#height}$, and furthermore suppose that this rectangle must be subdivided in seven rectangles with areas ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|label=#nodeValues}$. The area will be subdivided as follows:${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|noCode|codeExpanded=false|previewExpanded=true|previewShow=#gtPreviewFor:}$The *first step* of our algorithm is to split the initial rectangle. We choose for a horizontal subdivision, because the original rectangle is wider than high. We next fill the left half. First we add a single rectangle. The aspect ratio of this first rectangle is ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFirstStep|label=#worstValueRounded}$.${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFirstStep|previewExpanded=true|noCode}$Next we add a second rectangle, above the first. The worst aspect ratio improves to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSecondStep|label=#worstValueRounded}$.${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSecondStep|previewExpanded=true|noCode}$However, if we add the next (area 4) above these original rectangles, the aspect ratio of this rectangle is ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesThirdStep|label=#worstValueRounded}$.${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesThirdStep|previewExpanded=true|noCode}$Therefore, we decide that we have reached an optimum for the left half in step two, and start processing the right half. The initial subdivision we choose here is vertical, because the rectangle is higher than wider. In step 4 we add the rectangle with area 4:${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFourthStep|previewExpanded=true|noCode}$In the next step, we add area 3. The worst aspect ratio decreases from ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFourthStep|label=#worstValueRounded}$ to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|label=#worstValueRounded}$: ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|previewExpanded=true|noCode}$Addition of the next (area 2) however does not improve the result as the worst aspect ratio increases from ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesFifthStep|label=#worstValueRounded}$ to ${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSixthStep|label=#worstValueRounded}$:${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSixthStep|previewExpanded=true|noCode}$So we reject the previous step and start to fill the right top partition:${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodesSeventhStep|previewExpanded=true|noCode}$ These steps are repeated until all rectangles have been processed. The final result is the following:${example:GtGraphTreemapLayoutExamples>>#squarifyWithSevenNodes|noCode|codeExpanded=false|previewExpanded=true}$.An optimal result can not be guaranteed, and counterexamples can be set up. The order in which the rectangles are processed is important. We found that a decreasing order usually gives the best results. The initially large rectangle is then filled in first with the larger subrectangles."
"GtGraphQuadTree",""
"GtGraphRadialTreeLayoutExamples",""
"GtGraphLayoutBasicExamples","Bloc treats graph layouts, such as tree or force based, the same as typical widget layouts, such as grid or flow. The challenge comes from the fact that a graph layout depends on the notion of edges between elements, and we did not want to have elements know about edges in the core of Bloc.The solution was to split the typical edge implementation in graph visualization libraries into two distinct concepts:- Line is an element that draws the connections.- Edge defines constraints imposed by connections between elements.Thus, edges form constraints, and constraints are what layouts deal with. That is one reason why elements in bloc have the ability of defining layout-specific constraints. Using this, we can nicely define edges between elements as a plugin to Bloc, but still be able to connect arbitrary elements. What's more, it turns out that we need constraints for other layouts as well. For example, an element in a grid layout might specify the span.To understand this better, let us consider the following example:[[[example=GtGraphLayoutBasicExamples>>#elementsTreeWithEdges|expanded=true|show=gtLiveIn:]]]With this we visualize the elements that make the chicken element demo:- we create a label for each element- we find the parentLabel corresponding to the parent element- we create an edge between the parentLabel and the current labelAs can be seen in the preview, the edge is a constraint. It has no visual impact. And the graph layouts take the edge constraints into account. The cool thing is the edge class is defined next to the graph layout classes, not in the core of Bloc.To add a visual queue, we need to explicitly add a line element.[[[example=GtGraphLayoutBasicExamples>>#elementsTreeWithEdgesAndLines|expanded=true|show=gtLiveIn:]]]"
"GtGraphTreemapLayout","My subclasses implement treemap algorithms.Given ${class:BlElement}$ children must define a weight using ${method:GtGraphTreemapLayoutConstraints>>#weight:}$.Here is an example of a such definition: ${example:GtGraphTreemapLayoutExamples>>#numberElements}$See my subclasses for more details and examples: ${class:GtGraphTreemapLayout|show=gtSubclassesFor:|expanded=true}$"
"GtGraphClusterLayout","A ROClusterLayout is xxxxxxxxx.Instance Variables	externalLayer:		<Object>	maxAbcissa:		<Object>	maxLayer:		<Object>externalLayer	- xxxxxmaxAbcissa	- xxxxxmaxLayer	- xxxxx"
"GtGraphAbstractRegularTreeLayout",""
"GtGraphCellLayout","A ROCellLayout is like ROGridLayout. Elements of each column are centered along the same vertical line. And elements of each row are centered along the same horizontal line.Instance Variables	inCellPosition:		<Object | Block>inCellPosition	- Object which computes position of each element inside a cell. The cell is the space allocated for an element. Its height is maximum of heights of elements on the row. Its width is maximum of widths of elements on the column. By default elements are in the middle of their cell."
"GtGraphLayout","I am an abstract graph layout. My subclasses define the concrete algorithm."
"GtGraphTreemapSquarifyWorst","I am an abstract ==worst()== function defined in the paper by Mark Bruls, Kees Huizing, and Jarke J. van Wij, ""Squarified Treemaps"" [*PDF>https://www.win.tue.nl/~vanwijk/stm.pdf*]. The function ==worst()== gives the highest aspect ratio of a list of rectangles, given the length of the side along which they are to be laid out. I am used by ${class:GtGraphTreemapSquarifyStep}$.!! ExampleFor ${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithTwoNodes|label=#nodesCount}$ nodes that are located along the side of ${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithTwoNodes|label=#length}$ length, and with total are size of ${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithTwoNodes|label=#totalArea}$, the worst aspect ratio is ${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithTwoNodes|label=#value}$:${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithTwoNodes|previewShow=#gtPreviewFor:|previewExpanded=true|codeExpanded=falsec}$If we add to the same area another node, we end up with ${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithThreeNodes|label=#nodesCount}$ nodes and the worst aspect ratio of ${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithThreeNodes|label=#value}$ value. As this value is bigger then the previous one, ${class:GtGraphTreemapSquarifyStep}$ decides to pass the new node to a new area:${example:GtGraphTreemapLayoutExamples>>#worstAspectRatioWithThreeNodes|previewShow=#gtPreviewFor:|previewExpanded=true|codeExpanded=false}$"
"GtGraphTreemapSquarifyPortraitRectangle","I represent a rectangle. My width is smaller than my height.I layout ${class:GtGraphTreemapNode}$ along my shorter side (width).I am used by ${class:GtGraphTreemapSquarifyStep}$.!! ExampleIn the following example, I occupy top-right side of a total area with ${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesSecondArea|label=#nodesCount}$ nodes:${example:GtGraphTreemapLayoutExamples>>#squarifyWithFourNodesSecondArea|noCode}$"
"GtGraphTreemapSliceHorizontal","I split an area horizontally according to ${method:GtGraphTreemapNode>>#weight}$ node values.!! Example The following example shows an area with three nodes: ${example:GtGraphTreemapLayoutExamples>>#sliceHorizontalWithThreeNodes|codeExpanded=false|previewExpanded=true}$."
"GtGraphMockEdge",""
"GtGraphGraphHorizontalDominanceTreeLayout",""
"GtGraphCircleNeighbourhood",""
"GtGraphCircleEnclosureElement",""
"GtGraphDominanceTreeLayout",""
"GtGraphAbstractCompactTree",""
"GtGraphWeightedCircleLayout","RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small elements.Here is an example:-=-=-=-=-=-=-=-=-=-=-=-=v := RTView new.elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).v addAll: elements.RTWeightedCircleLayout on: elements.v-=-=-=-=-=-=-=-=-=-=-=-="
"GtGraphRectangle",""
"GtGraphTreemapSquarifyStepPreview",""
"GtGraphTreemapSquarifyAreaRectangle","I represent an area in which ${class:GtGraphTreemapNode}$ nodes are added by ${class:GtGraphTreemapSquarifyStep}$.I know how to layout nodes using ${method:GtGraphTreemapSquarifyAreaRectangle>>#squarifyStep:}$.See my subclasses for more details and examples: ${class:GtGraphTreemapSquarifyAreaRectangle|show=gtSubclassesFor:|expanded=true}$"
"GtGraphTreemap","My subclasses implement treemap algorithms.See my subclasses for more details and examples: ${class:GtGraphTreemap|show=gtSubclassesFor:|expanded=true}$"
"GtGraphLayoutTranslator",""
"GtGraphClusterLayoutExamples",""
"GtGraphTreemapSquarifiedLayout","I implement an horizontal slice algorithm.I use ${class:GtGraphTreemapSquarify}$ to compute ${class:BlElement}$ children positions and extents.!! Example ${example:GtGraphTreemapLayoutExamples>>#numbersSquarified|codeExpanded=false|previewExpanded=true}$"
"GtGraphCircleEnclosure","! Smallest enclosing circle of circlesI compute the smallest circle that encloses the specified array of circles. The enclosing circle is computed using the *Matoušek-Sharir-Welzl>http://www.inf.ethz.ch/personal/emo/PublFiles/SubexLinProg_ALG16_96.pdf* algorithm.The implementation is based on *d3.packEnclose(circles)>https://github.com/d3/d3-hierarchy/blob/master/src/pack/enclose.js*Let's start with an empty enclosure:${example:GtGraphCircleEnclosureExamples>>#emptyEnclosure|previewShow=#gtPreviewFor:|previewHeight=300}$and add circles one by one, starting with a larger one. A circle enclosure is represented by a cyan circle. An enclosure of a single circle is a special case and can be computed directly by ${method:GtGraphCircleEnclosure class>>#enclosure:}$. Note, that the added circle has a margin set which is taken into account by enclosure:${example:GtGraphCircleEnclosureExamples>>#enclosureWithOneCircle|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$adding a second circle expands the enclosure circle to fit both circles ==C1== and ==C2==. Two circle enclosure is also a special case and can be derived directly by ${method:GtGraphCircleEnclosure class>>#enclosure:and:}$${example:GtGraphCircleEnclosureExamples>>#enclosureWithTwoCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$Three circle enclosure is a special case too. ${method:GtGraphCircleEnclosure class>>#enclosure:and:and:}$ is responsible for the computation. Let's add the third circle to our enclosure to see the result: ${example:GtGraphCircleEnclosureExamples>>#enclosureWithThreeCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$Starting with four circles, an enclosure should be computed recursively by building and updating a basis enclosure consisting of one to three circles: ${method:GtGraphCircleEnclosure class>>#enclosureAll:}$. ${example:GtGraphCircleEnclosureExamples>>#enclosureWithFourCircles|previewShow=#gtPreviewFor:|previewExpanded|previewHeight=300}$"
"GtGraphRectanglePackLayout",""
"GtGraphHorizontalTreeLayout",""
"GtGraphEdgeDrivenLayout",""
"GtGraphAbstractWeightedCircleLayout","I am the abstract root class of weighted circle layout. Look at the class comments of my subclasses for more details."
"GtGraphUtilities","I am useful to exemplify rectangles witch may represent ${class:BlBounds}$ of an ${class:BlElement}$.!! ExamplesI can draw a rectangle with margin: ${example:GtGraphTreemapLayoutExamples>>#rectangleWithMarginUtility|codeExpanded=false|previewExpanded=true}$I can draw a rectangle with bounds values:  ${example:GtGraphTreemapLayoutExamples>>#rectangleWithMarginAndInformationUtility|codeExpanded=false|previewExpanded=true}$"
"GtGraphTreemapSquarifyRejectedStep","nextStep	^ self step nextStep"
"GtGraphTreemapRectangle","I am an abstract rectangle and I know my position and extent.See my subclasses for more details and examples: ${class:GtGraphTreemapRectangle|show=gtSubclassesFor:|expanded=true}$"
"GtGraphRectanglePackTree",""
"GtGraphRectanglePackLayoutExamples",""
"GtGraphLayoutExamples",""
"GtGraphTreemapSliceHorizontalLayout","I implement an horizontal slice algorithm.I use ${class:GtGraphTreemapSliceHorizontal}$ to compute ${class:BlElement}$ children positions and extents.!! Example ${example:GtGraphTreemapLayoutExamples>>#numbersSliceHorizontal|codeExpanded=false|previewExpanded=true}$"
"TGtGraphLayoutUtils",""
"GtGraphForceBasedLayout","A ROForceBasedLayout is inspired from the Code of D3. The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.Instance Variables	alpha:		<Object>	center:		<Object>	charge:		<Object>	charges:		<Object>	fixedNodes:		<Object>	friction:		<Object>	gravity:		<Object>	layoutInitial:		<Object>	length:		<Object>	lengths:		<Object>	nodes:		<Object>	oldPositions:		<Object>	strength:		<Object>	strengths:		<Object>	theta:		<Object>	weights:		<Object>alpha	- xxxxxcenter	- xxxxxcharge	- xxxxxcharges	- xxxxxfixedNodes	- xxxxxfriction	- xxxxxgravity	- xxxxxlayoutInitial	- xxxxxlength	- xxxxxlengths	- xxxxxnodes	- xxxxxoldPositions	- xxxxxstrength	- xxxxxstrengths	- xxxxxtheta	- xxxxxweights	- xxxxx"
"GtGraphAbstractHorizontalTreeLayout",""
"GtGraphGridLayout","A ROGridLayout places elements as a grid.Instance Variables	gapSize:		<SmallInteger>	lineItemsCountBlock:		<BlockContext>gapSize	- number of pixels between each elements, horizontally and verticallylineItemsCountBlock	- tells the amount of item per line should be used"
"GtGraphAbstractCircleLayout","A ROAbstractCircleLayout is xxxxxxxxx.Instance Variables	factor:		<Object>	initialAngle:		<Object>	initialIncrementalAngle:		<Object>	initialRadius:		<Object>factor	- xxxxxinitialAngle	- xxxxxinitialIncrementalAngle	- xxxxxinitialRadius	- xxxxx"
"GtBoxerArrayU16Examples",""
"GtBoxerArray",""
"GtBoxerUint128",""
"GtBoxerSizeU64Examples",""
"GtBoxerPoint3F32",""
"GtBoxerPointF32Examples",""
"GtBoxerArrayU8",""
"GtBoxerLibrary",""
"GtBoxerReferenceBox",""
"GtBoxerSizeI32",""
"GtBoxerSizeF64Examples",""
"GtBoxerPointF64",""
"GtBoxerArrayU8Examples",""
"GtBoxerArrayF32",""
"GtBoxerExternalStructure",""
"GtBoxerStringExamples",""
"GtBoxerSize",""
"GtBoxerPointF64Examples",""
"GtBoxerArrayUInt",""
"GtBoxer",""
"GtBoxerString",""
"GtBoxerSizeU32",""
"GtBoxerSizeI32Examples",""
"GtBoxerPointI32",""
"GtBoxerArrayUIntExamples",""
"GtBoxerArrayPointF32",""
"GtBoxerPointF32Structure",""
"GtBoxerUint128Examples",""
"GtBoxerSizeF32","I am a copy of class GtBoxerSizeF64. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"GtBoxerPointI32Examples",""
"GtBoxerPoint",""
"GtBoxerArrayF32Examples",""
"GtBoxerValueBox",""
"GtBoxerSizeU64",""
"GtBoxerSizeU32Examples",""
"GtBoxerPoint3","I am a copy of class GtBoxerPoint. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"GtBoxerPoint3F32Examples",""
"GtBoxerArrayU16",""
"GtBoxerUint128Structure","I am a structure variant of ${GtBoxerUint128}$"
"GtBoxerExternalObject",""
"GtBoxerSizeF64",""
"GtBoxerSizeF32Examples",""
"GtBoxerPointF32",""
"GtClipboardContext",""
"GtClipboardLibrary",""
"GtClipboard",""
"GtCoderClassUpdatedAnnouncement",""
"GtSearchClassesInPackageFilter",""
"GtClassCoderNavigationSelectionChanged",""
"GtSearchIntersectionFilter",""
"GtCoderPrintStringAttribute",""
"GtFilteredMethodsCoder",""
"GtPackageCoderElement",""
"GtCoderSpotterStart",""
"GtCoderContentElement",""
"GtASTPatternHighlighter",""
"GtClassCoderElement",""
"GtCoderExpandableBaselineStyler",""
"GtSyncScrollRange",""
"GtCoderAction",""
"GtSearchTypedGroupResult",""
"GtCoderEvaluationUnhandledError",""
"GtClassCommentCoder",""
"GtSearchPragmasFilter",""
"GtCoderElement",""
"GtCoderExpanderLook",""
"GtSearchMethodsContainedInClassFilter",""
"GtCodersAnnouncement",""
"GtSearchASTFilter",""
"GtCoderMainActionsChanged",""
"GtSearchTypedEntitiesFilter",""
"GtCodersDataSource",""
"GtSearchFilter",""
"GtPackageCoder",""
"GtMethodsCoder",""
"GtProcessCoderElement",""
"GtSelectorReferenceAndLiteralHighlighter",""
"GtPackageCardElement",""
"GtVariableExplanationLinkStyler","I add a yellow circle adornment to variables in a text. The variables are argument node, temporary nodes, self nodes, super node and global nodes."
"GtContextCoderVariableLook",""
"GtCoderCommentStyler",""
"GtBlockCoderEvaluationRequester",""
"GtMethodContextCoder",""
"GtSearchGroupResult",""
"GtPackageClassesCompletionStrategy",""
"GtClassCoderPackagesAndHierarchyNavigation",""
"GtSearchMethodsWithClassPatternFilter",""
"GtCodersScrollToCoder",""
"GtSearchImplementorsFilter",""
"GtCoderPackageUpdatedAnnouncement",""
"GtSearchTestClassesFilter",""
"GtCoderContextActionsChanged",""
"GtSearchNegationFilter",""
"GtSourceCoderErrorAttribute",""
"GtPackagesCoder",""
"GtClassCoder",""
"GtClassDefinitionsCoder",""
"GtCoderNavigationPackagesTreeElement",""
"GtImplementorPatternHighlighter",""
"GtCoderCardElement",""
"GtCompositeExplanationLinkStyler",""
"GtYellowCircleExplanationTextAdornment",""
"GtSourceCoderAddOns",""
"GtSearchPackageGroupResult",""
"GtCoderToggleLook",""
"GtClassDefinitionCoder",""
"GtSearchDeprecatedPackagesFilter",""
"GtBaselinePackageCompletionStrategy",""
"GtClassCoderPackagesPanesNavigation",""
"GtSearchMethodsInInstanceAndClassSideFilter",""
"GtCodersCoderRemoved",""
"GtSearchImageMethodsFilter",""
"GtCoderEvaluationAnnouncement",""
"GtSearchDeprecatedClassesFilter",""
"GtClassCoderPackagesFilterStringChanged",""
"GtSearchUnionFilter",""
"GtExampleStatusAttribute",""
"GtClassMethodsCoder",""
"GtPackageTagCoderElement",""
"GtCoders",""
"GtCoderNavigationPackagesAndHierarchyElement",""
"GtCompositeHighlighter",""
"GtClassesElement",""
"GtCoderExpandableMethodStyler",""
"GtSyncScrollRanges",""
"GtCoderDropDownAction",""
"GtSearchClassGroupResult",""
"GtSelectorKeywordAttribute",""
"GtSourceCoder",""
"GtSearchReferencesFilter",""
"GtBaselineCompletionStrategy",""
"GtCoderElementHolder",""
"GtSearchMethodsInClassFilter",""
"GtCodersCoderAnnouncement",""
"GtSearchDeprecatedMethodsFilter",""
"GtCoderRequestFocus",""
"GtSearchClassesFilter",""
"GtClassCoderNavigationAnnouncement",""
"GtSearchBinaryFilter",""
"GtPackageTagCoder",""
"GtExampleGroupCoder",""
"GtDiffElement",""
"GtVariableReferenceHighlighter",""
"GtPackageTagCardElement",""
"GtSourceReferenceHighlighter",""
"GtMethodCoderCategoryLook",""
"GtCoderContextVariableStyler",""
"GtSourceCoderEvaluationRequester",""
"GtPharoSnippetCoder",""
"GtSearchNullGroupResult",""
"GtPackagesCompletionStrategy",""
"GtCoder",""
"GtSearchMethodsWithPackagePatternFilter",""
"GtPackagesCoderNavigationAnnouncement",""
"GtReplaceTextCompletionAction",""
"GtSearchMethodCategoryFilter",""
"GtCoderRefreshStackAnnouncement",""
"GtSearchMethodsFilter",""
"GtCoderExpandedChanged",""
"GtSearchNullFilter",""
"GtClassBreadcrumbToggleLook",""
"GtExtractMethodController",""
"GtCoderClassSelector",""
"GtClassesCoder",""
"GtCodersElement",""
"GtPragmaHighlighter",""
"GtClassCardElement",""
"GtSelectorExplanationLinkStyler","I add a yellow circle adornment to selectors in a text. The selectors are pragma nodes, literal nodes and message nodes."
"GtCoderExampleStatusStyler",""
"GtCoderBodyStyler",""
"GtSourceCoderRequester",""
"GtCategoryToggleLook",""
"GtMethodCoder",""
"GtSearchImagePackagesFilter",""
"GtCoderClassWithPackageCompletionStrategy",""
"GtClassCoderPackagesTreeNavigation",""
"GtSearchMethodsInPackageFilter",""
"GtCodersCodersChanged",""
"GtSearchImplementorPatternFilter",""
"GtCoderNavigationModelChangedAnnouncement",""
"GtSearchImageClassesFilter",""
"GtCoderAnnouncement",""
"GtSearchBlockFilter",""
"GtReorderParametersAttribute",""
"GtProcessCoder",""
"GtPackagesCoderElement",""
"GtClassCommentsCoder",""
"GtCoderNavigationPackagesPanesElement",""
"GtImplementorHighlighter",""
"GtCoderActionsElement",""
"GtSourceExplanationLinkStyler",""
"GtWatchExpression",""
"GtCoderAddOns",""
"GtSearchMethodGroupResult",""
"GtSourceCoderTextStyler",""
"GtBlockCoder",""
"GtSearchPackagesFilter",""
"GtBaselineOfClassCompletionStrategy",""
"GtClassCoderNavigationModel",""
"GtSearchInstanceVariableReferenceFilter",""
"GtCodersCoderAdded",""
"GtSearchIFixedMethodsFilter",""
"GtSearchMethodReferencesFilterExamples",""
"GtMethodCoderByScripterExamples",""
"GtMethodCoderTaskExamples",""
"GtPharoSnippetCoderExamples",""
"GtSearchMethodsContainedInClassFilterExamples",""
"GtBlockCoderExamples",""
"GtFilterStubSampleA",""
"GtMethodCoderActionExamples",""
"GtSearchClassFilterExamples",""
"GtSearchPackageFilterExamples",""
"GtClassCoderExamples",""
"GtFilterStubSampleB",""
"GtMethodCoderStylerExamples",""
"GtSearchMethodFilterExamples","!Method filter examples!!Implementors${example:GtSearchMethodFilterExamples>>#implementorsOfThisMessage}$!!Package pattern${example:GtSearchMethodFilterExamples>>#packagePatternFilter}$!!Pragmas${example:GtMethodsCoderExamples>>#gtExamplesFilter}$!!References==gtReferences== can be applied to several objects. Class references:${example:GtSearchMethodReferencesFilterExamples>>#referencesToSampleB|previewShow=gtItemsFor:}$Selector references:${example:GtSearchMethodReferencesFilterExamples>>#referencesToThisSelector}$Number references${example:GtSearchMethodReferencesFilterExamples>>#referencesTo42}$!!Intersection${example:GtSearchMethodReferencesFilterExamples>>#gtExamplePragmasAndReferencesToMethodCoder}$!!Union@@todo"
"GtCoderExamples",""
"GtMethodCoderExamples",""
"GtMethodsCoderExamples",""
"GtSystemS1SubclassC2",""
"GtSystemS1SubclassOfC2C4",""
"GtSystemS1RootClassC1",""
"GtSystemS1SubclassC3",""
"GtSystemS1AnotherClassC3",""
"GtCompleterExamples",""
"GtCompletionStrategy",""
"GtCompletionShortcutHander","I am a custom shortcut handler to be used by completion controller.I only process shortcuts if a completion popup is opened, otherwise I ignore them"
"GtPreviewCompletionAttribute",""
"GtCompletionController","!! Class invariants- action preview is visible then and only then when there is a selected action in the popup list!! Behaviour- whenever selection in the popup list changes a preview is updated accordingly, therefore there is no need to manually control it"
"BrRBMethodBodyTextStyler",""
"GtRenamerExamples",""
"GtCompletionCancelPreviewSignal",""
"GtKeywordCompletionAction",""
"GtPreviewDeletionAttribute",""
"GtCompositeRenameAction",""
"GtCompletionApplyPreviewSignal",""
"GtBinaryCompletionAction",""
"GtCompletionStrategyAttribute",""
"GtRenameAction",""
"GtRenameActionAnnoucement",""
"GtParenthesizedMessageCompletionAction",""
"GtCompletionPartAttribute",""
"GtPrefixTreeExamples",""
"GtCompleterCompletionAccepted","I indicate that an entry for from the completion dialog was accepted and inserted in the text."
"GtInsertTextCompletionAction",""
"GtCompletionPopupListener",""
"GtCompositePrefixTreeExamples",""
"GtPrefixTree",""
"GtDeleteTextCompletionAction",""
"GtWeightedStringsCompletionStrategy",""
"GtCompositePrefixTree",""
"GtCompositeCompletionAction",""
"GtStringsCompletionStrategy",""
"GtCompletionPopupElement",""
"GtCompletionAction",""
"GtPharoCompletionStrategy",""
"GtRenameAttribute",""
"GtPharoMessageNode",""
"GtPharoMessageSendNode",""
"GtPharoReturnNode",""
"GtPharoErrorNode",""
"GtPharoProgramNode",""
"GtPharoSymbolLiteralNode",""
"GtPharoPragmaErrorNode",""
"GtPharoCascadeNode",""
"GtPharoParser",""
"GtPharoStringLiteralNode",""
"GtPharoPragmaNode",""
"GtPharoBlockErrorNode",""
"GtPharoNumberLiteralNode",""
"GtPharoErrorPatternNode",""
"GtPharoBlockNode",""
"GtPharoNilLiteralNode",""
"GtPharoMethodPatternNode",""
"GtPharoAssignmentNode",""
"GtPharoCharacterLiteralNode",""
"GtPharoMethodNode",""
"GtPharoArrayNode",""
"GtPharoBooleanLiteralNode",""
"GtPharoUnaryMessageNode",""
"GtPharoProgramNodeVisitor",""
"GtPharoValueNode",""
"GtPharoByteArrayLiteralNode",""
"GtPharoKeywordMessageNode",""
"GtPharoScanner",""
"GtPharoMethodSequenceNode",""
"GtPharoArrayLiteralNode",""
"GtPharoBinaryMessageNode",""
"GtPharoVariableNode",""
"GtPharoSequenceNode",""
"GtPharoLiteralNode",""
"GtConnectorExamples",""
"GtConnectorButtonsChanged",""
"GtConnectorButtonRemovedEvent","Is sent after button is removed from the scene graph."
"GtConnectorElementContext",""
"GtConnectorButtonCreatedEvent","Is sent by ButtonAttribute after button is created.I allow Connector to be notified and attach its own additional handlers to newly created button"
"GtConnectorButtonAttributeCreatedEvent","I am sent by styler when it creates a button attribute"
"GtExplainerTargetLook",""
"GtConnectorButtonAddedEvent","Is sent after button is added to the scene graph"
"BlElementRemovedFromSceneGraph",""
"BlVocalElement","I am an element that sends explicit events for the addition and removal from the scene graph."
"BlElementAddedToSceneGraph",""
"GtExplainerExamples",""
"GtConnectorExampleStyler",""
"GtConnectorTargetElement",""
"GtConnectorStylerEvent","I am an event sent by styler"
"GtConnectorLinkDeletedEvent","Is sent by styler when logical link between methods disappeared since previous styling operation"
"GtConnectorTextButtonAttribute",""
"GtInspectorConnectorSwitchStencil",""
"GtConnectorOptions",""
"GtConnectorSourceElement",""
"GtConnectorLinkCreatedEvent","Is sent by styler when it detects a new logical link between methods since previous styling operation"
"GtExplainerElementContext",""
"GtConnectorTextButtonElement",""
"GtConnectorLink","I describes a logical connection (link) between methods"
"GtConnectorButtonsChangedByStyler",""
"GtExplainerExplanationAttribute",""
"GtConnector",""
"GtConcreteConstraintStatus",""
"GtCompositeConstraint",""
"GtConstraintStatus",""
"GtConstraint","I represent a generic constraint. My subclasses define concrete constraints.In general, a constraint defines a condition that a system must adhere to. I specifically do not know anything except for retrieving the ${method:GtConstraint>>#status}$. See ${class:GtConstraintStatus}$."
"GtAnonymousConstraintStakeholder",""
"GtConstrainerCommandLineHandler",""
"GtConstrainerHudsonReporter",""
"GtConstraintStakeholder",""
"GtSampleConstraintExamples",""
"GtSampleConstraintWithoutIssues",""
"GtDynamicConstraintStatus",""
"GtSampleConstraintWithIssues",""
"GtNeutralConstraintStatus",""
"GtSampleConstraintWithError",""
"GtConstraintWithoutIssuesStatus",""
"GtLeafConstraint",""
"GtConstraintWithIssuesStatus",""
"GtSampleConstrainerReport",""
"GtConstraintWithErrorStatus",""
"GtConstrainerReport",""
"GtReturnPragmasShouldPointToExistingClasses",""
"GtGtoolkitArchitecturalReport",""
"GtClassWithCommentsContainingMissingReferences",""
"GtCoderContextVariableButtonStyler",""
"GtStackDebuggerElement","process ifNotNil: [process terminate].context := [ '11211212' printString ] asContext.process := Process	forContext: context	priority: Processor userInterruptPriority.	debuggingSession := (process 	newDebugSessionNamed: 'test debugging' 	startedAt: process suspendedContext).20 timesRepeat: [ 	debuggingSession stepInto ].GtDebugger openSwitcherInInspectorOn: debuggingSession."
"GtDebuggerStackElement",""
"GtCoderContextVariableValueStyler",""
"GtBytecodeDebugger","process ifNotNil: [process terminate].context := [ '11211212' printString ] asContext.process := Process	forContext: context	priority: Processor userInterruptPriority.	debuggingSession := GTBytecodeDebuggerSession 	named: 'test debugging' 	on: process 	startedAt: process suspendedContext.21 timesRepeat: [ 	debuggingSession stepInto ].GtBytecodeDebugger openInspectorOn: debuggingSession."
"GtEmbeddedDebuggerElement",""
"GtEmbeddedDebuggerExamples",""
"GtDebuggerElement",""
"GtOldExpandableDebugger",""
"GtMoldableDebuggerElement",""
"GtEmbeddedDebuggerAttribute",""
"GtExpandableDebuggerElement",""
"GtDebuggerExpandableStackElement",""
"GtBeaconMethodSignal",""
"GtEmergencyDebugger",""
"GtABPreviewMorph","browser := GLMTabulator new.	browser		column: #one;		column: #two.	browser		transmit to: #one;		andShow: [ :canvas | 			 canvas list				format: #fullName;				icon: #icon ].	browser		transmit to: #two;		from: #one port: #selection;		andShow: [ :canvas | 			canvas morph				display: #previewMorph ].	^ browser openOn: self"
"GtABDomainObject","I am the root of all domain object for the address book application"
"GtABContact","I model an entry in an address book"
"GtABAddressBookTest","This class contains tests"
"GtABCartoonAddressBookExample",""
"GtABAddressBook","I model an address book that can hold a list of contacts."
"GtABAddress","I hold all data relevant for an address"
"GtABTelephone","I model a simple telefon number"
"GtABAddressBookExample","Address books are instances of the class ${class:GtABAddressBook}$.[[[ 	GtABAddressBook new		label: 'My contacts'.]]]Contacts are then instances of ${class:GtABContact}$. They can have several properties, like name, address, description.${example:GtABAddressBookExample>>#janeDoeContact}$This contact will be dispayed then in the user interface as follows:${example:GtABAddressBookExample>>#johnDoeContact|show=#gtViewPreviewOn:|noCode}$Contacts can be added using the ${method:GtABAddressBook>>#addContact:}$${example:GtABAddressBookExample>>#myContactsAddressBook}$The class ${class:GtABCartoonAddressBookExample}$ contains an example of a larger address book.${example:GtABCartoonAddressBookExample>>#cartoonAddressBook}$"
"ManifestGToolkitDemoCognitiveServicesFaceAPI","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtCSFace","I model a face detected in a picture object.I store properties for the face object, including the rectangle delimiting the face within a ${class:GtCSPicture}$ object, face attributes (see ${class:GtCSFaceAttributes}$), and face landmarks (see  ${class:GtCSFaceLandmarks}$). I also point to the picture object that contains the face.${example:GtCSPictureExamples>>#faceSolovineWithLandmarksInPicture|noCode|previewShow=gtFaceLandmarksViewFor:}$The reactangle delimiting a face and its properties and landmarks can be added to a face, even if the face has not yet a graphical representation.${example:GtCSPictureExamples>>#faceSolovineWithLandmarks}$If the face is added to a picture, then its graphical representation is given by cropying the portion give by the rectangle attribute the from the picture.${example:GtCSPictureExamples>>#faceSolovineWithLandmarksInPicture}$The recommended way to initialize a face object is using JSON data. See <Adding faces from JSON files> for more details."
"GtCSFaceApiDetectRequest","I model a detect request for the Azures Face API.A detect request returns various informations about the faces from a given picture. I provide an API for configuring what properties should be computed."
"GtCSFaceAttributes","I store properties related to various attributes of a face, like age and gender."
"GtCSPicture","I model a picture that can contain a list of detected faces. I maintain a list of ${class:GtCSFace}$ objects representing the faces detected within this picture and a ${class:Form}$ object holding the graphical representation of the picture.  I provide support for adding and removing faces, and setting a graphical representation directly, or by either reading it from a file or downloading it from a URL.${example:GtCSPictureExamples>>#pictureWithFacesAndForm|noCode|previewShow=gtPictureFor:}$!!InstantiationNew instances are created by directly instantiating the class. These instances have no face data or graphical representation by default. ${example:GtCSPictureExamples>>#newPictureInstance}$Currently a picture objects stores the URL from where the picture can be downloaded. This is just a temporary behaviour and should be removed in the future.${example:GtCSPictureExamples>>#emptyPicture}$!!Adding a graphical representationTo explicitly add a graphical representation there are several alternative:- set an URL to the picture and load the graphical representation from that URL; ${example:GtCSPictureExamples>>#pictureWithManuallySetForm}$- load the graphical representation from a file on disk;${example:GtCSPictureExamples>>#pictureWithManuallySetForm}$- directly set a ${class:Form}$ as the graphical representation using ${method:GtCSPicture>>#pictureForm:}$.${example:GtCSPictureExamples>>#pictureWithManuallySetForm}$!!Adding face information.The main way to load face information is by calling ${method:GtCSPicture>>#addFace:}$. Before adding faces ${method:GtCSPicture>>#ensureFacesStorage}$ needs to be called to initialize the storage for faces. Faces can be added to a picture even if the picture does not have a graphical representation.${example:GtCSPictureExamples>>#pictureWithFacesAndNoForm}$Face information can also be loaded from a JSON file. See <Adding faces from JSON files> for more details.!!Implementation detailsThe fact that the attribute ==faces== is not null indicates that a client of this object already added face data to the picture. An empty list indicates that the picture has no face objects. See <Understanding face storage> for more details."
"GtCSFaceApiClient","I am the main client for communicating with the Face API provided by Azures. I can instantiate different types of requests encapsulating commands that can be done with the Face API.Currently I only provide the detect request."
"GtCSFaceProperties","I store properties related to a face object. Subclasses can extend me to add different types of properties or provide dedicated APIs for working with properties."
"GtCSFaceLandmarks","I store properties that identify various face landmarks from a face like, the position of the eyes and the nose. "
"GtCSInspectorFaceBlocElement",""
"GtCSInspectorPictureBlocElement",""
"GtCSDocumentExamples","I contain example of documents for the Face API"
"GtCSExamplesData","I provide example data for creating pictures and faces. I can be used when a subscription key for the Azures Face API is not available."
"GtCSPictureTest","This class contains tests"
"GtCSPictureExamples","To highlight faces within pictures we first need to create face objects. When creating a face we need to indicate the countour delimiting the face using the ==rectangle:== method.${example:name=GtCSPictureExamples>>#faceEinstein}$Landmakes are used to indicate the position of different elements on a face, like nose, eyes, mouth, etc. Initially a face has no landmarks. We can attach them to a ==Face== object using the method ==landmarks:==.${example:name=GtCSPictureExamples>>#faceEinsteinWithLandmarks|previewExpanded=true|previewShow=gtFaceLandmarksViewFor:}$In case the face object is already attached to a picture with a graphical representation, we can see the landmarks overlayed on the actual face.${example:name=GtCSPictureExamples>>#faceEinsteinWithLandmarksInPicture|previewExpanded=true|previewShow=gtFaceLandmarksViewFor:}$To create an empty picture we can directly instantiate the ==Picture== class. We can also specify a URL from where the graphical representation of the can be downloaded.${example:name=GtCSPictureExamples>>#emptyPicture}$To add faces to a picture we can use the ==addFace:== method. We can add faces before the face has a graphical representation.${example:name=GtCSPictureExamples>>#pictureWithFacesWithLandmarksAndNoForm|previewExpanded=true|previewShow=gtFacesFor:}$Finally, to see the position of faces we can all the ==ensurePictureForm== method. This method downloads the graphical representation from the URL atached to the picture.${example:name=GtCSPictureExamples>>#pictureWithFacesWithLandmarksAndForm|previewExpanded=true|previewShow=gtFacesFor:}$"
"ManifestGToolkitDemoCognitiveServicesFaceAPIExamples","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtCSGalleryImageMorphOld",""
"GtCSInspectorFaceMorph","I am a morph that can highlight on a face object the landmarks associated with the face."
"GtCSInspectorPictureMorph","I am a morph that can highlight on a picture the list of faces from that picture."
"ManifestGToolkitDemoCognitiveServicesFaceAPIExtensions","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtCSGalleryDataSource","I am a data source that provides pictures. I provide support for lazyly loading pictures, as well as for lazily loading  the form associated with a picture and calling the Azure Face API."
"GtCSGalleryExamples","I provide examples of galeries."
"GtCSGalleryMorph","I am a morph that displays a list of pictures.I use a CSGalleryDataSource for accessing the pictures that I should display."
"GtCSGalleryPictureMorphHolder","I am an element of an infinite list that can hold a picture wrapper."
"GtCSGalleryPictureMorph","I am a bloc morph that displays a picture and highlights all faces from that picture."
"GtCSGalleryPictureWrapper","I wrap a picture object and add support for loading the picture form and the face data."
"ManifestGToolkitDemoCognitiveServicesFaceAPIUI","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtTour",""
"GtExampleDrivenExplanation",""
"GtOneRenderingTree",""
"GtMoldableDevelopmentExplanation","!Moldable developmentSoftware is highly contextual.Context has many forms. Simply choosing one framework over the other will change your constraints, the code will be organized differently, and the debugging problems will be different. All these will pose different needs, and tools have to acommodate them.A tool that gives you a button encodes in that button an assumption about your specific question and bakes the solution in the response. However, when context is king, we cannot predict specific problems. We can only predict classes of problems.For tools to be effective, they need to take that context into account.!!McLuhan's law, or why tools are essential in software engineeringIn a brilliant summary of Marshall McLuhan's work, John Culkin warned us that ''We shape our tools, and thereafter our tools shape us''. This is a remarkable statement that deserves closer scrutiny. If it is correct, we should explicitly choose the tools we use because they will determine the way we are going to think.If you are like most people, you have checked your smartphone within 10 minutes of waking up this morning. This need did not exist before the introduction of the smartphone. The correlation indicates that is not unreasonable to view the tool as having manufactured the need.Software is  data.  Data does not have a shape. Yet, we need shape to reason about it. The shape of software is provided by the tool. That makes the tool essential. So, what characteristics should the tool have?!!Moldability and humane assessmentAs an example, let us consider inspecting the object corresponding to the current working directory. A default inspector would show this. It's an accurate description of the variables of the ${class:FileReference}$ instance.${example:FileReference class>>#gtExampleDirectory|noCode|previewShow=#gtRawFor:|previewHeight=150}$Now consider this view of the same object.${example:FileReference class>>#gtExampleDirectory|noCode|previewShow=#gtItemsFor:|previewHeight=150}$Which one is more recognizable? Which one makes you feel more comfortable relating to. Likely the second one. We do not have to think whether the instance represents a file or a directory. The view clearly shows a the contents of the directory through a view that is common in file browsers. While the first view is generic in that it is applicable to any object, the second one is useful exactly because it is specific. In fact, each point of view can benefit from a specific view. It is for this reason that the inspector offers multiple views and enables you to craft your own for every single object.${example:FileReference class>>#gtExampleDirectory|noCode|previewHeight=200}$This was an example of using the inspector. Learn more about the inspector at ${class:BaselineOfGToolkitInspector}$. To exploit the full potential of the Glamorous Toolkit you need to contextualize it by programming it. To this end, the Glamorous Toolkit offers multiple ways to extend the tools and to express views and other interactions. Throughout the environment the goal of the engines is to make the cost of custom tools to be as inexpensive as possible. This applies to how you search (see ${class:BaselineOfGToolkitSpotter}$), how you  write code (see ${class:BaselineOfGToolkitCoder}$) or how you debug.This apparently small change in perspective has a dramatic influence on how you can approach software systems. We call this moldable development.!!Example-drivenFor every development problem, we create views that make the problem apparent and help us explain our system.  The power of a live dynamic  environment lies with objects, rather than static code. When working with Glamorous Toolkit and Pharo, we want to favor the development in the presence of live objects.Tests are a source of objects. A test creates an object and asserts a property, so beside the testing side of it, a test also creates a beautiful object. If only we could make tests provide these beautiful objects. Enter examples. An example is like a test that returns an object. It’s a small change with large effects.Take an introductory example-driven development tutorial:${icebergFile:path=feenkcom/gtoolkit-examples/doc/tutorial/examples-tutorial.pillar}$!!Demo-drivenOnce these views exist, we want to be able to produce larger narratives as well. Like with any piece of data, there are many narratives to tell about code,  to capture multiple facets. This document is a narrative. And so is a document explainaing an algorithm, like the one found in ${class:GtGraphTreemapSquarify}$.Narratives are powerful tools. Only when it comes to software, it's the system that has to carry the narrative.@@todo!!Explainable softwareThe ultimate of moldable development is explainable software."
"GtNnBiasNeuron",""
"GtNnActivator",""
"GtNnTangentActivator",""
"GtNnOutputLayer",""
"GtNnSynapse",""
"GtNnConstantActivator",""
"GtNnLayer",""
"GtNnNetwork","[[[network := GtNnNetwork new.network inputs: 2.network outputs: 2.network hidden: 0 of: 5.network connectAll.network input: { 1 . 2 }]]]"
"GtNnRectifierLinearActivator",""
"GtNnHiddenLayer",""
"GtNnNeuron","[[[x0 := GtNnNeuron new constant: 1.x1 := GtNnNeuron new constant: 0.x2 := GtNnNeuron new constant: 1.y := GtNnNeuron new.(x0 ==> y) weight: 10.(x1 ==> y) weight: -15.(x2 ==> y) weight: 10.y]]]"
"GtNnNeuronStencil",""
"GtNnSigmoidActivator",""
"GtNnInputLayer",""
"PharoMethodExample",""
"GtElementsSlide","I am a Slide desgine that gets a collection of elements and displays them. I can be included in presentations."
"GtPharo101","I am a tutorial presentation for beginners."
"GtTextSlide","I am a Slide desgine that gets a Text and displays it. I can be included in presentations."
"GtWhatMakesBlocSpecialExplanation","!What makes Bloc special The Glamorous Toolkit is based on the ${class:BaselineOfSparta}$ / ${class:BaselineOfBloc}$ /${class:BaselineOfBrick}$ graphical stack. This stack has a few properties that make it distinct:- it relies on one rendering tree at all times.- it features a moldable and scalable text editor, made out of regular Bloc elements. - graph layouts are regular layouts. The implication here is that any element can be part of a graph-based visualization.- debuggable. There are a significant amount of tools and mechanisms that are built for this.Let us take them one by one by means of examples.!!One rendering treeEverything you see in this window is rendered using one single rendering tree, all the way from the buttons, to the words in the text and to the visualization seen below. One single rendering tree. This offers the possibility to build flexible user interfaces and debug them using the same tools.!!Moldable editor made of regular elementsThe editor is made out of regular elements. This means that we can mix text with graphics in live editors. To get an idea of what this means, take a look at the editor example below.${example:GtWhatMakesBlocSpecialExplanation>>#editorOnSampleText|noCode=|previewHeight=100|previewShow=#gtLiveFor:}$Below we have a visualization of the tree of elements out of which the editor element is formed. You can observe how the leafs are word elements and the red square sits right next to them.${example:GtWhatMakesBlocSpecialExplanation>>#editorOnSampleText|noCode=|previewHeight=300|previewShow=#gtEditorElementsFor:}$This ability is what allows the current document to display results live in the same editor, such as the example above. In this case, the preview is actually added by the syntax highlighter that interprets the ==$ { example: ... } $== command.Learn more details about the editor at ${class:GtWhatIsTheMoldableEditorMadeOfExplanation}$!!Graph layoutsThe graph layouts in Bloc are expressed in the same way as any other layout. This was a challenge in that graph layouts rely on a structure that includes nodes and edges. Specifically, the challenge was to build this logic without having ${class:BlElement}$ know about edges explicitly.Every layout encapsulates an algorithm whose execution logic depends on the constraints specified for each individual element. And, to support graph layouts, each element defines the relevant edges as constraints.Let's consider a concrete scenario. The example below shows all subclasses of ${class:GtGraphLayout}$ as label elements organized in a grid layout with two columns, where each of the elements is aligned to the center of the grid cell.${example:GtWhatMakesBlocSpecialExplanation>>#classHierarchyWithGridLayout|codeExpanded=false|previewExpanded=|previewShow=#gtLiveFor:}$Note how the ==alignCenter== is specified as a constraint for each element.Now, we take the same elements only this time we add edge constraints between each pair of labels corresponding to a superclass and a subclass and specify a graph layout.${example:GtWhatMakesBlocSpecialExplanation>>#classHierarchyWithEdges|codeExpanded=false|previewExpanded=|previewShow=#gtLiveFor:}$The scene is laid out as a horizontal tree. To see the concrete connections we can also add line elements:${example:GtWhatMakesBlocSpecialExplanation>>#classHierarchyWithEdgesAndLines|codeExpanded=false|previewExpanded=|previewShow=#gtLiveFor:}$All in all, the graph layouts are treated in the same way as the other layouts. This allows us to use any elements in a graph visualization.!!Debuggable and explainableBloc was developed following the moldable development philosophy: every time we had a problem, we built a tool to expose the probem first. As a result, Bloc has built in tools that explain many details of its inner working. Most of these are found as inspector extensions. Let's look at some.We take as a base example the first element from the above scene. Inspecting the element produces an inspector with multiple views, each capturing an interesting aspect. Please take a moment to explore the different views.${example:GtWhatMakesBlocSpecialExplanation>>#firstChildOfHierarchyElementsWithEdges|codeExpanded=false|previewExpanded|previewHeight=300}$A simple view is the one that previews the metrics of the element:${example:GtWhatMakesBlocSpecialExplanation>>#firstChildOfHierarchyElementsWithEdges|previewShow=#gtMetricsFor:|noCode|previewHeight=180}$This is a view that is common in webbrowser inspectors. But, let's investigate a few more. Complicated scenes with deep nesting can pose problems when it comes to understanding how layouts work. For example, every layout needs to measure. The measurement view shows the order of which layouts associated with which elements have measured the current element. In our case, we have 4 such measurements, the last one being from our text element, while the other ones come from the parent elements.${example:GtWhatMakesBlocSpecialExplanation>>#firstChildOfHierarchyElementsWithEdges|previewShow=#gtMeasurementChainFor:|noCode|previewHeight=150}$Similarly, the resizers view shows how the current and parent elements specify the resizing strategies. In our case, the text element has ==fitContent== while all parents have ==matchParent==. This is highly useful when reasoning about why an element might not appear properly in a scene.${example:GtWhatMakesBlocSpecialExplanation>>#firstChildOfHierarchyElementsWithEdges|previewShow=#gtResizersFor:|noCode|previewHeight=150}$These are but a few interesting tools that are built in."
"GtEditorElementWithLayoutDoneEvent",""
"GtWhatIsTheMoldableEditorMadeOfExplanation","!What is the moldable editor made ofThis very document is rendered using the moldable editor.There are three layers that make the editor: - In Sparta: A low level text model, font handling, text measurements, the generic rope data structure. This has little to do with the editor per se, but should be considered an object-oriented replacement to what would otherwise be an FFI call.- In Bloc: Basic text element, rope text, paragraph model, text attributes, infinite list.- In Brick: The interactive editor part.Let's take them one by one.!!Sparta text supportThe Sparta text support is concerned with drawing actual text on a canvas.A specific concern is placed on pixel perfect text measurements that can be controlled from the image.${example:SkiaCanvasTextExamples class>>#exampleTextMeasure|noCode=|previewHeight=400}$!!Bloc text modelBloc introduces ${class:BlTextElement}$, the basic piece in a text editor.!!Brick editor@@todo"
"GtLayoutDoneEvent",""
"GtDiagrammerArrowheadFilledTriangleStencil","I create a filled triangle arrowhead"
"GtDiagrammerRelativeGeometryAnchorPicker","I allow users to pick a relative geometry anchor"
"GtDiagrammerArrowheadStencil",""
"GtDiagrammerArrowheadPicker","I allow users to pick an arrowhead for a curve"
"GtDiagrammerElement","I am the main element. Beside the canvas, I offer a tool bar and the sidebar where editors are displayed. [[[	| space |	space := BlSpace new.	space root addChild: GtDiagrammerElement new.	space show]]]"
"GtDiagrammerRectangleStencil","I create a rectangle element"
"GtDiagrammerDummyTool","I am a dummy tool that does nothing"
"GtDiagrammerArrowheadNoneStencil","I am used to remove arrow heads"
"GtDiagrammerLineJoinPicker","I allow users to pick a line join"
"GtDiagrammerEditorDataSource","I am a data source for the diagrammer editor list"
"GtDiagrammerFigureEditorDeclaration",""
"GtDiagrammerUmlNoteStencil","I create a UML note  element"
"GtDiagrammerEditorChanged","I am notified by an editor when its graphical representation should be recreated due to underlying element or model changes."
"GtDiagrammerArrowheadHollowTriangleStencil","I create a hollow triangle arrowhead"
"GtDiagrammerToolPicker","I allow users to pick a diagrammer tool"
"GtDiagrammerArrowheadCircleStencil",""
"GtDiagrammerColorPicker","I allow users to pick a color"
"GtDiagrammerLabelledElement","I am a stencil element with a text input field that can be switched in a edit mode with the help of a double click"
"GtDiagrammerCompositeEditor",""
"GtDiagrammerStarStencil","I create a star element"
"GtDiagrammerFigureTool","I am responsible for instantiation of new figures from stencils"
"GtDiagrammerArrowheadSimpleArrowStencil","I create a ""simple arrow"" arrowhead"
"GtDiagrammerNumberPicker","I allow users to pick a number from an interval"
"GtDiagrammerPickerExamples",""
"GtDiagrammerStencilExamples","!Stencils!! Arrow headsSimple arrow head:[[[example=GtDiagrammerStencilExamples>>#arrowheadSimple|expanded=true|expandedPreview=true|show=gtLiveIn:]]]Hollow triangle arrow head:[[[example=GtDiagrammerStencilExamples>>#arrowheadHollowTriangle|expanded=true|expandedPreview=true|show=gtLiveIn:]]]Filled triangle arrow head:[[[example=GtDiagrammerStencilExamples>>#arrowheadFilledTriangle|expanded=true|expandedPreview=true|show=gtLiveIn:]]]Holllow circle arrow head:[[[example=GtDiagrammerStencilExamples>>#arrowheadFilledCircle|expanded=true|expandedPreview=true|show=gtLiveIn:]]]Filled circle arrow head:[[[example=GtDiagrammerStencilExamples>>#arrowheadHollowCircle|expanded=true|expandedPreview=true|show=gtLiveIn:]]]"
"GtDiagrammerCard",""
"GtDiagrammerElementStencil","I am a special stencil designed to create visual elements for a figure creation tool"
"GtDiagrammerSelectionChooser","I am a special selection on-click chooser with the support of the selection ""dive in"".Initially, the selection context (or step) is the diagrammer canvas. - After the first click on a figure I choose the top-most parent of a clicked figure whose parent is the current selection content, in this case a canvas. Once selected, that parent becomes a new selection context. - Next click selects the top-parent of a click target within the selection context after the previous click. - If user clicks outside of the current selection context, we reset it and start all over again with the canvas as selection context.Selection can not dive-in of the elements marked as selection leaf:[[[	""make element a selection leaf (or cutting point)""	element beDiagrammerSelectionLeaf.	""ask whether an element is a selection leaf (false by default)""	element isDiagrammerSelectionLeaf]]]"
"GtDiagrammerArrowheadFilledCircleStencil","I create a filled circle arrow head with the border and background equal to the color of the curve"
"GtDiagrammerGeometryPicker","I allow users to pick an element geometry"
"GtDiagrammerEditorCardHolder","I am an element holder for a card that represents an editor in the diagrammer editor list"
"GtDiagrammerExamples","!Diagrammer[[[example=GtDiagrammerExamples>>#diagrammer|expanded=true|noCode=true|show=gtLiveIn:]]]"
"GtDiagrammerUmlClassWithAttributesAndMethodsStencil","I create a UML class element with two containers for class attributes and methods"
"GtDiagrammerLineTool",""
"GtDiagrammerArrowheadTriangleStencil",""
"GtDiagrammerOutskirtsPicker","I allow users to pick an element outskirts"
"GtDiagrammerStencil","I am an abstract factory of objects that should appear in the diagrammer"
"GtDiagrammerPicker","I am a scriptable toogle group to display a uniform collection of selectable values.[[[| picker |picker := GtDiagrammerPicker new.picker layout: BlFlowLayout horizontal.picker display: [ { 'Hello' . 'World' . 'I' . 'am' . 'a' . 'picker' } ].picker shape: [ :aString | BrToggle new	look: BrMaterialToggleLabelledLook;	margin: (BlInsets all: 3);	label: aString ].picker constraintsDo: [ :c |	c horizontal exact: 400.	c vertical fitContent ].picker when: BrToggleActivatedEvent do: [ :anEvent | self inform: anEvent model ].picker]]]"
"GtDiagrammerTitledCard",""
"GtDiagrammerEllipseStencil","I create an ellipse element"
"GtDiagrammerTool",""
"GtDiagrammerArrowheadHollowCircleStencil","I create a hollow circle arrow head with the border equal to the color of the curve"
"GtDiagrammerLineCapPicker","I allow users to pick a line cap"
"GtDiagrammerEditorList","I display a list of editors of an object in a vertical list.I fetch data from the diagrammer editor data source"
"GtDiagrammerFigureEditor",""
"GtDiagrammerUmlClassWithMembersStencil","I create a UML class element with a one container for class members (either attributes or methods)"
"GtDiagrammerSelectionTool","I am a selection tool and responsible for all actions and operations in a selection mode.Those operations consist of: - selection / deselection - deletion"
"GtDocumentAnnouncement",""
"GtDocumentExamples","I exemplify Documenter project. The main class is ${class:GtDocument}$.I use ${class:GtDocumentExamplesUtility}$ to simplify examples."
"GtCodeblockBrowseImplementorsAction",""
"GtExplanationAnnotation",""
"GtClassAnnotation",""
"GtChangesAnnotationCacheValue",""
"GtResizablePreviewAttribute",""
"GtResourceVisitor",""
"GtEpiceaNewStateVisitor",""
"TGtDocumentConstants",""
"GtExamplePreviewStencil",""
"GtStyledListItemBuilder",""
"GtStorageStrategy",""
"GtIcebergFile",""
"GtAddedToSceneEvent",""
"GtNullListItemStyler",""
"GtEpiceaUpdatedAnnouncement",""
"GtDocumentUtility",""
"GtDocument",""
"GtCodeblockAction",""
"GtMethodAnnotation",""
"GtAnnotation",""
"GtCacheValue",""
"GtHideAttribute",""
"GtCodeblockActionVisitor",""
"GtPreviewLook",""
"GtStyleWithoutMarkupStrategy",""
"TGt2DocumentConstants",""
"GtButtonStencil",""
"GtStyledNodeBuilder",""
"GtInputFileDocument",""
"GtChangesResource",""
"GtSplitWordsAttribute","I am a copy of class GtButtonAttribute. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"GtColorStyler",""
"GtCodeblockSuccessfulEvaluationAnnouncement",""
"GtDocumentMissingReferencesGroup",""
"GtCodeblockSelection",""
"GtEpiceaCurrentStateVisitor",""
"GtExamplesAnnotationCacheValue",""
"GtExamplesAnnotation",""
"GtRemovedFromSceneEventHandler",""
"GtCodeblockCacheKey",""
"GtExamplePreviewAttribute",""
"GtDocumentMissingReferencesVisitor",""
"GtSplitTextStencil",""
"GtStyleWithMarkupStrategy",""
"GtNoStorageStrategy",""
"GtClassResource",""
"GtButtonStencilBuilder",""
"GtResource",""
"ManifestGToolkitNewDocumenter","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtEpiceaBrickFactory",""
"GtCodeblockEvalutedAnnouncement",""
"GtDocumentExamplesUtility","I am used by ${class:GtDocumentExamples}$."
"GtCodeblockBrowseReferencesAction",""
"BrGlamorousLinkButtonExteriorInnerLook","I am a copy of class BrGlamorousLinkButtonExteriorLook. This comment is copied from there, and might not be entirely accurateI define the rectangular exterior of the link button."
"GtExampleAnnotation",""
"GtExampleAnnotationCacheValue",""
"GtSceneInformingEventHandler",""
"GtCacheKey",""
"GtCachedAttribute",""
"TGtDocumentInvalidCommentsConstraint",""
"GtPreviewStencil",""
"GtStyledNodeBuilderProperties",""
"GtClassCommentStrategy",""
"GtInputFile",""
"GtRemovedFromSceneEvent",""
"GtSymbolStyler",""
"GtParserCheckFailure",""
"GtDocumenterParserCheck","GtDocumenterParserCheck scans pillar source text and checks for text that may trigger problems with the parser.  - Not all issues will be found.- Some issues that are flagged will not always trigger problems.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"GtDocumentConstants",""
"GtCodeblockPharoVisitor",""
"GtCodeblockBrowseClassAction",""
"GtSlidesAnnotation",""
"GtChangesAnnotation",""
"GtAnnotationCacheValue",""
"GtPreviewAttribute",""
"GtStylerVisitor",""
"GtSceneInformingElement",""
"TGt2DocumentUtility",""
"GtPhlowDocumentView",""
"GtEpiceaDiffStencil",""
"GtStyledCodeblockBuilder",""
"GtSplitTextStencilExamples",""
"GtFigure",""
"GtDocumentCompletionStrategy",""
"GtCounterStyler",""
"GtDocumentUpdateRequestedAnnouncement",""
"GtDocumentMissingReferencesResult",""
"GtCodeblockSymbols",""
"GtCodeblockCacheValue",""
"GtIcebergFileAnnotation",""
"GtStylerEventHandler",""
"GtFigureCacheKey",""
"GtExamplesStatusLabelAttribute",""
"GtDocumentVisitor",""
"GtEpiceaBrickVisitor",""
"GtStyleWithoutInteractionsStrategy",""
"GtStyleTextProcess",""
"GtIcebergFileDocument",""
"GtStyler",""
"GtLeaveResource",""
"GtButtonAttribute",""
"GtListItemStyler",""
"GtCodeblockFailedEvaluationAnnouncement",""
"GtDocumentMissingReferencesExamples",""
"GtCodeblockEvaluator",""
"GtCachedTextExpandButtonAttributeStencil",""
"GtParametrizedExampleAnnotation",""
"GtAddedToSceneEventHandler",""
"GtAnnotationCacheKey",""
"GtEpiceaDiffAttribute",""
"TGtDocumentUtility",""
"GtResizablePreviewStencil",""
"GtStylerStrategy",""
"GtFileReferenceStorageStrategy",""
"GtNodeResource",""
"GtCachedTextExpandButtonAttribute",""
"GtNodeNodeFinder",""
"GtDocumenterParser","This is a hack that partially fixes this issue: *https://github.com/feenkcom/gtoolkit/issues/700*."
"GtEpicea",""
"XdDocumentExamples",""
"GtHTMLWriter",""
"XdDocumenterType",""
"XdExternalDataWriter",""
"XdExporterContainerElement",""
"XdPreviewType",""
"XdUniqueIdGenerator",""
"XdDocsAnnotation",""
"GtConfluenceWriter",""
"XdConfluenceType","I am a copy of class XdHtmlType. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"GtExampleDeprecationDetected","I am an error that occurs when an example encounters a deprecation warning during instanciation."
"GtExampleAspect","I encapsulate an object that provides functionality for an example. Aspects are configured by using paragmas in the method defining the example."
"GtExampleFactory","I am a factory that can create ${class:GtExample}$ instances. Users should configure me with a #sourceClass:. This is the class used to look for methods defining examples. To create an example, a method defining an example is executed having a provider as a receiver. If the example method is defined on the class side, the provider is the class object. If the method is defined on the instance side, the provider consists in a new instance of that class. In the second case, a new instance is created for running each example method. Optionally users can configure the factory with an explicit provider. If this is done, this provider will be used for all examples created by the factory.To initialize the subjects of an example I call #gtExampleSubjects on the provider object.To initialize various properties of an example I detect all pragmas from the example method for which a method exists in class of the example (the method should have the same name as the pragma keyword). Then I execute those methods with the example as a receiver and the pragma arguments."
"GtExamplesCommandLineHandler","I am a command line handler for executing examples as tests. I take as input a list of packages and execute all examples defined in classes from  those packages."
"GtExampleTestCase","I am an abstract bridge between examples and SUnit.Subclasses can specify the packages from which I should collect the examples and run them as tests."
"GtExampleMethodResolver","I create a method aspect based on the name of the selector and the name of its class. I am used by an example when the name of the class and the selector are indicated through a pragma."
"GtExampleDebugger","I am an processor that evaluates an example in a debugging scenario as if it is a test and caches the result.In case of an error, I do not intervene, and thus I allow the user to intervene through the debugger."
"GtExampleIcon","I encapsulate an icon for an example. My subclasses should decide how the icon is constructed. I used the converters defined in ==GtExampleMethodIcon== to create the actual icon."
"GtExampleArgumentsChanged",""
"GtExampleExternalMethodDependency",""
"GtExamplesUpdatedAnnouncement",""
"GtClassExampleGroup",""
"GtExampleInvalidProviderClass","I am an error indicating that within an example there isn't an inheritance relation between the provider class and the method class. The method class is the class containing the example method. The provider class is used to instantiate the object on which the example method is going to run. They can be the same class, or the provider class should be a subclass of the method class."
"GtCurrentExampleContext","I model a dynamic variable to keep track of the example that is being processed right now. I am particurly useful to allow after methods to utilize information from this context."
"GtExampleSelfDependencyResolver","I detect if a self send is a dependency to an example."
"GtExampleWithResult","I am example that further stores the result of evaluating the example."
"TGtZnServerExamples",""
"GtExampleInstanceSubject","I indicate that the subject of an example is an object. I am the default subject of an example. Other kinds of subjects should be used to inducate a particular type of object like a class or method."
"GtExampleFormIcon","I enable icons constructed from varios kinds of data (like byte arrays or base64 strings) to be used as icons for an example."
"GtExampleDependenciesProcessor","I provide the basic logic for traversing over the dependencies of an example.  By default I traverse first the dependencies of an example before traversing the actual node. #processExampleFirst - Change the traversal logic so that an example is visited before its dependencies#onProcess: - Provides a block that determines how the examples and its dependencies are visited"
"GtExampleLocalMethodDependency",""
"GtAbstractExampleMethod","I encapsulate a method that provides functionality for a GtExample and needs to be store within the example object. Users need to indicate the class and selector identifying the method. I support both methods on the class and on the inside side.To locate the actual method I use a ==GtExampleMethodResolver==."
"GtExampleSubjectError","I am an error that occurs when an example declares a subject that does not exist in the image."
"GtParametrizedExampleFactory",""
"GtExampleExecuted",""
"GtExamplesHDReport","I create a Hudson report by running examples from a given list of packages. Apart from running an example, if it is a success, I also try to run all inspector presentations for the return value of the example."
"GtExampleDependenciesResolver","I know how to extract the dependencies of a given example. The dependencies of a given example consists in message sends to other method constructing an example. To determine if a message send represents a dependency to a method containing an example, I use heuristic defined by subclasses of ==GtExampleDependencyResolver==. "
"GtExampleOpenDebugger",""
"GtPackageExampleGroup",""
"GtExamplePragmaError","I am an abstract error related to the way the pragmas are used within an example method."
"GtExample","I represent the concept of an example.I am constructed out of a method that returns an object. I hold the meta-information about that method and I know how to construct the concrete resulting object that is returned by the method. I can depend on other examples, and other examples can depend on me. When I depend on another example, the code that produces me uses the result of the other example to construct me.The class for which I represent the example is called my subject. I can have multiple subjects.The object on which I am executed is the provider. This is obtained using the provider class. The class that offers the method out of which I am constructed is the method class. The provider class and the method class are not the same in case of inherited examples. For them, the provider class can be a subclass of the method class. In this case the method resides in a superclass and is executed on an instance of the subclass.I also know how to handle possible exceptions, which makes me a great candidate for encoding assumptions that are otherwise expressed as classic tests."
"GtExampleSuperDependencyResolver","I detect if a super send is a dependency to an example."
"GtFileSystemExamples",""
"ManifestGToolkitExamples","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtExampleAspectResolver","I provide support for locationg aspects used by an example. "
"GtExampleThemeIcon","I allow icons from the current theme to be as used as icons for an example. I obtain the icon from the theme."
"GtExampleTraverser","I am an example processor that can traverse the dependencies of an example and execute an action on each of them. I only execute the given action on the actual dependencies of the given example and not on the given example itself."
"GtExampleRecursionDetected","I represent an error that occurs when we have cycles in static example dependencies. The cycles can be either direct or indirect. For example,  these configurations induces an error:- a depends-on b, b depends-on a- a depends-on b, b depends-on c, c depends-on a"
"GtExampleMethodAfter","I encalsulate a method that needs to be executed after an example was run. I provide similar, but not identical functionality, with the tearDown method from SUnit. "
"GtExamplesAnnouncement",""
"GtExampleGroup","I represent a group of examples.I am particularly useful for manipulating multiple examples at the same time, typically in a user interface (such as the inspector)."
"GtExampleError","I am an abstract error induced by a signaledException related to a specific example.My subclasses define the specific error."
"GtExampleDependencyResolver","I define a heuristic for determining if a given AST node represents a dependency to an example. I define only the main API. My subclasses  define concrete heuristic."
"GtExampleProvider","I am a superclass for classes whose main goal is to provide  examples. I only use the trait TGtExampleAssertable to provide subclasses with assertions that can be used within examples.Classes providing examples do not have to subclass me. I am only here for convenience. Classes providing examples can use themselves TGtExampleAssertable or they can implement their own assertion methods.NOTE: Use ${class:TGtExampleAssertable}$ instead."
"TGtExampleAssertable","I am a trait that provides assertions that can used within examples."
"GtExplicitExampleGroup",""
"GtExampleDeclaredClassMissing","I am an error that occurs when an example declares a dependency to a method belonging to a class that does not exist in the image."
"GtParametrizedExample",""
"GtExampleEvaluationContext",""
"GtZnServerExamples",""
"GtExampleRuntimeContext","I am a utility that holds custom contextual information about the current example."
"GtExampleClassResolver","I create a class aspect based on the name of a class. I am used by an example when the name of the class is indicated through a pragma."
"GtExampleSubject","I am the abstract of a description of a subject of an example. The concrete subclasses encapsulate the links to the concrete subjects.For example, the goal of an example might be to exemplify the way an instance of a class X can look like. In this case,  the subject is the class X. Or, the goal of the example might be to instantiate class X and in this case, the subject can be the instantiating method.The subject information is useful both when understanding the goal of an example, and to link examples to the static entities. For example, if a class has examples associated, these can appear in the static code browser, or in the inspector of the class."
"GtExampleMethodIcon","I encapsulate a metod that provides an icon for an example. I use the converter methods from my class side to create an icon (a Form object) from varios kinds of data, like byte array or base 64 strings."
"GtExampleAnnouncement",""
"GtExampleEvaluator","I am a processor that evaluates an example as if it is a test and caches the result. In case of an error I capture it and handle it according to the exceptions defined in the example."
"GtExamplesExecuted",""
"GtDynamicExampleGroup",""
"GtExampleMethodDependency",""
"GtExampleDependencyError","I represent a static error induced by a wrong declaration of an example. "
"GtExampleExternalDependencyResolver","I detect if a message send having the form  'ClassName new message'  is a dependency to an example."
"GtExampleResult","I represent the result of executing an example. I can be in the following four states:- success: creating and runnign the example executed successfully;- failure: running the examples caused an assertion to fail, either in the actul example or in an after method;- error: running the example raised an exception that makes the example be considered an error, either in the actul example of in an after method;- problem: creating the example  detected issues in the structure of the example; the example will still be run, however, it will have a distinct state regardless of the result of the run.API for determining the state of the example:- ${method:GtExampleResult class>>#failure}$ is the exception that marks this example as a failure. This is also the exception raised when an assertion fails within an example;- ${method:GtExampleResult class>>#signalableExceptions}$ provides a list of exception that mark the example as an error (only if the example is not already a failure).I keep track of the- returnValue: the real object returned by the example method- exception: the last error executed during an example"
"TGtExampleIcon","I am atrait does it's not used now, but I am still here because of comparibility with the stable version of roassal"
"GtExampleClassSubject","I describe a class subject of an example."
"GtExampleProcessor","I am an abstract class for manipulating examples.My subclasses can add different semantics for different use cases. For example, evaluating an example is to be treated differently from a debugging scenario, or from a  scenario to recorver static dependencies.I maintain a context that can be accessed from within the examples being processed during the execution of the processor.#value - Execute the processor. Can return a value, depending on the processor.#canProcess - Verifies if the processor can execute on the given example."
"GtExampleCalypsoInspectExamplesCommand",""
"GtExampleCalypsoInspectExampleFromPackageCommand",""
"GtExampleCalypsoInspectReturnValuesFromMethodGroupCommand",""
"GtExampleCalypsoExamplesEnvironmentPlugin",""
"GtExampleCalypsoInspectExampleFromClassCommand",""
"GtExampleCalypsoInspectReturnValuesCommand",""
"GtExampleCalypsoInspectReturnValuesFromPackageCommand",""
"GtExampleCalypsoMenuGroup",""
"GtExampleCalypsoInspectExampleFromMethodCommand",""
"GtExampleCalypsoInspectReturnValuesFromClassCommand",""
"GtExampleInspectClassCommand",""
"GtExampleCalypsoExampleProperty",""
"GtExampleCalypsoCommand",""
"GtExampleCalypsoInspectExampleFromMethodGroupCommand",""
"GtExampleCalypsoInspectReturnValuesFromMethodCommand",""
"GtExampleOpenClassInCoderCommand",""
"GtDummyExamplesExternalDependencies",""
"GtDummyExamplesInSubclass",""
"GtDummyExamplesWithInheritanceSubclassA","I add a new example method and also override an existing example method from the superclass with a new example method. Only have examples for the instance side."
"GtDummyExampleWithAssertions",""
"ManifestGToolkitExamplesDummies","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtDummyExamplesSuperclass",""
"GtDummyExamplesWithInheritanceClassSideSubclassD","I override an example method on the class side."
"GtAbstractDummyExamples",""
"GtDummyExamplesWithSubjectsAndGlobalSubjects",""
"GtDummyExamplesRecursive",""
"GtDummyExamplesWithInheritanceClassSideSubclassC","I provide example methods, both on the class and instance side, that have the same method names. I also override examples on both the class and the instance side."
"GtDummyExamplesTest","This class contains tests"
"GtDummyExamplesWithSubjects",""
"GtDummyExamplesOnInstanceSide",""
"GtDummyExamplesWithInheritanceRoot","I provide examples methods used to test the overriding of examples. My subclasses defined examples on both the class and instance side, and override them with either example or normal methods."
"GtDummyExamplesWithInheritanceSubclassG","I define a different set of subjects for my overriden examples."
"GtDummyExamplesOnClassSide",""
"GtDummyExamplesWithGlobalSubjects",""
"GtDummyExamplesWithInheritanceSubclassF","I override existing class-side and instance-side example methods from my superclass with methods not representing an example."
"GtDummyExamplesOnBothSides",""
"GtDummyExamplesWithExceptions",""
"GtDummyExamplesWithInheritanceSubclassE","I override an existing instance-side example method from my superclass with a method not representing an example."
"GtDummyExamplesInvalidDependencies",""
"GtDummyExamplesWithContext",""
"GtDummyExamplesWithInheritanceSubclassOfSubclassB","As my superclass, I only add new examples methods on the instance side without overriding any existing ones. "
"GtDummyExamplesInvalidAfter",""
"GtDummyExamplesWithAfterInstanceSide",""
"GtDummyExamplesWithInheritanceSubclassB","I only add new examples methods on the instance side without overriding any existing ones."
"GtDummyExamplesExternalSubclassDependencies",""
"GtDummyExamplesWithAfterClassSide",""
"GtDummyExamplesWithInheritanceSubclassOfSubclassA","As my superclass, I add new example methods and override existing ones."
"GtDummyExamplesInPackage1Root",""
"GtDummyExamplesClassBPackage1",""
"TGtDummyTraitAPackage2",""
"GtDummyExamplesClassAPackage2",""
"GtDummyExamplesSubclassDPackage2",""
"GtDummyExamplesClassCPackage3",""
"GtDummyExamplesClassEPackage4",""
"GtDummyExamplesAbstractClassFPackage4",""
"GtDummyExamplesClassGPackage4",""
"GtDummyExamplesWithParametrizedExampleB",""
"GtDummyExamplesWithParametrizedExampleA",""
"GtDummyAnnouncingExamplesA",""
"ManifestGToolkitExamplesExtensions","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtFensterSizeExamples",""
"GtFensterLogicalPosition",""
"GtFensterSize",""
"GtFensterError",""
"GtFensterPhysicalPosition",""
"GtFensterLogicalSize",""
"GtFensterWrongScaleFactor",""
"GtFensterPositionExamples",""
"GtFensterPhysicalSize",""
"GtFensterPosition",""
"GtFensterLogicalPositionExamples",""
"GtGleamGLTypes",""
"GtGleamLibrary",""
"GtGleamHeadlessRenderer",""
"GtGleamGL","My constants are generated using:[[[			GtGleamGLConstants classPool keys do: [ :eachName |	GtGleamGL class compile: (String streamContents: [ :aStream |		aStream			nextPutAll: eachName;			cr;			tab;			nextPutAll: '^ ';			nextPutAll: eachName	])  classified: 'api - enums' ].GtGleamGLConstants classPool keys do: [ :eachName |	GtGleamGL compile: (String streamContents: [ :aStream |		aStream			nextPutAll: eachName;			cr;			tab;			nextPutAll: '^ ';			nextPutAll: eachName	])  classified: 'api - enums' ].]]]"
"GtGleam",""
"GtGleamTexture",""
"GtGleamFramebuffer",""
"GtGleamGLConstants","Constant data is generated with:[[[| enums |enums := GtGleamGL allEnums collect: [ :eachEnum | '		#(', eachEnum name, ' ', eachEnum value asString, ' ', eachEnum type, ')' ].GtGleamGLConstants class compile: ('constantData	^ #({1}	)' format: {		String streamContents: [ :aStream | enums do: [ :eachEnum | aStream nextPutAll: eachEnum ] separatedBy: [ aStream cr ] ]	}) classified: 'constant data'.]]]"
"GtGleamLoadCallback",""
"GtGleamGLConstant",""
"TFLGitSafeFFICalloutAPI",""
"ManifestGToolkitIceberg","GToolkit-Iceberg is a temporary repository for making the changes to Iceberg to support Threaded FFI (and the new headless VM)."
"GtIcebergCommit","GtIcebergCommit can be used to commit the current image changes to the supplied repositories current branch.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	commitMessage:		<Object>	repository:		<Object>    Implementation Points"
"TFLGitSafeFFICalloutMethodBuilder",""
"GtInspectorRoundButtonStencil",""
"GtPlaygroundToolRegistryAdaptor",""
"GtInspectorSelectedObjectDisappeared","I am sent when a selected element disappears from the screen"
"GtInspectorPageViewUpdater",""
"GtInspectorPagerPageEmbellisher",""
"GtInspectorUpdatePagesWithClassTask",""
"GtInspector","I am the main element that represents an inspection context."
"GtInspectorAcceptIconStencil",""
"GtInspectorToolRegistryAdaptor",""
"GtInspectorObservedObjectEvent",""
"GtInspectorExamples",""
"TGtInspectorPageModelChecker",""
"GtInspectorTask",""
"GtWorldMenu",""
"GtInspectorSampleA",""
"GtInspectorSampleNotReturningTheView",""
"GtInspectorListHandler",""
"CurrentProcessAnalysis",""
"GtInspectorPagePlaygroundResizer",""
"GtInspectorMinusIconStencil",""
"GtInspectorUtility",""
"GtInspectorObservedObjectDefinitionChangedEvent",""
"GtInspectorExamplesForSampleNotReturningTheView",""
"TGtInspectorUtility",""
"GtInspectorRemovePageViewWithMethod",""
"RBNodeWrapper","I wrap a RBProgramNode so I can be used by a Mondrian visualization as some of  the RBProgramNode subclasses have  a custom implementation of >>= and it can show two different nodes as being the same node. This in turn will mess up the Mondrian visualization. My responsability is to overwrite >>= so that distinct nodes are seen as distinct by Mondrian."
"GtInspectorSampleSubclassOfA",""
"GtInspectorSampleWithExceptionsInExtensions","GtInspector openOn: self new"
"GtInspectorListToSelectHandler",""
"GtIceberg",""
"GtNewToolPager","A tool is a class that knows how to answer ==asElement=="
"GtInspectorPlusIconStencil",""
"GtOmbuSessions",""
"GtInspectorSelectedObjectAppeared","I am sent when a selected element appears on the screen"
"GtInspectorExamplesForSampleWithExceptions","!Dealing with errors in custom viewsInspecting the following snippet produces an inspector in which two views have an exception:- one has an excpetion during the creation of the view, and - one has an exception in the stencil that creates the actual element to be displayed.In both cases, the inspector offers a clean way to investigate the error: [[[GtInspectorSampleWithExceptionsInExtensions new]]]!Inspecting exceptionsAnd if we are at it, you can also get an exception as a graphical element that lets you debug the exception:[[[[ 1/0 ] on: Error do: [ :e | e asDebuggableElement ]]]]"
"GtInspectorPageElement",""
"GtInspectorUpdatePageViewWithMethod",""
"RBNodeWrapperFactory","I create and store wrapper nodes so that the links (parent - children) between wrapper nodes can be estabilshed just like for wrapped nodes."
"BrImageStencil","I create a BlElement with the provided image as background."
"GtInspectorSystemChangesHandler",""
"GtInspectorListToSpawnHandler",""
"GtInspectorElementWithSlowViews","I hold examples with extensions drawn with views that are slow.[[[GtInspectorElementWithSlowViews new]]]"
"GtLibraryInstallerDoneAnnouncement","I am sent when Installer finished its job.UI may want to subscribe to this announcement and close itself"
"GtLibraryInstallerUrlStencil",""
"GtLibraryInstallerErrorAlreadyInstalled",""
"GtLibraryInstallerPlatform",""
"GtLibraryInstallerValidationStep",""
"GtLibraryInstallerCustomError",""
"GtLibraryInstaller","I am the installer of shared libraries along side image or vm.I should be configured by the user for a specific library.The following example shows how I am configured for Sparta/Moz2D library.[[[| installer |installer := GtLibraryInstaller new.installer library: 'Moz2D'.installer version: 'development'.installer binary: 'libMoz2D'.installer url: 'https://dl.feenk.com/{library}/{platform}/{version}/{arch}/{binary}.{extension}'.installer running: [ MozServices isRunning ].installer works: [ MozLibrary uniqueInstance hasModule ].installer postInstall: [ MozServices start ].]]]"
"GtLibraryInstallerPreparationStep",""
"GtLibraryInstallerError",""
"GtLibraryInstallerUnhandledError",""
"GtLibraryInstallerInstallStep",""
"ManifestGToolkitLibraryInstaller","I am a framework for installing platform specific dynamic libraries (.dll, .so, .dylib)"
"GtLibraryInstallerErrorUnmetDependencies",""
"GtLibraryInstallerDownloadStep",""
"GtLibraryInstallerSuccessAnnouncement","I am sent when something important happened that is described in a message.The UI may want to show it in big font"
"GtLibraryInstallerErrorSandboxed",""
"GtLibraryInstallerDoneStep",""
"GtLibraryInstallerStepAnnouncement","I am sent when step is switched. I hold a new step"
"GtLibraryInstallerErrorNoLocalDirectory",""
"GtLibraryInstallerStep",""
"GtLibraryInstallerProgressAnnouncement","I am sent when the progress value of the current step changes.The UI may want to subscribe to this event and show a progressbar"
"GtLibraryInstallerErrorNoInstallDirectory",""
"GtLibraryInstallerWindows",""
"GtLibraryInstallerLogAnnouncement","I am sent by installer when it tries to log some messages.The UI may want to display them in a Transcript"
"GtLibraryInstallerErrorLocalDirectoryExists",""
"GtLibraryInstallerMac",""
"GtLibraryInstallerErrorAnnouncement","I am sent when an error happens during installationThe UI may want to subscribe to this event and show error message"
"GtLibraryInstallerErrorCanNotCreateLocalDirectory",""
"GtLibraryInstallerLinux",""
"GtLibraryaInstallerStepListItemBrick","Represent an item in a steps list.Can be finished, waiting, active"
"ManifestGToolkitLibraryInstallerMorphic","I contain simple visual morphic installer interface"
"GtLibraryInstallerErrorBrick","I am a page to display an error with detailed transcript"
"GtLibraryInstallerWindow",""
"GtLibraryInstallerMorph","Top most container of the whole installer"
"GtLibraryInstallerStepListBrick","I am a visual list of installer steps"
"GtLibraryInstallerGLMRubPluggableTextBrick","I wrap RubPluggableTextMorph and allow it to be embedded in Morphic-Brick"
"GtLibraryInstallerProgressBrick","A progress bar"
"GtLibraryInstallerMorphLogger",""
"GtLibraryInstallerGLMBrickVerticesRenderer","I am a special GLMBrick renderer for polygonal geometry"
"GtMondrianUMLClassElement",""
"GtMondrianBuilder","I am an abstract builder.I work closely with a ==GtMondrian== "
"GtMondrianLayoutBuilder","I am a builder for layouts."
"GtMondrianLayoutExamples",""
"GtHeightExpandingElement",""
"GtMondrianEdgeNotCreated","I am a signal that gets emitted when Mondrian tries to create an edge corresponding to two objects, but it cannot due to the fact that at least one of the nodes is not found in the graph. I am particularly useful when debugging why an edge creating statement does not produce the intended result."
"GtMondrianGraphBuilder","I am an abstract builder of either nodes or edges.I know how to specify a shape through an ==elementBlock==."
"GtMondrianBuilderExamples",""
"GtMondrianStep","I am a utility class that holds the state about the current step in the Mondrian view creation. I am particularly useful in the case of constructs like ==nodes:forEach:== which creates  a nested step. For example, in this case, the ==shape== should describe the scope inside the step and not be applicable in the broader scope."
"GtMondrianClassHierarcyExampleElement","I am an element for displaying a class. I show the name of the class and have a container for adding methods. I am meant to be used as a shape within Mondrian views."
"GtMondrian","I offer a fluent API for constructing graph-based visualizations."
"GtMondrianEdgeBuilder","I am a  builder for specifying edges. I exist mainly for the convenience of having a fluent API.I work in close collaboration with the ==GtMondrianStep== who eventually has to store the edges I produce."
"GtMondrianClassHierarcyExamples",""
"GtMondrianVsBlocExplanation","!How does Mondrian relate to BlocMondrian is a graph visualization engine that works directly with the generic Bloc graphical engine. In essence, Mondrian acts like a builder of a Bloc scene. This means that everything that can be achieved with Mondrian can also be achieved using plain Bloc elements. At the same time, it also means that Mondrian can benefit from all widgets and abilities already present in Bloc.!!Understanding nodesLet us consider a simple example with a visualization showing a few nodes:${example:GtMondrianVsBlocExplanation>>#multipleNodes|previewExpanded=}$Mondrian does not have its own internal model for representing the graph. Instead it builds directly an ${class:BlElement}$:${example:GtMondrianVsBlocExplanation>>#rootWithMultipleNodes|previewExpanded=}$The root element holds the elements that represent our nodes. Mondrian is only a shallow builder of elements and this offers quite some flexibility in customizing the rendering. For example, if we want to specify a custom element for each node, we can do that like this:${example:GtMondrianVsBlocExplanation>>#multipleNodesWithStencil|previewExpanded=}$!!Working with BlocMondrian being a builder for Bloc, also means that the same result can be obtained by working directly with Bloc:${example:GtMondrianVsBlocExplanation>>#blocWithMultipleNodes|previewExpanded=}$!!The graph extensions in BlocBy default, the Bloc model does not know about graphs. For example, an element does not know that it is supposed to be a node in a graph, and it does not know how to get to the other connected nodes. That is mandatory as Bloc is generic and a graph imposes a specific kind of contraints. Nevertheless, when working with graphs, it would still be useful to navigate a scene using a high level graph knowledge.This is achieved through a ==graph== extension. For example, below we see how to query the ${method:GtGraphElementContext>>#nodeChildren}$, and how the resulting collection of elements answers ==true== to ${method:GtGraphElementContext>>#isNode}$.${example:GtMondrianVsBlocExplanation>>#graphNodeChildrenOfRoot}$For more details about the graph API, please browse ${class:GtGraphElementContext}$.!!Dealing with lines and edgesA key benefit of using Mondrian is the ability of creating edges in a declarative manner, without having to maintain an intermediate data structure or to traverse the nodes explicitly.${example:GtMondrianVsBlocExplanation>>#multipleNodesWithEdges|previewExpanded=}$As Mondrian works directly with Bloc, we can also combine the two worlds. For example, in the example below we create edges explicitly and add them to the root element created with Mondrian. To create these edges, we traverse the nodes and then explicitly connect them. There are two things to note: # The newly created edges do affect the layout, but they do not have corresponding visible lines. This is because in Bloc, an edge is only a constraint. To create a line, we need an explicit line element. Mondrian creates both at the same time.# There is extra code that is required when working directly with Bloc.${example:GtMondrianVsBlocExplanation>>#rootWithHybridEdges|previewExpanded=}$"
"GtWidthExpandingElement","I am a special element that can grow horizontally with the children regardless of the layout."
"GtMondrianBasicExamples","!Mondrian basicsMondrian is an engine for graph-based visualization. While its roots date back to 2005, there have been multiple incarnations since then, including the ones from Roassal. The current version is based on Bloc, the new graphical engine for Pharo. The current version makes extensive use of Bloc and its mechanisms. As a result it requires a very short implementation that is specific to visualizing graphs. It turns out that most of the things we need for graphs are actually generic concepts that can be used for all sorts of other graphical needs.To get a more concrete idea of what Mondrian is about, let's consider some examples. !!A few examplesThe first example shows a tree made of nodes and interconnecting edges that are organized as a radial tree. Except that there are also two red edges that do not affect the layout.${example:GtMondrianBasicExamples>>#passiveEdges|previewExpanded|noCode=|previewShow=#gtLiveFor:}$Another one shows a UML-like visualization of a class hierarchy.${example:GtMondrianDomainExamples>>#umlClasses|previewExpanded|noCode=|previewShow=#gtLiveFor:|previewHeight=400}$Each of these examples are similar in that they are constructed as transformations of some input data into pictures. Yet, the transformation is different: - One shows a tree with nodes represented as rectangles. Another one shows nodes represented as UML class elements. - One shows only simple nodes. Another one also shows nested nodes.- Most drawn edges affect the visualization, except for two red ones that even if thicker they are passive ones.!!A tutorial!!!Nodes, edges and layoutsThe most basic parts of a Mondrian view are:# Nodes# Edges# LayoutLet's see how we create these. First the nodes.${example:GtMondrianBasicExamples>>#multipleNodes|previewExpanded}$Given those nodes, we can build edges.${example:GtMondrianBasicExamples>>#edgesBetweenNodes|previewExpanded}$And finally, we lay them out.${example:GtMondrianBasicExamples>>#layoutOnEdgesBetweenNodes|previewExpanded}$!!!ShapesThe look and feel of nodes and edges is specified by Shapes, which can be included in the construction of nodes and edges.A shape can be defined by a block that takes the node's model object as its argument and returns an instance of a Bloc element. In the example below, we see nine nodes drawn as circles with black borders, whose sizes depend on the number which each node represents.${example:GtMondrianBasicExamples>>#nodesWithEllipses|previewExpanded}$We can define the shape of edges in a similar way. In the example below, the nodes are connected by blue edges whose width varies depending on the node it tries to connect.${example:GtMondrianBasicExamples>>#edgesWithThickerLines|previewExpanded}$!!!NestingMondrian graphs can also be nested. In other words, a node can have a subgraph.${example:GtMondrianBasicExamples>>#nestedNodes|previewExpanded}$Nested nodes behave like leaf nodes in that they can be connected through edges and laid out accordingly.${example:GtMondrianBasicExamples>>#nestedWithEdges|previewExpanded}$!!Differences to previous incarnations of MondrianThe API has changed in comparison with the Roassal version because of the constraints and opportunities offered by Bloc:- Nodes are defined through ==view nodes with: { ... }==, instead of ==view nodes: { ... }==. One reason is to make the definition more similar to the one of edges.- Shapes are defined within the scope of a ==view nodes== or ==view edges== definition.- Shapes are mainly defined explicitly by instantiating of ==BlElement== and its subclasses.- The ==forEach:== clause can be cascaded after ==view nodes with: {...}==. This allows us to have multiple ==forEach:== statements per one nodes definition.- The new ==forEach:in:== allows the user to define the id of the container for the children. In this way, we can define children in different parts of the parent node."
"GtMondrianNodeBuilder","I am a  builder for specifying nodes. I exist mainly for the convenience of having a fluent API.I work in close collaboration with the ==GtMondrianStep== who eventually has to store the nodes I produce."
"GtMondrianDomainExamples","!Domain-specific examplesMondrian is useful for creating custom views that are specific to a given domain.!!!Package dependenciesIn this example, we see a list of packages arranged in a circle, with nested classes and the inheritance dependencies between the classes grouped at package level. One interesting thing is that the label of the packages shrinks to the available space offered by the size of the boxes. Another particularity is the use of parabolla arcs and heads.${example:GtMondrianDomainExamples>>#packageDependencies|previewExpanded}$!!!Examples dependenciesThis examples shows a tree of dependencies between example methods. We can see here that the visualization can embed arbitrary elements, such as an editor element with syntax highlighting.${example:GtMondrianDomainExamples>>#exampleDependencies|previewExpanded}$!!The inner structure of an element editorVisualization can be applied to any object or set objects. For example, the following visualization helps us understand how the editor element is composed out of smaller elements by showing the tree of the elements, each depicted with a label and a picture of the actual element.${example:GtMondrianDomainExamples>>#editorElements|previewExpanded}$"
"GtPhlowMondrianView",""
"GtMonitoredService",""
"GtBlocMonitor",""
"GtMonitoredServicesElement",""
"GtMonitorSpaceRunner","I start a space and let users know if everything went according to plan"
"GtMonitoredProcess",""
"GtMonitoredBlocSpacesElement",""
"GtMonitoredProcessesElement",""
"GtMonitoredBlocSpace",""
"GtMonitoredTaskItService",""
"GtMonitoredServiceElement",""
"GtMonitoredTaskItServicesElement",""
"GtMonitoredBlocSpaces",""
"GtMonitorSpaceLogger","I log space and universe related events"
"GtMonitoredProcessElement",""
"GtMonitoredUniversesElement",""
"GtPhlowObjectToDeselect",""
"GtPhlowColumn",""
"GtPhlowExplicitView","I represent an explicit view. I am typically used for describing a view of an object.I decorate a ==stencilBuilder== with extra information, such as ==title==. The ==stencilBuilder== is responsible for creating the contents of the view. The extra information is meant to create the decoration around that content.For example, a view of an object can be a visualization with the title being Visualization. A typical application is to add this view to a tab group. As we want to be able to create the content lazily, for example because it might be expensive, we need to know the title before the content is created. To this end, we have the title separate from the stencil builder."
"GtPhlowActionTarget",""
"GtPhlowTaskItView",""
"GtPhlowTransmissionReplaceAndShowStrategy",""
"GtPhlowActionWithError",""
"GtPhlowDefiningMethodsCollector",""
"GtPhlowPannableView",""
"GtPhlowViewReplacedBy",""
"GtPhlowCollector",""
"GtPhlowColumnedTreeView",""
"GtPhlowNoAction",""
"GtPhlowListViewExamples",""
"GtPhlowViewWithError",""
"GtPhlowObjectToSelect",""
"GtPhlowColumnedListViewExamples",""
"GtPhlowForwarderView","I forward a view definition to another object.I am useful in situations when the object that has the view definition is expensive to create.I am also useful in situtions, when the object is created only for the purpose of the view.I create the object only if someone clicks on my tab (view).!! Important${method:GtPhlowView>>#title}$ and ${method:GtPhlowView>>#priority}$ are not taken from the original view. If that were the case, the advantage of the solution would be lost since the title and priority are necessary to build the view tab using the title and priority.!! ExampleYou can define me as follow: ${method:GtPhlowViewExamples>>#gtForwardedViewFor:|expanded=true}$"
"GtPhlowObjectActionCategory",""
"GtPhlowView","!Phlow ViewA view is a stencil, a specification of how the concrete view widget will be created. Beside the logic of creating the widget, the view also specifies the ==title==, and the ==phlowActions== (see ${class:GtPhlowAction}$).See ${class:GtPhlowViewExamples}$."
"GtPhlowViewExamples","!Phlow views by example !!Explicit viewThe most fine grained view is the explicit one through which you can specify the detailed stencil to be used to create the final element.${example:GtPhlowViewExamples>>#explicitViewWithElementStencil|previewHeight=150|previewExpanded=|previewShow=#gtLiveFor:}$!!Text view${example:GtPhlowViewExamples>>#textView|previewHeight=150|previewExpanded=|previewShow=#gtLiveFor:}$!!List view${example:GtPhlowViewExamples>>#listView|previewHeight=150|previewExpanded=|previewShow=#gtLiveFor:}$!!Columned view${example:GtPhlowColumnedListViewExamples>>#viewWithItems|previewHeight=150|previewExpanded=|previewShow=#gtLiveFor:}$"
"GtPhlowButtonAction",""
"GtPhlowDemoDefinitionsExamples",""
"GtPhlowSpartaView","I let users define views with custom rendering[[[view := GtPhlowSpartaView new.view hMatchParent.view height: 500.view rendering: [ :aCanvas :anElement |	aCanvas fill		paint: Color red;		path: anElement bounds asRectangle;		draw ].view asElementDo: #yourself]]]"
"ManifestGToolkitPhlow","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtPhlowActionsCollector",""
"GtPhlowCompositeView",""
"GtPhlowToggleAction",""
"GtPhlowPannableViewExamples",""
"GtPhlowTransmission",""
"GtPhlowObjectToSpawn",""
"GtPhlowDefiningMethods",""
"GtPhlowLabelledView","I wrap a view and add a title to it."
"GtPhlowAnnouncement",""
"GtPhlowViewActionTarget",""
"GtPhlowViewDecorator","I am a decorator of an ==originalView== of which I keep track.My subclasses typically offer fluent APIs for constructing a view based on external engines."
"GtPhlowActionStencilBuilder",""
"GtPhlowDropdownAction",""
"GtPhlowElementContext","I offer the Phlow navigation API over the Bloc element tree starting with the specific element I am tied with."
"GtPhlowTextEditorView",""
"GtPhlowObjectEvent",""
"GtPhlowViewsCollector",""
"GtPhlowEmptyView","I represent an empty view that does not do anything when being asked to create an element.I am used to override an existing view."
"GtPhlowActionExamples","!Phlow actionsAny ${class:GtPhlowView}$ can be associated a set of ${class:GtPhlowAction}$ that are applicable. Often these actions are defined as an extension method discovered through a pragma. See ${class:GtPhlowActionsCollectorExamples}$.!!Explicit widgetsThe most basic action is the one that can be explicitly specified. For example, below we see the explict creation of a button widget.${example:GtPhlowActionExamples>>#explicitAction|previewExpanded|previewShow=#gtLiveFor:|previewHeight=50}$!!ButtonsButtons are the most used actions. Thus, there is a higher level action that allows you to do just that without creating explicit button widgets.${example:GtPhlowActionExamples>>#buttonWithIcon|previewExpanded|previewShow=#gtLiveFor:|previewHeight=50}$A button can have both an icon and a label.${example:GtPhlowActionExamples>>#buttonWithIconAndLabel|previewExpanded|previewShow=#gtLiveFor:|previewHeight=50}$!!TogglesAnother form of buttons are toggles.${example:GtPhlowActionExamples>>#toggleWithIconAndLabelDeactivated|previewExpanded|previewShow=#gtLiveFor:|previewHeight=50}$!!Dropdowns Dropdowns can also be defined.${example:GtPhlowActionExamples>>#dropdownWithIconAndLabel|previewExpanded|previewShow=#gtLiveFor:|previewHeight=50}$"
"GtPhlowProtoView","I define a common API that should be implemented by all Phlow views."
"GtPhlowTransmissionStrategy",""
"GtPhlowAction",""
"GtPhlowAnnouncingDefiningMethods",""
"GtPhlowListView",""
"GtPhlowDefinitionUpdated",""
"GtPhlowActionsCollectorExamples",""
"GtPhlowColumnedListView",""
"GtPhlowExplicitAction",""
"GtPhlowExamples",""
"GtPhlowTreeView",""
"GtMarkSuccessfullyEvaluatedCodeCommand",""
"GtSnippetBelowRequestedAnnouncement",""
"GtSnippet",""
"GtPlaygroundCommand",""
"GtPageSnippetAddedAnnoucement",""
"GtSnippetChanged","I am sent my snippet widget model when its snippet changes"
"GtPlayBookWidgetModel",""
"GtSnippetRequest","I am sent by snippet widget looks when they request to receive a snippet model from the widget model"
"GtSnippetMergeRequestedAnnouncement",""
"GtCollectionSnippet",""
"GtUrlGetResponseCommand",""
"GtPageSnippetReplacedAnnoucement",""
"GtPlayBook",""
"GtSnippetType","I represent a unique snippet type that is used in a context of the infinite list element.I differentiate snippets by their class.[[[	GtSnippetType new snippet: (GtPharoSnippet new)]]]I am responsible for creation of Snippet element holders of the corresponding type"
"GtCollectionSnippetStencilBuilder",""
"GtSnippetReplacementRequestedAnnouncement",""
"GtPageLook",""
"GtMarkUnsuccessfullyEvaluatedCodeCommand",""
"GtSnippetEvaluatedAnnouncement",""
"GtCodeSnippet",""
"GtSnippetCommand",""
"GtPageSnippetChangedAnnouncement",""
"GtPlaygroundDebugExceptionButtonAttribute",""
"GtSnippetWidgetModel","I am a view model of all snippet widgets"
"GtPageElement",""
"GtSnippetProgressAnnouncement",""
"GtDocumentSnippet",""
"GtTextEditorCommand",""
"GtPlayBookChangeRequestedAnnoucement",""
"GtPlayPage",""
"GtCoderSnippetType",""
"GtPageAnnoucement",""
"GtPageSnippetsDataSource",""
"GtPlayBookLook",""
"GtPlaygroundConstantsTrait",""
"GtZnClientCommand",""
"GtSnippetExternalCursorAnnouncement",""
"GtCoderSnippet",""
"GtDecoratedSnippetCommand",""
"GtPageSnippetEvaluatedAnnouncement",""
"GtPlaygroundEvaluatedCodeButtonAttribute",""
"GtPlaygroundActionTarget",""
"GtSnippetElement","I am the root element of a visual snippet representation"
"GtSnippetRemovalRequestedAnnouncement",""
"GtEmptySnippet","I am a snippet without any content, actions, nothing... empty space.Use me as a default one in widget models , stencils and UI"
"GtMarkEvaluatedCodeCommand",""
"GtSnippetAnnoucement",""
"GtPlaygroundConstants",""
"GtSnippetCompletionStrategy",""
"GtPageSnippetAnnouncement",""
"GtPlayBookChanged",""
"GtSnippetContainerLook",""
"GtPlaygroundEvaluatedCodeHighlightedAttribute",""
"GtPlayBookRequest",""
"GtSnippetFocusRequestAnnouncement",""
"GtExampleSnippet",""
"GtEvaluateSnippetCommand",""
"GtPageSnippetRemovedAnnoucement",""
"GtSnippetElementHolder","I hold a snippet element within an infinite list element.I know my unique snippet type (pharo code, url, empty etc)"
"GtPageSnippetsElement",""
"GtSnippetStencilBuilder",""
"GtSnippetRenameRequestedAnnoucement",""
"GtCollectionSnippetLook","I am a look for a collection snippet. I provide a way to select the type of the snippet to create, for examples pharo code or url.I am designed to work together with ${class:GtSnippetWidgetModel}$ and can be applied on the ${class:GtSnippetElement}$Example:[[[GtSnippetElement new	look: GtCollectionSnippetLook + BrLayoutLook linearVertical vFitContent hMatchParent]]]"
"GtPlaygroundExamples",""
"GtPlaygroundPharoSnippetExamples",""
"XdPlayBookFilter",""
"XdPublishedDocsSnippet",""
"XdPlaygroundExamples",""
"XdPlaygroundSpotterStart",""
"XdPlayBookType",""
"XdPlayBookJsonMapping",""
"XdPlaygroundSettings",""
"GtPlotterDateTicksExamples",""
"GtPlotterScaleUnitRange",""
"GtPlotterScaleTimeDomain",""
"GtPlotterLinearScale",""
"GtPlotterTwoValuesInterpolator",""
"GtPlotterDurationMonth",""
"GtPlotterAxisValue","I represent some abstract value on the axis, for example it can be a projection of a domain object, a tick value or range/domain of the scale"
"GtPlotterHorizontalBarChartBuilderExamples",""
"GtPlotterVerticalGridlineElement",""
"GtPlotterAxisAutoMinLimit",""
"GtPlotterTimeEveryYear",""
"GtPlotter",""
"GtPlotterTimeEveryFriday",""
"GtPlotterTimeEveryHour",""
"GtPlotterTimeTicks",""
"GtPlotterScaleRange","In mathematics, and more specifically in naive set theory, the range of a function refers to either the codomain or the image of the function, depending upon usage. Modern usage almost always uses range to mean image.https://en.wikipedia.org/wiki/Range_(mathematics)"
"GtPlotterScaleIntervalDomain",""
"GtPlotterDurationScale",""
"GtPlotterInterpolator",""
"GtPlotterDurationDay",""
"GtPlotterVerticalAxisLayout",""
"GtPlotterTimeLineDiagramBuilder",""
"GtPlotterHorizontalAxisElement","[[[GtPlotterHorizontalAxisElement new	labelStencil: [ :aLabel | BrLabel new look: BrGlamorousLabelLook; text: aLabel ];	scale: (GtPlotterDurationScale new domainFrom: 0 years to: 4 years)	ticks: 4]]]"
"GtPlotterAxisLimit",""
"GtPlotterTimeEveryTuesday",""
"GtPlotterTimeEveryWeek",""
"GtPlotterTimeInterval",""
"GtPlotterDurationTicks",""
"GtPlotterLinearScaleExamples",""
"GtPlotterTimeScale",""
"GtPlotterScale","I am a function that maps input values from a predifined domain to values within a range"
"GtPlotterDurationYear",""
"GtPlotterDomainObject","I represent a domain data object"
"GtPlotterAxisLayout",""
"GtPlotterHorizontalBarChartBuilder",""
"GtHorizontalSparklineStencil",""
"GtPlotterDiscreteAxis",""
"GtPlotterTimeEverySunday",""
"GtPlotterTimeEveryMonth",""
"GtPlotterDurationTicksExamples",""
"GtPlotterStep",""
"GtPlotterScaleUnitDomain",""
"GtPlotterLogarithmicScale",""
"GtPlotterNumberInterpolator",""
"GtPlotterDurationSecond",""
"GtPlotterAxisProjection","I represent a projection value  of a domain object on the axis.Given a Point (20@30) as a domain object and euclidian coordinate system.Then projection of that point on continuous X-Axis would be 20 and projection on Y-axis would be 30.A projection of a domain object on discrete axis is an index of that object in a data set"
"GtPlotterCoreExamples",""
"GtPlotterAxisProjections","I am a collection of axis projections"
"GtPlotterAxisValuedLimit",""
"GtPlotterLayoutConstraintsAxis",""
"GtPlotterAxis",""
"GtPlotterTimeEveryMonday",""
"GtPlotterTimeEveryMillisecond",""
"GtPlotterTicksExamples",""
"GtPlotterScaleIntervalRange",""
"GtPlotterScaleMagnitudeDomain",""
"GtPlotterIdentityScale",""
"GtPlotterIdentityInterpolator",""
"GtPlotterDurationMinute",""
"GtPlotterLayout",""
"GtPlotterBuilderExamples",""
"GtPlotterGridlineElement",""
"GtPlotterAxisAutoMaxLimit",""
"GtPlotterTimeEveryWednesday",""
"GtPlotterTimeEveryWeekDay",""
"GtPlotterTimeEveryDay",""
"GtPlotterNumberTicks",""
"GtPlotterTimeScaleExamples",""
"GtPlotterScaleDomain","In mathematics, and more specifically in naive set theory, the domain of definition (or simply the domain) of a function is the set of ""input"" or argument values for which the function is defined. That is, the function provides an ""output"" or value for each member of the domain.[1] Conversely, the set of values the function takes on as output is termed the image of the function, which is sometimes also referred to as the range of the function.https://en.wikipedia.org/wiki/Domain_of_a_function"
"GtPlotterContinuousScale",""
"GtPlotterExamples",""
"GtPlotterDuration",""
"GtPlotterHorizontalAxisLayout",""
"GtPlotterLineDiagramBuilder",""
"GtPlotterAxisElement",""
"GtPlotterAxisDistance","I am a distance between two axis values or projections"
"GtPlotterTimeEveryThursday",""
"GtPlotterTimeEverySecond",""
"GtPlotterNumberTicksExamples",""
"GtPlotterTicks",""
"GtPlotterScaleExamples",""
"GtPlotterSequencialScale",""
"GtPlotterLineDiagramBuilderExamples",""
"GtPlotterDurationWeek",""
"GtPlotterDiscreteAxisExamples",""
"GtPlotterAxisLabelStencilBuilder",""
"GtPlotterBuilder",""
"GtPlotterLayoutConstraints",""
"GtPlotterContinuousAxis",""
"GtPlotterTimeEverySaturday",""
"GtPlotterTimeEveryMinute",""
"GtConnectorForExampleSlide",""
"GtPlaygroundOnDictionarySlide",""
"GtArrowHeadWithEmbeddedWorldSlide",""
"GtHttpQuerySlide",""
"GtEditorDiffSlide",""
"GtSpotterSlide",""
"GtBlocSpecialClassHierarchyWithGridSlide",""
"GtRawViewsSlide",""
"GtSlideChanged",""
"GtElementSlide",""
"GtSlideShow",""
"GtDebuggerOnJSParserSlide",""
"GtPlaygroundSlide",""
"GtBaselineOfGToolkitCommentSlide",""
"GtInspectorViewsSlide",""
"GtEditorElementWithDebugCharacterSlide",""
"GtTextAndElementSlide","I am a Slide designe that gets a Text and and Element and displays them. I can be included in presentations."
"GtComponentsReleaserSlide",""
"GtLiveElementTreeSlide",""
"GtSlide",""
"GtEmptyDocumenterSlide",""
"GtSlideCommand",""
"GtDebuggerOnRopeSlide",""
"GtSearchFilterHierarchySlide",""
"GtBlocSpecialClassHierarchyWithEdgesAndLinesSlide",""
"GtAllViewsSlide",""
"GtEditorElementWithRotatedWords",""
"GtTitleSlide",""
"GtComponentsSlide",""
"GtParagraphSlide",""
"GtAnyModelSlide",""
"GtFilePictureSlide",""
"GtSlideShowElement",""
"GtDevKeyboardSlide",""
"GtSlideStencil",""
"GtBlocSpecialClassHierarchyWithEdgesSlide",""
"GtCustomViewsSlide",""
"GtSlideElement",""
"GtEditorElementWithTreeSlide",""
"GtWorldSlide",""
"GtRlCommitAndTagReleaseAction","I execute a commit of the current changes staged for commit and push a tag corresponding to the version number of the repository release.I only work with strategies of type ${class:GtRlSemanticTagReleaseStrategy}$. See ${method:GtRlSemanticTagReleaseStrategy>>#commitAndTagRelease} for more implementation details."
"GtRlReleaseUpdateWorkflow","I update the version number and release actions for all repository and project releases contained within a give root release.I use ${class:GtRlReleaseOrderTraversal}$ to determine the other in which repository releases should be updated. For each release I update its order and its actions using the release strategy associated with that release. See ${method:GtRlReleaseUpdateWorkflow>>#updateRepository:}$ for implementation details about how releases are updated.A relevant detail is that I keep track of the order attribute that should be associated to the next release action. The release strategy should call ${GtRlReleaseUpdateWorkflow>>#nextActionOrder}$ to determine the order of a created action within this update workflow. I do this so that it is possible, just by looking at an action to know when it will be executed during the release. This can help debugging given that each release stores its actions."
"GtRlNewCommits",""
"GtRlHeadCommitReleaseStrategy","I am a release strategy that uses the id of the head commit as the version number.I indicate a passive release as no actions need to be executed. The version number already exists in the repository.I should only be used for repositories that have no child repositories as I hardcode an existing commit. As I am passive I do not export any metadata.  See ${method:GtRlHeadCommitReleaseStrategy>>#assertCompatibleWithRepository:}$ for assertions that check when I can be used."
"GtRlSemanticVersionNumber","I use as a version number a symbolic version having the format 'vx.y.z', where x,y,z are the major, minor and patch componets of the version numbers. For example, `v0.1.0` and 'v2.42.89' are version numbers that I can represent.${example:GtRlSemanticVersionNumberExamples>>#semanticVersionNumber}$ I do not provide any default and I should be explicitly initialize before being used.${example:GtRlSemanticVersionNumberExamples>>#uninitializedSemanticVersionNumber}$More examples are provided by the class ${class:GtRlSemanticVersionNumberExamples}$"
"GtRlReleaseActionsGroup","I model a collection of release actions. I exist to provide an interface for simplifying inspecting and working with groups of actions.  Some public API methods: 	- ${method:GtRlReleaseActionsGroup>>#execute}$ - execute all release actions from this group	- ${method:method:GtRlReleaseActionsGroup>>#sortedByOrder} - return a new group where actions are sorted based on the order attribute. "
"GtRlMajorVersionComputation","I increment the major number of a semantic version. I reset both the patch and minor parts of the version number to zero.${example:GtRlSemanticVersionComputationExamples>>#nextMajorVersionComputation}$If the symbolic version number on which I am applied has a patch or a minor number I reset them to zero in the created version number.${example:GtRlSemanticVersionComputationExamples>>#nextMajorVersionComputationResettingPatchAndMinorNumbers}$"
"GtRlReleaseAction","I model an action executed during the creation of a new release version on projects and repository releases that are not passive.My main API method for executing the actions is ${method:GtRlReleaseAction>>#execute}$. Since release actions can have side effects, like creating tags, or merging branches I ensure that I am executed only once. Subclasses should implement:	- ${method:GtRlReleaseAction>>#performAction}$ to provide a concrete execution logic;	- ${method:GtRlReleaseAction>>#repositoryRelease}$ to return the repository release that this action affects. I provide an order attribute that can be used to order the actions of a release and ensure that they are executed in the correct order."
"GtRlDedicatedBranchReleaseStrategy","I am a release strategy that uses a dedicated release branch for creating the release.To perform the release I generate actions for: 	- checking out the release branch and merging the current branch into the release branch;	- compiling updated Monticelo baselines for the project releases contained in the repository that point to the version numbers of those project releases; 	- exporting metatada containing the version numbers used for each child repository;	- make a new commit on the release branch and tag it with the version number of this release;	- push the commit to origin, if a remote origin can be found.	See ${method:GtRlDedicatedBranchReleaseStrategy>>#shouldCreateNewRelease}$ for the cases when I generate a new release."
"GtRlReleaseStrategy","I model a strategy for executing a repository release.My main responsabilities consist in updating a repository release by computing and setting its version number and creating the necessary release actions. I add release actions to both the repository release and its project releases. The API method that does the update of a repository release is ${method:GtRlReleaseStrategy>>#updateFor:}$.I should be initialized based on a ${class:GtRlReleaseConfiguration}$ instance used to configure various aspects of the release process.Some of my subclasses include:${class:GtRlBaselineTagReleaseStrategy}$ a release strategy that uses the current loaded tag for a repository as the version number. ${class:GtRlHeadCommitReleaseStrategy}$ a release strategy that uses the id of the head commit as the version number.${class:GtRlDedicatedBranchReleaseStrategy}$ a release strategy that uses a dedicated release branch for creating the release."
"GtRlBaselineVersionNumber",""
"GtRlExportReleaseMetadataAction","I export metadata associated with the current release. The metadata consists in an external file having information about dependencies and version numbers. This is performed to help tools reason about dependencies without having to load or parse the code of Metacello baselines.See ${class:GtRlReleaseVersionMetadata}$ for more details about what metadata is associated with a release. "
"GtRlReleaseVersionMetadata","I contain information about a concrete release within a repository. Currently I contain the list of direct dependencies for all baselines contained in a repository. I store this list in a JSON file within the repository. It is the responsability of the user to update this meta-data every time the baseline is changed. During the release process this is ensured using the action ${class:GtRlExportReleaseMetadataAction}$.By default the baseline of a version contains all dependency information needed to load that version. However, that information is stored in the method =='baseline:'== within the baseline class. Accessing it requires loading or parsing the code of the baseline. Having the dependency list stored in an external JSON file make it easier for tools to access dependencie without havign to deal with the actual code. The meta-data file could in the future contain other types of information, not just the list of dependencies."
"GtRlRelease","I am an abstraction for entities within a project loading configuration for which a new relese version can be generated.I hold a list of actions that are executed in order to generate a new release version. Subclasses are responsible with generating the list of actions, updating it if necessary or executing it."
"GtRlLoadedTagReleaseStrategy",""
"GtRlTagVersionNumber","I use the tag name of an already existent tag from the repository as a version number. I should be used only if the tag with the given name already exists in the repository.${example:GtRlTagVersionNumberExamples>>#tagVersionNumber}$More examples are provided by the class ${class:GtRlTagVersionNumberExamples}$"
"GtRlReleaseBuilder","I am responsible with creating a new release model from a baseline model following a given configuration.My main API method for creating the release model is ${method:GtRlReleaseBuilder>>#buildReleaseForProject:}$.To create the release I use two other classes:	- ${class:GtRlReleaseStructureBuilder}$ - builds the structure of release from a baseline model;	- ${class:GtRlReleaseUpdateWorkflow}$ - updates the version number and strategy for releases based on the given configuration."
"GtRlMinorVersionComputation","I increment the minor number of a semantic version. I reset the minor part of version number to zero.${example:GtRlSemanticVersionComputationExamples>>#nextMinorVersionComputation}$If the symbolic version number on which I am applied has a patch number I reset it to zero in the created version number.${example:GtRlSemanticVersionComputationExamples>>#nextMinorVersionComputationResettingPatchNumber}$"
"GtRlCompileBaselineReleaseAction","I compiled the Metacello baseline of a project release based on the new version numbers of its child releases. I should be applied on a project release, not on a repository release. See ${method:GtRlProjectRelease>>#compileBaselineMethod}$ for more implementation details."
"GtRlLeafProjectReleaseStrategy","I am a release strategy that uses the current checked out branch as the release branch and that applies only to repository releases that have a single project release and no other dependencies.I am a limited release that only makes a new commit, tags it and pushes to the remote origin. I should only be used for leaf projects that have no dependencies.The main differences with other strategies are that I use the current branch and I make no changes to any files from the repository.See ${method:GtRlLeafProjectReleaseStrategy>>#shouldCreateNewRelease}$ for the cases when I generate a new release."
"GtRlBaselineTagReleaseStrategy","I am a release strategy that uses the current loaded tag for a repository as the version number.I indicate a passive release as no actions need to be executed. The version number already exists in the repository.I should only be used for repositories that have no child repositories or when all child repositories also use this strategy, as I hardcode an existing tag.As I am passive I do not export any metadata. Even if the repository has child repositories there will be no metadata exported. Because of this I do not use metadata to check previous versions (it is not reliable).I am a valid release strategy only when all Monticello baselines that load this project use the same tag to load it. See ${method:GtRlBaselineTagReleaseStrategy>>#assertCompatibleWithRepository:}$ for assertions that check when I can be used."
"GtRlCommitIdVersionNumber","I use the full id of a commit as a version number. I should only be used if a commit id is set.${example:GtRlCommitIdVersionNumberExamples>>#commitIdVersionNumber}$More examples are provided by the class ${class:GtRlCommitIdVersionNumberExamples}$"
"GtRlMergeToReleaseBranchAction","I merge the reference branch to the release branch.I only work with strategies of type ${class:GtRlSemanticTagReleaseStrategy}$. See ${method:GtRlSemanticTagReleaseStrategy>>#mergeToReleaseBranch} for more implementation details."
"GtRlReleaserExportWorkflow","I execute all release actions for a given release.I exist to provide an API for inspecting and executing release actions. My main methods for accessing release actions are:- ${method:GtRlReleaserExportWorkflow>>#releaseActions}$: Returns the complete list of release actions;- ${method:GtRlReleaserExportWorkflow>>#releaseCreationActions}$: Returns only the actions executed to create the release;- ${method:GtRlReleaserExportWorkflow>>#releasePostCreationActions}$: Returns the actions that should be executed after the release has been completed.My main API method for executing release actions is ${method:GtRlReleaserExportWorkflow>>#executeReleaseActions}$.I rely on the order attribute of release actions to determing the order in which to execute them. "
"GtRlProjectRelease","I model a release for a project by decorating a ${class:GtRlProject}$ instance with a concrete version.I do not store my own version version. Instead I used the version number of the repository release that contains me. This is the case as all project releases from a repository should have the same release version number. I can also have an empty list of actions if there is nothing to be done at the project level for creating the release. I do not have my own release strategy like repository releases. Instead the release strategy of the ${class:GtRlRepositoryRelease}$ that contains me is responsible for adding actions. Currently the design is like this as there are only few actions needed at the project level.I have as main attributes:	- project: the ${class:GtRlProject}$ for which I do a release;	- repositoryRelease: the repository release containing this project release;	- parentReleases and childReleases: the parent and child project releases corresponding to the parent and child releases from that project that I reference."
"GtRlNullReleaseStrategy","I provide a null strategy to indicate that a release has no strategy. I mark a release as passive and set ${class:GtRlNullVersionNumber}$ as its version number."
"GtRlReleaseConfiguration","I model options for configuring how releases are performed.I am used by a ${class:GtRlReleaseBuilder}$ to create a new release. Users can configure default options that apply to all repositories from a release, or configure options for individual repositories.My main API methods for setting other default options are:- ${method:GtRlReleaseConfiguration>>#defaultReleaseBranchName:}$ The branch name on which to perform the release.- ${method:GtRlReleaseConfiguration>>#defaultVersionComputation:}$ The strategy for computing the next version number in case a version already exists. These are subclasses of ${class:GtRlSemanticVersionComputation}$;- ${method:GtRlReleaseConfiguration>>#defaultVersionNumber:}$ The version number to use in case there are no previous releases in a repository.- ${method:GtRlReleaseConfiguration>>#forceNewRelease}$ Force a new release in a repository even if there no new changes in that repository and all dependencies did not change.By default I use a release strategy of type ${class:GtRlDedicatedBranchReleaseStrategy}$. However, a custom release strategy can be configured for each indivual project using the method ${method:GtRlReleaseConfiguration>>#setReleaseStrategyOfType:forProjecs:}$."
"GtRlPatchVersionComputation","I increment the patch number of a semantic version. I leave the other parts of the semantic version unchanged.${example:GtRlSemanticVersionComputationExamples>>#nextPatchVersionComputation}$"
"GtRlRepositoryReleaseAction","I model a release action executed on a repository release. I only work with release strategies of type ${class:GtRlSemanticTagReleaseStrategy}$ as the other strategies require no release actions."
"GtRlReleaseStructureBuilder","I traverse a baseline model and create an equivalent release model. I work as follows:	- for each ${class:GtRlProject}$ I create a ${class:GtRlProjectRelease}$	- for each ${class:GtRlRepository}$ I create a ${class:GtRlRepositoryRelease}$	- for each repository and project release I create child/parent relations based on the relations between projects and repositories.	I also use the given ${class:GtRlReleaseConfiguration}$ instance to initialize each repository release with a release strategy."
"ManifestGToolkitReleaser","I store metadata for this package used by various other tools."
"GtRlBaselineVersionReleaseStrategy",""
"GtRlNullVersionNumber","I am null version number that can be used instead of ==nil==.${example:GtRlNullVersionNumberExamples>>#nullVersionNumber}$A null version number is equal to any other null version number.${example:GtRlNullVersionNumberExamples>>#nullVersionNumberEqualityExample}$"
"GtRlPushToOriginReleaseAction","I execute a push to the remote branch associated with the local release branch. I should only be called if there is a way to determine a remote branch where to do the push. See ${method:GtRlPushToOriginReleaseAction>>#performAction}$ for more details about my preconditions and implementation details."
"GtRlSemanticVersionComputation","I compute the next semantic version number for a repository. My subclasses decide which part of the version number is incremented.I allow a default semantic version number in case a previous version number is not found in the repository. If that is not given, a ${class:GtRlNullVersionNumber}$ is used.Subclasses need to override ${method:GtRlSemanticVersionComputation>>#nextSemanticVersionFrom:)$ to provide the logic for computing the next semantic version number."
"GtRlRepositoryRelease","I model a release for a repository by decorating a ${class:GtRlRepository}$ instance with a concrete version number.My main responsability is to store a concrete version number and a release strategy that computes that version number. I do not know how to determine the version number and create the actual list of actions. The release strategy is responsible with computing the version number for the release and creating the list of actions for generating that version number.I must have a version number and a release strategy, but I can have an empty list of actions. This can happen if the version number already exists. For example, if the version number is a hash of an existing commit that already exists, no action is further necessary. In that case I am a passive release. However, I can turn from a passive release to an active release, or viceversa, if my release strategy is changed.I have as main attributes:	- repository: the ${class:GtRlRepository}$ for which I do a release;	- projectReleases: the list of project releases for the projects contained in the repository that I reference. 	- version: the version number corresponding to this release	- releaseStrategy: the strategy that creates the actions for generating the release version	- isPassiveRelease: a flag set when creating the release indicating if the release if passive; If this flag is set no actions will be generated for the project; TODO: ideally I should be removed and a passive release should just be a release that has no actions. I exist due to the way actions are added to a release by a release strategy.	I contain the actions that need to be performed at the repository level, like committing code and tags, but I do not model any action at the project level. For that I hold a list of ${class:GtRlProjectRelease}$ instances. These correspond to the projects contained in the repository that I reference. "
"GtRlSemanticTagReleaseStrategy","I am a release strategy that uses a new tag named based on semantic versioning as the version number.I mode an active release that needs to execute actions. The actual actions depend on my subclasses however the common ones are:	- make a new commit and tag it with the version number of this release;	- push the commit to origin, if a remote origin can be found.	I offer the following configuration options: 	- releaseBranch: the branch on which the release tag will be generated;	- nextVersionComputation: the logic used to determine the next symbolic version number. See the subclasses of ${class:GtRlSemanticVersionComputation}$ for available options;	- shouldForceNewRelease: By default I try to detect if a new release is neccessary. This flag indicate that a new release should be forced even if no new changes are detected."
"GtRlReleaseOrderTraversal","I traverse a structure of repository releases and return them in the order in which they should be updated.Releases should be updated starting with all the children of a parent release, before updating the parent. Also a release should be updated only once. The children should be updated first so update their version. Then the parent can check whether or not its children have new versions."
"GtRlVersionNumber","I provide an abstraction for identify a concrete version number for a repository or project release.My subclasses provide the actual version number. This can be any information that can identify a release within a repository.All my subclasses should provide immutable versions numbers. Once created a version number should not change."
"GtRlNode","I am an abstraction for a type of dependency in the loading configuration of a system."
"GtRlProject","I model a project that resides within a repository, has dependencies to other projects and loads certain packages from the repository. I correspond to a Monticello baseline.I have as main attributes: 	- the name of the project	- the list of packages loaded by the project 	- the repositry containing the project 	- a list of child and parent projects representing my dependencies to other projects		"
"ManifestGToolkitReleaserBaselineModel","I store metadata for this package used by various other tools."
"GtRlDependenciesModelBuilder","I build the graph of projects and repositories for a given Metacello baseline. The constructed graph represents the loading configurations for the given baseline used by Releaser.I only work with Metacello baselines that:	- have no cycles in the loading configuration 	- do not use groups	- do not use explicit repositories for packages	- only use the #'common' spec"
"GtRlPackage","I model a package that is loaded by a project.I have as main attributes:	- the name of the package 	- the project that contains me	- dependencies to other packages or projects	I do not have an explicit repository. I am placed in the same repository as the project that contains me."
"GtRlRepository","I model a repository that contains projects.I have as main attributes:	- an url used to identify the repository, following the same conventions as Metacello;	- a list of contained projects. I can have indirect child and parent repositories, depending on the relations between the projects that I contain.  I can be linked to an ${class:IceRepository}$ that provides the concrete repository holding the code."
"GtRlMetacelloToolBox","I am a ${class:MetacelloToolBox}$ that only uses the given repository for a baseline, instead of using all repositories that Metacello knows about a baseline in the current image. If all repositories are used then all repositories will be in the generated code of a baseline, instead of only the repositories contained by the model of a loading configuration."
"GtRlMetacelloToolBoxWithSpecs","I am a toolbox used for testing purposes for handling baselines that are not loaded into the image. I make it possible to generate the code of baselines that depend on baselines not loaded into the image. For that I register a list of baselines. When a baseline is not found using ==Metacello image== I search for it in the list of registered baselines."
"GtRlProjectExamples",""
"GtRlSemanticVersionExamples",""
"ManifestGToolkitReleaserBaselineModelExamples","I store metadata for this package used by various other tools."
"GtRlPackageExamples",""
"GtRlRepositoryExamples",""
"GtRlSystemOneModelExamples",""
"GtRlMinimalRemote",""
"GtRlIceMinimalBranch",""
"GtRlIceMinimalRepository",""
"ManifestGToolkitReleaserBaselineModelMinimalIceberg","I store metadata for this package used by various other tools."
"GtRlIceMinimalLocalBranch",""
"BaselineOfGtRlBaselineExampleComponentBMain",""
"BaselineOfGtRlBaselineExampleComponentC",""
"BaselineOfGtRlBaselineExampleComponentDModuleA",""
"BaselineOfGtRlBaselineExampleSystemOne","I am a baseline in which there is a single dependency to every child baseline. I am used in examples for GtReleaser.The dependencies between baselines are shown in the figure below.${example:BaselineOfGtRlBaselineExampleSystemOne class>>#itself|previewShow=#gtMapFor:|noCode}$"
"BaselineOfGtRlBaselineExampleComponentA",""
"BaselineOfGtRlBaselineExampleComponentBUtil",""
"BaselineOfGtRlBaselineExampleComponentD",""
"BaselineOfGtRlBaselineExampleStandaloneWithActions",""
"ManifestGToolkitReleaserBaselineModelSystemOneExamples","I contain a series of baselines used in examples."
"BaselineOfGtRlBaselineExampleSystemThree","I am a baseline there are multiple dependencies to a child baseline. I am used in examples for GtReleaser.The dependencies between baselines are shown in the figure below.${example:BaselineOfGtRlBaselineExampleSystemThree class>>#itself|previewShow=#gtMapFor:|noCode}$"
"BaselineOfGtRlBaselineExampleComponentB3Main",""
"BaselineOfGtRlBaselineExampleComponentC3",""
"BaselineOfGtRlBaselineExampleComponentA3",""
"BaselineOfGtRlBaselineExampleComponentB2Main",""
"BaselineOfGtRlBaselineExampleComponentC2",""
"BaselineOfGtRlBaselineExampleComponentA2",""
"BaselineOfGtRlBaselineExampleComponentB2Util",""
"BaselineOfGtRlBaselineExampleSystemTwo","I am a baseline having multiple dependencies where all baselines are placed within the same repository. I am used in examples for GtReleaser.The dependencies between baselines are shown in the figure below.${example:BaselineOfGtRlBaselineExampleSystemTwo class>>#itself|previewShow=#gtMapFor:|noCode}$"
"GtRlTagVersionNumberExamples",""
"TGtRlReleaseBuildAssertions",""
"GtRlLeafRepositoryReleaseExamples",""
"GtRlCommitIdVersionNumberExamples",""
"ManifestGToolkitReleaserExamples","I store metadata for this package used by various other tools."
"GtRlSystemOneReleaseExamples",""
"GtRlReleaserUsageExamples",""
"GtRlNullVersionNumberExamples",""
"GtRlReleaserExamples",""
"GtRlSemanticVersionComputationExamples",""
"GtRlSemanticVersionNumberExamples",""
"GtRlDedicatedBranchRootReleaseExamples",""
"GtRlVersionNumberExamples",""
"GtRlRepositoryExamplesExplorer",""
"GtRlGToolkitExamplesExplorer",""
"GtRlRepositoryDocumentationExplorer",""
"GtRlGToolkitDocumentationExplorer",""
"GtRlProjectExamplesExplorer",""
"GtRlSystemExamplesExplorer",""
"GtRlDocumentationExplorer",""
"GtRlSystemDocumentationExplorer",""
"GtRlExamplesExplorer",""
"GtRlIceCommitsGroup",""
"GtRlSystemRepositoriesExplorer",""
"ManifestGToolkitReleaserIcebergExtensions","I store metadata for this package used by various other tools."
"GtRlIceRegistry",""
"GtRlGToolkitRepositoriesExplorer",""
"OrganizationFolder",""
"BuildData",""
"Hudson",""
"JenkinsURL",""
"GithubProjectProperty",""
"JenkinsClient",""
"GitTagAction",""
"ManifestGToolkitReleaserJenkins","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"JSONCodeGeneratorExamples",""
"FreeStyleProject",""
"GtRlReleaserNewCommitsCommandLineHandler",""
"JSONCodeGenerator",""
"FreeStyleBuild",""
"GtRlReleaserCommandLineHandler",""
"Cause_UserIdCause",""
"ViewCredentialsAction",""
"Cause_UpstreamCause",""
"TimerTrigger_TimerTriggerCause",""
"CauseAction",""
"TestResultAction",""
"BuildDiscarderProperty",""
"GtRlProjectLinkWithRepositorySignal",""
"GtRlRepositoryActiveReleaseVersionSignal",""
"GtRlActionSignal",""
"GtRlProjectReleaseStrategySignal",""
"GtRlRepositoryPassiveReleaseVersionSignal",""
"GtRlCreateReleaseActionSignal",""
"GtRlProjectReleaseStructureSignal",""
"ReleaserLogger",""
"GtRlExecuteActionSignal",""
"GtRlReleaseConfigurationSignal",""
"GtDeclarativeColumnedList","GtDeclarativeColumnedList supports a subset of the possible configurations of ${class:name=GtPhlowColumnedListView}.Current limitations:- Only matchParent and fixed column widths are supported!!Internal Representation and Key Implementation Points.!!!Instance Variables	columnTitles:		<Array of String>	columnWidths:		<Array of Integer|nil>	items:		<Array of Array>"
"GtDeclarativeObjectViewAccessor","GtDeclarativeObjectViewAccessor is a leftover from initial development work on remote object viewing over Seamless.  It will be removed as part of the effort to get Seamless remote object viewing working again."
"GtDeclarativeViewAccessorList",""
"GtRemoteInspectorServer","GtRemoteInspectorServer provides a REST/JSON server to enable remote viewing of objects.Typically a limited number of well known named root objects are provided and available for inspection.  From these any number of other objects may be traversed.!!Public API and Key Messages- register:name: 	Register the supplied named object- port: 				Set the port that the server listens on- bindingAddress: 	Set the IPv4 address that the server listens on- start 				Start the server- stop 				Stop the serverA typical startup script is:[[[GtRemoteInspectorServer new	port: 12345;	register: rootObject1 name: 'root1';	register: rootObject2 name: 'root2';	start]]]Default values are specified in ${method:name=GtRemoteInspectorServer>>#initialize}.Inspecting the result will provide an inspector showing the list of named root objects. !!Internal Representation and Key Implementation Points.!!!Instance Variables	accessorLists:		<GtDeclarativeViewAccessorList>	teapot:				<Teapot>"
"GtDeclarativeList",""
"GtDeclarativeObjectGtViewAccessor","GtDeclarativeObjectGtViewAccessor is a leftover from initial development work on remote object viewing over Seamless.  It will be removed as part of the effort to get Seamless remote object viewing working again."
"GtRemoteInspectionSimulation","GtRemoteInspectionSimulation provides an environment for developing and testing remote object inspection within a single image by using converting the views to their declarative form in the inspector.To open a inspector using the declarative views:[[[	GtRemoteInspectionSimulation openOn: anObjectWithDeclarativeViews]]]!!Internal Representation and Key Implementation Points.!!!Instance Variables	object:		<Object> the object being inspected."
"GtRemoteInspectorExporter","GtRemoteInspectorExporter starts from the named objects of the supplied GtRemoteInspectorServer and writes out a JSON file for most of the possible URLs that the server accepts.  The exception is that the raw view (#gtRawFor:) does not have its objects written out (to stop the number of files and disk space from exploding).This allows a simple file server in some other language, e.g. JavaScript, to look like it is serving up all the objects in the supplied server.A typical invocation of the exporter is (from the inspector of a GtRemoteInspectorServer): [[[ GtRemoteInspectorExporter new	server: self;	rootDirectory: '/dev/shm/export';	maxDepth: 3;	export]]]Note that the number of files and consumed disk space will quickly blow out as the depth increases.To avoid creating nested directories the urlTransformationBlock is used to replace the slash character (/) with something else allowed by the file system, an underscore (_) by default.!!Internal Representation and Key Implementation Points.!!!Instance Variables	exportedObjects:		<Set>	maxDepth:					<Integer>	rootDirectory:			<FileReference>	server:					<GtRemoteInspectorServer>	urlTransformationBlock:		<BlockClosure>    Implementation Points"
"GtDeclarativeTextEditor",""
"GtDeclarativeViewAccessorClient",""
"GtRemoteInspector","GtRemoteInspector provides a mechanism for remote viewing of objects over a REST/JSON API.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	namedObjects:		<Object>    Implementation Points"
"GtRemoteInspectorProxy","GtRemoteInspectorProxy acts as a proxy for a remote object to display its views (those that are declarative and can be serialised).It uses the client to make requests to the remote system and the collection of accessors to cache information to minimise client / server communications.GtRemoteInspectorProxy overrides the normal Gt inspection mechanism to display views from the remote object.  Information about the receiver is available in the 'Proxy' tab.  Information about the views defined by the remote object are available in the 'Proxy Views' tab.!!Internal Representation and Key Implementation Points.!!!Instance Variables	accessors:		<Array of GtDeclarativeViewAccessorClient>	client:			<GtRemoteInspectorClient>	name:				<String>    Implementation Points"
"GtDeclarativeView","GtDeclarativeView provides a declarative UI specification for presenting data that can be easily serialised and sent over the wire, including between applications written in different languages.dataTransport is an emumerated value indicating whether the data to be displayed will be included with the specification or is available via reference or by key.]- 1: data is included in the response- 2: data is available by reference- 3: data is available by reference and key (tbc)Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	dataTransport:		<Object>    Implementation Points"
"GtDeclarativeViewAccessor","GtDeclarativeViewAccessors provides management and caching of views between the client and server.  The accessor works with ${class:name=GtRemoteInspectorClient}, ${class:name=GtRemoteInspectorServer} and ${class:name=GtRemoteInspectorProxy} to hide the underlying transport from the views."
"GtDeclarativeViewAccessorServer",""
"GtRemoteInspectorClient","GtRemoteInspectorClient connects to a matching REST/JSON server to enable inspection / viewing of remote objects.A typical startup script is:[[[GtRemoteInspectorServer new	server: 'http://localhost:8080']]]Default values are specified in ${method:name=GtRemoteInspectorClient>>#initialize}.Inspecting the result will provide an inspector showing the list of named root objects.!!Public API and Key Messages- server: specify the address of the server (see example above)- namedObjectAt: 	Retrieve the proxy for the well known object named !!Internal Representation and Key Implementation Points.!!!Instance Variables	server:		<ZnUrl>"
"GtScenery",""
"GtSceneryDocumenterTutorialForContactBookExamples",""
"GtSceneryPlaygroundTwoPharoSnippetsWithVisualization",""
"GtSceneryDocumenterTalk",""
"GtSceneryPlaygroundOnePharoSnippetWithVisualization",""
"GtSceneryDocumenterEmpty",""
"GtSceneryPlaygroundOnePharoSnippetWithFolder",""
"GtSceneryDebuggerOnRope",""
"GtSceneryPlaygroundOnZincJsonRequest",""
"GtSceneryBuilderItem",""
"GtSceneryDebuggerDocumentWithExceptionInExample",""
"GtSceneryPlaygroundOnADictionary",""
"GtSceneryBuilder",""
"GtSceneryConnectorForObjects",""
"GtSceneryDocumenterTutorialInClassComments",""
"GtSceneryTranscriptReflection",""
"GtSceneryConnectorForExample",""
"GtSceneryDocumenterTutorialForMondrian",""
"GtSceneryTranscriptAnimation",""
"GtSceneryCoderOnQuery",""
"GtSceneryDocumenterTutorialForFaceAPI",""
"GtSceneryTranscriptAPI",""
"GtSceneryCoderOnMethod",""
"GtSceneryDocumenterTutorialForExamples",""
"GtSceneryReleaserForGT",""
"GtSpotterDebuggingExceptionHandler",""
"GtSpotterHeaderElement",""
"GtSpotterExitAnnouncement",""
"GtSpotterStart",""
"GtSpotterActOn",""
"GtSpotterSyncTask",""
"GtSpotterProcessor",""
"GtSpotterProcessorLink",""
"GtSpotterSearchFinished",""
"GtSpotterCandidate","I represent one search candidate produced by a spotter porcessor"
"GtCurrentSpotterExceptionHandler",""
"GtSpotterCurrentStepChanged",""
"GtSpotterCandidates",""
"GtSpotterMethodListProcessorFilter",""
"GtSpotterCandidatesAmountChanged",""
"GtSpotterStepRemoved",""
"GtSpotterDeploymentExceptionHandler",""
"GtSpotterPreviewElement",""
"GtSpotterHideHints",""
"GtSpotterStep",""
"GtSpotterAllCandidatesRemoved",""
"GtSpotterBlockIterator",""
"GtSpotterCandidatesProcessor",""
"GlamorousAuthor",""
"GtSpotterSelectedCandidateChanged",""
"GtSpotterContext",""
"GtSpotterSearchField",""
"GtSpotterDiveInElement",""
"GtSpotterProcessorCandidates","I represent a collection of candidates for some Spotter processor"
"GtSpotterNullProcessorFilter",""
"GtSpotterCategorySelected",""
"GtSpotterPager",""
"GtSpotterExtensionSettings",""
"GtSpotterStepElement",""
"GtSpotterHidePreview",""
"GtSpotterDoubleLinkedList",""
"GtSpotterTaskItAsyncTask","I am a asynchronous task adaptor.I use a Bloc TaskIt worker pool to schedule background tasks."
"GtSpotterCandidateDeselected",""
"GtSpotterHelp",""
"GtSpotterCandidatesListProcessor",""
"GtSpotterAllCandidatesAdded",""
"GtSpotterShowPreview",""
"GtSpotterExceptionHandler",""
"GtSpotterElement",""
"GtSpotterDiveOut",""
"GtSpotterSettingsProcessorFilter",""
"GtSpotterDiveInCategory",""
"GtSpotterExceptionHandlerNotFound",""
"GtSpotterIterator",""
"GtSpotterCandidateLink",""
"GtSpotterRevealHints",""
"GtSpotter",""
"GtSpotterUIThreadStream",""
"GtSpotterContextChanged",""
"GtSpotterBreadcrumb",""
"GtSpotterProcessorFilter",""
"GtSpotterCandidateAdded",""
"GtSpotterStepAdded",""
"GtSpotterPagerExamples",""
"GtSpotterStartSample",""
"GtSpotterExamples",""
"GtSpotterElementExamples",""
"GtSpotterModelExamples",""
"GtSpotterStepExamples",""
"GtSpotterCandidatesExamples",""
"GtSpotterBreadcrumbExamples",""
"GtExampleMethodResolverTest","This class contains tests"
"GtInspectorExamplesTest",""
"GtExamplesExamplesWithDependencies","I provide examples for ==GtExample== instances that define various kinds of dependencies."
"GtExamplesParametrizedExamples",""
"GtExampleResolverTest","This class contains tests"
"GtSpotterProcessorsForExamplesTest",""
"GtExamplesExamplesWithInheritance","I provide examples for ${class:GtExample}$ instances that use inherited or overriden examples."
"GtExamplesReleaseTest",""
"GtExamplesAnnouncingExamples",""
"GtExamplesExamplesWithRuntimeErrors","I provide examples for ==GtExample== instances that raise errors when the example is run."
"GtExampleMethodAfterTest","This class contains tests"
"GtInspectorExamplesManualTest","I am a test for manually checking that the inspector presentations work on all the examples objects in the system. I however exclude tests from some classes that can be problematic.I maintain the list of classes for which examples were tested in an external file, so if the image crashed I can resume checking.#run is the main entry point to the test"
"GtExamplesExamplesWithAfter","I provide examples for ==GtExample== instances that have an after method."
"GtExamplesExamplesWithinPackages",""
"GtTranscriptInsertStringAnnouncement",""
"GtTranscript","I am a transcript that can handle both strings and adornments.!Example[[[transcript := GTOTranscript new.element := transcript newEditorElement.transcript nextPutAll: 'testasdasda'.transcript nextPutAll: 'enhanced' with: [ BrTextAdornmentDynamicAttribute new beAppend; adornmentBlock: [ BlElement new size: 70 @ 50; background: Color red; yourself  ]].transcript nextPutAll: 'test'.element]]]"
"GtTranscriptInsertStringCommand",""
"GtTranscriptTextTaskAction",""
"GtTranscriptAnnouncement",""
"GtTranscriptElement","I am a transcript element with support of auto scroll!! Example[[[	| transcript transcriptElement |		transcript := GtTranscript new.	transcriptElement := GtTranscriptElement new.	transcriptElement transcript: transcript]]]"
"GtTranscriptExamples",""
"GtTranscriptNextBuilder","I am a utility class useful for scripting more complicated transcript instructions by cascading different options to be applied on the next string/character that is added to the transcript.Please note that it is mandatory to end the cascade with either ==#put:-== or ==#putAll:==.!!Example[[[	transcript next put: $a.	transcript next 		with: [ ... ];		put: $b]]]"
"GtTranscriptInsertStringTaskAction",""
"GtNestedTreeBuilderInnerStep",""
"GtNestedTreeBuilderSummaryStep",""
"GtNestedTreeNode",""
"GtNestedRectangleTreeMapContainerLayoutIterator",""
"GtNestedTreeBuilderGroupByStep",""
"GtNestedTreeBuilderStepContext",""
"GtNestedTreeLeaf",""
"GtNestedTreeBuilder",""
"GtNestedTreeBuilderRejectStep",""
"GtNestedTreeItem",""
"GtNestedTreeSummaryLeaf",""
"GtNestedRectangleTreeMap","I am a copy of class GtNestedTreeMap. This comment is copied from there, and might not be entirely accuratePlease comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	containerEllipseBlock:		<Object>	leafEllipseBlock:		<Object>	leavesCreationBlock:		<Object>	leavesSizeBlock:		<Object>	roots:		<Object>	traversalBlock:		<Object>    Implementation Points"
"GtNestedTreeBuilderStep",""
"GtNestedTreeBuilderLastStep",""
"GtNestedTreeCollection",""
"GtNestedTreemapExamples",""
"GtNestedTreeMap",""
"GtDefaultSubscriptionTrait",""
"GtSubscriptionTrait",""
"GtAsyncAnnouncerExamples",""
"GtAsyncAnnouncer",""
"GtAnnouncingTrait",""
"GtExtraSubscriptionTrait",""
"TGtAnnouncer",""
"GtAnnouncer",""
"GtAssertionSettings",""
"GtAssertingTrait",""
"TGtAssert",""
"GtFilePharoScriptMimeTypeResolver",""
"GtFilePlayBookTypeResolver",""
"GtFileUtilityConstants",""
"GtFileMimeTypeResolver",""
"GtFilePillarMimeTypeResolver",""
"GtFileUtility",""
"GtRecordingPulseEvent",""
"GtRecordingSpaceFrameEvent",""
"GtRecordingSpaceListener",""
"GtBlocUIProcessTally",""
"GtRecordingPulseListener","pulseListener := GtRecordingPulseListener new.pulseListener 	registerPulseLoop;	registerSpaceListenerFor: BlUniverse default spaceManager spaces first.pulseListener unregisterAll."
"GtRecordingSpaceFrameEventsGroup",""
"GtMessageTallyWrapper",""
"GtIcebergUtility","Use ${class:GtResourcesUtility}$ instead."
"GtResourcesUtilityExamples","I exemplify ${class:GtResourcesUtility}$"
"GtResourcesUtilityMacOSResourcesLocation","I search for a resource (file or directory) in a MacOS resources directory:${example:GtResourcesUtilityExamples>>#basicMacOSResourcesLocation|previewExpanded=true|noCode}$"
"GtResourcesUtilityPathExtractor","I receive a code snippet string and return a ${class:Path}$ as a result of the code snippet.My main method to use is ${method:GtResourcesUtilityPathExtractor>>#canEvaluate:}$. !! Valid Code SnippetsThe following code snippet ${example:GtResourcesUtilityPathExtractorExamples>>#permitedLongPathString|label=#yourself}$ is evaluated and I return:${example:GtResourcesUtilityPathExtractorExamples>>#permitedLongPath|codeExpanded=false|previewExpanded=true}$!! Invalid Code SnippetsOnly snippets with reference to ${class:Path}$, string literals, and ==*== and ==/== messages are valid.For example, the ${example:GtResourcesUtilityPathExtractorExamples>>#unwantedUnarySender2String|label=#yourself}$ is not evaluated and I return ==nil== instead: ${example:GtResourcesUtilityPathExtractorExamples>>#unwantedUnarySender2}$"
"GtResourceReference",""
"GtResourcesUtilityLocation","I represent a location where a ${class:Path}$ (file or directory) is searched for.My subclasses should implement ${method:GtResourcesUtilityLocation>>#resourceAtPath:}$. My subclasses are used by ${class:GtResourcesUtility}$.See my subclasses for more details ${class:GtResourcesUtilityLocation|expanded=true|show=#gtSubclassesFor:}$."
"GtResourcesUtilityLocationResult","I represent a search result which can be either- positive: ${class:GtResourcesUtilityLocationExistingResult}$, or- negative: ${class:GtResourcesUtilityLocationNoResult}$.I am used by ${class:GtResourcesUtilityLocation}$.My subclasses are created in ${method:GtResourcesUtilityLocation>>#resultForFile:|expanded=true}$."
"GtResourcesUtilityPathExtractorExamples","I exemplify ${class:GtResourcesUtilityPathExtractor}$."
"GtResourcesUtility","I find a ${class:FileReference}$ to a directory or file that in one of a locations.My main method is ${method:GtResourcesUtility>>#resourceAtPath:}$.I keep ${class:GtResourcesUtilityLocation}$ instances. Each instance defines where a resource is searched. Check individual class comments ${class:GtResourcesUtilityLocation|expanded=true|show=#gtSubclassesFor:|height=150}$ for more details.!! Live Search You can search live here by clicking on the search icon in the inspector: ${example:GtResourcesUtilityExamples>>#resourceUtility|noCode|previewHeight=200}$!! UsageYou can either use a relative ${class:Path}$ to a recourse:${example:GtResourcesUtilityExamples>>#gtResourceAtFeenkUtilityDefinedAsPath}$Or you can pass a ${class:String}$ as a relative resource path:${example:GtResourcesUtilityExamples>>#gtResourceAtFeenkUtilityDefinedAsString}$In case of non-existing path, it will return a possible reference inside of the ${method:IceLibgitRepository class>>#repositoriesLocation}$ directory:${example:GtResourcesUtilityExamples>>#gtResourceAtNonExistingPath}$"
"GtResourcesUtilityGtExtraLocation","I search for a resource (file or directory) in a ${example:GtResourcesUtilityExamples>>#gtExtraDirectory|label=#basename}$ directory:${example:GtResourcesUtilityExamples>>#basicGtExtraLocation|previewExpanded=true|noCode}$"
"GtResourcesUtilityLocationExistingResult","I represent a positive result. It means that a file or directory exists.See ${class:GtResourcesUtilityLocationResult}$ for more details.!! Example${example:GtResourcesUtilityExamples>>#existingResult|codeExpanded=false|previewExpanded=true}$"
"GtResourcesUtilityResultContext","I am passed as a searched item to a ${class:GtSpotter}$ list, see for example the ${method:GtResourcesUtility>>#spotterStringResourcesAtLocationsFor:}$ method.I keep a ${class:GtResourcesUtilityLocation}$ object as a search context (root directory).I keep a ${class:GtResourcesUtilityLocationResult}$ object as a resource search result."
"GtResourcesUtilityConstants","I keep constrants used by ${class:GtResourcesUtility}$."
"GtResourcesUtilityIcebergLocation","I search for a resource (file or directory) in Iceberg repositories directory:${example:GtResourcesUtilityExamples>>#basicIcebergLocation|previewExpanded=true|noCode}$"
"GtResourcesUtilityLocationNoResult","I represent a negative result. It means that a file or directory does not exist.See ${class:GtResourcesUtilityLocationResult}$ for more details.!! Example${example:GtResourcesUtilityExamples>>#noResult|codeExpanded=false|previewExpanded=true}$"
"GtBufferedReadStream","GtBufferedReadStream subclasses ${class:ZnBufferedReadStream}$ to provide two enhancements:- ${method:GtBufferedReadStream>>#upToEnd}$ is optimised to attempt to retrieve the entire contents in one call.  Previously it would retrieve multiple buffers and write them to a WriteStream, resulting in unnecessary copying and garbage.- ${method:GtBufferedReadStream>>#savingPositionDo:}$ has been added. ${class:ZnBufferedReadStream}$ supports position, so there's no reason to use a ${class:ZnPositionableReadStream}$  in this case.Both of these will be submitted as enhancments to the core system.!!Internal Representation and Key Implementation Points.No other changes are made to ${class:ZnBufferedReadStream}$, the interface is the same."
"GtSystemUtility",""
"GtTaskerOrderedNonRepetitive","I am a tasker that collects ${class:GtTaskerTask}$instances. If a task is igual with an already added task, I remove the previous one and add the new one at the same position. ${class:GtTaskerTask}$ subclasses should therefore implement ===== and ==hash== methods to collaborate correctly with me.The following example explains is better. ==aTaskOne== and ==aTaskThree== are equivalent, so the tasker keeps only two tasks and the first one is the ==aTaskThree==:${example:GtTaskerExamples>>#keepOrderInOrderedNonRepetitiveTasker|previewExpanded=true}$Executing ${method:GtTasker>>#flush}$ will execute all tasks and eliminate them from the collection. See the follosing example: ${example:GtTaskerExamples>>#flushOrderedNonRepetitiveTasker|previewExpanded=true}$"
"GtTaskerTask","I am an abstract class and I define an opperation to perform calling ${method:GtTaskerTask>>#execute}$. I am used by ${class:GtTasker}$ which collects me and decides when to execute me."
"GtProtoTasker","I am an abstract tasker defining mandatory methods for all taskers. Tasker is responsible for collectin ${class:GtTaskerTask}$ tasks and executing them when requested. Mandatory methods are: - ${method:GtProtoTasker>>#addTask:|expanded=true}$- ${method:GtProtoTasker>>#flush|expanded=true}$Interesting taskers to explore are ${class:GtTaskerOrderedNonRepetitive}$ and ${class:GtPostponingTasker}$."
"GtTasker","I am an abstract class for all sequential taskers that keep a collection of tasks.${class:GtTaskerOrderedNonRepetitive}$ can be instantiated by calling ${method:GtTasker class>>#orderedNonRepetitive}$."
"GtTaskerExamples","I examplify Tasker. I recommend you to start exploring documentation at ${class:GtProtoTasker}$."
"GtTaskerValuableTask","I am a ${class:GtTaskerTask}$ defining as an operation any object that understand message ==value==. Usually it is a ${class:BlockClosure}$ without parameters.The following example shows my basic usage: ${example:GtTaskerExamples>>#basicValuableTask}$"
"GtPostponingTasker","I am tasker that automatically execute collected tasks, ${class:GtTaskerTask}$ after an certain inactivity. I am not responsible how tasks are collected, it is a responsibility of another tasker that is set as an instance variable using ${method:GtPostponingTasker>>#tasker:}$. The inactivity and suspencion time is currently fixed, see ${method:GtPostponingTasker>>#initialize|expanded=true}$. The value is returned by ${method:GtPostponingTasker>>#suspencion}$. It can be easily improved to be configurable if needed.The following example shows how many tasks are added and executed after the predetermined time of inactivity (the final task list is therefore empty): ${example:GtTaskerExamples>>#addingManySameTasksToPostponingTasker|previewExpanded=true}$"
"GtBufferedReadStreamTests","This class contains tests"
"GtEvaluateSourceCodeCommand",""
"GtContextHighlightingBindingStrategy",""
"GtNoBindings",""
"GtBindingExamples",""
"GtSnippetBindingStrategy",""
"GtSnippetBindings",""
"GtBindingStrategy",""
"GtBindingStrategyWithRequestor",""
"ManifestGToolkitVariableBindings","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GtBindingsTrait",""
"GtHighlightingBindingStrategy",""
"GtCommandExamples",""
"GtWorld",""
"GtHomeExternalLinksSection",""
"GtToolStencil",""
"GtTranscriptStencil",""
"GtWorldElement",""
"GtSpawnSpotter",""
"GtHomeSlideShowsSection",""
"GtCoderStencil",""
"GtHomeSectionsCollector",""
"GtWorldStartupAction",""
"GtHomeSection",""
"GtHomeToolsSection",""
"GtMonitorStencil",""
"GtHome",""
"GtHomeDocumentationSection",""
"GtToolButtonStencil",""
"GtPlaygroundStencil",""
"GtToolsMenu",""
"FAMIXComponentBuilder",""
"FAMIXClassBlueprint",""
"GtSmaCCPreprocessedParserStyler",""
"FAMIXComponentDependency",""
"GtPreprocessedText",""
"FAMIXSystemAttraction","This class encapsulates the logic of the system attraction view. It is applicable to a set of famix types."
"FAMIXComponent","A generic component"
"VSProjectFileReference",""
"VSProjectFileInclude",""
"VSProject",""
"VSProjectFileCompile",""
"VSProjectImporter",""
"GtConnectorPetitParser2Styler",""
"GtCoderExpandablePetitParserProductionStyler",""
"Gt4PPNamedChildrenVisitor",""
"Gt4XMLPositionWellFormedParserTokenizer","This class is a tokenizer for well-formed XML that tracks token start/end positions. Does not support entities or validation."
"Gt4XMLHighlighter","This is a base class for highlighters that highlight Text objects using XMLHighlights."
"Gt4XMLStyler",""
"Gt4XMLHighlightDefaults","This is a base class for storing the default highlight TextColors used by a highlighter. It gets the initial defaults from Shout text styling."
"Gt4XMLDocumentHighlighter","This class is a highlighter to highlight XML document Text objects using XMLHighlights."
"Gt4XMLSAXPositionHandler","This class is a SAXHandler that can track the positions of tokens. Does not support validation or entity replacement but can check wellformedness and namespaces."
"Gt4XMLDocumentHighlightDefaults","This class stores the default highlight TextColors used by the document highlighter. It gets the initial defaults from Shout text styling."
"Gt4XMLSAXPositionParserDriver","This class is a SAX driver that forwards token start/end positions to a SAXHandler. Does not support entities or validation, but does support namespaces."
"Gt4XMLHighlightingParser",""
"Gt4XMLHighlightedToken","This class stores a highlight TextColor and 1-based start/end highlight positions."
"GlutinNewEventsEvent","Emitted when new events arrive from the OS to be processed."
"GlutinWindowScaleFactorChangedEvent",""
"GlutinHeadlessContextExamples",""
"GlutinEventMouseButton",""
"GlutinTouchEvent",""
"GlutinPixelFormat",""
"GlutinEventMouseButtonType",""
"GlutinUnknownEvent",""
"GlutinLibrary",""
"GlutinWindowedContextExamples",""
"GlutinDeviceEventModifiersChangedEvent",""
"GlutinWindowMovedEvent",""
"GlutinExternalObjectExamples",""
"GlutinEventVirtualKeyCode",""
"GlutinMouseInputEvent",""
"TGlutinLibrary",""
"GlutinWindowedContext","Represents an OpenGL context and the Window with which it is associated."
"GlutinControlFlow",""
"GlutinRedrawEventsClearedEvent",""
"GlutinMouseScrollDelta",""
"GlutinPixelFormatExamples",""
"GlutinFetchedEvents",""
"GlutinWindowCloseRequested",""
"GlutinPixelFormatRequirements",""
"Glutin",""
"GlutinEventMouseScrollDeltaType",""
"GlutinWindowEvent",""
"GlutinExternalObject",""
"GlutinWindowsRegistry",""
"GlutinLoopDestroyedEvent","Emitted when the event loop is being shut down. This is irreversable - if this event is emitted, it is guaranteed to be the last event emitted."
"GlutinWindowRedrawRequestedEvent",""
"GlutinContextBuilderExamples",""
"GlutinBaseEvent",""
"GlutinEventsHandler",""
"TGlutinPtr",""
"GlutinMouseWheelEvent",""
"GlutinContextBuilder",""
"GlutinCursorIcon",""
"GlutinResumedEvent","Emitted when the application has been resumed."
"GlutinMonitorId",""
"GlutinEventsFetcher",""
"GlutinPixelFormatRequirementsExamples",""
"GlutinWindowDestroyedEvent",""
"GlutinWindowBuilder",""
"GlutinMappedEvent",""
"GlutinUserInterruptHandler",""
"GlutinEventTouchPhase",""
"GlutinCursorMovedEvent",""
"GlutinContext",""
"GlutinEnum",""
"GlutinMainEventsClearedEvent","Emitted when all of the event loop's events have been processed and control flow is about to be taken away from the program."
"GlutinWindowResizedEvent",""
"GlutinEventsLoopExamples",""
"GlutinEventModifiersState",""
"GlutinReceivedCharacterEvent",""
"GlutinEventLoop",""
"GlutinEventInputElementState",""
"GlutinSuspendedEvent","Emitted when the application has been suspended."
"GlutinEventCallback",""
"GlutinWindowBuilderExamples",""
"GlutinDeviceEvent",""
"GlutinWindowFocusedEvent",""
"GlutinWindowEventsSensor",""
"GlutinEventType",""
"GlutinKeyboardInputEvent",""
"GlutinHeadlessContext",""
"TGlutinEventVisitor",""
"GlutinContextApi",""
"GlutinMorphicEventHandler",""
"GlutinWorldRenderer",""
"GlutinGLBuffer",""
"GlutinGLBufferRenderer","I render a pixel buffer ${class:GlutinOpenGLBuffer}$ as a texture ${class:GlutinOpenGLTexture}$ in a glutin window using Gleam API"
"GlutinGLTexture",""
"SpartaCairoSurfacePattern",""
"SpartaCairoFreetypeFontFace",""
"SpartaCairoShapeFactory",""
"SpartaCairoFreetypeFontBuilder",""
"SpartaCairoStatus",""
"SpartaCairoFontType",""
"SpartaCairoEnum",""
"TSpartaCairoContext",""
"SpartaCairoSurfacePaint",""
"SpartaCairoSingleSourceFilter",""
"SpartaCairoSvgSurface",""
"SpartaCairoLinearGradientPattern",""
"SpartaCairoFillPainter",""
"SpartaCairoTextMetrics","I store the extents of a single glyph or a string of glyphs in user-space coordinates. Because text extents are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.bearingX - the horizontal distance from the origin to the leftmost part of the glyphs as drawn. Positive if the glyphs lie entirely to the right of the origin.bearingY - the vertical distance from the origin to the topmost part of the glyphs as drawn. Positive only if the glyphs lie completely below the origin; will usually be negative.width - width of the glyphs as drawnheight - height of the glyphs as drawnadvanceX - distance to advance in the X direction after drawing these glyphsadvanceY - distance to advance in the Y direction after drawing these glyphs. Will typically be zero except for vertical text layout as found in East-Asian languages."
"SpartaCairoPdfCanvas",""
"SpartaCairoNewEnum",""
"SpartaCairoExtendMode",""
"SpartaCairoStrokePainter",""
"SpartaCairoPatternBuilder",""
"SpartaCairoLinearGradientPaint",""
"SpartaCairoExamples",""
"SpartaCairoImageSurface",""
"SpartaCairoPattern",""
"SpartaCairoMetricsProvider",""
"SpartaCairoGlyph",""
"SpartaCairoCanvas",""
"SpartaCairoHintStyle",""
"SpartaCairoCompositionOp",""
"TSpartaCairoPlainPtr",""
"SpartaCairoTextExamples",""
"SpartaCairoPaint",""
"SpartaCairoLibrary",""
"SpartaCairoScaledFont",""
"SpartaCairoFontOptions",""
"SpartaCairoClipper",""
"SpartaCairoTextPainter",""
"SpartaCairoSubpixelOrder",""
"SpartaCairoFreetypeSynthesize",""
"SpartaCairoAntialias",""
"TSpartaCairoDebug",""
"SpartaCairoPathBuilder",""
"SpartaCairoGaussianBlurFilter",""
"SpartaCairoLayerBuilder",""
"SpartaCairoRadialGradientPattern",""
"SpartaCairoFontFace",""
"SpartaCairoFilterPainter",""
"SpartaCairoSvgCanvas",""
"SpartaCairoSamplingFilter",""
"SpartaCairoFillRule",""
"SpartaCairoPaintProvider",""
"SpartaCairoFiltersFactory",""
"SpartaCairoRadialGradientPaint",""
"SpartaCairoFilter",""
"SpartaCairoPdfSurface",""
"SpartaCairoGradientPattern",""
"SpartaCairoBitmapBuilder",""
"SpartaCairoMatrix",""
"SpartaCairoOffscreenCanvas",""
"SpartaCairoJoinStyle",""
"SpartaCairoContent",""
"TSpartaCairoRefPtr",""
"SpartaCairoTextRun",""
"SpartaCairoGradientPaint",""
"SpartaCairoDrawOptions",""
"SpartaCairoSurface",""
"SpartaCairoPath",""
"SpartaCairoError",""
"SpartaCairoFontMetrics",""
"SpartaCairoSurfaceFormat",""
"SpartaCairoHintMetrics",""
"SpartaCairoCapStyle",""
"TSpartaCairoLibrary",""
"SpartaCairoStrokeOptions",""
"SpartaCairoLayer",""
"SpartaCairoTransformationBuilder",""
"TSpartaTextExamples",""
"SpartaFontStretch",""
"TSpartaRadialGradientPaint","! TSpartaRadialGradientI define an api of a radial gradient. Backend specific radial gradient must implement all my methods.!! OverviewI am responsible for setting inner and outer radius as also inner and outer center of a radial gradient. Radii are defined as Numbers while centers as Points in user space coordinate system. I also add a few path-paint dispatch methods.Radial gradients must be created using paint builder provided by canvas: ==canvas paint radialGradient==!! Public API and Key Messages- ==innerCenter:== - set inner center of the gradient circle- ==outerCenter:== - set outer center of the gradient circle- ==innerRadius:== - set radius of inner circle- ==outerRadius:== - set radius of outer circle!! See- *Paint>../TSpartaPaint.trait/README.md*- *Gradient>../TSpartaGradientPaint.trait/README.md*- *Linear gradient>../TSpartaLinearGradientPaint.trait/README.md*- *Canvas>../SpartaCanvas.class/README.md*- *Sparta>/README.md*!! Example:Simple gradient to fill rectangle (0@0 extent: 400@250):[[[languagae=smalltalkcanvas paint radialGradient	stops: { 0 -> Color red  . 0.5 -> Color purple . 1 -> Color blue };	innerCenter: 100@25;	innerRadius: 40;	outerRadius: 400.]]]+https://github.com/syrel/Sparta/raw/master/images/TSpartaRadialGradientPaint/01_radial_smooth.png|label=smoothGradient+Complex radial gradient that reflects itself to fill rectangle (0@0 extent: 400@250):[[[languagae=smalltalkcanvas paint radialGradient	stops: { 0 -> Color red . 0.5 -> Color purple . 1 -> Color blue };	innerCenter: 100@75;	outerRadius: 50;	reflect.]]]+https://github.com/syrel/Sparta/raw/master/images/TSpartaRadialGradientPaint/02_radial_waves.png|label=advancedGradient+"
"SpartaTransformationTranslation",""
"TSpartaLinearGradientPaint","! TSpartaLinearGradientI define an api of a linear gradient. Backend specific linear gradient must implement all my methods.!! OverviewI am responsible for setting ==begin== and ==end== of a linear gradient. They are defined as Points in user space coordiante system. I also add a few path-paint dispatch methods.Linear gradients must be created using paint builder provided by canvas: ==canvas paint linearGradient==!! Public API and Key Messages- ==begin:== - set a coordiante where linear gradient starts- ==end:== - set and end point of a gradient!! See- *Paint>../TSpartaPaint.trait/README.md*-- *Gradient>../TSpartaGradientPaint.trait/README.md*--- *Radial>../TSpartaRadialGradientPaint.trait/README.md*--- *Canvas>../SpartaCanvas.class/README.md*- *Sparta>/README.md*!! Example:Simple gradient to fill rectangle (0@0 extent: 400@250):[[[languagae=smalltalkcanvas paint linearGradient	stops: { 0 -> Color red  . 0.5 -> Color purple . 1 -> Color blue };	begin: 0@0;	end: 400@250.]]]+https://github.com/syrel/Sparta/raw/master/images/TSpartaLinearGradientPaint/02_smooth_red_blue.png|label=smoothGradient+Complex gradient rotated by 45 degrees that reflects itself to fill rectangle (0@0 extent: 400@250):[[[languagae=smalltalkcanvas paint linearGradient	stops: { 0 -> Color red . 0.5 -> Color green. 1 -> Color blue };	begin: 0@0;	end: 0@50; ""define horizontal gradient""	rotateByDegrees: 45;	reflect.]]]+https://github.com/syrel/Sparta/raw/master/images/TSpartaLinearGradientPaint/01_red_blue.png|label=advancedGradient+"
"SpartaTexture",""
"TSpartaFilterSource","I add single source input functionality to the Filter primitive.Classes that use me must implment #sourceFilter: and #sourceSurface:"
"SpartaRectangle","I am mutable implementation of Rectangle which stores coordinates as Numbers and not Points"
"TSpartaDiscreteTransferFilter","I am a specific discrete transfer filter.https://docs.webplatform.org/wiki/svg/elements/feComponentTransferhttps://www.w3.org/TR/filter-effects/#feComponentTransferElement.Examples	Extract alpha channel from source ignoring red, green, blue.	canvas discreteTransferFilter		disableRed: false;		tableRed: 0.0;		disableGreen: false;		tableGreen: 0.0;		disableBlue: false;		tableBlue: 0.0;		disableAlpha: true"
"SpartaFontFace","I represent a font face.My properties are backend specific"
"TSpUserFontSet","I define an API of user font set that allows custom fonts to be used without the need to install them in the system"
"SpartaTransformationBuilder","! SpartaTransformationBuilderI am a transformation builder used to help developers work  with canvas transformation matrix.!! OverviewI provide a way to manage canvas transformation. ==SpartaCanvas== is almost stateless and transformation is shared between draw operation. This results in a bit more complex management, transformation matrix should be put on top of the stack before modification so that it can be restored later. ==#push== and ==#pop== methods are responsible for stack management.In order to function properly, users  should take care about possible errors and make sure that all pushes are balanced with corresponding pop even if there was an ==Exception==. For that purpose I provide ==#during:== method that accepts block closure and makes sure that all modifications to transformation matrix stay only within block's scope.For optimization reasons I do not change transformation of a canvas on every modification, instead I implement transaction-commit pattern. All modifications to transformation matrix are collected and need to be applied by sending ==#apply== message. Once applied current transformation is reset in the builder  and replaced by identity transformation, ready for next transaction.I operate on ==SpartaMatrix==. However, any polymorphic Transform object can work (for example ==AthensAffineTransform==). Transformation matrix can be set directly using ==#set:== method or modified in place by one of multiple provided methods: ==translateBy:==, ==scaleBy:==, ==multiplyBy:==, ==rotateBy*:==In general, transformation is backend specific and should be only managed by me. At the same time I can be backend specific, so users should only rely on builders provided by canvas. !! Public API and Key Messages- ==apply== - commit changes and apply them on the canvas- ==push== - puts current transformation matrix on the stack- ==pop== - balances one push on the stack- ==set:== - set transformation matrix to provided one- ==during:== scopes all modifications to transformation  inside of block closure- ==matrix== - returns current - ==translateBy:== apply translation by a point- ==scaleBy:== apply scale transformation by a factor as number or point- ==multiplyBy:== - concatenate current transformation with provided one- ==rotateByDegrees:== rotate clockwise by amount of degrees- ==rotateByRadians:== rotate clockwise by amount of radians!! Example: Changing transformation with manual stack management:[[[language=smalltalkcanvas transform	push;	translateBy: 20@10;	scaleBy: 0.8;	rotateByDegrees: 45;	apply.canvas pop.]]]Scoping modifications within block closure:[[[language=smalltalkcanvas transform during: [	canvas transform		translateBy: 20;		apply.]""transformation is automatically restored""]]]!! Internal Representation and Key Implementation Points.!!! Instance Variables - transformation:	==<SpartaMatrix>=="
"SpartaFontBuilder","! SpartaFontBuilderI am a font builder. See *https://www.w3.org/TR/CSS2/fonts.html* for more information about fronts styles.!! OverviewI help developers to create backend specific font groups. A font group consists of font families and style. Font family can defined be named (""Arial"", ""Times new Roman"", etc) and generic (""sans-serif"", ""serif"", ""monospace"", etc). Font style is represented by a set of properties which include size, weight, stretch, style kind (oblique, bold) and language.I am created and managed by canvas. Fonts are backend specific and must be only created by me. Created fonts can be later used by text painter to actually render strings.!! Public API and Key Messages- ==build== - finish  creation and return font group.- ==named:== add named font family to the font group.- ==cursive== - add cursive font family to the group.- ==fantasy== - add fantasy generic font family to the group.- ==fixed== - add fixed generic font family to the group.- ==monospace== - add monospace generic font family to the group.- ==sansSerif== - add sans-serif generic font family to the group.- ==serif== - add serif generic font family to the group.- ==size:== - set required font size in pixels- ==stretch*== - set stretch mode (condensed, expanded, normal). Do not set stretch value directly, because its actual value is backend specific.- ==style*== - set style kind (Italic, Oblique, Normal). Do not set style value directly, in general it is backend specific.- ==weight*== - set named font weight (Bold, Normal, Thin).- ==weight:== - set weight value, it should be a number in interval [ 100 ... 800 ]. Weight is not backend specifc and can be set directly. [[[language=smalltalkfont := canvas font	sansSerif;	named: 'Arial';	size: 18;	styleItalic;	weightThin;	build.]]]!! Internal Representation and Key Implementation Points!!! Instance Variables- language:	==<String>==- size:		==<Number>==- stretch:	==<Enum>==- style:	==<Enum>==- weight:	==<Number>==!!! Implementation PointsUsers should rely as less as possible on raw style values and use builder messages instead"
"SpartaUnimplementedShadowPainter",""
"SpartaFilterPainter","! SpartaFilterPainterI am an abstract filter painter used to construct filter drawing operation.!! OverviewI am responsible for creation and execution of filter draw operation. It requires an area on which it should be applied, an offset (if not set, area origin is used instead) and actual filter primitive.Developers should use me to create a filter drawing operation. It involves a configuration step of wanted filter and actual drawing step. I must be only created by canvas, and never directly refering my class.!! Public API and Key Messages- ==area:== - set an area on which filter should be applied (source area)- ==type:== - an object representing one of filter primitives. See ==filters== protocol in *SpartaCanvas>../SpartaCanvas.class/README.md*- ==to:== - ''(optional)'' set location on canvas where result should be blended (destination). If not set, area origin is used.- ==drawOptions:== - ''(optional)'' set additional draw parameters, such as global alpha, composition operator and antialias.!! Example:[[[language=smalltalkcanvas filter	area: (100@100 extent: 200@200);	to: 150@150;	type: (canvas gaussianBlurFilter		source: canvas;		stdDeviation: 4);	draw.]]]!! Internal Representation and Key Implementation Points.!!! Instance Variables- destinationPoint:     ==<Point>==- drawOptions:		==<TSpartaDrawOptions>==- filter:		==<TSpartaFilter>==- sourceRectangle:	==<Rectangle>==!!! Implementation PointsI am an abstract class. Concrete backends must implement ==#draw=="
"SpUserFontSource","I represent a font face source and know how to retrieve font contents from it"
"TSpartaSurfacePaint",""
"SpartaUnsupported","I am a silent notification that is signaled if backend does not support a requested operation"
"TSpartaPathBuilder","!! TSpartaPathBuilderI declare an API of a path builder.!! OverviewI provide a set of methods to create an arbitrary vector path.I can work in both relative and absolute mode, that influences on how path is created.!! Public API and Key Messages- ==absolute== - switch to absolute coordinates mode. Every Point provided as argument to my methods is supposed to be specified in global coordinates.- ==relative== - switch to relative coordinates mode. Points provided as arguments are treated as related deltas from current path's end point.- ==moveTo:== - moves current end point to a Point.- ==lineTo:== - adds a line segment from current end point to a Point- ==curveVia:to:== - adds a Quadratic Bezier curve via an anchor point to aPoint- ==curveVia:and:to:== - adds a Cubic Bezier curve via two anchor points to a Point- ==*ArcTo:== - adds an arc segment to a Point.- ==close== - closes a path, connecting current end point with start point with line- ==finish== - to end path construction and return an instance SpartaPath. Any message send to PathBuilder after finish will result in a crash.!! Example:Create a rectangle path similar to (20@20 corner: 40@40):[[[language=smalltalkpath := canvas path	relative;	moveTo: 20@20;	lineTo: 0@20;	lineTo: (20@0) negated;	lineTo: (0@20) negated;	close;	finish.]]]!! Internal Representation and Key Implementation Points.    Implementation Points"
"SpartaTransformationRotation",""
"TSpartaInspectorPreview","I add preview feature to the object that can be converted to or presented as a Form.Classes that use me must implement asForm convertion method."
"SpartaStrokedBoundsCache","I provide the support of stroked bounds cache. The computation of the stroked bounds is expensive and we want to provide a quick consecutive access to it forthe same stroke options.[[[	cache := SpartaStrokedBoundsCache new.	cache		strokedBounds: strokeOptions		ifAbsentPut: [ ""compute bounds here"" ]]]]"
"TSpartaFilter","I define a minimum set of apis that every filter primitive should have."
"SpartaEllipse",""
"TSpartaConvolveMatrixFilter","ConvolveMatrix applies a matrix convolution filter effect. A convolution combines pixels in the input image with neighboring pixels to produce a resulting image. A wide variety of imaging operations can be achieved through convolutions, including blurring, edge detection, sharpening, embossing and beveling.https://www.w3.org/TR/SVG/filters.html#feConvolveMatrixElementA matrix convolution is based on an n-by-m matrix (the convolution kernel) which describes how a given pixel value in the input image is combined with its neighboring pixel values to produce a resulting pixel value. Each result pixel is determined by applying the kernel matrix to the corresponding source pixel and its neighboring pixels. The basic convolution formula which is applied to each color value for a given pixel is:COLORX,Y = (               SUM I=0 to [orderY-1] {                 SUM J=0 to [orderX-1] {                   SOURCE X-targetX+J, Y-targetY+I *  kernelMatrixorderX-J-1,  orderY-I-1                 }               }             ) /  divisor +  bias * ALPHAX,Y where ""orderX"" and ""orderY"" represent the X and Y values for the ‘order’ attribute, ""targetX"" represents the value of the ‘targetX’ attribute, ""targetY"" represents the value of the ‘targetY’ attribute, ""kernelMatrix"" represents the value of the ‘kernelMatrix’ attribute, ""divisor"" represents the value of the ‘divisor’ attribute, and ""bias"" represents the value of the ‘bias’ attribute.Note in the above formulas that the values in the kernel matrix are applied such that the kernel matrix is rotated 180 degrees relative to the source and destination images in order to match convolution theory as described in many computer graphics textbooks.To illustrate, suppose you have a input image which is 5 pixels by 5 pixels, whose color values for one of the color channels are as follows:    0  20  40 235 235  100 120 140 235 235  200 220 240 235 235  225 225 255 255 255  225 225 255 255 255and you define a 3-by-3 convolution kernel as follows:  1 2 3  4 5 6  7 8 9Let's focus on the color value at the second row and second column of the image (source pixel value is 120). Assuming the simplest case (where the input image's pixel grid aligns perfectly with the kernel's pixel grid) and assuming default values for attributes ‘divisor’, ‘targetX’ and ‘targetY’, then resulting color value will be:(9*  0 + 8* 20 + 7* 40 +6*100 + 5*120 + 4*140 +3*200 + 2*220 + 1*240) / (9+8+7+6+5+4+3+2+1)Because they operate on pixels, matrix convolutions are inherently resolution-dependent. To make ‘feConvolveMatrix’ produce resolution-independent results, an explicit value should be provided for either the ‘filterRes’ attribute on the ‘filter’ element and/or attribute ‘kernelUnitLength’.‘kernelUnitLength’, in combination with the other attributes, defines an implicit pixel grid in the filter effects coordinate system (i.e., the coordinate system established by the ‘primitiveUnits’ attribute). If the pixel grid established by ‘kernelUnitLength’ is not scaled to match the pixel grid established by attribute ‘filterRes’ (implicitly or explicitly), then the input image will be temporarily rescaled to match its pixels with ‘kernelUnitLength’. The convolution happens on the resampled image. After applying the convolution, the image is resampled back to the original resolution.When the image must be resampled to match the coordinate system defined by ‘kernelUnitLength’ prior to convolution, or resampled to match the device coordinate system after convolution, it is recommended that high quality viewers make use of appropriate interpolation techniques, for example bilinear or bicubic. Depending on the speed of the available interpolents, this choice may be affected by the ‘image-rendering’ property setting. Note that implementations might choose approaches that minimize or eliminate resampling when not necessary to produce proper results, such as when the document is zoomed out such that ‘kernelUnitLength’ is considerably smaller than a device pixel."
"SpartaFillEvenOddRule","SVG defines the even-odd rule as follows:	Even-odd rule determines the ""insideness"" of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside."
"TSpTextPropertiesProvider",""
"SpartaPaintProvider","I am a paint provider.I am responsible for creation of backen specific  paints, for example linear or radial gradients, surface paint or a color paint out of Color.Concrete backend specific implementations must override and implement all my methods to return a new paint objects.Public API and Key Messages- color: create a color paint from Color. It is recommended to make Color be polymorphic with Paint- linearGradient - return a new linear gradient object that implements TSpartaLinearGradientPaint- radialGradient - return a new radial gradient object that implements TSpartaRadialGradientPaint   canvas paint linearGradient	stops: { 0 -> Color red. 1 -> Color blue};	begin: 0@0;	end: 100@100 Internal Representation and Key Implementation Points.    My subclasses must provide backend specific paints"
"SpartaUnimplementedClipper",""
"SpartaStrokePainter","! SpartaStrokePainterI represent a stroke path operation builder - a concrete type of paint-path draw operation.!! OverviewI define an abstract api that all stroke painters should provide.I am a final step in path-paint double dispatch and implement all stroke draw related methods.As optimization I have separate methods to stroke rectangle and path with color, linear and radial gradients as also with surface.Backends may implement every method differently, add more dispatch stages or provide a single uniform method.I am instantiated and pre-configured by *==SpartaCanvas==>../SpartaCanvas.class/README.md*.Do  not create instances of me directly, instead use canvas as service provider.This way reference to my class will not be hardcoded which increases flexibility.!! Public API and Key Messages- ==paint:== - set an object to be used as paint (can be ==Color==, *==SpartaCanvas==>../SpartaCanvas.class/README.md*, ==SpartaSurface==, *==TSpartaPaint==>../TSpartaPaint.trait/README.md*)- ==path:== - set path to be stroked (can be ==TSpartaPath== or ==Rectangle==)- ==width:== - set stroke width (==Number== - integer or float)- ==dashOffset:== - set the location along a path where the dash of a stroke will begin. The higher the number, the further along the path the dashes will begin. (==Number== - integer or float)- ==dashPattern:== - define dashes using array representation in form =={""fill"" . ""gap"" . ""fill"" . ""gap"" }==, for example ==#(20 30 50 40)==- ==draw== - perform stroke operation with previously configured parameters and options!! Example: Fill the whole canvas with white color:[[[language=smalltalkgradient := canvas paint linearGradient  begin: 50@25;  end: 300@200;  stops: { 0 -> Color red . 1 -> Color blue }.	canvas stroke  paint: gradient;  path: (50@25 extent: 300@200);  width: 16;  dashOffset: 12.5;  dashPattern: #(25);  capRound;  draw.]]]+https://github.com/syrel/Sparta/raw/master/images/SpartaStrokePainter/01_stroke_dash_gradient.png|label=strokeGradient+!! Internal Representation and Key Implementation Points.Concrete backend implementations should subclass me directly, I was never meant to be an external object."
"SpartaAbstractBuilder","# SpartaAbstractBuilderI am a root class of all sparta builders.- [Painter](../SpartaAbstractPainter.class/README.md) - [Fill](../SpartaFillPainter.class/README.md) - [Stroke](../SpartaStrokePainter.class/README.md) - [Filter](../SpartaFilterPainter.class/README.md) - [Text](../SpartaTextPainter.class/README.md) - [Mask](../SpartaMaskPainter.class/README.md)- [Path](../TSpartaPathBuilder.trait/README.md)- [Font](../SpartaFontBuilder.class/README.md)## OverviewAll builders must be created and managed by canvas.Every builder provides a way to reset resources to support reuse instead of recreation on every access.## Public API and Key Messages- `canvas` - return currently associated canvas - `canvas:` set canvas to which builder should be associated- `reset` - reset and clean used resources## Internal Representation and Key Implementation Points.### Instance Variables - canvas: `<SpartaCanvas>` - associated sparta canvas. Subclasses can refer to it directly and use in FFI calls.### Implementation PointsBuilders may or may not be backend specific"
"TSpartaTransformable",""
"TSpartaStrokeOptions","I define an api of stroke options object.Stroke options are used in stroking operations."
"SpartaFormCache","I cache bitmaps created from forms"
"TSpartaPaint","! TSpartaPaintI define an API of a Paint. Backend specific paints  should use me and provide concrete implemenations of all my methods.!! OverviewA paint is transformable and can be used with one of extend modes, for example repeat, reflect or clamp.I am instantiated by canvas and does not supposed to be created by refering paint class directly.Sparta canvas provides a paint builder that should be used to build concerete paints.!! Public API and Key Messages''I define an api of an abstract paint.''- ==transformation== - to get current transformation matrix, can not be mil- ==transformation:== set new paint transformation. If not set, supposed to be identity.- ==clamp== - do not repeat me- ==reflect== - mirror the image- ==repeat== - repeat in both X and Y axis- ==repeatX== - repeat only X axis- ==repeatY== - repeat only Y axis- ==rotateByDegrees:== rotate me by amount of degrees clockwise- ==rotateByRadians:== rotate me by amount of radians clockwise- ==scaleBy:== scale me by a factor, a Point or a number.- ==translateBy:== translate me by a Point or a number !! Internal Representation and Key Implementation Points.Generally, a Paint is not meant to be an external object, however for additional flexibility I am implemented as a Trait."
"SpartaTransformationOperation",""
"TSpartaGaussianBlurFilter","Gaussian blur filter primitive performs a Gaussian blur on the input image.https://www.w3.org/TR/SVG/filters.html#feGaussianBlurElementThe Gaussian blur kernel is an approximation of the normalized convolution:G(x,y) = H(x)I(y)whereH(x) = exp(-x2/ (2s2)) / sqrt(2* pi*s2)andI(y) = exp(-y2/ (2t2)) / sqrt(2* pi*t2)with 's' being the standard deviation in the x direction and 't' being the standard deviation in the y direction, as specified by ‘stdDeviation’.The value of ‘stdDeviation’ can be either one or two numbers. If two numbers are provided, the first number represents a standard deviation value along the x-axis of the current coordinate system and the second value represents a standard deviation in Y. If one number is provided, then that value is used for both X and Y.Even if only one value is provided for ‘stdDeviation’, this can be implemented as a separable convolution.For larger values of 's' (s >= 2.0), an approximation can be used: Three successive box-blurs build a piece-wise quadratic convolution kernel, which approximates the Gaussian kernel to within roughly 3%.let d = floor(s * 3*sqrt(2*pi)/4 + 0.5)... if d is odd, use three box-blurs of size 'd', centered on the output pixel.... if d is even, two box-blurs of size 'd' (the first one centered on the pixel boundary between the output pixel and the one to the left, the second one centered on the pixel boundary between the output pixel and the one to the right) and one box blur of size 'd+1' centered on the output pixel.Note: the approximation formula also applies correspondingly to 't'."
"SpartaMetrics","I represent a metrics request.I hold all neccessary information that is needed by metrics provider in order to measure provided text run."
"TSpartaDrawOptions","I declare an API that backend specific draw options mut provide.A draw options control how the incoming color (source) will be transferred to surface (destination)."
"SpartaGeometry",""
"TSpartaCompositeFilter","I am a composite filter and can have an arbitrary amount of input soureshttps://www.w3.org/TR/SVG/filters.html#feCompositeElementExample:	""Merge"" filter primitive is just a composite filter with OVER composion mode.	merge := canvas compositeFilter		over;		source: filter1;		source:filter2;		source: filter3;		source: filter4		..."
"SpartaCornerRadii",""
"SpartaLayerBuilder",""
"SpartaUnimplementedBitmapBuilder",""
"SpartaPathPainter","#SpartaPathPainterI am a root builder class of operations involving path and paint. Two typical ones are fill or stroke.## OverviewWhile building any paint-path related operations user must specify path and paint to use.I am instantiated by canvas and used to build paint-path related drawing operations. Draw options are optional.## Public API and Key Messages- `paint:` - set a SpartaPaint or any other object implementing asSpartaPaintOn: as paint to perform operation with. Typically, basic Kernel related objects (e.g. Color or Form) or SpartaSurface and SpartaCanvas can be used directly as paints. Concrete backend implementations may optimize rendering depending on paint type.- `path:` - set a SpartaPath or any other object implementing asSpartaPathOn: as path to to perform operation with. Typically, simple Kernel geometry objects (e.g. Rectangle) are polymoprhic with SpartaPath and can be used directly. Concrete backend implementation may do a dispatch to optimize rendering depending on path type.- `drawOptions:` - set a custom draw options object to use while performing corresponding draw operation. Draw options define an alpha value [0 .. 1] to use, a composition operator or antialias mode. ## Internal Representation and Key Implementation Points.###Instance Variables- drawOptions: `<TSpartaDrawOptions>`- paint: `<TSpartaPaint>`- path:	`<TSpartaPath>`### Implementation Points    I am an abstract class and can not be used directly. See my subclasses for examples."
"SpUserFontSourceUrl","I am an url source.Useful if user wants to try a font from the web without the need to even download it.Requires internet connection to retrieve font content."
"TSpartaTransferFilter",""
"SpartaFontWeight",""
"TSpartaSpecularLightingFilter",""
"SpartaUserFonts",""
"TSpartaLinearTransferFilter","I am a specific linear transfer filter.https://docs.webplatform.org/wiki/svg/elements/feComponentTransferhttps://www.w3.org/TR/filter-effects/#feComponentTransferElement"
"SpartaOpenGLTexture",""
"TSpartaFloodFilter","Flood filter primitive creates a rectangle filled with specified color.https://www.w3.org/TR/SVG/filters.html#feFloodElementThe rectangle is as large as the filter primitive subregion established by the ‘x’, ‘y’, ‘width’ and ‘height’ attributes on the ‘area’ of Filter node."
"SpartaRoundedRectangle",""
"TSpartaDisplacementMapFilter","DisplacementMap filter primitive uses the pixels values from the image from ‘secondSource’ to spatially displace the image from ‘source’. This is the transformation to be performed:https://www.w3.org/TR/SVG/filters.html#feDisplacementMapElementP'(x,y) <- P( x + scale * (XC(x,y) - .5), y + scale * (YC(x,y) - .5))where P(x,y) is the input image, ‘source’, and P'(x,y) is the destination. XC(x,y) and YC(x,y) are the component values of the channel designated by the xChannelSelector and yChannelSelector. For example, to use the R component of ‘secondSource’ to control displacement in x and the G component of Image2 to control displacement in y, set xChannelSelector to ""R"" and yChannelSelector to ""G"".The displacement map defines the inverse of the mapping performed.The input image in is to remain premultiplied for this filter primitive. The calculations using the pixel values from ‘secondSource’ are performed using non-premultiplied color values. If the image from ‘secondSource’ consists of premultiplied color values, those values are automatically converted into non-premultiplied color values before performing this operation.This filter can have arbitrary non-localized effect on the input which might require substantial buffering in the processing pipeline. However with this formulation, any intermediate buffering needs can be determined by scale which represents the maximum range of displacement in either x or y.Public API and Key Messages- scale:- xChannel*- yChannel*"
"SpartaUserFontFace",""
"TSpartaArithmeticCombineFilter",""
"SpartaUnimplementedTransformationBuilder",""
"SpartaFontFaceBuilder",""
"SpartaTextPainter","! SpartaTextPainterI am a text painter.!! OverviewI help developers to create, configure and execute text draw operation.For that users of me must provide at least a font (backend specific, create using SpartaFontBuilder) to use and actual string to draw.Additionally users may provide draw and stroke options as also specify how exactly string should be rendered: fill or stroke it.It is also possible to choose if stroke should be rendered below fill or not.!! Public API and Key Messages- ==font:== - set a font that should be used to render a string- ==string:== - set string to render- ==baseline:== - set baseline location where string should be rendered- ==fill== - string should be filled (default mode)- ==stroke== - stroke string- ==strokeBelow== - stroke should be rendered below fill- ==drawOptions:== - set custom draw options (alpha, composition mode, antialias)- ==strokeOptions:== - set custom stroke options (stroke width, other stroke related parameters)!! Example:First we need to create a font group, in this case of generic type *sans-serif*:[[[language=smalltalkfont := canvas font  size: 28;  weightThin;  sansSerif;  build.]]]Use created font group to render multi-language text:[[[language=smalltalkcanvas text  string: 'Sparta Спарта 斯巴達 سپارٹا ස්පාටා';  font: font;  baseline: 20@40;  draw;  string: '😂🙈🚀'  origin: 20@70;  draw.]]]+https://github.com/syrel/Sparta/raw/documentation/images/SpartaTextPainter/01_multilanguage.png|label=multilanguage+!! Internal Representation and Key Implementation Points.!!! Instance Variables- color: ==<Object>==- drawOptions: ==<TSpartaDrawOptions>==- font: ==<Object>==- baseline: ==<Point>==- string: ==<String>==- strokeOptions: ==<TSpartaStrokeOptions>==!!! Implementation PointsFont to use is backend specific. It must be created using SpartaFontBuilder."
"SpartaUnimplementedFilterPainter",""
"SpUserFontSourceBuffer","I am a buffer source.Is useful if font is stored as byte array in the image"
"TSpartaTableTransferFilter","I am a specific table transfer filter.https://docs.webplatform.org/wiki/svg/elements/feComponentTransferhttps://www.w3.org/TR/filter-effects/#feComponentTransferElement"
"SpartaFontSlant",""
"TSpartaPointLight",""
"SpartaTransformationScale",""
"TSpartaLightingFilter",""
"SpartaTextMetrics",""
"TSpartaFilterSecondSource","I add a second source input functionality to the Filter primitive.Classes that use me must implment #secondSourceFilter: and #secondSourceSurface:"
"SpartaLine","I represent a line.I am meant to be polymorphic with Rectangle and Path and can be used as path in various operations, except clipping.Public API and Key Messages- from get my start point- to get my end point  SpartaLine from: 10@10 to: 20@20 Internal Representation and Key Implementation Points.    Instance Variables	from:		<Point>	to:		<Point>    Implementation Points"
"TSpartaDiffuseLightingFilter",""
"SpartaFillWindingRule","SVG defines the non-zero winding rule as follows:	Non-zero winding rule determines the ""insideness"" of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside."
"TSpTextRun","I define an API of a Text run - an object that holds an array of glyphs that represent a piece of text.Note that TextRun is optimised for the case of simple ASCII string (all chars are 8 bit), simple multilanguage string (all chars are 16 bit) and complex scripts (characters have various length of 8-32 bits).Users should never instantiate TextRun directly, instead ask TextPainter to do the necessary job - it is needed to support backend specific text runs"
"SpartaShapeFactory","I provide a factory methods to create common shapes.Shape factory helps to optimize common shape creation and therefore improve performance Public API and Key Messages- ellipse: to create an ellipse within provided bounds- circleAt:radius: to create a circle with center at a point and with provided radius- roundedRectangle:radii: to create a rectangle with rounded corners	canvas shape ellipse: (0@0 extent: 300@200).	canvas shape circleAt: 50@50 radius: 25.	canvas shape roundedRectangle: (0@0 extent: 300@200) radii: (BlCornerRadii radius: 12) Internal Representation and Key Implementation Points.  	It makes a lot of sense to implement shape creation methods as plugin or as part of backend"
"SpartaFiltersFactory","I am a filter factory.I know recepies of the very common filter and simplify developers life. I am also a nice place to add new app-specific filters as extention methods.I am not backend specific since I only rely on public abstract api. It is very convenient for filters factory, we implement custom filter once and get support of it on all backends.For a moment I provide four instagram-like filters to show an idea.Public API and Key Messages- brannan: create brannan filter for provided source.- grayscale: create grayscale filter for provided source.- inkwell: create grayscale filter for provided source.- nashville: create nashville filter for provided sourcekitty := canvas bitmap fromFileNamed: 'images/cats/kitty.jpg'.brannan := canvas filters brannan: kitty."
"SpartaShadowPainter",""
"SpartaAbstractPainter","# SpartaAbstractPainterI am a root class of all draw operation builders.## OverviewSince I am responsible for drawing on canvas my name is Painter :)As soon as draw operation is configured it should be performed sending `#draw` message## Public API and Key Messages- `draw` - perform a corresponding draw operation ## Internal Representation and Key Implementation Points.Painters are supposed to be backend specific"
"TSpartaTurbulenceFilter","Turbulence filter primitive creates an image using the Perlin turbulence function. It allows the synthesis of artificial textures like clouds or marble. For a detailed description the of the Perlin turbulence function, see ""Texturing and Modeling"", Ebert et al, AP Professional, 1994. The resulting image will fill the entire filter primitive subregion for this filter primitive.https://www.w3.org/TR/SVG/filters.html#feTurbulenceElementIt is possible to create bandwidth-limited noise by synthesizing only one octave.For fractalSum, you get a turbFunctionResult that is aimed at a range of -1 to 1 (the actual result might exceed this range in some cases). To convert to a color value, use the formula colorValue = ((turbFunctionResult * 255) + 255) / 2, then clamp to the range 0 to 255.For turbulence, you get a turbFunctionResult that is aimed at a range of 0 to 1 (the actual result might exceed this range in some cases). To convert to a color value, use the formula colorValue = (turbFunctionResult * 255), then clamp to the range 0 to 255.The following order is used for applying the pseudo random numbers. An initial seed value is computed based on attribute ‘seed’. Then the implementation computes the lattice points for R, then continues getting additional pseudo random numbers relative to the last generated pseudo random number and computes the lattice points for G, and so on for B and A.Public API and Key Messages- area:  - baseFrequence:- numOctaves:- seed:- stitchable:- typeFractalNoise- typeTurbulence"
"TSpartaSurface","I declare an API of a surface that can be used as a paint or used in various drawing operations.Surface can play a role of a source by filter primitives. Surface can be rendered on a canvas with 3D transformation.Surface can be rendered with shadow on a canvas.Surface can be used as a paint in fill or stroke.Surface can be used used as maskInternal Representation and Key Implementation Points.    Surface is supposed to be backend specific"
"SpartaExternalForm","An ExternalForm is a specialized Form whose pixel-data is stored in memory that the user provides a pointer to.  This can simply be memory on the C heap, or (the motivating use-case...) it can be a pointer that is temporarily ""mapped"" from GPU memory by an API such as OpenCL.NOTE: This is a copy of original ExternalForm implementationIMPORTANT: Moved form FFI to SDL2 because is not needed there anymore but OSWindow-SDL2 package uses it.The user is responsible for both releasing the image-memory, as well as destroying the surface handle (perhaps the latter should be handled by automatic finalization).Example usage:| extent form ptr |extent := 400@300.form := ExternalForm extent: extent depth: 32.ptr := ExternalAddress gcallocate: (extent x * extent y * 4).form setManualSurfacePointer: ptr.Display displayScaledOn: form.form displayAt: 0@0.form destroySurface."
"TSpartaPath","I am a path used to create (sets of) figures of any shape that can be filled or stroked to a canvas.I can also be used to clip a region on the canvas.Path is usually backend specific and has to be created using PathBuilder which can be optained from canvas.Public API and Key Messages- bounds - get  my bounds- strokedBounds - get bounds of the stroke if I would be stroked with provided stroke options"
"SpartaTransformationConcatenation",""
"TSpartaGradientPaint","! TSpartaGradientPaintI define an API of an abstract gradient paint. All gradient paints should use me and implement all my methods.!! OverviewI am responsible for setting of gradient stops. Since I just define an abstract api, my implementors should provide concrete logic.Like any other paint I must not be instantiated by onyone except *canvas>../SpartaCanvas.class/README.md*.!! Public API and Key Messages- ==stops:== set gradient stops encoded as an array of associations {Number -> Color}"
"SpartaMetricsProvider",""
"TSpartaExamples",""
"SpartaCircle",""
"TSpartaConicalGradientPaint",""
"SpartaFillRule","Fill rule is an algorithm which determines how a graphical shape with more than one closed outline will be filled."
"TSpFontDescriptor","I am a helper trait that defines basic font properties such as weight, style and stretch"
"SpartaUnimplementedLayerBuilder",""
"SpartaClipper","! SpartaClipperI provide support of clipping.!! OverviewMy responsibility is to keep track of clipping region and allow developers to push or pop.I support clipping by Rectangle or SpartaPath!! Public API and Key Messages- ==by:during:== - clips by a path or rectangle while performing a closure, once done restores previous clipping region. Takes care about possible unhandled exceptions within a block.- ==push:== clips by a path or rectangle. Every push: must be balanced with pop to restore clipping region.- ==pop== - balances push: and restores clipping region to its previous state!! Example:Error robust implementation with the help of block closures:[[[language=smalltalkcanvas clip   by: (0@0 extent: 100@100)   during: [ ""draw here"" ]]]]Or developers can balance push:/pop manually:[[[language=smalltalkellipse := canvas shape ellipse: (0@0 extent: 100@100).canvas clip push: ellipse.""draw here""canvas clip pop.]]]!! Internal Representation and Key Implementation Points.Subclasses must implement pushRectangle: pushPath: and pop"
"SpartaFillPainter","! SpartaFillPainterI represent a fill path operation builder - a concerete type of paint-path draw operation.!! OverviewI define an abstract api that all fill painters should provide. I am a final step in path-paint double dispatch and implement all fill draw related methods. As optimisation I have separate methods to fill rectangle and path with color, linear and radial gradients as also with surface. Backend may implement every method differently, add more dispatch stages or provide a single uniform method.I am instantiated and pre-configured by *==SpartaCanvas==>../SpartaCanvas.class/README.md*. Do  not create instances of me directly, instead use canvas as service provider. This way reference to my class will not be hardcoded  which increases flexibility.!! Public API and Key Messages- ==paint:== - set an object to be used as paint (can be ==Color==, *==SpartaCanvas==>../SpartaCanvas.class/README.md*, ==SpartaSurface==, *==TSpartaPaint==>../TSpartaPaint.trait/README.md*)- ==path:== - set path to be filled (can be ==TSpartaPath== or ==Rectangle==)- ==draw== - perform fill operation with previously configured parameters and options!! Example: Fill the whole canvas with white color:[[[language=smalltalkcanvas fill	paint: Color white;	path: canvas bounds;	draw.]]]Fill ellipse within rectangle (0@0 extent: 400@100) with pharo logo picture:[[[language=smalltalkcanvas fill	paint: (PolymorphSystemSettings pharoLogoForm);	path: (canvas shape ellipse: (0@0 extent: 400@100));	draw.```+https://github.com/syrel/Sparta/raw/master/images/SpartaFillPainter/01_pharo_logo.png|label=pharoLogo+!! Internal Representation and Key Implementation Points.Concrete backend implementations should subclass me directly, I was never ment to be an external object."
"Sparta",""
"TSpartaTransformFilter",""
"TSpartaSpotLight",""
"SpartaFontCache","I cache fonts with font style a key"
"TSpartaMorphologyFilter","Morphology filter primitive performs ""fattening"" or ""thinning"" of artwork. It is particularly useful for fattening or thinning an alpha channel.https://www.w3.org/TR/SVG/filters.html#feMorphologyElementThe dilation (or erosion) kernel is a rectangle with a width of 2*x-radius and a height of 2*y-radius. In dilation, the output pixel is the individual component-wise maximum of the corresponding R,G,B,A values in the input image's kernel rectangle. In erosion, the output pixel is the individual component-wise minimum of the corresponding R,G,B,A values in the input image's kernel rectangle.Frequently this operation will take place on alpha-only images, such as that produced by the built-in input, SourceAlpha. In that case, the implementation might want to optimize the single channel case.If the input has infinite extent and is constant (e.g FillPaint where the fill is a solid color), this operation has no effect. If the input has infinite extent and the filter result is the input to an ‘feTile’, the filter is evaluated with periodic boundary conditions.Because ‘Morphology’ operates on premultipied color values, it will always result in color values less than or equal to the alpha channel."
"SpartaTransformation",""
"TSpartaGammaTransferFilter","I am a specific gamma transfer filter.https://docs.webplatform.org/wiki/svg/elements/feComponentTransferhttps://www.w3.org/TR/filter-effects/#feComponentTransferElement"
"SpartaMatrix",""
"TSpartaDistantLight",""
"SpartaFontMetrics",""
"TSpartaColorMatrixFilter",""
"SpartaCanvas","! SpartaCanvasI represent a Sparta canvas and provide an API to perform various drawing operations.I define an abstract API of Sparta canvas that all concrete implementations must have.!! OverviewMy main responsibility is to create and provide backend specific builders and various objects.In order to create and perform a drawing operation users should rely on corresponding builder.For example if one wants to fill a path with a paint she needs to send #fill message to canvas to get a fill builder (painter).There is a separate builder for every single operation. They can be found in ""api"" protocol.I'm also responsible for creation of filter primitives (filter types) that are used with ""filter"" operation.They can be found in ""filters"" protocol.I am polymorphic with ==SpartaSurface==.!! Public API and Key Messages- ==fill== - create a builder of fill drawing operation  - ==stroke== - create a builder of stroke drawing operation- ==path== - create a path builder- ==paint== - create a paint builder (linear, radial gradients)- ==clip== - create a builder to clip canvas by path (or rectangle)- ==transform== - create a builder to transform canvas- ==font== - create a font build helper- ==text== - create a text rendering builder- ==filter== - create a builder of filter drawing operation- ==mask== - create a builder of masking draw operation- ==bitmap== - create a bitmap factory- ==shape== - create a common shapes factory (ellipse, rounded rectangle, etc)- ==filters== - create a common filters factory- ==extent== - get my size (width@height)- ==similar:== - to create an empty canvas of size anExtent and of the same type and format - ==asForm== - to rasterize myself and return resulting image as Form''I am an abstract class and should not be instantiated. However, the best way to create an instance of sparta canvas is to send extent: message.''!! Example:Create an empty canvas of size 400@250:[[[language=smalltalkcanvas := SpartaCanvas extent: 400@250.]]]+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/01_empty.png|label=emptyCanvas+Create a triangle vector path:[[[language=smalltalktriangle := canvas path	moveTo: 100@0;	lineTo: 200@200;	lineTo: 0@200;	close;	finish.]]]+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/02_triangle_path.png|label=trianglePath+Create a linear gradient:[[[language=smalltalklinearGradient := canvas paint linearGradient	begin: 50@100;	end: 150@200;	stops: { 0 -> Color red. 1 -> Color blue }.]]]Apply translation to place trangle in the center:[[[language=smalltalkcanvas transform	push;	translateBy: 100@25;	apply.]]]Fill previously created path fith linear gradient:[[[language=smalltalkcanvas fill	paint: linearGradient;	path: triangle;	draw.]]]+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/03_fill_path.png|label=fillPath+Stroke triangle with blue color:[[[language=smalltalkcanvas stroke	paint: Color blue;	path: triangle;	width: 6;	draw.]]]+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/04_stroke_path.png|label=strokePath+Restore transformation matrix:[[[language=smalltalkcanvas transform pop.]]]Create a gaussian blur filter:[[[language=smalltalkblur := canvas gaussianBlurFilter	stdDeviation: 4.]]]Apply filter on the whole canvas:[[[language=smalltalkcanvas filter	area: canvas bounds;	type: blue;	draw.]]]+https://github.com/syrel/Sparta/raw/master/images/SpartaCanvas/05_blur.png|label=blur+"
"SpartaUnimplementedFontFaceBuilder",""
"SpartaBitmapBuilder","I am a bitmap surface builder.I am responsible for creation of bitmap surfaces out of for example Form or image on the disk. Surface plays an important role in drawing process and can be used as paint or as input source for a filter primitive.Surfaces are backend specific which implies the fact that their creation is also backend specific. That is why developers should use me to create them. At the same time I must be accessed only through canvas and never instantiated directly.Created surface have the same backend and format type as associated canvas. It is not recommened to mix surfaces created by canvases of different backends.Public API and Key Messages- fromForm: create a bitmap surface from Form- fromFiledNamed: create a bitmap surface from image stored on the diskCreate a new surface from Form:surface := canvas bitmap fromForm: (Smalltalk ui icons iconNamed: #classIcon).Create a new surface from image file by its absolute or relative path:surface := canvas bitmap fromFileNamed: 'images/cats/kitty.jpg'"
"SpartaMaskPainter",""
"SpUserFontSourceFile","I am a file source.Can be used for fast scripting without the need to load font in the image or install.May be useful if font are intended to be deployed outside of the image"
"SkiaFilter",""
"SkiaContext",""
"SkiaSurfaceCanvasExamples",""
"SkiaBitmapBuilder",""
"SkiaImageExamples",""
"SkiaFontBuilder",""
"SkiaColorExamples",""
"SkiaPaintStyle",""
"SkiaPixelGeometryExamples",""
"SkiaColorType",""
"SkiaColorTypeExamples",""
"SkiaTypes",""
"SkiaCanvasTextExamples",""
"SkiaTextBlob",""
"SkiaConicalGradientShader",""
"SkiaStrokeOptions",""
"SkiaPath",""
"SkiaFilterSourceFilter",""
"SkiaFontStyleSet",""
"SkiaTextureInfoExamples",""
"SkiaColor",""
"SkiaSaveLayerRecExamples",""
"SkiaClipper",""
"SkiaFontStyleExamples",""
"SkiaTileMode",""
"SkiaArrayColorExamples",""
"SkiaFontStyleWidth",""
"SkiaPaintStyleExamples",""
"SkiaCapStyle",""
"SkiaCapStyleExamples",""
"SkiaStrokePainter",""
"SkiaLibrary",""
"SkiaSurfaceCanvas",""
"SkiaFiltersFactory",""
"SkiaShader",""
"SkiaRadialGradient",""
"SkiaMatrix",""
"SkiaFilterSource",""
"SkiaFontMetrics",""
"SkiaTextBlobExamples",""
"SkiaBackendRenderTarget",""
"SkiaPaintExamples",""
"SkiaShapeFactory",""
"SkiaFontManagerExamples",""
"SkiaPointMode",""
"SkiaTileModeExamples",""
"SkiaFontHinting",""
"SkiaFontStyleWidthExamples",""
"SkiaAlphaType",""
"SkiaAlphaTypeExamples",""
"SkiaLayerBuilder",""
"SkiaSweepGradientShader",""
"SkiaTextMetrics",""
"SkiaRectangleI32",""
"SkiaGradient",""
"SkiaImageFilterBlur",""
"SkiaSingleSourceFilter",""
"SkiaFont",""
"SkiaSurfaceExamples",""
"SkiaFillPainter",""
"SkiaImageInfoExamples",""
"SkiaTextPainter",""
"SkiaColorSpaceExamples",""
"SkiaPathFillType",""
"SkiaPointModeExamples",""
"SkiaFilterQuality",""
"SkiaFilterQualityExamples",""
"SkiaFontFaceBuilder",""
"SkiaDrawOptions",""
"SkiaTextureInfo",""
"SkiaLinearGradientShader",""
"SkiaSurfacePaint",""
"SkiaRectangle",""
"SkiaFilterSourceImage",""
"SkiaImage",""
"SkiaTypefaceExamples",""
"SkiaColorSpace",""
"SkiaShaderExamples",""
"SkiaMetricsProvider",""
"SkiaGradientShaderExamples",""
"SkiaCanvas","The following is an example of SkiaCanvas using a texture as a render targetaContext := GlutinContextBuilder headless.aContext makeCurrent.gl := aContext gl.texture := GlutinGLTexture new.texture id: gl gen_texture.texture extent: 200@200.texture formatRGBA8888.texture internalFormatRGBA.texture typeUInt8888.gl bind_texture_2d: texture id.gl	tex_image_2d_level: 0	internalformat: texture internalFormat	width: texture width	height: texture height	border: 0	format: texture internalFormat	type: texture type	pixels: nil	length: 0.textureInfo := (SkiaTextureInfo	target: texture target	id: texture id) format: texture format.backendTexture := SkiaBackendTexture	extent: texture extent	mipMapped: true	textureInfo: textureInfo.canvas := SkiaCanvas	createFromBackendTextureAsRenderTarget: backendTexture	format: SkiaColorType RGBA8888.canvas fill	path: canvas bounds;	paint: Color red;	draw.canvas flush.canvas snapshot"
"SkiaBackendTextureExamples",""
"SkiaJoinStyle",""
"SkiaPathFillTypeExamples",""
"SkiaClipOp",""
"SkiaClipOpExamples",""
"SkiaPaintProvider",""
"SkiaCanvasExamples",""
"SkiaSurfaceProps",""
"SkiaGradientShader",""
"SkiaPathBuilder",""
"SkiaPaint",""
"SkiaFilterSourceCanvas","When canvas is a source of a filter we should take its snapshot"
"SkiaFontStyle",""
"SkiaTextRunExamples",""
"SkiaBackendTexture",""
"SkiaPathExamples",""
"SkiaArrayColor",""
"SkiaFontMetricsExamples",""
"SkiaTextEncoding",""
"SkiaExternalObjectExamples",""
"SkiaFontStyleSlant",""
"SkiaJoinStyleExamples",""
"SkiaBlendMode",""
"SkiaBlendModeExamples",""
"SkiaTransformationBuilder",""
"SkiaSurface",""
"SkiaTextRun",""
"SkiaSaveLayerRec",""
"SkiaLinearGradient",""
"SkiaImageInfo",""
"SkiaGaussianBlurFilter",""
"SkiaFontManager",""
"SkiaSurfacePropsExamples",""
"SkiaExternalObject",""
"SkiaMatrixExamples",""
"SkiaFilterPainter",""
"SkiaFontExamples",""
"SkiaPixelGeometry",""
"SkiaTextEncodingExamples",""
"SkiaFontEdging",""
"SkiaFontStyleSlantExamples",""
"SkiaExternalEnumeration",""
"SkiaExternalEnumerationExamples",""
"SkiaTypeface",""
"SkiaRadialGradientShader",""
"SkiaTextGlyphs","Each Glyph is represented as uint16, so we store them in a byte array of uint8 where each glyph occupies two bytes"
"SkiaRectangleF32",""
"SkiaFontCache",""
"SkiaImageFilter",""
"XdPublishInfoRequest",""
"XdDocumentsExamples","!! How-To Create Base64 String[[[| aDocument anXdFile |aDocument := Gt2DocumentExamples new documentWithExistingClass.anXdFile := aDocument saveToXDoc.ZnBase64Encoder new 	breakLines;	encode: anXdFile streamingStrategy bytes ]]]"
"XdClientCommand",""
"XdClientRequest",""
"XdClientSettings",""
"XdDocumentsElement",""
"XdDocumentsHandler",""
"XdClientExamples",""
"XdPublishInfoStencilBuilder",""
"XdClientChanged",""
"XdClientPublishXDocCommand",""
"XdClientConstants",""
"XdPublishInfoChangedEvent",""
"XdPublishInfoModel",""
"XdClientOpenXDocCommand",""
"XdClient",""
"XdPublishInfoLook",""
"XdDocumentsModel",""
"XdClientDownloadXDocCommand",""
"XdAsyncClient",""
"XdPublishInfoInnerWidgetLook",""
"XdPublishInfo",""
"XdClientDownloadPreviewImageCommand",""
"XdGlamorousDocumentsListLook",""
"XdNullClient",""
"XdClientDownloadListCommand",""
"XdGlamorousDocumentsGridLook",""
"XdFileService",""
"XdClientDownloadFileInfoCommand",""
"XdDocumentsLook",""
"XdEmptyPublishInfo",""
"XdClientDeleteXDocIdCommand",""
"XdManifestJsonMapping",""
"XdImageType",""
"XdAttachment",""
"XdManifest",""
"XdHtmlType",""
"XdZipStreamMember",""
"XdSequenceNumberGenerator",""
"XdType",""
"XdManifestJsonMappingTrait",""
"XdIdGenerator",""
"XdNullStreamingStrategy",""
"XdConstantsTrait",""
"XdFileInfo",""
"XdFileStreamingStrategy",""
"XdBasicJsonMappingTrait",""
"XdFile",""
"XdBytesStreamingStrategy",""
"XdWriter",""
"XdEmptyManifest",""
"XdStreamingStrategy",""
"XdUtility",""
"XdDocument",""
"XdReaderWriterExamples",""
"XdUndefinedType",""
"XdConstants",""
"XdReader",""
"XdTextType",""
"XdComponent",""
